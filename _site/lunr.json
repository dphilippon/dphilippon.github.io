[{"id":"wiki/Contribute.md","title":" Contribute","content":"# Contribute\n\nSince GAMA is a free opensource software, we are proud to share the source code with anyone who wants to contribute to the platform. Note that GAMA is easy to extand through the use of additionnal plugins.\n\n## Table of content\n\n* [Developer documentation](#developer-documentation)\n* [Source code](#source-code)\n* [GAMA Dev mailing list](#gama-dev-mailing-list)\n* [Developers](#developers)\n* [Citing GAMA](#citing-gama)\n\n## Developer documentation\n\nA more complete documentation exists on Github at the following address : [https://github.com/gama-platform/gama/wiki](https://github.com/gama-platform/gama/wiki). You can find here the last updated version of the documentation (the documentation of the latest git version), and also a [developer documentation](https://github.com/gama-platform/gama/wiki/DevelopingExtensions) (which is not available in the \"regular\" website).\n\n## Source Code\n\nGAMA can be downloaded as a regular application or [built from source](https://github.com/gama-platform/gama), which is necessary if you want to contribute to the platform.\nThe source code is available from this GITHub repository:\n\n```\nhttps://github.com/gama-platform/gama\n```\n\nWhich you can also browse from the web [here](https://github.com/gama-platform/gama).\nIt is, in any case, recommended to follow the instructions on [this page](https://github.com/gama-platform/gama/wiki/InstallingGitVersion) in order to build GAMA from source.\n\n## GAMA Dev mailing list\n\nIf you want to contribute to the platform, you can send a request to the developping team to be in the [gama-dev@googlegroups.com mailing list](http://groups.google.com/group/gama-dev).\n\n## Developers\n\nGAMA is being designed, developed and maintained by an active group of researchers coming from different institutions in France and Vietnam. Please find below a short introduction to each of them and a summary of their contributions to the platform:\n\n* **[Alexis Drogoul](https://www.researchgate.net/profile/Alexis_Drogoul)**, Senior Researcher at the [IRD](http://www.ird.fr), member of the [UMMISCO](http://www.ummisco.ird.fr) International Research Unit. Mostly working on agent-based modeling and simulation. Has contributed and still contributes to the original design of the platform, including the GAML language (from the meta-model to the editor) and simulation facilities like Java2D displays.\n* **[Patrick Taillandier](https://www.researchgate.net/profile/Patrick_Taillandier)**, Associate Professor at the [University of Rouen](http://www.univ-rouen.fr/), member of the [IDEES](http://www.umr-idees.fr/) CNRS Mixed Research Unit. Contributes since 2008 to the spatial and graph features (GIS integration, spatial operators) and to parameter space search algorithms. Currently working on new features related to graphical modeling and traffic simulation.\n* **[Benoit Gaudou](http://www.researchgate.net/profile/Benoit_Gaudou)**, Associate Professor at the [University Toulouse 1 Capitole](http://www.ut-capitole.fr/), member of the [IRIT](http://www.irit.fr/) CNRS Mixed Research Unit. Contributes since 2010 to documentation and unit test generation and coupling mathematical (ODE and PDE) and agent paradigms.\n* **[Arnaud Grignard](https://www.researchgate.net/profile/Arnaud_Grignard)**, software engineer and PhD fellow ([PDI-MSC](http://www.ummisco.ird.fr/pdi/)) at [UPMC](http://www.upmc.fr/). Contributes since 2011 to the development of new features related to visualization (3D Display), online analysis and interaction.\n* **[Huynh Quang Nghi](https://www.researchgate.net/profile/Huynh_Nghi)**, software engineering lecturer at [CTU](http://www.ctu.edu.vn) and PhD fellow ([PDI-MSC](http://www.ummisco.ird.fr/pdi/)) at [UPMC](http://www.upmc.fr/). Contributes since 2012 to the development of new features related to GAML parser, coupling formalisms in EBM-ABM and ABM-ABM.\n* **[Truong Minh Thai](https://www.researchgate.net/profile/Thai_Truong_Minh)**, software engineering lecturer at [CTU](http://www.ctu.edu.vn/) and PhD fellow (PRJ322-MOET) at [IRIT](http://www.irit.fr/)-[UT1](http://www.ut-capitole.fr/). Contributes since 2012 to the development of new features related to data management and analysis.\n* **[Nicolas Marilleau](http://www.ummisco.ird.fr/index.php?option=com_members&view=member&uid=62&Itemid=70)**, Researcher at the [IRD](http://www.ird.fr), member of the [UMMISCO](http://www.ummisco.ird.fr) International Research Unit and associate researcher at [DISC](http://disc.univ-fcomte.fr) team of [FEMTO-ST](http://www.femto-st.fr) institute. Contributes since 2010 to the development of headless mode and the high performance computing module.\n* **[Philippe Caillou](https://www.lri.fr/~caillou)**, Associate professor at the [University Paris Sud 11](http://www.u-psud.fr), member of the [LRI](http://www.lri.fr) and [INRIA](http://www.inria.fr) project-team [TAO](https://tao.lri.fr/tiki-index.php). Contributes since 2012 and actually working on charts, simulation analysis and BDI agents.\n* **[Vo Duc An](https://www.researchgate.net/profile/Duc-An_Vo)**, Post-doctoral Researcher, working on synthetic population generation in agent-based modelling, at the [UMMISCO](http://www.ummisco.ird.fr) International Research Unit of the [IRD](http://www.ird.fr). Has contributed to bringing the platform to the Eclipse RCP environment and to the development of several features (e.g., the FIPA-compliant agent communication capability, the multi-level architecture).\n* **[Truong Xuan Viet](https://www.researchgate.net/profile/Viet_Truong_Xuan)**, software engineering lecturer at [CTU](http://www.ctu.edu.vn) and PhD fellow ([PDI-MSC](http://www.ummisco.ird.fr/pdi/)) at [UPMC](http://www.upmc.fr/). Contributes since 2011 to the development of new features related to R caller, online GIS (OPENGIS: Web Map Service - WMS, Web Feature Services - WMS, Google map, etc).\n  * Samuel Thiriot\n\n\n## Citing GAMA\nIf you use GAMA in your research and want to cite it (in a paper, presentation, whatever), please use this reference:\n\n> A. Grignard, P. Taillandier, B. Gaudou, D-A. Vo, N-Q. Huynh, A. Drogoul (2013), GAMA 1.6: Advancing the Art of Complex Agent-Based Modeling and Simulation. In ‘PRIMA 2013: Principles and Practice of Multi-Agent Systems', Lecture Notes in Computer Science, Vol. 8291, Springer, pp. 117-131.\n\nor you can choose to cite the website instead:\n\n> GAMA Platform website, http://gama-platform.org\n\nA complete list of references (papers and PhD theses on or using GAMA) is available on the [references](References) page.","url":"wiki/Contribute.md"},{"id":"wiki/Projects.md","title":" Projects","content":"## Projects\n\n___________________________________________________________\n\n## References\n\n\nThis page contains a subset of the scientific papers that have been written either about GAMA or using the platform as an experimental/modeling support.\n\nIf you happen to publish a paper that uses or discusses GAMA, please let us know, so that we can include it in this list.\n\nIf you need to cite GAMA in a paper, we kindly ask you to use this reference:\n\n  * [A. Grignard, P. Taillandier, B. Gaudou, D-A. Vo, N-Q. Huynh, A. Drogoul (2013), GAMA 1.6: Advancing the Art of Complex Agent-Based Modeling and Simulation. In ‘PRIMA 2013: Principles and Practice of Multi-Agent Systems', Lecture Notes in Computer Science, Vol. 8291, Springer, pp. 117-131.](http://link.springer.com/chapter/10.1007/978-3-642-44927-7_9)\n\n\n\n\n### Papers about GAMA\n  * [Taillandier, Patrick, Arnaud Grignard, Benoit Gaudou, and Alexis Drogoul. \"Des données géographiques à la simulation à base d’agents: application de la plate-forme GAMA.\" Cybergeo: European Journal of Geography (2014).](http://spi.cybergeo.revues.org/26263)\n\n  * [A. Grignard, P. Taillandier, B. Gaudou, D-A. Vo, N-Q. Huynh, A. Drogoul (2013), GAMA 1.6: Advancing the Art of Complex Agent-Based Modeling and Simulation. In ‘PRIMA 2013: Principles and Practice of Multi-Agent Systems', Lecture Notes in Computer Science, Vol. 8291, Springer, pp. 117-131.](http://link.springer.com/chapter/10.1007/978-3-642-44927-7_9)\n\n  * [Grignard, Arnaud, Alexis Drogoul, and Jean-Daniel Zucker. \"Online analysis and visualization of agent based models.\" Computational Science and Its Applications–ICCSA 2013. Springer Berlin Heidelberg, 2013. 662-672.](http://link.springer.com/chapter/10.1007/978-3-642-39637-3_52#page-1)\n\n  * [Taillandier, P., Drogoul, A., Vo, D.A. and Amouroux, E. (2012), GAMA: a simulation platform that integrates geographical information data, agent-based modeling and multi-scale control. In ‘The 13th International Conference on Principles and Practices in Multi-Agent Systems (PRIMA)’, India, Volume 7057/2012, pp 242-258.](http://www.springerlink.com/content/j7135j8722742j82/)\n\n  * [Taillandier, P. & Drogoul, A. (2011), From Grid Environment to Geographic Vector Agents, Modeling with the GAMA simulation platform. In ‘25th Conference of the International Cartographic Association’, Paris, France.](http://icaci.org/files/documents/ICC_proceedings/ICC2011/Oral Presentations PDF/C4-Simulation, spatio-temporal modelling, visualisation/CO-288.pdf)\n\n  * Taillandier, P. ; Drogoul A. ; Vo D.A. & Amouroux, E. (2010), GAMA : bringing GIS and multi-level capabilities to multi-agent simulation, in ‘the 8th European Workshop on Multi-Agent Systems', Paris, France.\n\n  * Amouroux, E., Taillandier, P. &  Drogoul, A. (2010), Complex environment representation in epidemiology ABM: application on `H5N1` propagation. In ‘the 3rd International Conference on Theories and Applications of Computer Science’ (ICTACS'10).\n\n  * [Amouroux, E., Chu, T.Q., Boucher, A. and Drogoul, A. (2007), GAMA: an environment for implementing and running spatially explicit multi-agent simulations. In ‘Pacific Rim International Workshop on Multi-Agents', Bangkoku, Thailand, pp. 359--371.](http://www.springerlink.com/content/88006131542n1204/)\n\n\n\n\n### PhD theses\n  * **Truong Xuan Viet**, [\"Optimization by Simulation of an Environmental Surveillance Network: Application to the Fight against Rice Pests in the Mekong Delta (Vietnam)\"](https://drive.google.com/a/ctu.edu.vn/file/d/0B7ArAu2_CEjCaTVzZURNUGlfWmc/edit?usp=sharing), University of Paris 6 & Ho Chi Minh University of Technology, defended June 24th, 2014.\n\n  * **Nguyen Nhi Gia Vinh**, [\"Designing multi-scale models to support environmental decision: application to the control of Brown Plant Hopper invasions in the Mekong Delta (Vietnam)\"](https://drive.google.com/file/d/0BwzSY8KTNM0nLUVMVXR3WDVJSjQ/edit?usp=sharing), University of Paris 6, defended Oct. 31st, 2013.\n\n  * **Vo Duc An**, [\"An operational architecture to handle multiple levels of representation in agent-based models\"](https://dl.dropboxusercontent.com/u/70529600/manuscrit_VoDucAn.pdf), University of Paris 6, defended Nov. 30th 2012.\n\n  * **Amouroux Edouard**, [\"KIMONO: a descriptive agent-based modeling methodology for the exploration of complex systems: an application to epidemiology\"](http://tel.archives-ouvertes.fr/tel-00630779), University of Paris 6, defended Sept. 30th, 2011.\n\n  * **Chu Thanh Quang**, [\"Using agent-based models and machine learning to enhance spatial decision support systems: Application to resource allocation in situations of urban catastrophes\"](https://www.dropbox.com/s/i5ifnigqv7qltc9/CHU-Thanh-Quang_manuscrit.pdf), University of Paris 6, defended July 1st, 2011.\n\n  * **Nguyen Ngoc Doanh**, [\"Coupling Equation-Based and Individual-Based Models in the Study of Complex Systems: A Case Study in Theoretical Population Ecology\"](https://docs.google.com/file/d/0B5s1B4Qq19ycMDg4MTNhMmUtMDNlMC00NzQyLWFlZjEtMjZhOGY5YjRhNWU5/edit?hl=fr), University of Paris 6, defended Dec. 14th, 2010.\n\n\n\n\n### Research papers that use GAMA as modeling/simulation support\n**2014**\n\n  * E. G. Macatulad , A. C. Blanco (2014) 3DGIS-BASED MULTI-AGENT GEOSIMULATION AND VISUALIZATION OF BUILDING EVACUATION USING GAMA PLATFORM. The International Archives of the Photogrammetry, Remote Sensing and Spatial Information Sciences, Volume XL-2, 2014. ISPRS Technical Commission II Symposium, 6 – 8 October 2014, Toronto, Canada. Retrieved from http://www.int-arch-photogramm-remote-sens-spatial-inf-sci.net/XL-2/87/2014/isprsarchives-XL-2-87-2014.pdf\n\n\n  * S. Bhamidipati (2014) A simulation framework for asset management in climate-change adaptation of transportation infrastructure. In: Proceedings of 42nd European Transport Conference. Frankfurt, Germany. Retrieved from http://abstracts.aetransport.org/paper/download/id/4317\n\n  * [Gaudou, B., Sibertin-Blanc, C., Thérond, O., Amblard, F., Auda, Y., Arcangeli, J.-P., Balestrat, M., Charron-Moirez, M.-H., Gondet, E., Hong, Y., Lardy, R., Louail, T., Mayor, E., Panzoli, D., Sauvage, S., Sanchez-Perez, J., Taillandier, P., Nguyen, V. B., Vavasseur, M., Mazzega, P. (2014). The MAELIA multi-agent platform for integrated assessment of low-water management issues. In: International Workshop on Multi-Agent-Based Simulation (MABS 2013), Saint-Paul, MN, USA, 06/05/2013-07/05/2013, Vol. 8235, Shah Jamal Alam, H. Van Dyke Parunak, (Eds.), Springer, Lecture Notes in Computer Science, p. 85-110.](http://simsoc.free.fr/ressources/articles/2013/MAELIAmabs13.pdf)\n\n  * [Gaudou, B., Lorini, E., Mayor, E. (2014.) Moral Guilt: An Agent-Based Model Analysis. In: Conference of the European Social Simulation Association (ESSA 2013), Warsaw, 16/09/2013-20/09/2013, Vol. 229, Springer, Advances in Intelligent Systems and Computing, p. 95-106.](http://www.irit.fr/EmoTES/Documents/Conference/Conf_ic_2013_Gaudou_et_al.pdf)\n\n**2013**\n  * [Drogoul, A., Gaudou, B., Grignard, A., Taillandier, P., & Vo, D. A. (2013). Practical Approach To Agent-Based Modelling. In: Water and its Many Issues. Methods and Cross-cutting Analysis. Stéphane Lagrée (Eds.), Journées de Tam Dao, p. 277-300, Regional Social Sciences Summer University.](http://hal.archives-ouvertes.fr/docs/00/93/24/23/PDF/JTD2012_-_Atelier_-_EN.pdf)\n\n  * [Drogoul, A., Gaudou, B. (2013) Methods for Agent-Based Computer Modelling. In: Water and its Many Issues. Methods and Cross-cutting Analysis. Stéphane Lagrée (Eds.), Journées de Tam Dao, 1.6, p. 130-154, Regional Social Sciences Summer University. ](http://www.tamdaoconf.com/tamdao/wp-content/plugins/download-monitor/download.php?id=185)\n\n  * [Truong, M.-T., Amblard, F., Gaudou, B., Sibertin-Blanc, C., Truong, V. X., Drogoul, A., Hyunh, X. H., Le, M. N. (2013). An implementation of framework of business intelligence for agent-based simulation. In: Symposium on Information and Communication Technology (SoICT 2013), Da Nang, Viet Nam, 05/12/2013-06/12/2013, Quyet Thang Huynh, Thanh Binh Nguyen, Van Tien Do, Marc Bui, Hong Son Ngo (Eds.), ACM, p. 35-44.](http://dl.acm.org/citation.cfm?id=2542069)\n\n  * [Le, V. M., Gaudou, B., Taillandier, P., Vo, D. A (2013). A New BDI Architecture To Formalize Cognitive Agent Behaviors Into Simulations. In: Advanced Methods and Technologies for Agent and Multi-Agent Systems (KES-AMSTA 2013), Hue, Vietnam, 27/05/2013-29/05/2013, Vol. 252, Dariusz Barbucha, Manh Thanh Le, Robert J. Howlett, C. Jain Lakhmi (Eds.), IOS Press, Frontiers in Artificial Intelligence and Applications, p. 395-403.](http://ebooks.iospress.nl/publication/32865)\n\n**2012**\n  * [Taillandier, P., Therond, O., Gaudou B. (2012), A new BDI agent architecture based on the belief theory. Application to the modelling of cropping plan decision-making. In 'International Environmental Modelling and Software Society', Germany, pp. 107-116.](http://www.iemss.org/sites/iemss2012//proceedings/H2_0404_Taillandier_et_al.pdf)\n\n  * Taillandier, P., Therond, O., Gaudou B. (2012), Une architecture d'agent BDI basée sur la théorie des fonctions de croyance: application à la simulation du comportement des agriculteurs. In 'Journées Francophones sur les Systèmes Multi-Agents', France, pp. 107-116.\n\n  * [NGUYEN, Quoc Tuan, Alain BOUJU, and Pascal ESTRAILLIER. \"Multi-agent architecture with space-time components for the simulation of urban transportation systems.\" (2012).](http://www.sciencedirect.com.accesdistant.upmc.fr/science/article/pii/S1877042812042188)\n\n  * [Cisse, A., Bah, A., Drogoul, A., Cisse, A.T., Ndione, J.A., Kebe, C.M.F. & Taillandier P. (2012), Un modèle à base d’agents sur la transmission et la diffusion de la fièvre de la Vallée du Rift à Barkédji (Ferlo, Sénégal), Studia Informatica Universalis 10 (1), pp. 77-97.](http://studia.complexica.net/Art/RI100104.pdf)\n\n  * [Taillandier, P., Amouroux, E., Vo, D.A. and Olteanu-Raimond A.M. (2012), Using Belief Theory to formalize the agent behavior: application to the simulation of avian flu propagation. In ‘The first Pacific Rim workshop on Agent-based modeling and simulation of Complex Systems (PRACSYS)’, India, Volume 7057/2012, pp. 575-587.](http://www.springerlink.com/content/8qg53u75q46252l2/)\n\n  * [Le, V.M., Adam, C., Canal, R., Gaudou, B., Ho, T.V. and Taillandier, P. (2012), Simulation of the emotion dynamics in a group of agents in an evacuation situation. In ‘The first Pacific Rim workshop on Agent-based modeling and simulation of Complex Systems (PRACSYS)’, India, Volume 7057/2012, pp. 604-619.](http://www.springerlink.com/content/c838365603qr7tx0/)\n\n  * [Nguyen Vu, Q. A., Canal, R., Gaudou, B., Hassas, S., Armetta, F. (2012), TrustSets - Using trust to detect deceitful agents in a distributed information collecting system. In: Journal of Ambient Intelligence and Humanized Computing, Springer-Verlag, Vol. 3 N. 4, p. 251-263.](http://link.springer.com/article/10.1007%2Fs12652-012-0140-0)\n\n**2011**\n  * Taillandier, P. & Therond, O. (2011), Use of the Belief Theory to formalize Agent Decision Making Processes : Application to cropping Plan Decision Making. In ’25th European Simulation and Modelling Conference’, Guimaraes, Portugal, pp. 138-142.\n\n  * Taillandier, P. & Amblard, F. (2011), Cartography of Multi-Agent Model Parameter Space through a reactive Dicotomous Approach. In ’25th European Simulation and Modelling Conference’, Guimaraes, Portugal, pp. 38-42.\n\n  * [Taillandier, P. & Stinckwich, S. (2011), Using the PROMETHEE Multi-Criteria Decision Making Method to Define New Exploration Strategies for Rescue Robots', IEEE International Symposium on Safety, Security, and Rescue Robotics, Kyoto, Japon, pp. 321 - 326.](http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=6106747&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D6106747)\n\n**2010**\n  * [Nguyen Vu, Q.A. , Gaudou, B., Canal, R., Hassas, S. and Armetta, F. (2010), A cluster-based approach for disturbed, spatialized, distributed information gathering systems,  in ‘The first Pacific Rim workshop on Agent-based modeling and simulation of Complex Systems (PRACSYS)’, India, pp. 588-603.](http://www.springerlink.com/content/u02nq35387418q11/)\n\n  * [Nguyen, N.D., Taillandier, P., Drogoul, A. and Augier, P. (2010), Inferring Equation-Based Models from Agent-Based Models: A Case Study in Competition Dynamics.In ‘The 13th International Conference on Principles and Practices in Multi-Agent Systems (PRIMA)’, India, Volume 7057/2012, pp. 413-427.](http://www.springerlink.com/content/n23314gm326l4p27/)\n\n  * [Amouroux, E., Gaudou, B. Desvaux, S. and Drogoul, A. (2010), O.D.D.: a Promising but Incomplete Formalism For Individual-Based Model Specification. in ‘IEEE International Conference on Computing and Telecommunication Technologies ’(2010 IEEE RIVF'), pp. 1-4.](http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=5633421&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D5633421)\n\n  * Nguyen, N.D., Phan, T.H.D., Nguyen, T.N.A., Drogoul, A. and Zucker, J-D. (2010), Disk Graph-Based Model for Competition Dynamic, Paper to appear in ‘IEEE International Conference on Computing and Telecommunication Technologies ’(2010 IEEE RIVF').\n\n  * Nguyen, T.K., Marilleau, N., Ho T.V. and El Fallah Seghrouchni, A. (2010), A meta-model for specifying collaborative simulation, Paper to appear in ‘IEEE International Conference on Computing and Telecommunication Technologies ’(2010 IEEE RIVF').\n\n  * [Nguyen Vu, Q.A. , Gaudou, B., Canal, R., Hassas, S. and Armetta, F. (2010), `TrustSets` - Using trust to detect deceitful agents in a distributed information collecting system, Paper to appear in ‘IEEE International Conference on Computing and Telecommunication Technologies ’(2010 IEEE RIVF'), the best student paper award.](http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=5633080)\n\n  * [Nguyen Vu, Q.A. , Gaudou, B., Canal, R., Hassas, S., Armetta, F. and Stinckwich, S. (2010), Using trust and cluster organisation to improve robot swarm mapping, Paper to appear in ‘Workshop on Robots and Sensors integration in future rescue INformation system ’ (ROSIN 2010).](http://users.info.unicaen.fr/~serge/share/ROSIN10/rosin10_submission_8.pdf)\n\n**2009**\n  * [Taillandier, P. and Buard, E. (2009), Designing Agent Behaviour in Agent-Based Simulation through participatory method. In ‘The 12th International Conference on Principles and Practices in Multi-Agent Systems (PRIMA)’, Nagoya, Japan, pp. 571--578.](http://www.springerlink.com/content/hu37551467646471/)\n\n  * [Taillandier, P. and Chu, T.Q. (2009), Using Participatory Paradigm to Learn Human Behaviour. In ‘International Conference on Knowledge and Systems Engineering’, Ha noi, Viet Nam, pp. 55--60.](http://www.computer.org/portal/web/csdl/doi/10.1109/KSE.2009.33)\n\n  * [Gaudou, B., Ho, T.V. and Marilleau, N. (2009), Introduce collaboration in methodologies of modeling and simulation of Complex Systems. In ‘International Conference on Intelligent Networking and Collaborative Systems (INCOS '09)’. Barcelona, pp. 1--8.](http://portal2.acm.org/citation.cfm?id=1681504.1681534&coll=GUIDE&dl=GUIDE&CFID=://www.google.com.vn/search?hl=fr&CFTOKEN=www.google.com.vn/search?hl=fr)\n\n  * [Nguyen, T.K., Gaudou B., Ho T.V. and Marilleau N. (2009), Application of PAMS Collaboration Platform to Simulation-Based Researches in Soil Science: The Case of the MIcro-ORganism Project. In ‘IEEE International Conference on Computing and Telecommunication Technologies (IEEE-RIVF 09)’. Da Nang, Viet Nam, pp. 296--303.](http://ieeexplore.ieee.org/Xplore/login.jsp?url=http%3A%2F%2Fieeexplore.ieee.org%2Fiel5%2F5174598%2F5174599%2F05174623.pdf%3Farnumber%3D5174623&authDecision=-203)\n\n  * [Nguyen, V.Q., Gaudou B., Canal R., Hassas S. and Armetta F. (2009), Stratégie de communication dans un système de collecte d’information à base d’agents perturbés. In ‘Journées Francophones sur les Systèmes Multi-Agents (JFSMA'09)’.](http://liesp.insa-lyon.fr/v2/?q=fr/node/100911)\n\n**2008**\n  * [Chu, T.Q., Boucher, A., Drogoul, A., Vo, D.A., Nguyen, H.P. and Zucker, J.D. (2008). Interactive Learning of Expert Criteria for Rescue Simulations. In ‘Pacific Rim International Workshop on Multi-Agents', Ha Noi, Viet Nam, pp. 127--138.](http://www.springerlink.com/content/r83v0125vl0430l1/)\n\n  * [Amouroux, E., Desvaux, S. and Drogoul, A. (2008), Towards Virtual Epidemiology: An Agent-Based Approach to the Modeling of H5N1 Propagation and Persistence in North-Vietnam. In ‘Pacific Rim International Workshop on Multi-Agents', Ha Noi, Viet Nam, pp. 26--33.](http://www.springerlink.com/content/v6471t1453k17244/)","url":"wiki/Projects.md"},{"id":"wiki/TrainingSession.md","title":" Training Session","content":"# Training Session\n\n## Modeling for supporting decision in urban management issues\n\n**_7-11 December 2015 - Siem Reap (Cambodia)_**\n\n![resources/other/trainingSession/SiemReap2015/photos/group.JPG](resources/other/trainingSession/SiemReap2015/photos/group.JPG)\n\nThis training session took place at the Apsara Authorities, where we introduced how to build a model with agent-based approach, using GAMA. In a new and very fast growing city such as Siem Reap, some measures have to be taken to anticipate the future of the city, and modeling is a science that can give some solutions to face those problems.\n\nThe training session was divided into 2 parts :\n* A theoretical part (3 days) dealing with the following subjects :\n  * Urban issues and introduction to Agent-Based Modeling\n  * Presentation of the modeling methodology\n  * Introduction to GAMA with a model on urban segregation\n  * GIS datas and graphs to model urban mobility\n  * GIS, Raster datas and graphs to model urban growth\n  * Use of experiments to calibrate and explore models\n* A practical part (2 days) to build a model about urban mobility in Siem Reap (by groups of 4/5 people)\n\n|![resources/other/trainingSession/SiemReap2015/photos/theorie.JPG](resources/other/trainingSession/SiemReap2015/photos/theorie.JPG)|![resources/other/trainingSession/SiemReap2015/photos/group_Alexis.JPG](resources/other/trainingSession/SiemReap2015/photos/group_Alexis.JPG)|\n|---|---|\n\nTrainers : Drogoul Alexis, Gaudou Benoit, Trung Quang, Philippon Damien, Mazars Julien.\n\n[Here the link to download the different projects](notDoneYet) (Gama version : 1.61)\n\n## A Glance at Sustainable Urban Development (JTD)\n\n**_July 2014 - Da lat (Vietnam)_**\n\nThe JTD ([Journées de Tam Dao](http://www.tamdaoconf.com/)) is an annual gathering of french-talkers researchers during the summer for one week, dealing with a specific subject related to sustainable development. For this 8th JTD, the topic was about sustainable urban development, and a workshop has been made especially about how to use tools as GAMA to build models in order to explore and understand urban spatial dynamics.\n\nTrainers : Drogoul Alexis, Banos Arnaud, Huỳnh Quang Nghi, Trương Chí Quang, Võ Đức Ân.\n\nHere is the link to download the pdf report of the JTD 2014 : https://drive.google.com/file/d/0B2Go6pohIhQcbERhczZRd253UUU/view.\n\n## The perception and Management of Risk (JTD)\n\n**_July 2013 - Da lat (Vietnam)_**\n\nThe JTD ([Journées de Tam Dao](http://www.tamdaoconf.com/)) is an annual gathering of french-talkers researchers during the summer for one week, dealing with a specific subject related to sustainable development. For this 7th JTD, the topic was about the perception and management of risks, and a workshop has been made especially about how to use tools as GAMA to build models in order to understand past crises to better understand the present.\n\nTrainers : Alexis Drogoul, Benoit Gaudou, Nasser Gasmi, Arnaud Grignard, Patrick Taillandier, Olivier Tessier, Võ Đức Ân\n\nHere is the link to download the pdf report of the JTD 2013 : https://drive.google.com/file/d/0B2Go6pohIhQcNXFwVllHd2pFdlk/view.\n\n## Water and its many Issues (JTD)\n\n**_July 2012 - Vietnam_**\n\nThe JTD ([Journées de Tam Dao](http://www.tamdaoconf.com/)) is an annual gathering of french-talkers researchers during the summer for one week, dealing with a specific subject related to sustainable development. For this 6th JTD, the topic was about the perception and management of risks, and a workshop has been made especially about how to use tools as GAMA to build models with an agent-based approach.\n\nTrainers : Alexis Drogoul, Benoit Gaudou, Arnaud Grignard, Patrick Taillandier, Vỗ Đức Ân\n\nHere is the link to download the pdf report of the JTD 2012 : https://docs.google.com/file/d/0B2Go6pohIhQcUWRKU2hPelNqQmc/view.","url":"wiki/TrainingSession.md"},{"id":"wiki/AgentBuiltIn.md","title":" The 'agent' built-in species (Under Construction)","content":"# The 'agent' built-in species (Under Construction)\n\n\nAs described in the [presentation of GAML](Introduction), the hierarchy of species derives from a single built-in species called `agent`. All its components (attributes, actions) will then be inherited by all direct or indirect children species (including [`model`](ModelBuiltIn) and [`experiment`](ExperimentBuiltIn)), with the exception of species that explicitly mention `use_minimal_agents: true` as a facet, which inherit from a stripped-down version of `agent` (see below).\n\n\n\n## `agent` attributes\n`agent` defines several attributes, which form the minimal set of knowledge any agent will have in a model.\n  * \n\n\n## `agent` actions","url":"wiki/AgentBuiltIn.md"},{"id":"wiki/BuiltInArchitectures.md","title":" Built-in Architectures","content":"# Built-in Architectures\n \t\n----\n\n**This file is automatically generated from java files. Do Not Edit It.**\n\n----\n\n\n## INTRODUCTION\n\n----\n\n## Table of Contents\n\n\t[fsm](#fsm), [parallel_bdi](#parallel_bdi), [probabilistic_tasks](#probabilistic_tasks), [reflex](#reflex), [simple_bdi](#simple_bdi), [sorted_tasks](#sorted_tasks), [user_first](#user_first), [user_last](#user_last), [user_only](#user_only), [weighted_tasks](#weighted_tasks), \n\n----\n\n[//]: # (keyword|architecture_fsm)\n## fsm \n### Variables\n\t   \n* **`state`** (string): Returns the current state in which the agent is   \n* **`states`** (list): Returns the list of all possible states the agents can be in \n \t\n### Actions \n\t\n\n----\n\n[//]: # (keyword|architecture_parallel_bdi)\n## parallel_bdi \n### Variables\n\t \n \t\n### Actions \n\t\n\n----\n\n[//]: # (keyword|architecture_probabilistic_tasks)\n## probabilistic_tasks \n### Variables\n\t \n \t\n### Actions \n\t\n\n----\n\n[//]: # (keyword|architecture_reflex)\n## reflex \n### Variables\n\t \n \t\n### Actions \n\t\n\n----\n\n[//]: # (keyword|architecture_simple_bdi)\n## simple_bdi \n### Variables\n\t   \n* **`belief_base`** (list):    \n* **`charisma`** (float):    \n* **`current_plan`** (any type):    \n* **`desire_base`** (list):    \n* **`emotion_base`** (list):    \n* **`intention_base`** (list):    \n* **`intention_persistence`** (float): intention persistence   \n* **`plan_base`** (list):    \n* **`plan_persistence`** (float): plan persistence   \n* **`probabilistic_choice`** (boolean):    \n* **`receptivity`** (float):    \n* **`social_link_base`** (list):    \n* **`thinking`** (list):    \n* **`uncertainty_base`** (list):    \n* **`use_emotions_architecture`** (boolean):    \n* **`use_social_architecture`** (boolean):  \n \t\n### Actions \n\t  \n\t \n#### **`add_belief`**\nadd the predicate in the belief base.\n* returns: bool \t\t\t\n* **`predicate`** (546704): predicate to add as a belief  \n\t \n#### **`add_desire`**\nadds the predicates is in the desire base.\n* returns: bool \t\t\t\n* **`predicate`** (546704): predicate to add \t\t\t\n* **`todo`** (546704): add the desire as a subintention of this parameter  \n\t \n#### **`add_emotion`**\nadd the emotion to the emotion base.\n* returns: bool \t\t\t\n* **`emotion`** (546706): emotion to add to the base  \n\t \n#### **`add_intention`**\ncheck if the predicates is in the desire base.\n* returns: bool \t\t\t\n* **`predicate`** (map): predicate to check  \n\t \n#### **`add_social_link`**\nadd the social link to the social link base.\n* returns: bool \t\t\t\n* **`social_link`** (546707): social link to add to the base  \n\t \n#### **`add_subintention`**\nadds the predicates is in the desire base.\n* returns: bool \t\t\t\n* **`predicate`** (546704): predicate name \t\t\t\n* **`subintentions`** (546704): the subintention to add to the predicate \t\t\t\n* **`add_as_desire`** (boolean): add the subintention as a desire as well (by default, false)  \n\t \n#### **`add_uncertainty`**\nadd a predicate in the uncertainty base.\n* returns: bool \t\t\t\n* **`predicate`** (546704): predicate to check  \n\t \n#### **`clear_beliefs`**\nclear the belief base\n* returns: bool  \n\t \n#### **`clear_desires`**\nclear the desire base\n* returns: bool  \n\t \n#### **`clear_emotions`**\nclear the emotion base\n* returns: bool  \n\t \n#### **`clear_intentions`**\nclear the intention base\n* returns: bool  \n\t \n#### **`clear_social_links`**\nclear the intention base\n* returns: bool  \n\t \n#### **`clear_uncertainties`**\nclear the uncertainty base\n* returns: bool  \n\t \n#### **`current_intention_on_hold`**\nputs the current intention on hold until the specified condition is reached or all subintentions are reached (not in desire base anymore).\n* returns: bool \t\t\t\n* **`until`** (any type): the current intention is put on hold (fited plan are not considered) until specific condition is reached. Can be an expression (which will be tested), a list (of subintentions), or nil (by default the condition will be the current list of subintentions of the intention)  \n\t \n#### **`get_belief`**\nget the predicate in the belief base (if several, returns the first one).\n* returns: predicate \t\t\t\n* **`predicate`** (546704): predicate to get  \n\t \n#### **`get_belief_with_name`**\nget the predicates is in the belief base (if several, returns the first one).\n* returns: predicate \t\t\t\n* **`name`** (string): name of the predicate to check  \n\t \n#### **`get_beliefs`**\nget the list of predicates is in the belief base\n* returns: msi.gama.util.IList \t\t\t\n* **`predicate`** (546704): name of the predicates to check  \n\t \n#### **`get_beliefs_with_name`**\nget the list of predicates is in the belief base with the given name.\n* returns: msi.gama.util.IList \t\t\t\n* **`name`** (string): name of the predicates to check  \n\t \n#### **`get_current_intention`**\nreturns the current intention (last entry of intention base).\n* returns: predicate  \n\t \n#### **`get_desire`**\nget the predicates is in the desire base (if several, returns the first one).\n* returns: predicate \t\t\t\n* **`predicate`** (546704): predicate to check  \n\t \n#### **`get_desire_with_name`**\nget the predicates is in the belief base (if several, returns the first one).\n* returns: predicate \t\t\t\n* **`name`** (string): name of the predicate to check  \n\t \n#### **`get_desires`**\nget the list of predicates is in the belief base\n* returns: msi.gama.util.IList \t\t\t\n* **`predicate`** (546704): name of the predicates to check  \n\t \n#### **`get_desires_with_name`**\nget the list of predicates is in the belief base with the given name.\n* returns: java.util.List \t\t\t\n* **`name`** (string): name of the predicates to check  \n\t \n#### **`get_emotion`**\nget the emotion in the emotion base (if several, returns the first one).\n* returns: emotion \t\t\t\n* **`emotion`** (546706): emotion to get  \n\t \n#### **`get_intention`**\nget the predicates is in the belief base (if several, returns the first one).\n* returns: predicate \t\t\t\n* **`predicate`** (546704): predicate to check  \n\t \n#### **`get_intention_with_name`**\nget the predicates is in the belief base (if several, returns the first one).\n* returns: predicate \t\t\t\n* **`name`** (string): name of the predicate to check  \n\t \n#### **`get_intentions`**\nget the list of predicates is in the belief base\n* returns: msi.gama.util.IList \t\t\t\n* **`predicate`** (546704): name of the predicates to check  \n\t \n#### **`get_intentions_with_name`**\nget the list of predicates is in the belief base with the given name.\n* returns: java.util.List \t\t\t\n* **`name`** (string): name of the predicates to check  \n\t \n#### **`get_plans`**\nget the list of plans.\n* returns: java.util.List  \n\t \n#### **`get_social_link`**\nget the social linke (if several, returns the first one).\n* returns: msi.gaml.architecture.simplebdi.SocialLink \t\t\t\n* **`social_link`** (546707): social link to check  \n\t \n#### **`get_uncertainty`**\nget the predicates is in the uncertainty base (if several, returns the first one).\n* returns: predicate \t\t\t\n* **`predicate`** (546704): predicate to check  \n\t \n#### **`has_belief`**\ncheck if the predicates is in the belief base.\n* returns: bool \t\t\t\n* **`predicate`** (546704): predicate to check  \n\t \n#### **`has_desire`**\ncheck if the predicates is in the desire base.\n* returns: bool \t\t\t\n* **`predicate`** (546704): predicate to check  \n\t \n#### **`has_emotion`**\ncheck if the emotion is in the belief base.\n* returns: bool \t\t\t\n* **`emotion`** (546706): emotion to check  \n\t \n#### **`has_social_link`**\ncheck if the social link base.\n* returns: bool \t\t\t\n* **`social_link`** (546707): social link to check  \n\t \n#### **`has_uncertainty`**\ncheck if the predicates is in the uncertainty base.\n* returns: bool \t\t\t\n* **`predicate`** (546704): predicate to check  \n\t \n#### **`is_current_intention`**\ncheck if the predicates is the current intention (last entry of intention base).\n* returns: bool \t\t\t\n* **`predicate`** (546704): predicate to check  \n\t \n#### **`remove_all_beliefs`**\nremoves the predicates from the belief base.\n* returns: bool \t\t\t\n* **`predicate`** (546704): predicate to remove  \n\t \n#### **`remove_belief`**\nremoves the predicate from the belief base.\n* returns: bool \t\t\t\n* **`predicate`** (546704): predicate to remove  \n\t \n#### **`remove_desire`**\nremoves the predicates from the desire base.\n* returns: bool \t\t\t\n* **`predicate`** (546704): predicate to add  \n\t \n#### **`remove_emotion`**\nremoves the emotion from the emotion base.\n* returns: bool \t\t\t\n* **`emotion`** (546706): emotion to remove  \n\t \n#### **`remove_intention`**\nremoves the predicates from the desire base.\n* returns: bool \t\t\t\n* **`predicate`** (546704): predicate to add \t\t\t\n* **`desire_also`** (boolean): removes also desire  \n\t \n#### **`remove_social_link`**\nremoves the social link from the social relation base.\n* returns: bool \t\t\t\n* **`social_link`** (546707): social link to remove  \n\t \n#### **`remove_uncertainty`**\nremoves the predicates from the desire base.\n* returns: bool \t\t\t\n* **`predicate`** (546704): predicate to add  \n\t \n#### **`replace_belief`**\nreplace the old predicate by the new one.\n* returns: bool \t\t\t\n* **`old_predicate`** (546704): predicate to remove \t\t\t\n* **`predicate`** (546704): predicate to add\n\n----\n\n[//]: # (keyword|architecture_sorted_tasks)\n## sorted_tasks \n### Variables\n\t \n \t\n### Actions \n\t\n\n----\n\n[//]: # (keyword|architecture_user_first)\n## user_first \n### Variables\n\t \n \t\n### Actions \n\t\n\n----\n\n[//]: # (keyword|architecture_user_last)\n## user_last \n### Variables\n\t \n \t\n### Actions \n\t\n\n----\n\n[//]: # (keyword|architecture_user_only)\n## user_only \n### Variables\n\t \n \t\n### Actions \n\t\n\n----\n\n[//]: # (keyword|architecture_weighted_tasks)\n## weighted_tasks \n### Variables\n\t \n \t\n### Actions \n\t","url":"wiki/BuiltInArchitectures.md"},{"id":"wiki/BuiltInSkills.md","title":" Built-in Skills","content":"# Built-in Skills\n\n----\n\n**This file is automatically generated from java files. Do Not Edit It.**\n\n----\n\n## Introduction\n\nSkills are built-in modules, written in Java, that provide a set of related built-in variables and built-in actions (in addition to those already provided by GAMA) to the species that declare them. A declaration of skill is done by filling the skills attribute in the species definition:\n\n```\nspecies my_species skills: [skill1, skill2] {\n    ...\n}\n```\n\nSkills have been designed to be mutually compatible so that any combination of them will result in a functional species. An example of skill is the `moving` skill.\n  \nSo, for instance, if a species is declared as:\n\n```\nspecies foo skills: [moving]{\n...\n}\n```\n\nIts agents will automatically be provided with the following variables : `speed`, `heading`, `destination` and the following actions: `move`, `goto`, `wander`, `follow` in addition to those built-in in species and declared by the modeller. Most of these variables, except the ones marked read-only, can be customized and modified like normal variables by the modeller. For instance, one could want to set a maximum for the speed; this would be done by redeclaring it like this:\n\n```\nfloat speed max:100 min:0;\n```\n\nOr, to obtain a speed increasing at each simulation step:\n\n```\nfloat speed max:100 min:0  \n\n[advanced_driving](#advanced_driving), [driving](#driving), [fipa](#fipa), [GAMASQL](#gamasql), [grid](#grid), [MDXSKILL](#mdxskill), [messaging](#messaging), [moving](#moving), [moving3D](#moving3d), [network](#network), [physics](#physics), [skill_road](#skill_road), [skill_road_node](#skill_road_node), [SQLSKILL](#sqlskill), \n    \t\n----\n\n[//]: # (keyword|skill_advanced_driving)\n## advanced_driving\n\n \n### Variables\n\t   \n  * **`current_index`** (`int`): the current index of the agent target (according to the targets list)   \n  * **`current_lane`** (`int`): the current lane on which the agent is   \n  * **`current_path`** (`path`): the current path that tha agent follow   \n  * **`current_road`** (`agent`): current road on which the agent is   \n  * **`current_target`** (`point`): the current target of the agent   \n  * **`distance_to_goal`** (`float`): euclidean distance to the next point of the current segment   \n  * **`final_target`** (`point`): the final target of the agent   \n  * **`max_acceleration`** (`float`): maximum acceleration of the car for a cycle   \n  * **`max_speed`** (`float`): maximal speed of the vehicle   \n  * **`on_linked_road`** (`boolean`): is the agent on the linked road?   \n  * **`proba_block_node`** (`float`): probability to block a node (do not let other driver cross the crossroad)   \n  * **`proba_lane_change_down`** (`float`): probability to change lane to a lower lane (right lane if right side driving) if necessary   \n  * **`proba_lane_change_up`** (`float`): probability to change lane to a upper lane (left lane if right side driving) if necessary   \n  * **`proba_respect_priorities`** (`float`): probability to respect priority (right or left) laws   \n  * **`proba_respect_stops`** (`list`): probability to respect stop laws - one value for each type of stop   \n  * **`proba_use_linked_road`** (`float`): probability to change lane to a linked road lane if necessary   \n  * **`real_speed`** (`float`): the actual speed of the agent (in meter/second)   \n  * **`right_side_driving`** (`boolean`): are drivers driving on the right size of the road?   \n  * **`security_distance_coeff`** (`float`): the coefficient for the computation of the the min distance between two drivers (according to the vehicle speed - security_distance = 1#m + security_distance_coeff `*` real_speed )   \n  * **`segment_index_on_road`** (`int`): current segment index of the agent on the current road   \n  * **`speed`** (`float`): the speed of the agent (in meter/second)   \n  * **`speed_coeff`** (`float`): speed coefficient for the speed that the driver want to reach (according to the max speed of the road)   \n  * **`targets`** (`list`): the current list of points that the agent has to reach (path)   \n  * **`vehicle_length`** (`float`): the length of the vehicle (in meters) \n \t\n### Actions\n\t  \n\t \n#### **`advanced_follow_driving`**\nmoves the agent towards along the path passed in the arguments while considering the other agents in the network (only for graph topology)\n\n* returns: float \t\t\t\n* **`path`** (path): a path to be followed. \t\t\t\n* **`target`** (point): the target to reach \t\t\t\n* **`speed`** (float): the speed to use for this move (replaces the current value of speed) \t\t\t\n* **`time`** (float): time to travel  \n\t \n#### **`compute_path`**\naction to compute a path to a target location according to a given graph\n\n* returns: path \t\t\t\n* **`graph`** (graph): the graph on wich compute the path \t\t\t\n* **`target`** (agent): the target node to reach \t\t\t\n* **`source`** (agent): the source node (optional, if not defined, closest node to the agent location) \t\t\t\n* **`on_road`** (agent): the road on which the agent is located (optional)  \n\t \n#### **`drive`**\naction to drive toward the final target\n\n* returns: void  \n\t \n#### **`drive_random`**\naction to drive by chosen randomly the next road\n\n* returns: void \t\t\t\n* **`proba_roads`** (map): a map containing for each road (key), the probability to be selected as next road (value)  \n\t \n#### **`external_factor_impact`**\naction that allows to define how the remaining time is impacted by external factor\n\n* returns: float \t\t\t\n* **`new_road`** (agent): the road on which to the driver wants to go \t\t\t\n* **`remaining_time`** (float): the remaining time  \n\t \n#### **`is_ready_next_road`**\naction to test if the driver can take the given road at the given lane\n\n* returns: bool \t\t\t\n* **`new_road`** (agent): the road to test \t\t\t\n* **`lane`** (int): the lane to test  \n\t \n#### **`lane_choice`**\naction to choose a lane\n\n* returns: int \t\t\t\n* **`new_road`** (agent): the road on which to choose the lane  \n\t \n#### **`path_from_nodes`**\naction to compute a path from a list of nodes according to a given graph\n\n* returns: path \t\t\t\n* **`graph`** (graph): the graph on wich compute the path \t\t\t\n* **`nodes`** (list): the list of nodes composing the path  \n\t \n#### **`speed_choice`**\naction to choose a speed\n\n* returns: float \t\t\t\n* **`new_road`** (agent): the road on which to choose the speed  \n\t \n#### **`test_next_road`**\naction to test if the driver can take the given road\n\n* returns: bool \t\t\t\n* **`new_road`** (agent): the road to test\n    \t\n----\n\n[//]: # (keyword|skill_driving)\n## driving\n\n \n### Variables\n\t   \n  * **`lanes_attribute`** (`string`): the name of the attribut of the road agent that determine the number of road lanes   \n  * **`living_space`** (`float`): the min distance between the agent and an obstacle (in meter)   \n  * **`obstacle_species`** (`list`): the list of species that are considered as obstacles   \n  * **`speed`** (`float`): the speed of the agent (in meter/second)   \n  * **`tolerance`** (`float`): the tolerance distance used for the computation (in meter) \n \t\n### Actions\n\t  \n\t \n#### **`follow_driving`**\nmoves the agent along a given path passed in the arguments while considering the other agents in the network.\n\n* returns: path \t\t\t\n* **`speed`** (float): the speed to use for this move (replaces the current value of speed) \t\t\t\n* **`path`** (path): a path to be followed. \t\t\t\n* **`return_path`** (boolean): if true, return the path followed (by default: false) \t\t\t\n* **`move_weights`** (map): Weigths used for the moving. \t\t\t\n* **`living_space`** (float): min distance between the agent and an obstacle (replaces the current value of living_space) \t\t\t\n* **`tolerance`** (float): tolerance distance used for the computation (replaces the current value of tolerance) \t\t\t\n* **`lanes_attribute`** (string): the name of the attribut of the road agent that determine the number of road lanes (replaces the current value of lanes_attribute)  \n\t \n#### **`goto_driving`**\nmoves the agent towards the target passed in the arguments while considering the other agents in the network (only for graph topology)\n\n* returns: path \t\t\t\n* **`target`** (geometry): the location or entity towards which to move. \t\t\t\n* **`speed`** (float): the speed to use for this move (replaces the current value of speed) \t\t\t\n* **`on`** (any type): list, agent, graph, geometry that restrains this move (the agent moves inside this geometry) \t\t\t\n* **`return_path`** (boolean): if true, return the path followed (by default: false) \t\t\t\n* **`move_weights`** (map): Weigths used for the moving. \t\t\t\n* **`living_space`** (float): min distance between the agent and an obstacle (replaces the current value of living_space) \t\t\t\n* **`tolerance`** (float): tolerance distance used for the computation (replaces the current value of tolerance) \t\t\t\n* **`lanes_attribute`** (string): the name of the attribut of the road agent that determine the number of road lanes (replaces the current value of lanes_attribute)\n    \t\n----\n\n[//]: # (keyword|skill_fipa)\n## fipa\nThe fipa skill offers some primitives and built-in variables which enable agent to communicate with each other using the FIPA interaction protocol.\n \n### Variables\n\t   \n  * **`accept_proposals`** (`list`): A list of 'accept_proposal' performative messages of the agent's mailbox having .   \n  * **`agrees`** (`list`): A list of 'accept_proposal' performative messages.   \n  * **`cancels`** (`list`): A list of 'cancel' performative messages.   \n  * **`cfps`** (`list`): A list of 'cfp' (call for proposal) performative messages.   \n  * **`conversations`** (`list`): A list containing the current conversations of agent. Ended conversations are automatically removed from this list.   \n  * **`failures`** (`list`): A list of 'failure' performative messages.   \n  * **`informs`** (`list`): A list of 'inform' performative messages.   \n  * **`proposes`** (`list`): A list of 'propose' performative messages .   \n  * **`queries`** (`list`): A list of 'query' performative messages.   \n  * **`refuses`** (`list`): A list of 'propose' performative messages.   \n  * **`reject_proposals`** (`list`): A list of 'reject_proposals' performative messages.   \n  * **`requests`** (`list`): A list of 'request' performative messages.   \n  * **`requestWhens`** (`list`): A list of 'request-when' performative messages.   \n  * **`subscribes`** (`list`): A list of 'subscribe' performative messages. \n \t\n### Actions\n\t  \n\t \n#### **`accept_proposal`**\nReplies a message with an 'accept_proposal' performative message.\n\n* returns: unknown \t\t\t\n* **`message`** (24): The message to be replied \t\t\t\n* **`contents`** (list): The content of the replying message  \n\t \n#### **`agree`**\nReplies a message with an 'agree' performative message.\n\n* returns: unknown \t\t\t\n* **`message`** (24): The message to be replied \t\t\t\n* **`contents`** (list): The content of the replying message  \n\t \n#### **`cancel`**\nReplies a message with a 'cancel' peformative message.\n\n* returns: unknown \t\t\t\n* **`message`** (24): The message to be replied \t\t\t\n* **`contents`** (list): The content of the replying message  \n\t \n#### **`cfp`**\nReplies a message with a 'cfp' performative message.\n\n* returns: unknown \t\t\t\n* **`message`** (24): The message to be replied \t\t\t\n* **`contents`** (list): The content of the replying message  \n\t \n#### **`end_conversation`**\nReply a message with an 'end_conversation' peprformative message. This message marks the end of a conversation. In a 'no-protocol' conversation, it is the responsible of the modeler to explicitly send this message to mark the end of a conversation/interaction protocol.\n\n* returns: unknown \t\t\t\n* **`message`** (24): The message to be replied \t\t\t\n* **`contents`** (list): The content of the replying message  \n\t \n#### **`failure`**\nReplies a message with a 'failure' performative message.\n\n* returns: unknown \t\t\t\n* **`message`** (24): The message to be replied \t\t\t\n* **`contents`** (list): The content of the replying message  \n\t \n#### **`inform`**\nReplies a message with an 'inform' performative message.\n\n* returns: unknown \t\t\t\n* **`message`** (24): The message to be replied \t\t\t\n* **`contents`** (list): The content of the replying message  \n\t \n#### **`propose`**\nReplies a message with a 'propose' performative message.\n\n* returns: unknown \t\t\t\n* **`message`** (24): The message to be replied \t\t\t\n* **`contents`** (list): The content of the replying message  \n\t \n#### **`query`**\nReplies a message with a 'query' performative message.\n\n* returns: unknown \t\t\t\n* **`message`** (24): The message to be replied \t\t\t\n* **`contents`** (list): The content of the replying message  \n\t \n#### **`refuse`**\nReplies a message with a 'refuse' performative message.\n\n* returns: unknown \t\t\t\n* **`message`** (24): The message to be replied \t\t\t\n* **`contents`** (list): The contents of the replying message  \n\t \n#### **`reject_proposal`**\nReplies a message with a 'reject_proposal' performative message.\n\n* returns: unknown \t\t\t\n* **`message`** (24): The message to be replied \t\t\t\n* **`contents`** (list): The content of the replying message  \n\t \n#### **`reply`**\nReplies a message. This action should be only used to reply a message in a 'no-protocol' conversation and with a 'user defined performative'. For performatives supported by GAMA (i.e., standard FIPA performatives), please use the 'action' with the same name of 'performative'. For example, to reply a message with a 'request' performative message, the modeller should use the 'request' action.\n\n* returns: unknown \t\t\t\n* **`message`** (24): The message to be replied \t\t\t\n* **`performative`** (string): The performative of the replying message \t\t\t\n* **`contents`** (list): The content of the replying message  \n\t \n#### **`request`**\nReplies a message with a 'request' performative message.\n\n* returns: unknown \t\t\t\n* **`message`** (24): The message to be replied \t\t\t\n* **`contents`** (list): The content of the replying message  \n\t \n#### **`send`**\nStarts a conversation/interaction protocol.\n\n* returns: msi.gaml.extensions.fipa.FIPAMessage \t\t\t\n* **`to`** (list): A list of receiver agents \t\t\t\n* **`contents`** (list): The content of the message. A list of any GAML type \t\t\t\n* **`performative`** (string): A string, representing the message performative \t\t\t\n* **`protocol`** (string): A string representing the name of interaction protocol  \n\t \n#### **`start_conversation`**\nStarts a conversation/interaction protocol.\n\n* returns: msi.gaml.extensions.fipa.FIPAMessage \t\t\t\n* **`to`** (list): A list of receiver agents \t\t\t\n* **`contents`** (list): The content of the message. A list of any GAML type \t\t\t\n* **`performative`** (string): A string, representing the message performative \t\t\t\n* **`protocol`** (string): A string representing the name of interaction protocol  \n\t \n#### **`subscribe`**\nReplies a message with a 'subscribe' performative message.\n\n* returns: unknown \t\t\t\n* **`message`** (24): The message to be replied \t\t\t\n* **`contents`** (list): The content of the replying message\n    \t\n----\n\n[//]: # (keyword|skill_GAMASQL)\n## GAMASQL\n\n \n### Variables\n\t \n \t\n### Actions\n\t  \n\t \n#### **`read`**\n\n\n* returns: void \t\t\t\n* **`params`** (map): Connection parameters \t\t\t\n* **`table`** (string): select string with question marks \t\t\t\n* **`filter`** (list): List of values that are used to replace question marks  \n\t \n#### **`SqlObject`**\n\n\n* returns: msi.gama.database.geosql.GamaSqlConnection \t\t\t\n* **`params`** (map): Connection parameters \t\t\t\n* **`table`** (string): select string with question marks \t\t\t\n* **`filter`** (string): Filter for select  \n\t \n#### **`testConnection`**\n\n\n* returns: bool \t\t\t\n* **`params`** (map): Connection parameters\n    \t\n----\n\n[//]: # (keyword|skill_grid)\n## grid\n\n \n### Variables\n\t   \n  * **`bands`** (`list`): Represents the values of the different bands of the cell (list of floating point value automatically set when the grid is initialized from a grid file)   \n  * **`color`** (`rgb`): Represents the color of the cell, used by default to represent the grid on displays   \n  * **`grid_value`** (`float`): Represents a floating point value (automatically set when the grid is initialized from a grid file, and used by default to represent the elevation of the cell when displaying it on a display)   \n  * **`grid_x`** (`int`): Returns the 0-based index of the column of the cell in the grid   \n  * **`grid_y`** (`int`): Returns the 0-based index of the row of the cell in the grid   \n  * **`neighbors`** (`list`): Represents the neighbor at distance 1 of the cell \n \t\n### Actions\n\t\n    \t\n----\n\n[//]: # (keyword|skill_MDXSKILL)\n## MDXSKILL\n\n \n### Variables\n\t \n \t\n### Actions\n\t  \n\t \n#### **`select`**\n\n\n* returns: list \t\t\t\n* **`params`** (map): Connection parameters \t\t\t\n* **`onColumns`** (string): select string with question marks \t\t\t\n* **`onRows`** (list): List of values that are used to replace question marks \t\t\t\n* **`from`** (list): List of values that are used to replace question marks \t\t\t\n* **`where`** (list): List of values that are used to replace question marks \t\t\t\n* **`values`** (list): List of values that are used to replace question marks  \n\t \n#### **`testConnection`**\n\n\n* returns: bool \t\t\t\n* **`params`** (map): Connection parameters  \n\t \n#### **`timeStamp`**\n\n\n* returns: float\n    \t\n----\n\n[//]: # (keyword|skill_messaging)\n## messaging\nA simple skill that provides agents with a mailbox than can be filled with messages\n \n### Variables\n\t   \n  * **`mailbox`** (`list`): The list of messages that can be consulted by the agent \n \t\n### Actions\n\t  \n\t \n#### **`send`**\n\n\n* returns: msi.gama.extensions.messaging.GamaMessage \t\t\t\n* **`to`** (any type): The agent, or server, to which this message will be sent to \t\t\t\n* **`contents`** (any type): The contents of the message, an arbitrary object\n    \t\n----\n\n[//]: # (keyword|skill_moving)\n## moving\nThe moving skill is intended to define the minimal set of behaviours required for agents that are able to move on different topologies\n \n### Variables\n\t   \n  * **`current_edge`** (`geometry`): Represents the agent/geometry on which the agent is located (only used with a graph)   \n  * **`current_path`** (`path`): Represents the path on which the agent is moving on (goto action on a graph)   \n  * **`destination`** (`point`): Represents the next location of the agent if it keeps its current speed and heading (read-only)   \n  * **`heading`** (`int`): Represents the absolute heading of the agent in degrees.   \n  * **`location`** (`point`): Represents the current position of the agent   \n  * **`real_speed`** (`float`): Represents the actual speed of the agent (in meter/second)   \n  * **`speed`** (`float`): Represents the speed of the agent (in meter/second) \n \t\n### Actions\n\t  \n\t \n#### **`follow`**\nmoves the agent along a given path passed in the arguments.\n\n* returns: path \t\t\t\n* **`speed`** (float): the speed to use for this move (replaces the current value of speed) \t\t\t\n* **`path`** (path): a path to be followed. \t\t\t\n* **`move_weights`** (map): Weights used for the moving. \t\t\t\n* **`return_path`** (boolean): if true, return the path followed (by default: false)  \n\t \n#### **`goto`**\nmoves the agent towards the target passed in the arguments.\n\n* returns: path \t\t\t\n* **`target`** (geometry): the location or entity towards which to move. \t\t\t\n* **`speed`** (float): the speed to use for this move (replaces the current value of speed) \t\t\t\n* **`on`** (any type): graph, topology, list of geometries that restrain this move \t\t\t\n* **`recompute_path`** (boolean): if false, the path is not recompute even if the graph is modified (by default: true) \t\t\t\n* **`return_path`** (boolean): if true, return the path followed (by default: false) \t\t\t\n* **`move_weights`** (map): Weights used for the moving.  \n\t \n#### **`move`**\nmoves the agent forward, the distance being computed with respect to its speed and heading. The value of the corresponding variables are used unless arguments are passed.\n\n* returns: path \t\t\t\n* **`speed`** (float): the speed to use for this move (replaces the current value of speed) \t\t\t\n* **`heading`** (int): the angle (in degree) of the target direction. \t\t\t\n* **`bounds`** (geometry): the geometry (the localized entity geometry) that restrains this move (the agent moves inside this geometry  \n\t \n#### **`wander`**\nMoves the agent towards a random location at the maximum distance (with respect to its speed). The heading of the agent is chosen randomly if no amplitude is specified. This action changes the value of heading.\n\n* returns: void \t\t\t\n* **`speed`** (float): the speed to use for this move (replaces the current value of speed) \t\t\t\n* **`amplitude`** (int): a restriction placed on the random heading choice. The new heading is chosen in the range (heading - amplitude/2, heading+amplitude/2) \t\t\t\n* **`bounds`** (geometry): the geometry (the localized entity geometry) that restrains this move (the agent moves inside this geometry) \t\t\t\n* **`on`** (graph): the graph that restrains this move (the agent moves on the graph \t\t\t\n* **`proba_edges`** (map): When the agent moves on a graph, the probability to choose another edge. If not defined, each edge has the same probability to be chosen\n    \t\n----\n\n[//]: # (keyword|skill_moving3D)\n## moving3D\nThe moving skill 3D is intended to define the minimal set of behaviours required for agents that are able to move on different topologies\n \n### Variables\n\t   \n  * **`destination`** (`point`): continuously updated destination of the agent with respect to its speed and heading (read-only)   \n  * **`heading`** (`int`): the absolute heading of the agent in degrees (in the range 0-359)   \n  * **`pitch`** (`int`): the absolute pitch of the agent in degrees (in the range 0-359)   \n  * **`roll`** (`int`): the absolute roll of the agent in degrees (in the range 0-359)   \n  * **`speed`** (`float`): the speed of the agent (in meter/second) \n \t\n### Actions\n\t  \n\t \n#### **`move`**\nmoves the agent forward, the distance being computed with respect to its speed and heading. The value of the corresponding variables are used unless arguments are passed.\n\n* returns: path \t\t\t\n* **`speed`** (float): the speed to use for this move (replaces the current value of speed) \t\t\t\n* **`heading`** (int): int, optional, the direction to take for this move (replaces the current value of heading) \t\t\t\n* **`pitch`** (int): int, optional, the direction to take for this move (replaces the current value of pitch) \t\t\t\n* **`heading`** (int): int, optional, the direction to take for this move (replaces the current value of roll) \t\t\t\n* **`bounds`** (geometry): the geometry (the localized entity geometry) that restrains this move (the agent moves inside this geometry\n    \t\n----\n\n[//]: # (keyword|skill_network)\n## network\n\n \n### Variables\n\t   \n  * **`network_groups`** (`list`): Net ID of the agent   \n  * **`network_name`** (`string`): Net ID of the agent   \n  * **`network_server`** (`list`): Net ID of the agent \n \t\n### Actions\n\t  \n\t \n#### **`connect`**\n\n\n* returns: void \t\t\t\n* **`protocol`** (string): protocol type (udp, tcp, mqqt) \t\t\t\n* **`port`** (int): port number \t\t\t\n* **`with_name`** (string): server nameL \t\t\t\n* **`login`** (string): server nameL \t\t\t\n* **`password`** (string): server nameL \t\t\t\n* **`to`** (string): server URL  \n\t \n#### **`execute`**\n\n\n* returns: string \t\t\t\n* **`command`** (string): command to execute  \n\t \n#### **`fetch_message`**\n\n\n* returns: msi.gama.extensions.messaging.GamaMessage  \n\t \n#### **`has_more_message`**\n\n\n* returns: bool  \n\t \n#### **`leave_the_group`**\nleave a group of agent\n\n* returns: void \t\t\t\n* **`with_name`** (string): name of the group agent want to leave\n    \t\n----\n\n[//]: # (keyword|skill_physics)\n## physics\n\n \n### Variables\n\t   \n  * **`collisionBound`** (`map`):    \n  * **`density`** (`float`):    \n  * **`mass`** (`float`):    \n  * **`motor`** (`point`):    \n  * **`space`** (`agent`):    \n  * **`velocity`** (`list`):  \n \t\n### Actions\n\t\n    \t\n----\n\n[//]: # (keyword|skill_skill_road)\n## skill_road\n\n \n### Variables\n\t   \n  * **`agents_on`** (`list`): for each lane of the road, the list of agents for each segment   \n  * **`all_agents`** (`list`): the list of agents on the road   \n  * **`lanes`** (`int`): the number of lanes   \n  * **`linked_road`** (`-18`): the linked road: the lanes of this linked road will be usable by drivers on the road   \n  * **`maxspeed`** (`float`): the maximal speed on the road   \n  * **`source_node`** (`agent`): the source node of the road   \n  * **`target_node`** (`agent`): the target node of the road \n \t\n### Actions\n\t  \n\t \n#### **`register`**\nregister the agent on the road at the given lane\n\n* returns: void \t\t\t\n* **`agent`** (agent): the agent to register on the road. \t\t\t\n* **`lane`** (int): the lane index on which to register; if lane index >= number of lanes, then register on the linked road  \n\t \n#### **`unregister`**\nunregister the agent on the road\n\n* returns: void \t\t\t\n* **`agent`** (agent): the agent to unregister on the road.\n    \t\n----\n\n[//]: # (keyword|skill_skill_road_node)\n## skill_road_node\n\n \n### Variables\n\t   \n  * **`block`** (`map`): define the list of agents blocking the node, and for each agent, the list of concerned roads   \n  * **`priority_roads`** (`list`): the list of priority roads   \n  * **`roads_in`** (`list`): the list of input roads   \n  * **`roads_out`** (`list`): the list of output roads   \n  * **`stop`** (`list`): define for each type of stop, the list of concerned roads \n \t\n### Actions\n\t\n    \t\n----\n\n[//]: # (keyword|skill_SQLSKILL)\n## SQLSKILL\n\n \n### Variables\n\t \n \t\n### Actions\n\t  \n\t \n#### **`executeUpdate`**\n\n\n* returns: int \t\t\t\n* **`params`** (map): Connection parameters \t\t\t\n* **`updateComm`** (string): SQL commands such as Create, Update, Delete, Drop with question mark \t\t\t\n* **`values`** (list): List of values that are used to replace question mark  \n\t \n#### **`getCurrentDateTime`**\n\n\n* returns: string \t\t\t\n* **`dateFormat`** (string): date format examples: 'yyyy-MM-dd' , 'yyyy-MM-dd HH:mm:ss'  \n\t \n#### **`getDateOffset`**\n\n\n* returns: string \t\t\t\n* **`dateFormat`** (string): date format examples: 'yyyy-MM-dd' , 'yyyy-MM-dd HH:mm:ss' \t\t\t\n* **`dateStr`** (string): Start date \t\t\t\n* **`offset`** (string): number on day to increase or decrease  \n\t \n#### **`insert`**\n\n\n* returns: int \t\t\t\n* **`params`** (map): Connection parameters \t\t\t\n* **`into`** (string): Table name \t\t\t\n* **`columns`** (list): List of column name of table \t\t\t\n* **`values`** (list): List of values that are used to insert into table. Columns and values must have same size  \n\t \n#### **`list2Matrix`**\n\n\n* returns: matrix \t\t\t\n* **`param`** (list): Param: a list of records and metadata \t\t\t\n* **`getName`** (boolean): getType: a boolean value, optional parameter \t\t\t\n* **`getType`** (boolean): getType: a boolean value, optional parameter  \n\t \n#### **`select`**\n\n\n* returns: container \t\t\t\n* **`params`** (map): Connection parameters \t\t\t\n* **`select`** (string): select string with question marks \t\t\t\n* **`values`** (list): List of values that are used to replace question marks  \n\t \n#### **`testConnection`**\n\n\n* returns: bool \t\t\t\n* **`params`** (map): Connection parameters  \n\t \n#### **`timeStamp`**\n\n\n* returns: float","url":"wiki/BuiltInSkills.md"},{"id":"wiki/BuiltInSpecies.md","title":" Built-in Species","content":"# Built-in Species\n \t\n----\n\n**This file is automatically generated from java files. Do Not Edit It.**\n\n----\n\n\nIt is possible to use in the models a set of built-in agents. These agents allow to directly use some advance features like clustering, multi-criteria analysis, etc. The creation of these agents are similar as for other kinds of agents:\n\n```\ncreate species: my_built_in_agent returns: the_agent;\n```\n    \nSo, for instance, to be able to use clustering techniques in the model:\n\n```\ncreate cluster_builder returns: clusterer;\n```\n\t\n\n\n## Table of Contents\n\n[agent](#agent), [AgentDB](#agentdb), [base_edge](#base_edge), [experiment](#experiment), [graph_edge](#graph_edge), [graph_node](#graph_node), [model](#model), [physical_world](#physical_world), \n    \t\n----\n\n[//]: # (keyword|species_agent)\n## `agent`\t\n\n### Actions\n\t  \n\t \n#### **`_init_`**\n\n* returns: `unknown`\n  \n\t \n#### **`_step_`**\n\n* returns: `unknown`\n\n    \t\n----\n\n[//]: # (keyword|species_AgentDB)\n## `AgentDB`\t\n\n### Actions\n\t  \n\t \n#### **`close`**\n\n* returns: `unknown`\n  \n\t \n#### **`connect`**\n\n* returns: `unknown`\n \t\t\t\n* → **`params`** (`map`): Connection parameters  \n\t \n#### **`executeUpdate`**\n\n* returns: `int`\n \t\t\t\n* → **`updateComm`** (`string`): SQL commands such as Create, Update, Delete, Drop with question mark \t\t\t\n* → **`values`** (`list`): List of values that are used to replace question mark  \n\t \n#### **`getParameter`**\n\n* returns: `unknown`\n  \n\t \n#### **`insert`**\n\n* returns: `int`\n \t\t\t\n* → **`into`** (`string`): Table name \t\t\t\n* → **`columns`** (`list`): List of column name of table \t\t\t\n* → **`values`** (`list`): List of values that are used to insert into table. Columns and values must have same size  \n\t \n#### **`isConnected`**\n\n* returns: `bool`\n  \n\t \n#### **`select`**\n\n* returns: `container`\n \t\t\t\n* → **`select`** (`string`): select string \t\t\t\n* → **`values`** (`list`): List of values that are used to replace question marks  \n\t \n#### **`setParameter`**\n\n* returns: `unknown`\n \t\t\t\n* → **`params`** (`map`): Connection parameters  \n\t \n#### **`testConnection`**\n\n* returns: `bool`\n \t\t\t\n* → **`params`** (`map`): Connection parameters  \n\t \n#### **`timeStamp`**\n\n* returns: `float`\n\n    \t\n----\n\n[//]: # (keyword|species_base_edge)\n## `base_edge`\t\n\n### Actions\n\t\n    \t\n----\n\n[//]: # (keyword|species_experiment)\n## `experiment`\t\n\n### Actions\n\t  \n\t \n#### **`update_outputs`**\nForces all outputs to refresh, optionally recomputing their values\n* returns: `unknown`\n \t\t\t\n* → **`recompute`** (`boolean`): Whether or not to force the outputs to make a computation step\n    \t\n----\n\n[//]: # (keyword|species_graph_edge)\n## `graph_edge`\t\n\n### Actions\n\t\n    \t\n----\n\n[//]: # (keyword|species_graph_node)\n## `graph_node`\t\n\n### Actions\n\t  \n\t \n#### **`related_to`**\n\n* returns: `bool`\n \t\t\t\n* → **`other`** (`agent`): \n    \t\n----\n\n[//]: # (keyword|species_model)\n## `model`\t\n\n### Actions\n\t  \n\t \n#### **`halt`**\nAllows to stop the current simulation so that cannot be continued after. All the behaviors and updates are stopped.\n* returns: `unknown`\n  \n\t \n#### **`pause`**\nAllows to pause the current simulation **ACTUALLY EXPERIMENT FOR THE MOMENT**. It can be set to continue with the manual intervention of the user.\n* returns: `unknown`\n\n    \t\n----\n\n[//]: # (keyword|species_physical_world)\n## `physical_world`\t\n\n### Actions\n\t  \n\t \n#### **`compute_forces`**\n\n* returns: `unknown`\n","url":"wiki/BuiltInSpecies.md"},{"id":"wiki/DataTypes.md","title":" Types","content":"# Types\n\nA variable's or expression's *type* (or *data type*) determines the values it can take, plus the operations that can be performed on or with it. GAML is a statically-typed language, which means that the type of an expression is always known at compile time, and is even enforced with casting operations.\nThere are 4 categories of types:\n\n* primitive types, declared as keyword in the language,\n* complex types, also declared as keyword in the language,\n* parametric types, a refinement of complex types (mainly children of container) that is dynamically constructed using an enclosing type, a contents type and a key type,\n* species types, dynamically constructed from the species declarations made by the modeler (and the built-in species present).\n\nThe hierarchy of types in GAML (only primitive and complex types are displayed here, of course, as the other ones are model-dependent) is the following:\n\n![images/types_hierarchy.png](resources/images/gamlReferences/types_hierarchy.png)\n\n\n\n## Table of contents \n\n* [Types (Under Construction)](#types-under-construction)\n\t* [Primitive built-in types](#primitive-built-in-types)\n\t\t* [bool](#bool)\n\t\t* [float](#float)\n\t\t* [int](#int)\n\t\t* [string](#string)\n\t* [Complex built-in types](#complex-built-in-types)\n\t\t* [agent](#agent)\n\t\t* [container](#container)\n\t\t* [file](#file)\n\t\t* [geometry](#geometry)\n\t\t* [graph](#graph)\n\t\t* [list](#list)\n\t\t* [map](#map)\n\t\t* [matrix](#matrix)\n\t\t* [pair](#pair)\n\t\t* [path](#path)\n\t\t* [point](#point)\n\t\t* [rgb](#rgb)\n\t\t* [species](#species)\n\t\t* [Species names as types](#species-names-as-types)\n\t\t* [topology](#topology)\n\t* [Defining custom types](#defining-custom-types)\n\n\n\n\n## Primitive built-in types\n\n### bool\n  * **Definition:** primitive datatype providing two values: `true` or `false`.\n  * **Litteral declaration:** both `true` or `false` are interpreted as boolean constants.\n  * **Other declarations:** expressions that require a boolean operand often directly apply a casting to bool to their operand. It is a convenient way to directly obtain a bool value.\n\n```\nbool (0) -> false\n```\n[Top of the page](#table-of-contents)\n\n[//]: # (keyword|type_float)\n### float\n  * **Definition:** primitive datatype holding floating point values, its absolute value is comprised between 4.9E-324 and 1.8E308.\n  * **Comments:** this datatype is internally backed up by the Java double datatype.\n  * **Litteral declaration:** decimal notation 123.45 or exponential notation 123e45 are supported.\n  * **Other declarations:** expressions that require an integer operand often directly apply a casting to float to their operand. Using it is a way to obtain a float constant.\n\n```\nfloat (12) -> 12.0\n```\n[Top of the page](#table-of-contents)\n\n[//]: # (keyword|type_int)\n### int\n  * **Definition:** primitive datatype holding integer values comprised between -2147483648 and 2147483647 (i.e. between `-2^31` and `2^31 - 1`.\n  * **Comments:** this datatype is internally backed up by the Java int datatype.\n  * **Litteral declaration:** decimal notation like 1, 256790 or hexadecimal notation like #1209FF are automatically interpreted.\n  * **Other declarations:** expressions that require an integer operand often directly apply a casting to int to their operand. Using it is a way to obtain an integer constant.\n\n```\nint (234.5) -> 234.\n```\n[Top of the page](#table-of-contents)\n\n[//]: # (keyword|type_string)\n### string\n  * **Definition:** a datatype holding a sequence of characters.\n  * **Comments:** this datatype is internally backed up by the Java String class. However, contrary to Java, strings are considered as a primitive type, which means they do not contain character objects. This can be seen when casting a string to a list using the list operator: the result is a list of one-character strings, not a list of characters.\n  * **Litteral declaration:** a sequence of characters enclosed in quotes, like 'this is a string' . If one wants to literally declare strings that contain quotes, one has to double these quotes in the declaration. Strings accept escape characters like `\\n` (newline), `\\r` (carriage return), `\\t` (tabulation), as well as any Unicode character (`\\uXXXX`).\n  * **Other declarations:** see string\n  * **Example:** see [string operators](Operators#strings-related-operators).\n\n[Top of the page](#table-of-contents)\n\n\n\n\n\n## Complex built-in types\n\nContrarily to primitive built-in types, complex types have often various attributes. They can be accessed in the same way as attributes of agents:\n```\ncomplex_type nom_var  [1]\n```\n```\nlist myList  3\n```\n[Top of the page](#table-of-contents)\n\n\n[//]: # (keyword|type_map)\n### map\n  * **Definition:** a composite datatype holding an ordered collection of pairs (a key, and its associated value).\n  * **Built-in attributes:**\n    * keys (type = list): the list of all keys\n    * values (type = list): the list of all values\n    * pairs (type = list of pairs): the list of all pairs key::value\n  * **Comments:** maps are more or less equivalent to instances of Hashtable in Java (although they are backed up by a specific class).\n  * **Remark:** maps can contain values of any datatypes, including other maps or lists. Maps are also a particular kind of container and can thus be manipulated using the container operators and commands.\n  * **Litteral declaration:** a set of pair expressions separated by commas, enclosed in square brackets; each pair is represented by a key and a value sperarated by '::'. An example of map is [agentA::'big', agentB::'small', agentC::'big']. An empty map is noted []().\n  * **Other declarations:** lists can be built litteraly from a point, or a string, or any other element by using the map casting operator.\n\n```\nmap (1) -> [1::1]\nmap ({1,5}) -> [x::1, y::5]\n[]   // empty map \n```\n[Top of the page](#table-of-contents)\n\n\n[//]: # (keyword|type_matrix)\n### matrix\n  * **Definition:** a composite datatype that represents either a two-dimension array (matrix) or a one-dimension array (vector), holding any type of data (including other matrices).\n  * **Comments:** Matrices are fixed-size structures that can be accessed by index (point for two-dimensions matrices, integer for vectors).\n  * **Litteral declaration:** Matrices cannot be defined literally. One-dimensions matrices can be built by using the matrix casting operator applied on a list. Two-dimensions matrices need to to be declared as variables first, before being filled.\n\n```\n//builds a one-dimension matrix, of size 5\nmatrix mat1  c11;c21\n       c12;c22\n       c13;c23\n```\n[Top of the page](#table-of-contents)\n\n\n[//]: # (keyword|type_pair)\n### pair\n  * **Definition:** a datatype holding a key and its associated value.\n  * **Built-in attributes:**\n    * key (type = string): the key of the pair, i.e. the first element of the pair\n    * value (type = string): the value of the pair, i.e. the second element of the pair\n  * **Remark:** pairs are also a particular kind of container and can thus be manipulated using the container operators and commands.\n  * **Litteral declaration:** a pair is defined by a key and a value sperarated by '::'.\n  * **Other declarations:** a pair can also be built from:\n    * a point,\n    * a map (in this case the first element of the pair is the list of all the keys of the map and the second element is the list of all the values of the map),\n    * a list (in this case the two first element of the list are used to built the pair)\n\n```\npair testPair  {12.0, 123.45} \npoint (2) -> {2.0, 2.0}\n```\n[Top of the page](#table-of-contents)\n\n[//]: # (keyword|type_rgb)\n### rgb\n  * **Definition:** a datatype that represents a color in the RGB space.\n  * **Built-in attributes:**\n    * red(type = int): the red component of the color\n    * green(type = int): the green component of the color\n    * blue(type = int): the blue component of the color\n    * darker(type = rgb): a new color that is a darker version of this color\n    * brighter(type = rgb): a new color that is a brighter version of this color\n  * **Remark:** rgbs are also a particular kind of container and can thus be manipulated using the container operators and commands.\n  * **Litteral declaration:** there exist lot of ways to declare a color. We use the `rgb` casting operator applied to:\n    * a string. The allowed color names are the constants defined in the Color Java class, i.e.: black, blue, cyan, darkGray, lightGray, gray, green, magenta, orange, pink, red, white, yellow.\n    * a list. The integer value associated to the three first elements of the list are used to define the three red (element 0 of the list), green (element 1 of the list) and blue (element 2 of the list) components of the color.\n    * a map. The red, green, blue compoenents take the value associated to the keys \"r\", \"g\", \"b\" in the map.\n    * an integer  {volume = 0.0};\n    action fill {\n         volume ","url":"wiki/DataTypes.md"},{"id":"wiki/ExperimentBuiltIn.md","title":" The 'experiment' built-in species (Under Construction)","content":"# The 'experiment' built-in species (Under Construction)\n\n\n\nAs described in the [presentation of GAML](Introduction), any experiment attached to a model is a species (introduced by the keyword `experiment` which directly or indirectly inherits from an abstract species called `experiment` itself. This abstract species (sub-species of `agent`) defines several attributes and actions that can then be used in any experiment.\n\n\n\n\n\n\n## `experiment` attributes\n`experiment` defines several attributes, which, in addition to the attributes inherited from [`agent`](AgentBuiltIn), form the minimal set of knowledge any experiment will have access to.\n \n\n\n## `experiment` actions","url":"wiki/ExperimentBuiltIn.md"},{"id":"wiki/Expressions.md","title":" Expressions","content":"# Expressions\n\n\n\nExpressions in GAML are the value part of the [statements](Statements)' facets. They represent or compute data that will be used as the value of the facet when the statement will be executed.\n\nAn expression can be either a [literal](Literals), a [unit](UnitsAndConstants), a [constant](UnitsAndConstants), a [variable](PseudoVariables), an [attribute](VariablesAndAttributes) or the application of one or several [operators](Operators) to compose a complex expression.","url":"wiki/Expressions.md"},{"id":"wiki/FileTypes.md","title":" File Types","content":"[//]: # (startConcept|load_complex_datas)\n# File Types\n\n\nGAMA provides modelers with a generic type for files called **file**. It is possible to load a file using the _file_ operator:\n\n```\nfile my_file  osmfile ","url":"wiki/FileTypes.md"},{"id":"wiki/Literals.md","title":" Literals","content":"# Literals\n\n\n\n_(some literal expressions are also described in [data types](DataTypes))_\n\nA literal is a way to specify an unnamed constant value corresponding to a given data type. GAML supports various types of literals for often — or less often — used data types.\n\n## Table of contents \n\n* [Literals](#literals)\n\t* [Simple Types](#simple-types)\n\t* [Literal Constructors](#literal-constructors)\n\t* [Universal Literal](#universal-literal)\n\n\n\n\n## Simple Types\nValues of simple (i.e. not composed) types can all be expressed using literal expressions. Namely:\n\n  * **bool**: `true` and `false`.\n  * **int**: decimal value, such as `100`, or hexadecimal value if preceded by `'#'` (e.g. `#AAAAAA`, which returns the int `11184810`)\n  * **float**: the value in plain digits, using `'.'` for the decimal point (e.g. `123.297`)\n  * **string**: a sequence of characters enclosed between quotes (`'my string'`) or double quotes (`\"my string\"`)\n\n\n\n\n## Literal Constructors\nAlthough they are not strictly literals in the sense given above, some special constructs (called _literal constructors_) allow the modeler to declare constants of other data types. They are actually [operators](Operators) but can be thought of literals when used with constant operands.\n\n  * **pair**: the key and the value separated by `::` (e.g. `12::'abc'`)\n  * **list**: the elements, separated by commas, enclosed inside square brackets (e.g. `[12,15,15]`)\n  * **map**: a list of pairs (e.g. `[12::'abc', 13::'def']`)\n  * **point**: 2 or 3 int or float ordinates enclosed inside curly brackets (e.g. `{10.0,10.0,10.0}`)\n\n\n\n[//]: # (keyword|concept_nil)\n## Universal Literal\nFinally, a special literal, of type `unknown`, is shared between the data types and all the agent types (aka species). Only `bool`, `int` and `float`, which do not derive from `unknown`, do not accept this literal. All the others will accept it (e.g. `string s ","url":"wiki/Literals.md"},{"id":"wiki/ModelBuiltIn.md","title":" The 'model' built-in species (Under Construction)","content":"# The 'model' built-in species (Under Construction)\n\n\n\nAs described in the [presentation of GAML](Introduction), any model in GAMA is a species (introduced by the keyword [`global`](GlobalSpecies)) which directly inherits from an abstract species called `model`. This abstract species (sub-species of [`agent`](AgentBuiltIn)) defines several attributes and actions that can then be used in any global section of any model.\n\n\n\n## `model` attributes\n`model` defines several attributes, which, in addition to the attributes inherited from [`agent`](AgentBuiltIn), form the minimal set of knowledge a model can manipulate.\n  * \n\n\n## `model` actions","url":"wiki/ModelBuiltIn.md"},{"id":"wiki/Operators.md","title":" Operators ","content":"# Operators \n \t\n----\n\n**This file is automatically generated from java files. Do Not Edit It.**\n\n----\n\n## Definition\n\nOperators in the GAML language are used to compose complex expressions. An operator performs a function on one, two, or n operands (which are other expressions and thus may be themselves composed of operators) and returns the result of this function. \n\nMost of them use a classical prefixed functional syntax (i.e. `operator_name(operand1, operand2, operand3)`, see below), with the exception of arithmetic (e.g. `+`, `/`), logical (`and`, `or`), comparison (e.g. `>`, ` b :: b > c` will return a pair of boolean values, which means that the two comparisons are evaluated before the operator applies. Similarly, `[a > 10, b > 5]` will return a list of boolean values.\n* it is followed by the `?:` operator, the functional if-else (e.g. ` a > b ? a + 10 : a - 10` will return the result of the if-else).\n* next are the logical operators, `and` and `or` (e.g. `a > b or b > c` will return the value of the test)\n* next are the comparison operators (i.e. `>`, `=`, `=`, `!=`)\n* next the arithmetic operators in their logical order (multiplicative operators have a higher priority than additive operators)\n* next the unary operators `-` and `!`\n* next the access operators `.` and `[]` (e.g. `{1,2,3}.x > 20 + {4,5,6}.y` will return the result of the comparison between the x and y ordinates of the two points)\n* and finally the functional operators, which have the highest priority of all.\n\n----\n\n## Using actions as operators\n\nActions defined in species can be used as operators, provided they are called on the correct agent. The syntax is that of normal functional operators, but the agent that will perform the action must be added as the first operand.\n\nFor instance, if the following species is defined:\n\n```\nspecies spec1 {\n        int min(int x, int y) {\n                return x > y ? x : y;\n        }\n}\n```\n\nAny agent instance of spec1 can use `min` as an operator (if the action conflicts with an existing operator, a warning will be emitted). For instance, in the same model, the following line is perfectly acceptable:\n\n```\nglobal {\n        init {\n                create spec1;\n                spec1 my_agent ](#>), [>=](#>=), [between](#between), \n\n----\n\n### Containers-related operators\n[-](#-), [::](#::), [+](#+), [accumulate](#accumulate), [among](#among), [at](#at), [collect](#collect), [contains](#contains), [contains_all](#contains_all), [contains_any](#contains_any), [count](#count), [distinct](#distinct), [empty](#empty), [every](#every), [first](#first), [first_with](#first_with), [get](#get), [group_by](#group_by), [in](#in), [index_by](#index_by), [inter](#inter), [interleave](#interleave), [internal_at](#internal_at), [internal_integrated_value](#internal_integrated_value), [last](#last), [last_with](#last_with), [length](#length), [max](#max), [max_of](#max_of), [mean](#mean), [mean_of](#mean_of), [median](#median), [min](#min), [min_of](#min_of), [mul](#mul), [one_of](#one_of), [product_of](#product_of), [range](#range), [reverse](#reverse), [shuffle](#shuffle), [sort_by](#sort_by), [sum](#sum), [sum_of](#sum_of), [union](#union), [variance_of](#variance_of), [where](#where), [with_max_of](#with_max_of), [with_min_of](#with_min_of), \n\n----\n\n### Date-related operators\n[-](#-), [!=](#!=), [+](#+), [](#>), [>=](#>=), [after](#after), [before](#before), [between](#between), [every](#every), [milliseconds_between](#milliseconds_between), [minus_days](#minus_days), [minus_hours](#minus_hours), [minus_minutes](#minus_minutes), [minus_months](#minus_months), [minus_ms](#minus_ms), [minus_weeks](#minus_weeks), [minus_years](#minus_years), [months_between](#months_between), [plus_days](#plus_days), [plus_hours](#plus_hours), [plus_minutes](#plus_minutes), [plus_months](#plus_months), [plus_ms](#plus_ms), [plus_weeks](#plus_weeks), [plus_years](#plus_years), [since](#since), [to](#to), [until](#until), [years_between](#years_between), \n\n----\n\n### Dates\n\n\n----\n\n### Driving operators\n[as_driving_graph](#as_driving_graph), \n\n----\n\n### edge\n[edge_between](#edge_between), \n\n----\n\n### EDP-related operators\n[diff](#diff), [diff2](#diff2), [internal_zero_order_equation](#internal_zero_order_equation), \n\n----\n\n### Files-related operators\n[crs](#crs), [file](#file), [file_exists](#file_exists), [folder](#folder), [get](#get), [new_folder](#new_folder), [osm_file](#osm_file), [read](#read), [writable](#writable), \n\n----\n\n### FIPA-related operators\n[conversation](#conversation), [message](#message), \n\n----\n\n### Graphs-related operators\n[add_edge](#add_edge), [add_node](#add_node), [adjacency](#adjacency), [agent_from_geometry](#agent_from_geometry), [all_pairs_shortest_path](#all_pairs_shortest_path), [alpha_index](#alpha_index), [as_distance_graph](#as_distance_graph), [as_edge_graph](#as_edge_graph), [as_intersection_graph](#as_intersection_graph), [as_path](#as_path), [beta_index](#beta_index), [betweenness_centrality](#betweenness_centrality), [biggest_cliques_of](#biggest_cliques_of), [connected_components_of](#connected_components_of), [connectivity_index](#connectivity_index), [contains_edge](#contains_edge), [contains_vertex](#contains_vertex), [degree_of](#degree_of), [directed](#directed), [edge](#edge), [edge_between](#edge_between), [edge_betweenness](#edge_betweenness), [edges](#edges), [gamma_index](#gamma_index), [generate_barabasi_albert](#generate_barabasi_albert), [generate_complete_graph](#generate_complete_graph), [generate_watts_strogatz](#generate_watts_strogatz), [grid_cells_to_graph](#grid_cells_to_graph), [in_degree_of](#in_degree_of), [in_edges_of](#in_edges_of), [layout](#layout), [load_graph_from_file](#load_graph_from_file), [load_shortest_paths](#load_shortest_paths), [maximal_cliques_of](#maximal_cliques_of), [nb_cycles](#nb_cycles), [neighbors_of](#neighbors_of), [node](#node), [nodes](#nodes), [out_degree_of](#out_degree_of), [out_edges_of](#out_edges_of), [path_between](#path_between), [paths_between](#paths_between), [predecessors_of](#predecessors_of), [remove_node_from](#remove_node_from), [rewire_n](#rewire_n), [source_of](#source_of), [spatial_graph](#spatial_graph), [successors_of](#successors_of), [sum](#sum), [target_of](#target_of), [undirected](#undirected), [use_cache](#use_cache), [weight_of](#weight_of), [with_optimizer_type](#with_optimizer_type), [with_weights](#with_weights), \n\n----\n\n### Grid-related operators\n[as_4_grid](#as_4_grid), [as_grid](#as_grid), [as_hexagonal_grid](#as_hexagonal_grid), [grid_at](#grid_at), [path_between](#path_between), \n\n----\n\n### Iterator operators\n[accumulate](#accumulate), [as_map](#as_map), [collect](#collect), [count](#count), [distribution_of](#distribution_of), [distribution_of](#distribution_of), [distribution_of](#distribution_of), [distribution2d_of](#distribution2d_of), [distribution2d_of](#distribution2d_of), [distribution2d_of](#distribution2d_of), [first_with](#first_with), [frequency_of](#frequency_of), [group_by](#group_by), [index_by](#index_by), [last_with](#last_with), [max_of](#max_of), [mean_of](#mean_of), [min_of](#min_of), [product_of](#product_of), [sort_by](#sort_by), [sum_of](#sum_of), [variance_of](#variance_of), [where](#where), [with_max_of](#with_max_of), [with_min_of](#with_min_of), \n\n----\n\n### List-related operators\n[copy_between](#copy_between), [index_of](#index_of), [last_index_of](#last_index_of), \n\n----\n\n### Logical operators\n[:](#:), [!](#!), [?](#?), [and](#and), [or](#or), \n\n----\n\n### Map comparaison operators\n[fuzzy_kappa](#fuzzy_kappa), [fuzzy_kappa_sim](#fuzzy_kappa_sim), [kappa](#kappa), [kappa_sim](#kappa_sim), [percent_absolute_deviation](#percent_absolute_deviation), \n\n----\n\n### Map-related operators\n[as_map](#as_map), [index_of](#index_of), [last_index_of](#last_index_of), \n\n----\n\n### Material\n[material](#material), \n\n----\n\n### Matrix-related operators\n[-](#-), [/](#/), [.](#.), [*](#*), [+](#+), [append_horizontally](#append_horizontally), [append_vertically](#append_vertically), [column_at](#column_at), [columns_list](#columns_list), [determinant](#determinant), [eigenvalues](#eigenvalues), [index_of](#index_of), [inverse](#inverse), [last_index_of](#last_index_of), [row_at](#row_at), [rows_list](#rows_list), [shuffle](#shuffle), [trace](#trace), [transpose](#transpose), \n\n----\n\n### multicriteria operators\n[electre_DM](#electre_dm), [evidence_theory_DM](#evidence_theory_dm), [promethee_DM](#promethee_dm), [weighted_means_DM](#weighted_means_dm), \n\n----\n\n### Path-related operators\n[agent_from_geometry](#agent_from_geometry), [all_pairs_shortest_path](#all_pairs_shortest_path), [as_path](#as_path), [load_shortest_paths](#load_shortest_paths), [path_between](#path_between), [path_to](#path_to), [paths_between](#paths_between), [use_cache](#use_cache), \n\n----\n\n### Points-related operators\n[-](#-), [/](#/), [*](#*), [+](#+), [](#>), [>=](#>=), [add_point](#add_point), [angle_between](#angle_between), [any_location_in](#any_location_in), [centroid](#centroid), [closest_points_with](#closest_points_with), [farthest_point_to](#farthest_point_to), [grid_at](#grid_at), [norm](#norm), [point](#point), [points_along](#points_along), [points_at](#points_at), [points_on](#points_on), \n\n----\n\n### Random operators\n[binomial](#binomial), [flip](#flip), [gauss](#gauss), [poisson](#poisson), [rnd](#rnd), [rnd_choice](#rnd_choice), [sample](#sample), [shuffle](#shuffle), [skew_gauss](#skew_gauss), [truncated_gauss](#truncated_gauss), \n\n----\n\n### ReverseOperators\n\n\n----\n\n### Shape\n[arc](#arc), [box](#box), [circle](#circle), [cone](#cone), [cone3D](#cone3d), [cross](#cross), [cube](#cube), [curve](#curve), [cylinder](#cylinder), [ellipse](#ellipse), [envelope](#envelope), [geometry_collection](#geometry_collection), [hexagon](#hexagon), [line](#line), [link](#link), [plan](#plan), [polygon](#polygon), [polyhedron](#polyhedron), [pyramid](#pyramid), [rectangle](#rectangle), [sphere](#sphere), [square](#square), [squircle](#squircle), [teapot](#teapot), [triangle](#triangle), \n\n----\n\n### Spatial operators\n[-](#-), [*](#*), [+](#+), [add_point](#add_point), [agent_closest_to](#agent_closest_to), [agent_farthest_to](#agent_farthest_to), [agents_at_distance](#agents_at_distance), [agents_inside](#agents_inside), [agents_overlapping](#agents_overlapping), [angle_between](#angle_between), [any_location_in](#any_location_in), [arc](#arc), [around](#around), [as_4_grid](#as_4_grid), [as_grid](#as_grid), [as_hexagonal_grid](#as_hexagonal_grid), [at_distance](#at_distance), [at_location](#at_location), [box](#box), [centroid](#centroid), [circle](#circle), [clean](#clean), [closest_points_with](#closest_points_with), [closest_to](#closest_to), [cone](#cone), [cone3D](#cone3d), [convex_hull](#convex_hull), [covers](#covers), [cross](#cross), [crosses](#crosses), [crs](#crs), [CRS_transform](#crs_transform), [cube](#cube), [curve](#curve), [cylinder](#cylinder), [dem](#dem), [direction_between](#direction_between), [disjoint_from](#disjoint_from), [distance_between](#distance_between), [distance_to](#distance_to), [ellipse](#ellipse), [envelope](#envelope), [farthest_point_to](#farthest_point_to), [farthest_to](#farthest_to), [geometry_collection](#geometry_collection), [gini](#gini), [hexagon](#hexagon), [hierarchical_clustering](#hierarchical_clustering), [IDW](#idw), [inside](#inside), [inter](#inter), [intersects](#intersects), [line](#line), [link](#link), [masked_by](#masked_by), [moran](#moran), [neighbors_at](#neighbors_at), [neighbors_of](#neighbors_of), [overlapping](#overlapping), [overlaps](#overlaps), [partially_overlaps](#partially_overlaps), [path_between](#path_between), [path_to](#path_to), [plan](#plan), [points_along](#points_along), [points_at](#points_at), [points_on](#points_on), [polygon](#polygon), [polyhedron](#polyhedron), [pyramid](#pyramid), [rectangle](#rectangle), [rgb_to_xyz](#rgb_to_xyz), [rotated_by](#rotated_by), [round](#round), [scaled_to](#scaled_to), [set_z](#set_z), [simple_clustering_by_distance](#simple_clustering_by_distance), [simplification](#simplification), [skeletonize](#skeletonize), [smooth](#smooth), [sphere](#sphere), [split_at](#split_at), [split_geometry](#split_geometry), [split_lines](#split_lines), [square](#square), [squircle](#squircle), [teapot](#teapot), [to_GAMA_CRS](#to_gama_crs), [to_rectangles](#to_rectangles), [to_squares](#to_squares), [touches](#touches), [towards](#towards), [transformed_by](#transformed_by), [translated_by](#translated_by), [triangle](#triangle), [triangulate](#triangulate), [union](#union), [using](#using), [voronoi](#voronoi), [with_precision](#with_precision), [without_holes](#without_holes), \n\n----\n\n### Spatial properties operators\n[covers](#covers), [crosses](#crosses), [intersects](#intersects), [partially_overlaps](#partially_overlaps), [touches](#touches), \n\n----\n\n### Spatial queries operators\n[agent_closest_to](#agent_closest_to), [agent_farthest_to](#agent_farthest_to), [agents_at_distance](#agents_at_distance), [agents_inside](#agents_inside), [agents_overlapping](#agents_overlapping), [at_distance](#at_distance), [closest_to](#closest_to), [farthest_to](#farthest_to), [inside](#inside), [neighbors_at](#neighbors_at), [neighbors_of](#neighbors_of), [overlapping](#overlapping), \n\n----\n\n### Spatial relations operators\n[direction_between](#direction_between), [distance_between](#distance_between), [distance_to](#distance_to), [path_between](#path_between), [path_to](#path_to), [towards](#towards), \n\n----\n\n### Spatial statistical operators\n[hierarchical_clustering](#hierarchical_clustering), [simple_clustering_by_distance](#simple_clustering_by_distance), \n\n----\n\n### Spatial transformations operators\n[-](#-), [*](#*), [+](#+), [as_4_grid](#as_4_grid), [as_grid](#as_grid), [as_hexagonal_grid](#as_hexagonal_grid), [at_location](#at_location), [clean](#clean), [convex_hull](#convex_hull), [CRS_transform](#crs_transform), [rotated_by](#rotated_by), [scaled_to](#scaled_to), [simplification](#simplification), [skeletonize](#skeletonize), [smooth](#smooth), [split_geometry](#split_geometry), [split_lines](#split_lines), [to_GAMA_CRS](#to_gama_crs), [to_rectangles](#to_rectangles), [to_squares](#to_squares), [transformed_by](#transformed_by), [translated_by](#translated_by), [triangulate](#triangulate), [voronoi](#voronoi), [without_holes](#without_holes), \n\n----\n\n### Species-related operators\n[index_of](#index_of), [last_index_of](#last_index_of), [of_generic_species](#of_generic_species), [of_species](#of_species), \n\n----\n\n### Statistical operators\n[build](#build), [corR](#corr), [dbscan](#dbscan), [distribution_of](#distribution_of), [distribution2d_of](#distribution2d_of), [frequency_of](#frequency_of), [gamma_rnd](#gamma_rnd), [geometric_mean](#geometric_mean), [gini](#gini), [harmonic_mean](#harmonic_mean), [hierarchical_clustering](#hierarchical_clustering), [kmeans](#kmeans), [kurtosis](#kurtosis), [max](#max), [mean](#mean), [mean_deviation](#mean_deviation), [meanR](#meanr), [median](#median), [min](#min), [moran](#moran), [mul](#mul), [predict](#predict), [simple_clustering_by_distance](#simple_clustering_by_distance), [skewness](#skewness), [standard_deviation](#standard_deviation), [sum](#sum), [variance](#variance), \n\n----\n\n### Strings-related operators\n[+](#+), [](#>), [>=](#>=), [at](#at), [char](#char), [contains](#contains), [contains_all](#contains_all), [contains_any](#contains_any), [copy_between](#copy_between), [date](#date), [empty](#empty), [first](#first), [in](#in), [indented_by](#indented_by), [index_of](#index_of), [is_number](#is_number), [last](#last), [last_index_of](#last_index_of), [length](#length), [lower_case](#lower_case), [replace](#replace), [replace_regex](#replace_regex), [reverse](#reverse), [sample](#sample), [shuffle](#shuffle), [split_with](#split_with), [string](#string), [upper_case](#upper_case), \n\n----\n\n### System\n[.](#.), [command](#command), [copy](#copy), [dead](#dead), [eval_gaml](#eval_gaml), [every](#every), [user_input](#user_input), \n\n----\n\n### Time-related operators\n[date](#date), [string](#string), \n\n----\n\n### Types-related operators\n\n\n----\n\n### User control operators\n[user_input](#user_input), \n\t\n----\n\n## Operators\n\t\n    \t\n----\n\n\n[//]: # (keyword|operator_-)\n### `-`\n\n#### Possible use: \n  *  **`-`** (`int`) --->  `int`\n  *  **`-`** (`point`) --->  `point`\n  *  **`-`** (`float`) --->  `float`\n  * `int` **`-`** `float` --->  `float`\n  *  **`-`** (`int` , `float`) --->  `float`\n  * `int` **`-`** `int` --->  `int`\n  *  **`-`** (`int` , `int`) --->  `int`\n  * `matrix` **`-`** `float` --->  `matrix`\n  *  **`-`** (`matrix` , `float`) --->  `matrix`\n  * `float` **`-`** `matrix` --->  `matrix`\n  *  **`-`** (`float` , `matrix`) --->  `matrix`\n  * `date` **`-`** `float` --->  `date`\n  *  **`-`** (`date` , `float`) --->  `date`\n  * `species` **`-`** `agent` --->  `container`\n  *  **`-`** (`species` , `agent`) --->  `container`\n  * `date` **`-`** `date` --->  `float`\n  *  **`-`** (`date` , `date`) --->  `float`\n  * `matrix` **`-`** `matrix` --->  `matrix`\n  *  **`-`** (`matrix` , `matrix`) --->  `matrix`\n  * `point` **`-`** `int` --->  `point`\n  *  **`-`** (`point` , `int`) --->  `point`\n  * `date` **`-`** `int` --->  `date`\n  *  **`-`** (`date` , `int`) --->  `date`\n  * `point` **`-`** `float` --->  `point`\n  *  **`-`** (`point` , `float`) --->  `point`\n  * `float` **`-`** `float` --->  `float`\n  *  **`-`** (`float` , `float`) --->  `float`\n  * `rgb` **`-`** `rgb` --->  `rgb`\n  *  **`-`** (`rgb` , `rgb`) --->  `rgb`\n  * `int` **`-`** `matrix` --->  `matrix`\n  *  **`-`** (`int` , `matrix`) --->  `matrix`\n  * `container` **`-`** `container` --->  `container`\n  *  **`-`** (`container` , `container`) --->  `container`\n  * `rgb` **`-`** `int` --->  `rgb`\n  *  **`-`** (`rgb` , `int`) --->  `rgb`\n  * `container` **`-`** `unknown` --->  `container`\n  *  **`-`** (`container` , `unknown`) --->  `container`\n  * `point` **`-`** `point` --->  `point`\n  *  **`-`** (`point` , `point`) --->  `point`\n  * `float` **`-`** `int` --->  `float`\n  *  **`-`** (`float` , `int`) --->  `float`\n  * `geometry` **`-`** `geometry` --->  `geometry`\n  *  **`-`** (`geometry` , `geometry`) --->  `geometry`\n  * `matrix` **`-`** `int` --->  `matrix`\n  *  **`-`** (`matrix` , `int`) --->  `matrix`\n  * `geometry` **`-`** `float` --->  `geometry`\n  *  **`-`** (`geometry` , `float`) --->  `geometry`\n  * `map` **`-`** `map` --->  `map`\n  *  **`-`** (`map` , `map`) --->  `map`\n  * `map` **`-`** `pair` --->  `map`\n  *  **`-`** (`map` , `pair`) --->  `map`\n  * `geometry` **`-`** `container` --->  `geometry`\n  *  **`-`** (`geometry` , `container`) --->  `geometry` \n\n#### Result: \nReturns the difference of the two operands.\nIf it is used as an unary operator, it returns the opposite of the operand.  \n\n#### Comment: \nThe behavior of the operator depends on the type of the operands.\n\n#### Special cases:     \n  * if the left operand is a species and the right operand is an agent of the species, - returns a list containing all the agents of the species minus this agent    \n  * if both operands are containers and the right operand is empty, - returns the left operand    \n  * if both operands are numbers, performs a normal arithmetic difference and returns a float if one of them is a float. \n  \n```\nint var7  var17  var18  var20  var21   `unknown`\n  *  **`:`** (`unknown` , `unknown`) --->  `unknown`    \n\n#### See also: \n[?](#?), \n    \t\n----\n\n\n[//]: # (keyword|operator_::)\n### `::`\n\n#### Possible use: \n  * `any expression` **`::`** `any expression` --->  `pair`\n  *  **`::`** (`any expression` , `any expression`) --->  `pair` \n\n#### Result: \nproduces a new pair combining the left and the right operands\n\n#### Special cases:     \n  * nil is not acceptable as a key (although it is as a value). If such a case happens, :: will throw an appropriate error\n    \t\n----\n\n\n[//]: # (keyword|operator_!)\n### `!`\n\n#### Possible use: \n  *  **`!`** (`bool`) --->  `bool` \n\n#### Result: \nopposite boolean value.\n\n#### Special cases:     \n  * if the parameter is not boolean, it is casted to a boolean value.\n\n#### Examples: \n```\nbool var0   `bool`\n  *  **`!=`** (`float` , `float`) --->  `bool`\n  * `unknown` **`!=`** `unknown` --->  `bool`\n  *  **`!=`** (`unknown` , `unknown`) --->  `bool`\n  * `date` **`!=`** `date` --->  `bool`\n  *  **`!=`** (`date` , `date`) --->  `bool`\n  * `float` **`!=`** `int` --->  `bool`\n  *  **`!=`** (`float` , `int`) --->  `bool`\n  * `int` **`!=`** `float` --->  `bool`\n  *  **`!=`** (`int` , `float`) --->  `bool` \n\n#### Result: \ntrue if both operands are different, false otherwise\n\n#### Examples: \n```\nbool var0 ](#>), [=](#>=), [<=](#<=), \n    \t\n----\n\n\n[//]: # (keyword|operator_?)\n### `?`\n\n#### Possible use: \n  * `bool` **`?`** `any expression` --->  `unknown`\n  *  **`?`** (`bool` , `any expression`) --->  `unknown` \n\n#### Result: \nIt is used in combination with the : operator: if the left-hand operand evaluates to true, returns the value of the left-hand operand of the :, otherwise that of the right-hand operand of the :  \n\n#### Comment: \nThese functional tests can be combined together.\n\n#### Examples: \n```\nlist var0  20) ? 'above' : 'below'); \t// var0 equals ['below', 'below', 'above', 'below', 'below', 'above']\nrgb color   `rgb`\n  *  **`/`** (`rgb` , `float`) --->  `rgb`\n  * `float` **`/`** `int` --->  `float`\n  *  **`/`** (`float` , `int`) --->  `float`\n  * `point` **`/`** `float` --->  `point`\n  *  **`/`** (`point` , `float`) --->  `point`\n  * `int` **`/`** `int` --->  `float`\n  *  **`/`** (`int` , `int`) --->  `float`\n  * `int` **`/`** `float` --->  `float`\n  *  **`/`** (`int` , `float`) --->  `float`\n  * `matrix` **`/`** `float` --->  `matrix`\n  *  **`/`** (`matrix` , `float`) --->  `matrix`\n  * `point` **`/`** `int` --->  `point`\n  *  **`/`** (`point` , `int`) --->  `point`\n  * `matrix` **`/`** `matrix` --->  `matrix`\n  *  **`/`** (`matrix` , `matrix`) --->  `matrix`\n  * `matrix` **`/`** `int` --->  `matrix`\n  *  **`/`** (`matrix` , `int`) --->  `matrix`\n  * `float` **`/`** `float` --->  `float`\n  *  **`/`** (`float` , `float`) --->  `float`\n  * `rgb` **`/`** `int` --->  `rgb`\n  *  **`/`** (`rgb` , `int`) --->  `rgb` \n\n#### Result: \nReturns the division of the two operands.\n\n#### Special cases:     \n  * if the right-hand operand is equal to zero, raises a \"Division by zero\" exception    \n  * if one operand is a color and the other a double, returns a new color resulting from the division of each component of the color by the right operand. The result on each component is then truncated. \n  \n```\nrgb var0   `matrix`\n  *  **`.`** (`matrix` , `matrix`) --->  `matrix`\n  * `agent` **`.`** `any expression` --->  `unknown`\n  *  **`.`** (`agent` , `any expression`) --->  `unknown` \n\n#### Result: \nIt has two different uses: it can be the dot product between 2 matrices or return an evaluation of the expression (right-hand operand) in the scope the given agent.\n\n#### Special cases:     \n  * if the agent is nil or dead, throws an exception    \n  * if both operands are matrix, returns the dot product of them \n  \n```\nmatrix var0   `float`\n  *  **`^`** (`int` , `float`) --->  `float`\n  * `float` **`^`** `float` --->  `float`\n  *  **`^`** (`float` , `float`) --->  `float`\n  * `int` **`^`** `int` --->  `float`\n  *  **`^`** (`int` , `int`) --->  `float`\n  * `float` **`^`** `int` --->  `float`\n  *  **`^`** (`float` , `int`) --->  `float` \n\n#### Result: \nReturns the value (always a float) of the left operand raised to the power of the right operand.\n\n#### Special cases:     \n  * if the right-hand operand is equal to 0, returns 1    \n  * if it is equal to 1, returns the left-hand operand.    \n  * Various examples of power \n  \n```\nfloat var1   `int`\n  *  **`*`** (`int` , `int`) --->  `int`\n  * `matrix` **`*`** `int` --->  `matrix`\n  *  **`*`** (`matrix` , `int`) --->  `matrix`\n  * `point` **`*`** `point` --->  `float`\n  *  **`*`** (`point` , `point`) --->  `float`\n  * `int` **`*`** `float` --->  `float`\n  *  **`*`** (`int` , `float`) --->  `float`\n  * `float` **`*`** `float` --->  `float`\n  *  **`*`** (`float` , `float`) --->  `float`\n  * `matrix` **`*`** `matrix` --->  `matrix`\n  *  **`*`** (`matrix` , `matrix`) --->  `matrix`\n  * `point` **`*`** `int` --->  `point`\n  *  **`*`** (`point` , `int`) --->  `point`\n  * `float` **`*`** `matrix` --->  `matrix`\n  *  **`*`** (`float` , `matrix`) --->  `matrix`\n  * `geometry` **`*`** `point` --->  `geometry`\n  *  **`*`** (`geometry` , `point`) --->  `geometry`\n  * `point` **`*`** `float` --->  `point`\n  *  **`*`** (`point` , `float`) --->  `point`\n  * `int` **`*`** `matrix` --->  `matrix`\n  *  **`*`** (`int` , `matrix`) --->  `matrix`\n  * `float` **`*`** `int` --->  `float`\n  *  **`*`** (`float` , `int`) --->  `float`\n  * `rgb` **`*`** `int` --->  `rgb`\n  *  **`*`** (`rgb` , `int`) --->  `rgb`\n  * `matrix` **`*`** `float` --->  `matrix`\n  *  **`*`** (`matrix` , `float`) --->  `matrix`\n  * `geometry` **`*`** `float` --->  `geometry`\n  *  **`*`** (`geometry` , `float`) --->  `geometry` \n\n#### Result: \nReturns the product of the two operands.\n\n#### Special cases:     \n  * if both operands are numbers (float or int), performs a normal arithmetic product and returns a float if one of them is a float. \n  \n```\nint var1  m   `string`\n  *  **`+`** (`string` , `string`) --->  `string`\n  * `date` **`+`** `float` --->  `date`\n  *  **`+`** (`date` , `float`) --->  `date`\n  * `map` **`+`** `pair` --->  `map`\n  *  **`+`** (`map` , `pair`) --->  `map`\n  * `int` **`+`** `matrix` --->  `matrix`\n  *  **`+`** (`int` , `matrix`) --->  `matrix`\n  * `point` **`+`** `int` --->  `point`\n  *  **`+`** (`point` , `int`) --->  `point`\n  * `rgb` **`+`** `rgb` --->  `rgb`\n  *  **`+`** (`rgb` , `rgb`) --->  `rgb`\n  * `geometry` **`+`** `float` --->  `geometry`\n  *  **`+`** (`geometry` , `float`) --->  `geometry`\n  * `matrix` **`+`** `float` --->  `matrix`\n  *  **`+`** (`matrix` , `float`) --->  `matrix`\n  * `geometry` **`+`** `geometry` --->  `geometry`\n  *  **`+`** (`geometry` , `geometry`) --->  `geometry`\n  * `map` **`+`** `map` --->  `map`\n  *  **`+`** (`map` , `map`) --->  `map`\n  * `float` **`+`** `float` --->  `float`\n  *  **`+`** (`float` , `float`) --->  `float`\n  * `float` **`+`** `int` --->  `float`\n  *  **`+`** (`float` , `int`) --->  `float`\n  * `matrix` **`+`** `matrix` --->  `matrix`\n  *  **`+`** (`matrix` , `matrix`) --->  `matrix`\n  * `date` **`+`** `string` --->  `string`\n  *  **`+`** (`date` , `string`) --->  `string`\n  * `matrix` **`+`** `int` --->  `matrix`\n  *  **`+`** (`matrix` , `int`) --->  `matrix`\n  * `int` **`+`** `int` --->  `int`\n  *  **`+`** (`int` , `int`) --->  `int`\n  * `string` **`+`** `unknown` --->  `string`\n  *  **`+`** (`string` , `unknown`) --->  `string`\n  * `point` **`+`** `point` --->  `point`\n  *  **`+`** (`point` , `point`) --->  `point`\n  * `float` **`+`** `matrix` --->  `matrix`\n  *  **`+`** (`float` , `matrix`) --->  `matrix`\n  * `int` **`+`** `float` --->  `float`\n  *  **`+`** (`int` , `float`) --->  `float`\n  * `point` **`+`** `float` --->  `point`\n  *  **`+`** (`point` , `float`) --->  `point`\n  * `rgb` **`+`** `int` --->  `rgb`\n  *  **`+`** (`rgb` , `int`) --->  `rgb`\n  * `date` **`+`** `int` --->  `date`\n  *  **`+`** (`date` , `int`) --->  `date`\n  * `container` **`+`** `container` --->  `container`\n  *  **`+`** (`container` , `container`) --->  `container`\n  * `container` **`+`** `unknown` --->  `container`\n  *  **`+`** (`container` , `unknown`) --->  `container`\n  *  **`+`** (`geometry`, `float`, `int`) --->  `geometry`\n  *  **`+`** (`geometry`, `float`, `int`, `int`) --->  `geometry` \n\n#### Result: \nReturns the sum, union or concatenation of the two operands.\n\n#### Special cases:     \n  * if one of the operands is nil, + throws an error    \n  * if both operands are species, returns a special type of list called meta-population    \n  * if the left-hand operand is a geometry and the right-hand operands a float and an integer, returns a geometry corresponding to the left-hand operand (geometry, agent, point) enlarged by the first right-hand operand (distance), using a number of segments equal to the second right-hand operand \n  \n```\ngeometry var4  var19  var20  var21  var22   `bool`\n  *  **`  `bool`\n  * `int` **`  `bool`\n  *  **`  `bool`\n  * `point` **`  `bool`\n  *  **`  `bool`\n  * `int` **`  `bool`\n  *  **`  `bool`\n  * `date` **`  `bool`\n  *  **`  `bool`\n  * `float` **`  `bool`\n  *  **`  `bool`\n  * `string` **`  `bool`\n  *  **`  `bool` \n\n#### Result: \ntrue if the left-hand operand is less than the right-hand operand, false otherwise.\n\n#### Special cases:     \n  * if one of the operands is nil, returns false    \n  * if both operands are points, returns true if and only if the left component (x) of the left operand if less than or equal to x of the right one and if the right component (y) of the left operand is greater than or equal to y of the right one. \n  \n```\nbool var5 ](#>), [>=](#>=), [<=](#<=), [=](#=), [!=](#!=), \n    \t\n----\n\n\n[//]: # (keyword|operator_<=)\n### `<=`\n\n#### Possible use: \n  * `string` **`<=`** `string` --->  `bool`\n  *  **`<=`** (`string` , `string`) --->  `bool`\n  * `date` **`<=`** `date` --->  `bool`\n  *  **`<=`** (`date` , `date`) --->  `bool`\n  * `float` **`<=`** `float` --->  `bool`\n  *  **`<=`** (`float` , `float`) --->  `bool`\n  * `int` **`<=`** `int` --->  `bool`\n  *  **`<=`** (`int` , `int`) --->  `bool`\n  * `int` **`<=`** `float` --->  `bool`\n  *  **`<=`** (`int` , `float`) --->  `bool`\n  * `float` **`<=`** `int` --->  `bool`\n  *  **`<=`** (`float` , `int`) --->  `bool`\n  * `point` **`<=`** `point` --->  `bool`\n  *  **`<=`** (`point` , `point`) --->  `bool` \n\n#### Result: \ntrue if the left-hand operand is less or equal than the right-hand operand, false otherwise.\n\n#### Special cases:     \n  * if one of the operands is nil, returns false    \n  * if both operands are String, uses a lexicographic comparison of two strings \n  \n```\nbool var5 ](#>), [=](#>=), [=](#=), [!=](#!=), \n    \t\n----\n\n\n[//]: # (keyword|operator_<>)\n### `<>`\nSame signification as [!=](#!=)\n    \t\n----\n\n\n[//]: # (keyword|operator_=)\n### `=`\n\n#### Possible use: \n  * `date` **`=`** `date` --->  `bool`\n  *  **`=`** (`date` , `date`) --->  `bool`\n  * `int` **`=`** `float` --->  `bool`\n  *  **`=`** (`int` , `float`) --->  `bool`\n  * `unknown` **`=`** `unknown` --->  `bool`\n  *  **`=`** (`unknown` , `unknown`) --->  `bool`\n  * `float` **`=`** `float` --->  `bool`\n  *  **`=`** (`float` , `float`) --->  `bool`\n  * `float` **`=`** `int` --->  `bool`\n  *  **`=`** (`float` , `int`) --->  `bool`\n  * `int` **`=`** `int` --->  `bool`\n  *  **`=`** (`int` , `int`) --->  `bool` \n\n#### Result: \nreturns true if both operands are equal, false otherwise\nreturns true if both operands are equal, false otherwise\n\n#### Special cases:     \n  * if both operands are any kind of objects, returns true if they are identical (i.e., the same object) or equal (comparisons between nil values are permitted) \n  \n```\nbool var0 ](#>), [=](#>=), [<=](#<=), \n    \t\n----\n\n\n[//]: # (keyword|operator_>)\n### `>`\n\n#### Possible use: \n  * `int` **`>`** `float` --->  `bool`\n  *  **`>`** (`int` , `float`) --->  `bool`\n  * `float` **`>`** `float` --->  `bool`\n  *  **`>`** (`float` , `float`) --->  `bool`\n  * `string` **`>`** `string` --->  `bool`\n  *  **`>`** (`string` , `string`) --->  `bool`\n  * `int` **`>`** `int` --->  `bool`\n  *  **`>`** (`int` , `int`) --->  `bool`\n  * `date` **`>`** `date` --->  `bool`\n  *  **`>`** (`date` , `date`) --->  `bool`\n  * `point` **`>`** `point` --->  `bool`\n  *  **`>`** (`point` , `point`) --->  `bool`\n  * `float` **`>`** `int` --->  `bool`\n  *  **`>`** (`float` , `int`) --->  `bool` \n\n#### Result: \ntrue if the left-hand operand is greater than the right-hand operand, false otherwise.\n\n#### Special cases:     \n  * if one of the operands is nil, returns false    \n  * if both operands are String, uses a lexicographic comparison of two strings \n  \n```\nbool var0  'aeb'; \t// var0 equals false\n\n``` \n\n    \n  * if both operands are points, returns true if and only if the left component (x) of the left operand if greater than x of the right one and if the right component (y) of the left operand is greater than y of the right one. \n  \n```\nbool var1  {4,6}; \t// var1 equals true\nbool var2  {4,8}; \t// var2 equals false\n\n``` \n\n\n\n#### Examples: \n```\nbool var3  2.5; \t// var3 equals true\nbool var4  7.6; \t// var4 equals false\nbool var5  7; \t// var5 equals false\n#now > #now minus_hours 1 :- true\nbool var7  7; \t// var7 equals false\n```\n      \n\n#### See also: \n[=](#>=), [<=](#<=), [=](#=), [!=](#!=), \n    \t\n----\n\n\n[//]: # (keyword|operator_>=)\n### `>=`\n\n#### Possible use: \n  * `float` **`>=`** `int` --->  `bool`\n  *  **`>=`** (`float` , `int`) --->  `bool`\n  * `int` **`>=`** `int` --->  `bool`\n  *  **`>=`** (`int` , `int`) --->  `bool`\n  * `int` **`>=`** `float` --->  `bool`\n  *  **`>=`** (`int` , `float`) --->  `bool`\n  * `string` **`>=`** `string` --->  `bool`\n  *  **`>=`** (`string` , `string`) --->  `bool`\n  * `date` **`>=`** `date` --->  `bool`\n  *  **`>=`** (`date` , `date`) --->  `bool`\n  * `float` **`>=`** `float` --->  `bool`\n  *  **`>=`** (`float` , `float`) --->  `bool`\n  * `point` **`>=`** `point` --->  `bool`\n  *  **`>=`** (`point` , `point`) --->  `bool` \n\n#### Result: \ntrue if the left-hand operand is greater or equal than the right-hand operand, false otherwise.\n\n#### Special cases:     \n  * if one of the operands is nil, returns false    \n  * if both operands are string, uses a lexicographic comparison of the two strings \n  \n```\nbool var5 = 'aeb'; \t// var5 equals false\nbool var6 = 'abc'; \t// var6 equals true\n\n``` \n\n    \n  * if both operands are points, returns true if and only if the left component (x) of the left operand if greater or equal than x of the right one and if the right component (y) of the left operand is greater than or equal to y of the right one. \n  \n```\nbool var7 = {4,6}; \t// var7 equals true\nbool var8 = {4,8}; \t// var8 equals false\n\n``` \n\n\n\n#### Examples: \n```\nbool var0 = 7; \t// var0 equals false\nbool var1 = 7; \t// var1 equals false\nbool var2 = 2.5; \t// var2 equals true\n#now >= #now minus_hours 1 :- true\nbool var4 = 3.5; \t// var4 equals true\n```\n      \n\n#### See also: \n[>](#>), [  `int`\n  *  **`abs`** (`float`) --->  `float` \n\n#### Result: \nReturns the absolute value of the operand (so a positive int or float depending on the type of the operand).\n\n#### Examples: \n```\nint var0   `container`\n  *  **`accumulate`** (`container` , `any expression`) --->  `container` \n\n#### Result: \nreturns a new flat list, in which each element is the evaluation of the right-hand operand. If this evaluation returns a list, the elements of this result are added directly to the list returned  \n\n#### Comment: \naccumulate is dedicated to the application of a same computation on each element of a container (and returns a list). In the right-hand operand, the keyword each can be used to represent, in turn, each of the left-hand operand elements.\n\n#### Examples: \n```\ncontainer var0  var1  var2   `float`\n  *  **`acos`** (`int`) --->  `float` \n\n#### Result: \nReturns the value (in the interval [0,180], in decimal degrees) of the arccos of the operand (which should be in [-1,1]).\n\n#### Special cases:     \n  * if the right-hand operand is outside of the [-1,1] interval, returns NaN\n\n#### Examples: \n```\nfloat var0   `action` \n\n#### Result: \nCasts the operand into the type action\n    \t\n----\n\n\n[//]: # (keyword|operator_add_days)\n### `add_days`\nSame signification as [plus_days](#plus_days)\n    \t\n----\n\n\n[//]: # (keyword|operator_add_edge)\n### `add_edge`\n\n#### Possible use: \n  * `graph` **`add_edge`** `pair` --->  `graph`\n  *  **`add_edge`** (`graph` , `pair`) --->  `graph` \n\n#### Result: \nadd an edge between a source vertex and a target vertex (resp. the left and the right element of the pair operand)  \n\n#### Comment: \nif the edge already exists, the graph is unchanged\n\n#### Examples: \n```\ngraph   `graph`\n  *  **`add_node`** (`graph` , `geometry`) --->  `graph` \n\n#### Result: \nadds a node in a graph.\n\n#### Examples: \n```\ngraph var0   `geometry`\n  *  **`add_point`** (`geometry` , `point`) --->  `geometry` \n\n#### Result: \nA new geometry resulting from the addition of the right point (coordinate) to the left-hand geometry. Note that adding a point to a line or polyline will always return a closed contour. Also note that the position at which the added point will appear in the geometry is not necessarily the last one, as points are always ordered in a clockwise fashion in geometries\n\n#### Examples: \n```\ngeometry var0   `matrix` \n\n#### Result: \nadjacency matrix of the given graph.\n    \t\n----\n\n\n[//]: # (keyword|operator_after)\n### `after`\n\n#### Possible use: \n  *  **`after`** (`date`) --->  `bool`\n  * `any expression` **`after`** `date` --->  `bool`\n  *  **`after`** (`any expression` , `date`) --->  `bool` \n\n#### Result: \nReturns true if the current_date of the model is strictly after the date passed in argument. Synonym of 'current_date > argument'. Can be used in its composed form with 2 arguments to express the lower boundary for the computation of a frequency. Note that only dates strictly after this one will be tested against the frequency\n\n#### Examples: \n```\nreflex when: after(starting_date) {} -: will always be run after the first step\nreflex when: false after(starting date + #10days) {} -: will not be run after this date. Better to use 'until' or 'before' in that case\nevery(2#days) after (starting_date + 1#day) // the computation will return true every two days (using the starting_date of the model as the starting point) only for the dates strictly after this starting_date + 1#day\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_agent)\n### `agent`\n\n#### Possible use: \n  *  **`agent`** (`any`) --->  `agent` \n\n#### Result: \nCasts the operand into the type agent\n    \t\n----\n\n\n[//]: # (keyword|operator_agent_closest_to)\n### `agent_closest_to`\n\n#### Possible use: \n  *  **`agent_closest_to`** (`unknown`) --->  `agent` \n\n#### Result: \nAn agent, the closest to the operand (casted as a geometry).  \n\n#### Comment: \nthe distance is computed in the topology of the calling agent (the agent in which this operator is used), with the distance algorithm specific to the topology.\n\n#### Examples: \n```\nagent var0   `agent` \n\n#### Result: \nAn agent, the farthest to the operand (casted as a geometry).  \n\n#### Comment: \nthe distance is computed in the topology of the calling agent (the agent in which this operator is used), with the distance algorithm specific to the topology.\n\n#### Examples: \n```\nagent var0   `agent`\n  *  **`agent_from_geometry`** (`path` , `geometry`) --->  `agent` \n\n#### Result: \nreturns the agent corresponding to given geometry (right-hand operand) in the given path (left-hand operand).\n\n#### Special cases:     \n  * if the left-hand operand is nil, returns nil\n\n#### Examples: \n```\ngeometry line   `container` \n\n#### Result: \nA list of agents situated at a distance lower than the right argument.\n\n#### Examples: \n```\ncontainer var0   `list` \n\n#### Result: \nA list of agents covered by the operand (casted as a geometry).\n\n#### Examples: \n```\nlist var0   `list` \n\n#### Result: \nA list of agents overlapping the operand (casted as a geometry).\n\n#### Examples: \n```\nlist var0   `matrix` \n\n#### Result: \nreturns the successor matrix of shortest paths between all node pairs (rows: source, columns: target): a cell (i,j) will thus contains the next node in the shortest path between i and j.\n\n#### Examples: \n```\nmatrix var0   `float` \n\n#### Result: \nreturns the alpha index of the graph (measure of connectivity which evaluates the number of cycles in a graph in comparison with the maximum number of cycles. The higher the alpha index, the more a network is connected: alpha = nb_cycles / (2`*`S-5) - planar graph)\n\n#### Examples: \n```\nfloat var1   `container`\n  *  **`among`** (`int` , `container`) --->  `container` \n\n#### Result: \nReturns a list of length the value of the left-hand operand, containing random elements from the right-hand operand. As of GAMA 1.6, the order in which the elements are returned can be different than the order in which they appear in the right-hand container\n\n#### Special cases:     \n  * if the right-hand operand is empty, among returns a new empty list. If it is nil, it throws an error.    \n  * if the left-hand operand is greater than the length of the right-hand operand, among returns the right-hand operand (converted as a list). If it is smaller or equal to zero, it returns an empty list\n\n#### Examples: \n```\nlist var0  var3   `bool`\n  *  **`and`** (`bool` , `any expression`) --->  `bool` \n\n#### Result: \na bool value, equal to the logical and between the left-hand operand and the right-hand operand.  \n\n#### Comment: \nboth operands are always casted to bool before applying the operator. Thus, an expression like (1 and 0) is accepted and returns false.    \n\n#### See also: \n[bool](#bool), [or](#or), [!](#!), \n    \t\n----\n\n\n[//]: # (keyword|operator_and)\n### `and`\n\n#### Possible use: \n  * `predicate` **`and`** `predicate` --->  `predicate`\n  *  **`and`** (`predicate` , `predicate`) --->  `predicate` \n\n#### Result: \ncreate a new predicate from two others by including them as subintentions\n\n#### Examples: \n```\npredicate1 and predicate2\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_angle_between)\n### `angle_between`\n\n#### Possible use: \n  *  **`angle_between`** (`point`, `point`, `point`) --->  `int` \n\n#### Result: \nthe angle between vectors P0P1 and P0P2 (P0, P1, P2 being the three point operands)\n\n#### Examples: \n```\nint var0   `point` \n\n#### Result: \nA point inside (or touching) the operand-geometry.\n\n#### Examples: \n```\npoint var0   `matrix`\n  *  **`append_horizontally`** (`matrix` , `matrix`) --->  `matrix`\n  * `matrix` **`append_horizontally`** `matrix` --->  `matrix`\n  *  **`append_horizontally`** (`matrix` , `matrix`) --->  `matrix` \n\n#### Result: \nA matrix resulting from the concatenation of the rows of the two given matrices. If not both numerical or both object matrices, returns the first matrix.\n\n#### Examples: \n```\nmatrix var0   `matrix`\n  *  **`append_vertically`** (`matrix` , `matrix`) --->  `matrix`\n  * `matrix` **`append_vertically`** `matrix` --->  `matrix`\n  *  **`append_vertically`** (`matrix` , `matrix`) --->  `matrix` \n\n#### Result: \nA matrix resulting from the concatenation of the columns  of the two given matrices. If not both numerical or both object matrices, returns the first matrix.\n\n#### Examples: \n```\nmatrix var0   `geometry`\n  *  **`arc`** (`float`, `float`, `float`, `bool`) --->  `geometry` \n\n#### Result: \nAn arc, which radius is equal to the first operand, heading to the second and amplitude the third\nAn arc, which radius is equal to the first operand, heading to the second, amplitude to the third and a boolean indicating whether to return a linestring or a polygon to the fourth  \n\n#### Comment: \nthe center of the arc is by default the location of the current agent in which has been called this operator. This operator returns a polygon by default.the center of the arc is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns a point if the radius operand is lower or equal to 0.    \n  * returns a point if the radius operand is lower or equal to 0.\n\n#### Examples: \n```\ngeometry var0   `geometry`\n  *  **`around`** (`float` , `unknown`) --->  `geometry` \n\n#### Result: \nA geometry resulting from the difference between a buffer around the right-operand casted in geometry at a distance left-operand (right-operand buffer left-operand) and the right-operand casted as geometry.\n\n#### Special cases:     \n  * returns a circle geometry of radius right-operand if the left-operand is nil\n\n#### Examples: \n```\ngeometry var0   `unknown`\n  *  **`as`** (`unknown` , `any expression`) --->  `unknown` \n\n#### Result: \ncasting of the first argument into a given type  \n\n#### Comment: \nIt is equivalent to the application of the type operator on the left operand.\n\n#### Examples: \n```\nint var0   `matrix`\n  *  **`as_4_grid`** (`geometry` , `point`) --->  `matrix` \n\n#### Result: \nA matrix of square geometries (grid with 4-neighborhood) with dimension given by the right-hand operand ({nb_cols, nb_lines}) corresponding to the square tessellation of the left-hand operand geometry (geometry, agent)\n\n#### Examples: \n```\nmatrix var0   `graph`\n  *  **`as_distance_graph`** (`container` , `map`) --->  `graph`\n  * `container` **`as_distance_graph`** `float` --->  `graph`\n  *  **`as_distance_graph`** (`container` , `float`) --->  `graph`\n  *  **`as_distance_graph`** (`container`, `float`, `species`) --->  `graph` \n\n#### Result: \ncreates a graph from a list of vertices (left-hand operand). An edge is created between each pair of vertices close enough (less than a distance, right-hand operand).  \n\n#### Comment: \nas_distance_graph is more efficient for a list of points than as_intersection_graph.\n\n#### Examples: \n```\nlist(ant) as_distance_graph 3.0\n```\n      \n\n#### See also: \n[as_intersection_graph](#as_intersection_graph), [as_edge_graph](#as_edge_graph), \n    \t\n----\n\n\n[//]: # (keyword|operator_as_driving_graph)\n### `as_driving_graph`\n\n#### Possible use: \n  * `container` **`as_driving_graph`** `container` --->  `graph`\n  *  **`as_driving_graph`** (`container` , `container`) --->  `graph` \n\n#### Result: \ncreates a graph from the list/map of edges given as operand and connect the node to the edge\n\n#### Examples: \n```\nas_driving_graph(road,node)  --:  build a graph while using the road agents as edges and the node agents as nodes\n```\n      \n\n#### See also: \n[as_intersection_graph](#as_intersection_graph), [as_distance_graph](#as_distance_graph), [as_edge_graph](#as_edge_graph), \n    \t\n----\n\n\n[//]: # (keyword|operator_as_edge_graph)\n### `as_edge_graph`\n\n#### Possible use: \n  *  **`as_edge_graph`** (`map`) --->  `graph`\n  *  **`as_edge_graph`** (`container`) --->  `graph`\n  * `container` **`as_edge_graph`** `float` --->  `graph`\n  *  **`as_edge_graph`** (`container` , `float`) --->  `graph` \n\n#### Result: \ncreates a graph from the list/map of edges given as operand\n\n#### Special cases:     \n  * if the operand is a map, the graph will be built by creating edges from pairs of the map \n  \n```\ngraph var0   `matrix`\n  *  **`as_grid`** (`geometry` , `point`) --->  `matrix` \n\n#### Result: \nA matrix of square geometries (grid with 8-neighborhood) with dimension given by the right-hand operand ({nb_cols, nb_lines}) corresponding to the square tessellation of the left-hand operand geometry (geometry, agent)\n\n#### Examples: \n```\nmatrix var0   `list`\n  *  **`as_hexagonal_grid`** (`geometry` , `point`) --->  `list` \n\n#### Result: \nA list of geometries (hexagonal) corresponding to the hexagonal tesselation of the first operand geometry\n\n#### Examples: \n```\nlist var0   `int`\n  *  **`as_int`** (`string` , `int`) --->  `int` \n\n#### Result: \nparses the string argument as a signed integer in the radix specified by the second argument.\n\n#### Special cases:     \n  * if the left operand is nil or empty, as_int returns 0    \n  * if the left operand does not represent an integer in the specified radix, as_int throws an exception \n\n#### Examples: \n```\nint var0   `graph`\n  *  **`as_intersection_graph`** (`container` , `float`) --->  `graph` \n\n#### Result: \ncreates a graph from a list of vertices (left-hand operand). An edge is created between each pair of vertices with an intersection (with a given tolerance).  \n\n#### Comment: \nas_intersection_graph is more efficient for a list of geometries (but less accurate) than as_distance_graph.\n\n#### Examples: \n```\nlist(ant) as_intersection_graph 0.5\n```\n      \n\n#### See also: \n[as_distance_graph](#as_distance_graph), [as_edge_graph](#as_edge_graph), \n    \t\n----\n\n\n[//]: # (keyword|operator_as_map)\n### `as_map`\n\n#### Possible use: \n  * `container` **`as_map`** `any expression` --->  `map`\n  *  **`as_map`** (`container` , `any expression`) --->  `map` \n\n#### Result: \nproduces a new map from the evaluation of the right-hand operand for each element of the left-hand operand  \n\n#### Comment: \nthe right-hand operand should be a pair\n\n#### Special cases:     \n  * if the left-hand operand is nil, as_map throws an error.\n\n#### Examples: \n```\nmap var0  var1   `matrix`\n  *  **`as_matrix`** (`unknown` , `point`) --->  `matrix` \n\n#### Result: \ncasts the left operand into a matrix with right operand as preferred size  \n\n#### Comment: \nThis operator is very useful to cast a file containing raster data into a matrix.Note that both components of the right operand point should be positive, otherwise an exception is raised.The operator as_matrix creates a matrix of preferred size. It fills in it with elements of the left operand until the matrix is full If the size is to short, some elements will be omitted. Matrix remaining elements will be filled in by nil.\n\n#### Special cases:     \n  * if the right operand is nil, as_matrix is equivalent to the matrix operator    \n\n#### See also: \n[matrix](#matrix), \n    \t\n----\n\n\n[//]: # (keyword|operator_as_path)\n### `as_path`\n\n#### Possible use: \n  * `list` **`as_path`** `graph` --->  `path`\n  *  **`as_path`** (`list` , `graph`) --->  `path` \n\n#### Result: \ncreate a graph path from the list of shape\n\n#### Examples: \n```\npath var0 road2->road3 of my_graph\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_asin)\n### `asin`\n\n#### Possible use: \n  *  **`asin`** (`float`) --->  `float`\n  *  **`asin`** (`int`) --->  `float` \n\n#### Result: \nthe arcsin of the operand\n\n#### Special cases:     \n  * if the right-hand operand is outside of the [-1,1] interval, returns NaN\n\n#### Examples: \n```\nfloat var0   `string`\n  *  **`at`** (`string` , `int`) --->  `string`\n  * `container` **`at`** `KeyType` --->  `ValueType`\n  *  **`at`** (`container` , `KeyType`) --->  `ValueType` \n\n#### Result: \nthe element at the right operand index of the container  \n\n#### Comment: \nThe first element of the container is located at the index 0. In addition, if the user tries to get the element at an index higher or equals than the length of the container, he will get an IndexOutOfBoundException.The at operator behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a file, at returns the element of the file content at the index specified by the right operand    \n  * if it is a population, at returns the agent at the index specified by the right operand    \n  * if it is a graph and if the right operand is a node, at returns the in and out edges corresponding to that node    \n  * if it is a graph and if the right operand is an edge, at returns the pair node_out::node_in of the edge    \n  * if it is a graph and if the right operand is a pair node1::node2, at returns the edge from node1 to node2 in the graph    \n  * if it is a list or a matrix, at returns the element at the index specified by the right operand \n  \n```\nint var1 ` **`at_distance`** `float` --->  `list`\n  *  **`at_distance`** (`container` , `float`) --->  `list` \n\n#### Result: \nA list of agents or geometries among the left-operand list that are located at a distance <= the right operand from the caller agent (in its topology)\n\n#### Examples: \n```\nlist var0   `geometry`\n  *  **`at_location`** (`geometry` , `point`) --->  `geometry` \n\n#### Result: \nA geometry resulting from the tran of a translation to the right-hand operand point of the left-hand operand (geometry, agent, point)\n\n#### Examples: \n```\ngeometry var0   `float`\n  *  **`atan`** (`int`) --->  `float` \n\n#### Result: \nReturns the value (in the interval [-90,90], in decimal degrees) of the arctan of the operand (which can be any real number).\n\n#### Examples: \n```\nfloat var0   `float`\n  *  **`atan2`** (`float` , `float`) --->  `float` \n\n#### Result: \nthe atan2 value of the two operands.  \n\n#### Comment: \nThe function atan2 is the arctangent function with two arguments. The purpose of using two arguments instead of one is to gather information on the signs of the inputs in order to return the appropriate quadrant of the computed angle, which is not possible for the single-argument arctangent function.\n\n#### Examples: \n```\nfloat var0   `attributes` \n\n#### Result: \nCasts the operand into the type attributes\n    \t\n----\n\n\n[//]: # (keyword|operator_BDIPlan)\n### `BDIPlan`\n\n#### Possible use: \n  *  **`BDIPlan`** (`any`) --->  `BDIPlan` \n\n#### Result: \nCasts the operand into the type BDIPlan\n    \t\n----\n\n\n[//]: # (keyword|operator_before)\n### `before`\n\n#### Possible use: \n  *  **`before`** (`date`) --->  `bool`\n  * `any expression` **`before`** `date` --->  `bool`\n  *  **`before`** (`any expression` , `date`) --->  `bool` \n\n#### Result: \nReturns true if the current_date of the model is strictly before the date passed in argument. Synonym of 'current_date < argument'\n\n#### Examples: \n```\nreflex when: before(starting_date) {} -: will never be run\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_beta_index)\n### `beta_index`\n\n#### Possible use: \n  *  **`beta_index`** (`graph`) --->  `float` \n\n#### Result: \nreturns the beta index of the graph (Measures the level of connectivity in a graph and is expressed by the relationship between the number of links (e) over the number of nodes (v) : beta = e/v.\n\n#### Examples: \n```\ngraph graphEpidemio   `bool`\n  *  **`between`** (`date` , `date`) --->  `bool`\n  *  **`between`** (`int`, `int`, `int`) --->  `bool`\n  *  **`between`** (`any expression`, `date`, `date`) --->  `bool`\n  *  **`between`** (`float`, `float`, `float`) --->  `bool`\n  *  **`between`** (`date`, `date`, `date`) --->  `bool` \n\n#### Result: \nreturns true the first integer operand is bigger than the second integer operand and smaller than the third integer operand\nreturns true if the first float operand is bigger than the second float operand and smaller than the third float operand\n\n#### Special cases:     \n  * returns true if the first operand is between the two dates passed in arguments (both exclusive). Can be combined with 'every' to express a frequency between two dates \n  \n```\n(date('2016-01-01') between(date('2000-01-01'), date('2020-02-02') -: true\nevery #day between(date('2000-01-01'), date('2020-02-02') // will return true every new day between these two dates, taking the first one as the starting point\n\n``` \n\n    \n  * returns true if the first operand is between the two dates passed in arguments (both exclusive). The version with 2 arguments compares the current_date with the 2 others \n  \n```\n(date('2016-01-01') between(date('2000-01-01'), date('2020-02-02') -: true\nbetween(date('2000-01-01'), date('2020-02-02') // will return true if the current_date of the model is in_between the 2\n\n``` \n\n\n\n#### Examples: \n```\nbool var0   `map` \n\n#### Result: \nreturns a map containing for each vertex (key), its betweenness centrality (value): number of shortest paths passing through each vertex\n\n#### Examples: \n```\ngraph graphEpidemio   `list` \n\n#### Result: \nreturns the biggest cliques of a graph using the Bron-Kerbosch clique detection algorithm\n\n#### Examples: \n```\ngraph my_graph  var1   `int`\n  *  **`binomial`** (`int` , `float`) --->  `int` \n\n#### Result: \nA value from a random variable following a binomial distribution. The operands represent the number of experiments n and the success probability p.  \n\n#### Comment: \nThe binomial distribution is the discrete probability distribution of the number of successes in a sequence of n independent yes/no experiments, each of which yields success with probability p, cf. Binomial distribution on Wikipedia.\n\n#### Examples: \n```\nint var0   `rgb`\n  *  **`blend`** (`rgb` , `rgb`) --->  `rgb`\n  *  **`blend`** (`rgb`, `rgb`, `float`) --->  `rgb` \n\n#### Result: \nBlend two colors with an optional ratio (c1 `*` r + c2 `*` (1 - r)) between 0 and 1\n\n#### Special cases:     \n  * If the ratio is omitted, an even blend is done \n  \n```\nrgb var3   `bool` \n\n#### Result: \nCasts the operand into the type bool\n    \t\n----\n\n\n[//]: # (keyword|operator_box)\n### `box`\n\n#### Possible use: \n  *  **`box`** (`point`) --->  `geometry`\n  *  **`box`** (`float`, `float`, `float`) --->  `geometry` \n\n#### Result: \nA box geometry which side sizes are given by the operands.  \n\n#### Comment: \nthe center of the box is by default the location of the current agent in which has been called this operator.the center of the box is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns nil if the operand is nil.    \n  * returns nil if the operand is nil.\n\n#### Examples: \n```\ngeometry var0   `list`\n  * `string` **`brewer_colors`** `int` --->  `list`\n  *  **`brewer_colors`** (`string` , `int`) --->  `list` \n\n#### Result: \nBuild a list of colors of a given type (see website http://colorbrewer2.org/)\nBuild a list of colors of a given type (see website http://colorbrewer2.org/) with a given number of classes\n\n#### Examples: \n```\nlist var0  colors  var1  colors   `list`\n  * `int` **`brewer_palettes`** `int` --->  `list`\n  *  **`brewer_palettes`** (`int` , `int`) --->  `list` \n\n#### Result: \nreturns the list a palette with a given min number of classes and max number of classes)\nreturns the list a palette with a given min number of classes and max number of classes)\n\n#### Examples: \n```\nlist var0  colors  var1  colors `) --->  `regression`\n  * `matrix` **`build`** `string` --->  `regression`\n  *  **`build`** (`matrix` , `string`) --->  `regression` \n\n#### Result: \nreturns the regression build from the matrix data (a row = an instance, the last value of each line is the y value) while using the given ordinary least squares method. Usage: build(data)\nreturns the regression build from the matrix data (a row = an instance, the last value of each line is the y value) while using the given method (\"GLS\" or \"OLS\"). Usage: build(data,method)\n\n#### Examples: \n```\nmatrix([[1,2,3,4],[2,3,4,2]])\nbuild(matrix([[1,2,3,4],[2,3,4,2]]),\"GLS\")\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_ceil)\n### `ceil`\n\n#### Possible use: \n  *  **`ceil`** (`float`) --->  `float` \n\n#### Result: \nMaps the operand to the smallest following integer, i.e. the smallest integer not less than x.\n\n#### Examples: \n```\nfloat var0   `point` \n\n#### Result: \nCentroid (weighted sum of the centroids of a decomposition of the area into triangles) of the operand-geometry. Can be different to the location of the geometry\n\n#### Examples: \n```\npoint var0   `string`\n\n#### Special cases:     \n  * converts ACSII integer value to character \n  \n```\nstring var0   `geometry`\n  * `float` **`circle`** `point` --->  `geometry`\n  *  **`circle`** (`float` , `point`) --->  `geometry` \n\n#### Result: \nA circle geometry which radius is equal to the first operand, and the center has the location equal to the second operand.\nA circle geometry which radius is equal to the operand.  \n\n#### Comment: \nthe center of the circle is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns a point if the operand is lower or equal to 0.    \n  * returns a point if the operand is lower or equal to 0.\n\n#### Examples: \n```\ngeometry var0   `geometry` \n\n#### Result: \nA geometry corresponding to the cleaning of the operand (geometry, agent, point)  \n\n#### Comment: \nThe cleaning corresponds to a buffer with a distance of 0.0\n\n#### Examples: \n```\ngeometry var0   `list`\n  *  **`closest_points_with`** (`geometry` , `geometry`) --->  `list` \n\n#### Result: \nA list of two closest points between the two geometries.\n\n#### Examples: \n```\nlist var0 ` **`closest_to`** `geometry` --->  `geometry`\n  *  **`closest_to`** (`container` , `geometry`) --->  `geometry` \n\n#### Result: \nAn agent or a geometry among the left-operand list of agents, species or meta-population (addition of species), the closest to the operand (casted as a geometry).  \n\n#### Comment: \nthe distance is computed in the topology of the calling agent (the agent in which this operator is used), with the distance algorithm specific to the topology.\n\n#### Examples: \n```\ngeometry var0   `container`\n  *  **`collect`** (`container` , `any expression`) --->  `container` \n\n#### Result: \nreturns a new list, in which each element is the evaluation of the right-hand operand.  \n\n#### Comment: \ncollect is similar to accumulate except that accumulate always produces flat lists if the right-hand operand returns a list.In addition, collect can be applied to any container.\n\n#### Special cases:     \n  * if the left-hand operand is nil, collect throws an error\n\n#### Examples: \n```\ncontainer var0   `list`\n  *  **`column_at`** (`matrix` , `int`) --->  `list` \n\n#### Result: \nreturns the column at a num_col (right-hand operand)\n\n#### Examples: \n```\nlist var0   `list` \n\n#### Result: \nreturns a list of the columns of the matrix, with each column as a list of elements\n\n#### Examples: \n```\nlist var0   `string` \n\n#### Result: \ncommand allows GAMA to issue a system command using the system terminal or shell and to receive a string containing the outcome of the command or script executed. By default, commands are blocking the agent calling them, unless the sequence ' &' is used at the end. In this case, the result of the operator is an empty string\n    \t\n----\n\n\n[//]: # (keyword|operator_cone)\n### `cone`\n\n#### Possible use: \n  *  **`cone`** (`point`) --->  `geometry`\n  * `int` **`cone`** `int` --->  `geometry`\n  *  **`cone`** (`int` , `int`) --->  `geometry` \n\n#### Result: \nA cone geometry which min and max angles are given by the operands.\nA cone geometry which min and max angles are given by the operands.  \n\n#### Comment: \nthe center of the cone is by default the location of the current agent in which has been called this operator.the center of the cone is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns nil if the operand is nil.    \n  * returns nil if the operand is nil.\n\n#### Examples: \n```\ngeometry var0   `geometry`\n  *  **`cone3D`** (`float` , `float`) --->  `geometry` \n\n#### Result: \nA cone geometry which base radius size is equal to the first operand, and which the height is equal to the second operand.  \n\n#### Comment: \nthe center of the cone is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns a point if the operand is lower or equal to 0.\n\n#### Examples: \n```\ngeometry var0   `list` \n\n#### Result: \nreturns the connected components of of a graph, i.e. the list of all vertices that are in the maximally connected component together with the specified vertex.\n\n#### Examples: \n```\ngraph my_graph  var1   `float` \n\n#### Result: \nreturns a simple connectivity index. This number is estimated through the number of nodes (v) and of sub-graphs (p) : IC = (v - p) /(v - 1).\n\n#### Examples: \n```\ngraph graphEpidemio   `container` \n\n#### Result: \nCasts the operand into the type container\n    \t\n----\n\n\n[//]: # (keyword|operator_contains)\n### `contains`\n\n#### Possible use: \n  * `container` **`contains`** `unknown` --->  `bool`\n  *  **`contains`** (`container` , `unknown`) --->  `bool`\n  * `string` **`contains`** `string` --->  `bool`\n  *  **`contains`** (`string` , `string`) --->  `bool` \n\n#### Result: \ntrue, if the container contains the right operand, false otherwise  \n\n#### Comment: \nthe contains operator behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a map, contains returns true if the operand is a key of the map    \n  * if it is a file, contains returns true it the operand is contained in the file content    \n  * if it is a population, contains returns true if the operand is an agent of the population, false otherwise    \n  * if it is a graph, contains returns true if the operand is a node or an edge of the graph, false otherwise    \n  * if both operands are strings, returns true if the right-hand operand contains the right-hand pattern;    \n  * if it is a list or a matrix, contains returns true if the list or matrix contains the right operand \n  \n```\nbool var0   `bool`\n  *  **`contains_all`** (`container` , `container`) --->  `bool`\n  * `string` **`contains_all`** `list` --->  `bool`\n  *  **`contains_all`** (`string` , `list`) --->  `bool` \n\n#### Result: \ntrue if the left operand contains all the elements of the right operand, false otherwise  \n\n#### Comment: \nthe definition of contains depends on the container\n\n#### Special cases:     \n  * if the right operand is nil or empty, contains_all returns true    \n  * if the left-operand is a string, test whether the string contains all the element of the list; \n  \n```\nbool var4   `bool`\n  *  **`contains_any`** (`container` , `container`) --->  `bool`\n  * `string` **`contains_any`** `list` --->  `bool`\n  *  **`contains_any`** (`string` , `list`) --->  `bool` \n\n#### Result: \ntrue if the left operand contains one of the elements of the right operand, false otherwise  \n\n#### Comment: \nthe definition of contains depends on the container\n\n#### Special cases:     \n  * if the right operand is nil or empty, contains_any returns false\n\n#### Examples: \n```\nbool var0   `bool`\n  *  **`contains_edge`** (`graph` , `unknown`) --->  `bool`\n  * `graph` **`contains_edge`** `pair` --->  `bool`\n  *  **`contains_edge`** (`graph` , `pair`) --->  `bool` \n\n#### Result: \nreturns true if the graph(left-hand operand) contains the given edge (righ-hand operand), false otherwise\n\n#### Special cases:     \n  * if the left-hand operand is nil, returns false    \n  * if the right-hand operand is a pair, returns true if it exists an edge between the two elements of the pair in the graph \n  \n```\nbool var2   `bool`\n  *  **`contains_vertex`** (`graph` , `unknown`) --->  `bool` \n\n#### Result: \nreturns true if the graph(left-hand operand) contains the given vertex (righ-hand operand), false otherwise\n\n#### Special cases:     \n  * if the left-hand operand is nil, returns false\n\n#### Examples: \n```\ngraph graphFromMap  `conversation`\n    \t\n----\n\n\n[//]: # (keyword|operator_convex_hull)\n### `convex_hull`\n\n#### Possible use: \n  *  **`convex_hull`** (`geometry`) --->  `geometry` \n\n#### Result: \nA geometry corresponding to the convex hull of the operand.\n\n#### Examples: \n```\ngeometry var0   `unknown` \n\n#### Result: \nreturns a copy of the operand.\n    \t\n----\n\n\n[//]: # (keyword|operator_copy_between)\n### `copy_between`\n\n#### Possible use: \n  *  **`copy_between`** (`string`, `int`, `int`) --->  `string`\n  *  **`copy_between`** (`container`, `int`, `int`) --->  `container` \n\n#### Result: \nReturns a copy of the first operand between the indexes determined by the second (inclusive) and third operands (exclusive)\n\n#### Special cases:     \n  * If the first operand is empty, returns an empty object of the same type    \n  * If the second operand is greater than or equal to the third operand, return an empty object of the same type    \n  * If the first operand is nil, raises an error\n\n#### Examples: \n```\nstring var0   `unknown`\n  *  **`corR`** (`container` , `container`) --->  `unknown` \n\n#### Result: \nreturns the Pearson correlation coefficient of two given vectors (right-hand operands) in given variable  (left-hand operand).\n\n#### Special cases:     \n  * if the lengths of two vectors in the right-hand aren't equal, returns 0\n\n#### Examples: \n```\nlist X   `float`\n  *  **`cos`** (`float`) --->  `float` \n\n#### Result: \nReturns the value (in [-1,1]) of the cosinus of the operand (in decimal degrees).  The argument is casted to an int before being evaluated.\n\n#### Special cases:     \n  * Operand values out of the range [0-359] are normalized.\n\n#### Examples: \n```\nfloat var0   `float` \n\n#### Result: \nReturns the value (in [-1,1]) of the cosinus of the operand (in decimal degrees).  The argument is casted to an int before being evaluated.\n\n#### Special cases:     \n  * Operand values out of the range [0-359] are normalized.    \n\n#### See also: \n[sin](#sin), [tan](#tan), \n    \t\n----\n\n\n[//]: # (keyword|operator_count)\n### `count`\n\n#### Possible use: \n  * `container` **`count`** `any expression` --->  `int`\n  *  **`count`** (`container` , `any expression`) --->  `int` \n\n#### Result: \nreturns an int, equal to the number of elements of the left-hand operand that make the right-hand operand evaluate to true.  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the elements.\n\n#### Special cases:     \n  * if the left-hand operand is nil, count throws an error\n\n#### Examples: \n```\nint var0  3); \t// var0 equals 5\n// Number of nodes of graph g2 without any out edge\ngraph g2  32\nint n  32);\nint var6  4); \t// var6 equals 1\n```\n      \n\n#### See also: \n[group_by](#group_by), \n    \t\n----\n\n\n[//]: # (keyword|operator_covers)\n### `covers`\n\n#### Possible use: \n  * `geometry` **`covers`** `geometry` --->  `bool`\n  *  **`covers`** (`geometry` , `geometry`) --->  `bool` \n\n#### Result: \nA boolean, equal to true if the left-geometry (or agent/point) covers the right-geometry (or agent/point).\n\n#### Special cases:     \n  * if one of the operand is null, returns false.\n\n#### Examples: \n```\nbool var0   `geometry`\n  * `float` **`cross`** `float` --->  `geometry`\n  *  **`cross`** (`float` , `float`) --->  `geometry` \n\n#### Result: \nA cross, which radius is equal to the first operand\nA cross, which radius is equal to the first operand and the width of the lines for the second\n\n#### Examples: \n```\ngeometry var0   `bool`\n  *  **`crosses`** (`geometry` , `geometry`) --->  `bool` \n\n#### Result: \nA boolean, equal to true if the left-geometry (or agent/point) crosses the right-geometry (or agent/point).\n\n#### Special cases:     \n  * if one of the operand is null, returns false.    \n  * if one operand is a point, returns false.\n\n#### Examples: \n```\nbool var0   `string` \n\n#### Result: \nthe Coordinate Reference System (CRS) of the GIS file\n\n#### Examples: \n```\nstring var0   `geometry`\n  * `geometry` **`CRS_transform`** `string` --->  `geometry`\n  *  **`CRS_transform`** (`geometry` , `string`) --->  `geometry`\n\n#### Special cases:     \n  * returns the geometry corresponding to the transformation of the given geometry by the left operand CRS (Coordinate Reference System) \n  \n```\ngeometry var0   `file` \n\n#### Result: \nConstructs a file of type csv. Allowed extensions are limited to csv, tsv\n    \t\n----\n\n\n[//]: # (keyword|operator_cube)\n### `cube`\n\n#### Possible use: \n  *  **`cube`** (`float`) --->  `geometry` \n\n#### Result: \nA cube geometry which side size is equal to the operand.  \n\n#### Comment: \nthe center of the cube is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns nil if the operand is nil.\n\n#### Examples: \n```\ngeometry var0   `geometry`\n  *  **`curve`** (`point`, `point`, `point`, `int`) --->  `geometry`\n  *  **`curve`** (`point`, `point`, `point`, `point`) --->  `geometry`\n  *  **`curve`** (`point`, `point`, `point`, `point`, `int`) --->  `geometry` \n\n#### Result: \nA quadratic Bezier curve geometry built from the three given points composed of a given numnber of points.\nA quadratic Bezier curve geometry built from the three given points composed of 10 points.\nA cubic Bezier curve geometry built from the four given points composed of a given number of points.\nA cubic Bezier curve geometry built from the four given points composed of 10 points.\n\n#### Special cases:     \n  * if the operand is nil, returns nil    \n  * if the last operand (number of points) is inferior to 2, returns nil    \n  * if the operand is nil, returns nil    \n  * if the operand is nil, returns nil    \n  * if the last operand (number of points) is inferior to 2, returns nil    \n  * if the operand is nil, returns nil\n\n#### Examples: \n```\ngeometry var0   `geometry`\n  *  **`cylinder`** (`float` , `float`) --->  `geometry` \n\n#### Result: \nA cylinder geometry which radius is equal to the operand.  \n\n#### Comment: \nthe center of the cylinder is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns a point if the operand is lower or equal to 0.\n\n#### Examples: \n```\ngeometry var0   `date`\n  *  **`date`** (`string` , `string`) --->  `date` \n\n#### Result: \nconverts a string to a date following a custom pattern. The pattern can use \"%Y %M %N %D %E %h %m %s %z\" for outputting years, months, name of month, days, name of days, hours, minutes, seconds and the time-zone. A null or empty pattern will parse the date using one of the ISO date & time formats (similar to date('...') in that case). The pattern can also follow the pattern definition found here, which gives much more control over what will be parsed: https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#patterns. Different patterns are available by default as constant: #iso_local, #iso_simple, #iso_offset, #iso_zoned and #custom, which can be changed in the preferences\n\n#### Examples: \n```\ndate(\"1999-12-30\", 'yyyy-MM-dd')\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_dbscan)\n### `dbscan`\n\n#### Possible use: \n  *  **`dbscan`** (`list`, `float`, `int`) --->  `list` \n\n#### Result: \nreturns the list of clusters (list of instance indices) computed with the dbscan (density-based spatial clustering of applications with noise) algorithm from the first operand data according to the maximum radius of the neighborhood to be considered (eps) and the minimum number of points needed for a cluster (minPts). Usage: dbscan(data,eps,minPoints)\n\n#### Special cases:     \n  * if the lengths of two vectors in the right-hand aren't equal, returns 0\n\n#### Examples: \n```\ndbscan ([[2,4,5], [3,8,2], [1,1,3], [4,3,4]],10,2)\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_dead)\n### `dead`\n\n#### Possible use: \n  *  **`dead`** (`agent`) --->  `bool` \n\n#### Result: \ntrue if the agent is dead (or null), false otherwise.\n\n#### Examples: \n```\nbool var0   `int`\n  *  **`degree_of`** (`graph` , `unknown`) --->  `int` \n\n#### Result: \nreturns the degree (in+out) of a vertex (right-hand operand) in the graph given as left-hand operand.\n\n#### Examples: \n```\nint var1   `geometry`\n  * `file` **`dem`** `file` --->  `geometry`\n  *  **`dem`** (`file` , `file`) --->  `geometry`\n  * `file` **`dem`** `float` --->  `geometry`\n  *  **`dem`** (`file` , `float`) --->  `geometry`\n  *  **`dem`** (`file`, `file`, `float`) --->  `geometry` \n\n#### Result: \nA polygon that is equivalent to the surface of the texture\n\n#### Examples: \n```\ngeometry var0   `float` \n\n#### Result: \nThe determinant of the given matrix\n\n#### Examples: \n```\nfloat var0   `float`\n  *  **`diff`** (`float` , `float`) --->  `float`\n    \t\n----\n\n\n[//]: # (keyword|operator_diff2)\n### `diff2`\n\n#### Possible use: \n  * `float` **`diff2`** `float` --->  `float`\n  *  **`diff2`** (`float` , `float`) --->  `float`\n    \t\n----\n\n\n[//]: # (keyword|operator_directed)\n### `directed`\n\n#### Possible use: \n  *  **`directed`** (`graph`) --->  `graph` \n\n#### Result: \nthe operand graph becomes a directed graph.  \n\n#### Comment: \nthe operator alters the operand graph, it does not create a new one.    \n\n#### See also: \n[undirected](#undirected), \n    \t\n----\n\n\n[//]: # (keyword|operator_direction_between)\n### `direction_between`\n\n#### Possible use: \n  * `topology` **`direction_between`** `container` --->  `int`\n  *  **`direction_between`** (`topology` , `container`) --->  `int` \n\n#### Result: \nA direction (in degree) between a list of two geometries (geometries, agents, points) considering a topology.\n\n#### Examples: \n```\nint var0   `bool`\n  *  **`disjoint_from`** (`geometry` , `geometry`) --->  `bool` \n\n#### Result: \nA boolean, equal to true if the left-geometry (or agent/point) is disjoints from the right-geometry (or agent/point).\n\n#### Special cases:     \n  * if one of the operand is null, returns true.    \n  * if one operand is a point, returns false if the point is included in the geometry.\n\n#### Examples: \n```\nbool var0 ` --->  `float`\n  *  **`distance_between`** (`topology` , `container`) --->  `float` \n\n#### Result: \nA distance between a list of geometries (geometries, agents, points) considering a topology.\n\n#### Examples: \n```\nfloat var0   `float`\n  *  **`distance_to`** (`geometry` , `geometry`) --->  `float`\n  * `point` **`distance_to`** `point` --->  `float`\n  *  **`distance_to`** (`point` , `point`) --->  `float` \n\n#### Result: \nA distance between two geometries (geometries, agents or points) considering the topology of the agent applying the operator.\n\n#### Examples: \n```\nfloat var0   `container` \n\n#### Result: \nproduces a set from the elements of the operand (i.e. a list without duplicated elements)\n\n#### Special cases:     \n  * if the operand is nil, remove_duplicates returns nil    \n  * if the operand is a graph, remove_duplicates returns the set of nodes    \n  * if the operand is a matrix, remove_duplicates returns a matrix without duplicated row    \n  * if the operand is a map, remove_duplicates returns the set of values without duplicate \n  \n```\ncontainer var1   `map`\n  * `container` **`distribution_of`** `int` --->  `map`\n  *  **`distribution_of`** (`container` , `int`) --->  `map`\n  *  **`distribution_of`** (`container`, `int`, `float`, `float`) --->  `map` \n\n#### Result: \nDiscretize a list of values into n bins (computes the bins from a numerical variable into n (default 10) bins. Returns a distribution map with the values (values key), the interval legends (legend key), the distribution parameters (params keys, for cumulative charts). Parameters can be (list), (list, nbbins) or (list,nbbins,valmin,valmax)\n\n#### Examples: \n```\nmap var0   `map`\n  *  **`distribution2d_of`** (`container` , `container`) --->  `map`\n  *  **`distribution2d_of`** (`container`, `container`, `int`, `int`) --->  `map`\n  *  **`distribution2d_of`** (`container`, `container`, `int`, `float`, `float`, `int`, `float`, `float`) --->  `map` \n\n#### Result: \nDiscretize two lists of values into n bins (computes the bins from a numerical variable into n (default 10) bins. Returns a distribution map with the values (values key), the interval legends (legend key), the distribution parameters (params keys, for cumulative charts). Parameters can be (list), (list, nbbins) or (list,nbbins,valmin,valmax)\n\n#### Examples: \n```\nmap var0   `int`\n  *  **`div`** (`float` , `float`) --->  `int`\n  * `int` **`div`** `int` --->  `int`\n  *  **`div`** (`int` , `int`) --->  `int`\n  * `float` **`div`** `int` --->  `int`\n  *  **`div`** (`float` , `int`) --->  `int`\n  * `int` **`div`** `float` --->  `int`\n  *  **`div`** (`int` , `float`) --->  `int` \n\n#### Result: \nReturns the truncation of the division of the left-hand operand by the right-hand operand.\n\n#### Special cases:     \n  * if the right-hand operand is equal to zero, raises an exception.    \n  * if the right-hand operand is equal to zero, raises an exception.    \n  * if the right-hand operand is equal to zero, raises an exception.\n\n#### Examples: \n```\nint var0   `file` \n\n#### Result: \nConstructs a file of type dxf. Allowed extensions are limited to dxf\n    \t\n----\n\n\n[//]: # (keyword|operator_edge)\n### `edge`\n\n#### Possible use: \n  *  **`edge`** (`pair`) --->  `unknown`\n  *  **`edge`** (`unknown`) --->  `unknown`\n  * `unknown` **`edge`** `unknown` --->  `unknown`\n  *  **`edge`** (`unknown` , `unknown`) --->  `unknown`\n  * `pair` **`edge`** `float` --->  `unknown`\n  *  **`edge`** (`pair` , `float`) --->  `unknown`\n  * `unknown` **`edge`** `float` --->  `unknown`\n  *  **`edge`** (`unknown` , `float`) --->  `unknown`\n  *  **`edge`** (`unknown`, `unknown`, `unknown`) --->  `unknown`\n  *  **`edge`** (`unknown`, `unknown`, `float`) --->  `unknown`\n  *  **`edge`** (`pair`, `unknown`, `float`) --->  `unknown`\n  *  **`edge`** (`unknown`, `unknown`, `unknown`, `float`) --->  `unknown`\n    \t\n----\n\n\n[//]: # (keyword|operator_edge_between)\n### `edge_between`\n\n#### Possible use: \n  * `graph` **`edge_between`** `pair` --->  `unknown`\n  *  **`edge_between`** (`graph` , `pair`) --->  `unknown` \n\n#### Result: \nreturns the edge linking two nodes\n\n#### Examples: \n```\nunknown var0   `map` \n\n#### Result: \nreturns a map containing for each edge (key), its betweenness centrality (value): number of shortest paths passing through each edge\n\n#### Examples: \n```\ngraph graphEpidemio   `container`\n    \t\n----\n\n\n[//]: # (keyword|operator_eigenvalues)\n### `eigenvalues`\n\n#### Possible use: \n  *  **`eigenvalues`** (`matrix`) --->  `list` \n\n#### Result: \nThe eigen values (matrix) of the given matrix\n\n#### Examples: \n```\nlist var0 `, `list>`, `float`) --->  `int` \n\n#### Result: \nThe index of the best candidate according to a method based on the ELECTRE methods. The principle of the ELECTRE methods is to compare the possible candidates by pair. These methods analyses the possible outranking relation existing between two candidates. An candidate outranks another if this one is at least as good as the other one. The ELECTRE methods are based on two concepts: the concordance and the discordance. The concordance characterizes the fact that, for an outranking relation to be validated, a sufficient majority of criteria should be in favor of this assertion. The discordance characterizes the fact that, for an outranking relation to be validated, none of the criteria in the minority should oppose too strongly this assertion. These two conditions must be true for validating the outranking assertion. More information about the ELECTRE methods can be found in [http://www.springerlink.com/content/g367r44322876223/\tFigueira,  J., Mousseau, V., Roy, B.: ELECTRE Methods. In: Figueira, J., Greco, S., and Ehrgott, M., (Eds.), Multiple Criteria Decision Analysis: State of the Art Surveys, Springer, New York, 133--162 (2005)]. The first operand is the list of candidates (a candidate is a list of criterion values); the second operand the list of criterion: A criterion is a map that contains fives elements: a name, a weight, a preference value (p), an indifference value (q) and a veto value (v). The preference value represents the threshold from which the difference between two criterion values allows to prefer one vector of values over another. The indifference value represents the threshold from which the difference between two criterion values is considered significant. The veto value represents the threshold from which the difference between two criterion values disqualifies the candidate that obtained the smaller value; the last operand is the fuzzy cut.\n\n#### Special cases:     \n  * returns -1 is the list of candidates is nil or empty\n\n#### Examples: \n```\nint var0   `geometry`\n  *  **`ellipse`** (`float` , `float`) --->  `geometry` \n\n#### Result: \nAn ellipse geometry which x-radius is equal to the first operand and y-radius is equal to the second operand  \n\n#### Comment: \nthe center of the ellipse is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns a point if both operands are lower or equal to 0, a line if only one is.\n\n#### Examples: \n```\ngeometry var0   `emotion` \n\n#### Result: \nCasts the operand into the type emotion\n    \t\n----\n\n\n[//]: # (keyword|operator_empty)\n### `empty`\n\n#### Possible use: \n  *  **`empty`** (`container`) --->  `bool`\n  *  **`empty`** (`string`) --->  `bool` \n\n#### Result: \ntrue if the operand is empty, false otherwise.  \n\n#### Comment: \nthe empty operator behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a map, empty returns true if the map contains no key-value mappings, and false otherwise    \n  * if it is a file, empty returns true if the content of the file (that is also a container) is empty, and false otherwise    \n  * if it is a population, empty returns true if there is no agent in the population, and false otherwise    \n  * if it is a graph, empty returns true if it contains no vertex and no edge, and false otherwise    \n  * if it is a matrix of int, float or object, it will return true if all elements are respectively 0, 0.0 or null, and false otherwise    \n  * if it is a matrix of geometry, it will return true if the matrix contains no cell, and false otherwise    \n  * if it is a list, empty returns true if there is no element in the list, and false otherwise \n  \n```\nbool var0   `geometry` \n\n#### Result: \nA 3D geometry that represents the box that surrounds the geometries or the surface described by the arguments. More general than geometry(arguments).envelope, as it allows to pass int, double, point, image files, shape files, asc files, or any list combining these arguments, in which case the envelope will be correctly expanded. If an envelope cannot be determined from the arguments, a default one of dimensions (0,100, 0, 100, 0, 100) is returned\n    \t\n----\n\n\n[//]: # (keyword|operator_eval_gaml)\n### `eval_gaml`\n\n#### Possible use: \n  *  **`eval_gaml`** (`string`) --->  `unknown` \n\n#### Result: \nevaluates the given GAML string.\n\n#### Examples: \n```\nunknown var0   `bool` \n\n#### Result: \nevaluate the facet when of a given plan\n\n#### Examples: \n```\neval_when(plan1)\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_even)\n### `even`\n\n#### Possible use: \n  *  **`even`** (`int`) --->  `bool` \n\n#### Result: \nReturns true if the operand is even and false if it is odd.\n\n#### Special cases:     \n  * if the operand is equal to 0, it returns true.    \n  * if the operand is a float, it is truncated before\n\n#### Examples: \n```\nbool var0   `bool`\n  *  **`every`** (`any expression`) --->  `bool`\n  * `msi.gama.util.GamaDateInterval` **`every`** `any expression` --->  `msi.gama.util.IList`\n  *  **`every`** (`msi.gama.util.GamaDateInterval` , `any expression`) --->  `msi.gama.util.IList`\n  * `container` **`every`** `int` --->  `container`\n  *  **`every`** (`container` , `int`) --->  `container` \n\n#### Result: \ntrue every operand * cycle, false otherwise\napplies a step to an interval of dates defined by 'date1 to date2'\nexpects a frequency (expressed in seconds of simulated time) as argument. Will return true every time the current_date matches with this frequency\nRetrieves elements from the first argument every `step` (second argument) elements. Raises an error if the step is negative or equal to zero  \n\n#### Comment: \nthe value of the every operator depends on the cycle. It can be used to do something every x cycle.Used to do something at regular intervals of time. Can be used in conjunction with 'since', 'after', 'before', 'until' or 'between', so that this computation only takes place in the temporal segment defined by these operators. In all cases, the starting_date of the model is used as a reference starting point\n\n#### Examples: \n```\nif every(2) {write \"the cycle number is even\";}\n\t     else {write \"the cycle number is odd\";}\n(date('2000-01-01') to date('2010-01-01')) every (#month) // builds an interval between these two dates which contains all the monthly dates starting from the beginning of the interval\nreflex when: every(2#days) since date('2000-01-01') { .. }\nstate a { transition to: b when: every(2#mn);} state b { transition to: a when: every(30#s);} // This oscillatory behavior will use the starting_date of the model as its starting point in time\n```\n      \n\n#### See also: \n[to](#to), [since](#since), [after](#after), \n    \t\n----\n\n\n[//]: # (keyword|operator_every_cycle)\n### `every_cycle`\nSame signification as [every](#every)\n    \t\n----\n\n\n[//]: # (keyword|operator_evidence_theory_DM)\n### `evidence_theory_DM`\n\n#### Possible use: \n  * `list` **`evidence_theory_DM`** `list>` --->  `int`\n  *  **`evidence_theory_DM`** (`list` , `list>`) --->  `int`\n  *  **`evidence_theory_DM`** (`list`, `list>`, `bool`) --->  `int` \n\n#### Result: \nThe index of the best candidate according to a method based on the Evidence theory. This theory, which was proposed by Shafer ([http://www.glennshafer.com/books/amte.html Shafer G (1976) A mathematical theory of evidence, Princeton University Press]), is based on the work of Dempster ([http://projecteuclid.org/DPubS?service=UI&version=1.0&verb=Display&handle=euclid.aoms/1177698950 Dempster A (1967) Upper and lower probabilities induced by multivalued mapping. Annals of Mathematical Statistics, vol.  38, pp. 325--339]) on lower and upper probability distributions. The first operand is the list of candidates (a candidate is a list of criterion values); the second operand the list of criterion: A criterion is a map that contains seven elements: a name, a first threshold s1, a second threshold s2, a value for the assertion \"this candidate is the best\" at threshold s1 (v1p), a value for the assertion \"this candidate is the best\" at threshold s2 (v2p), a value for the assertion \"this candidate is not the best\" at threshold s1 (v1c), a value for the assertion \"this candidate is not the best\" at threshold s2 (v2c). v1p, v2p, v1c and v2c have to been defined in order that: v1p + v1c <= 1.0; v2p + v2c <= 1.0.; the last operand allows to use a simple version of this multi-criteria decision making method (simple if true)\n\n#### Special cases:     \n  * if the operator is used with only 2 operands (the candidates and the criteria), the last parameter (use simple method) is set to true    \n  * returns -1 is the list of candidates is nil or empty\n\n#### Examples: \n```\nint var0   `float`\n  *  **`exp`** (`int`) --->  `float` \n\n#### Result: \nReturns Euler's number e raised to the power of the operand.\n\n#### Special cases:     \n  * the operand is casted to a float before being evaluated.    \n  * the operand is casted to a float before being evaluated.\n\n#### Examples: \n```\nfloat var0   `float` \n\n#### Result: \nReturns the factorial of the operand.\n\n#### Special cases:     \n  * if the operand is less than 0, fact returns 0.\n\n#### Examples: \n```\nfloat var0   `point`\n  *  **`farthest_point_to`** (`geometry` , `point`) --->  `point` \n\n#### Result: \nthe farthest point of the left-operand to the left-point.\n\n#### Examples: \n```\npoint var0 ` **`farthest_to`** `geometry` --->  `geometry`\n  *  **`farthest_to`** (`container` , `geometry`) --->  `geometry` \n\n#### Result: \nAn agent or a geometry among the left-operand list of agents, species or meta-population (addition of species), the farthest to the operand (casted as a geometry).  \n\n#### Comment: \nthe distance is computed in the topology of the calling agent (the agent in which this operator is used), with the distance algorithm specific to the topology.\n\n#### Examples: \n```\ngeometry var0   `file`\n  * `string` **`file`** `container` --->  `file`\n  *  **`file`** (`string` , `container`) --->  `file` \n\n#### Result: \nopens a file in read only mode, creates a GAML file object, and tries to determine and store the file content in the contents attribute.\nCreates a file in read/write mode, setting its contents to the container passed in parameter  \n\n#### Comment: \nThe file should have a supported extension, see file type definition for supported file extensions.The type of container to pass will depend on the type of file (see the management of files in the documentation). Can be used to copy files since files are considered as containers. For example: save file('image_copy.png', file('image.png')); will copy image.png to image_copy.png\n\n#### Special cases:     \n  * If the specified string does not refer to an existing file, an exception is risen when the variable is used.\n\n#### Examples: \n```\nlet fileT type: file value: file(\"../includes/Stupid_Cell.Data\"); \n\t\t\t// fileT represents the file \"../includes/Stupid_Cell.Data\"\n\t\t\t// fileT.contents here contains a matrix storing all the data of the text file\n```\n      \n\n#### See also: \n[folder](#folder), [new_folder](#new_folder), \n    \t\n----\n\n\n[//]: # (keyword|operator_file_exists)\n### `file_exists`\n\n#### Possible use: \n  *  **`file_exists`** (`string`) --->  `bool` \n\n#### Result: \nTest whether the parameter is the path to an existing file.\n    \t\n----\n\n\n[//]: # (keyword|operator_first)\n### `first`\n\n#### Possible use: \n  *  **`first`** (`string`) --->  `string`\n  *  **`first`** (`container`) --->  `ValueType`\n  * `int` **`first`** `container` --->  `container`\n  *  **`first`** (`int` , `container`) --->  `container` \n\n#### Result: \nthe first value of the operand  \n\n#### Comment: \nthe first operator behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a map, first returns the first value of the first pair (in insertion order)    \n  * if it is a file, first returns the first element of the content of the file (that is also a container)    \n  * if it is a population, first returns the first agent of the population    \n  * if it is a graph, first returns the first edge (in creation order)    \n  * if it is a matrix, first returns the element at {0,0} in the matrix    \n  * for a matrix of int or float, it will return 0 if the matrix is empty    \n  * for a matrix of object or geometry, it will return nil if the matrix is empty    \n  * if it is a string, first returns a string composed of its first character \n  \n```\nstring var0   `unknown`\n  *  **`first_with`** (`container` , `any expression`) --->  `unknown` \n\n#### Result: \nthe first element of the left-hand operand that makes the right-hand operand evaluate to true.  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.\n\n#### Special cases:     \n  * if the left-hand operand is nil, first_with throws an error. If there is no element that satisfies the condition, it returns nil    \n  * if the left-operand is a map, the keyword each will contain each value \n  \n```\nunknown var4 = 4); \t// var4 equals 4\nunknown var5 = 4); \t// var5 equals 3::4\n\n``` \n\n\n\n#### Examples: \n```\nunknown var0  3); \t// var0 equals 4\nunknown var2  32); \t// var3 equals node2\n```\n      \n\n#### See also: \n[group_by](#group_by), [last_with](#last_with), [where](#where), \n    \t\n----\n\n\n[//]: # (keyword|operator_flip)\n### `flip`\n\n#### Possible use: \n  *  **`flip`** (`float`) --->  `bool` \n\n#### Result: \ntrue or false given the probability represented by the operand\n\n#### Special cases:     \n  * flip 0 always returns false, flip 1 true\n\n#### Examples: \n```\nbool var0   `float` \n\n#### Result: \nCasts the operand into the type float\n    \t\n----\n\n\n[//]: # (keyword|operator_floor)\n### `floor`\n\n#### Possible use: \n  *  **`floor`** (`float`) --->  `float` \n\n#### Result: \nMaps the operand to the largest previous following integer, i.e. the largest integer not greater than x.\n\n#### Examples: \n```\nfloat var0   `file` \n\n#### Result: \nopens an existing repository\n\n#### Special cases:     \n  * If the specified string does not refer to an existing repository, an exception is risen.\n\n#### Examples: \n```\nfolder(\"../includes/\")\nfile dirT   `font` \n\n#### Result: \nCreates a new font, by specifying its name (either a font face name like 'Lucida Grande Bold' or 'Helvetica', or a logical name like 'Dialog', 'SansSerif', 'Serif', etc.), a size in points and a style, either #bold, #italic or #plain or a combination (addition) of them.\n\n#### Examples: \n```\nfont var0   `map`\n  *  **`frequency_of`** (`container` , `any expression`) --->  `map` \n\n#### Result: \nReturns a map with keys equal to the application of the right-hand argument (like collect) and values equal to the frequency of this key (i.e. how many times it has been obtained)\n\n#### Examples: \n```\nmap var0 `, `list`, `list`, `list`, `list`, `matrix`, `float`) --->  `float`\n  *  **`fuzzy_kappa`** (`list`, `list`, `list`, `list`, `list`, `matrix`, `float`, `list`) --->  `float` \n\n#### Result: \nfuzzy kappa indicator for 2 map comparisons: fuzzy_kappa(agents_list,list_vals1,list_vals2, output_similarity_per_agents,categories,fuzzy_categories_matrix, fuzzy_distance, weights). Reference: Visser, H., and T. de Nijs, 2006. The map comparison kit, Environmental Modelling & Software, 21\nfuzzy kappa indicator for 2 map comparisons: fuzzy_kappa(agents_list,list_vals1,list_vals2, output_similarity_per_agents,categories,fuzzy_categories_matrix, fuzzy_distance). Reference: Visser, H., and T. de Nijs, 2006. The map comparison kit, Environmental Modelling & Software, 21\n\n#### Examples: \n```\nfuzzy_kappa([ag1, ag2, ag3, ag4, ag5],[cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0],[0,1,0],[0,0,1]], 2, [1.0,3.0,2.0,2.0,4.0])\nfuzzy_kappa([ag1, ag2, ag3, ag4, ag5],[cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0],[0,1,0],[0,0,1]], 2)\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_fuzzy_kappa_sim)\n### `fuzzy_kappa_sim`\n\n#### Possible use: \n  *  **`fuzzy_kappa_sim`** (`list`, `list`, `list`, `list`, `list`, `list`, `matrix`, `float`) --->  `float`\n  *  **`fuzzy_kappa_sim`** (`list`, `list`, `list`, `list`, `list`, `list`, `matrix`, `float`, `list`) --->  `float` \n\n#### Result: \nfuzzy kappa simulation indicator for 2 map comparisons: fuzzy_kappa_sim(agents_list,list_vals1,list_vals2, output_similarity_per_agents,fuzzy_transitions_matrix, fuzzy_distance). Reference: Jasper van Vliet, Alex Hagen-Zanker, Jelle Hurkens, Hedwig van Delden, A fuzzy set approach to assess the predictive accuracy of land use simulations, Ecological Modelling, 24 July 2013, Pages 32-42, ISSN 0304-3800, \nfuzzy kappa simulation indicator for 2 map comparisons: fuzzy_kappa_sim(agents_list,list_vals1,list_vals2, output_similarity_per_agents,fuzzy_transitions_matrix, fuzzy_distance, weights). Reference: Jasper van Vliet, Alex Hagen-Zanker, Jelle Hurkens, Hedwig van Delden, A fuzzy set approach to assess the predictive accuracy of land use simulations, Ecological Modelling, 24 July 2013, Pages 32-42, ISSN 0304-3800,\n\n#### Examples: \n```\nfuzzy_kappa_sim([ag1, ag2, ag3, ag4, ag5], [cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,1]], 2)\nfuzzy_kappa_sim([ag1, ag2, ag3, ag4, ag5], [cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,1]], 2,[1.0,3.0,2.0,2.0,4.0])\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_gaml_file)\n### `gaml_file`\n\n#### Possible use: \n  *  **`gaml_file`** (`string`) --->  `file` \n\n#### Result: \nConstructs a file of type gaml. Allowed extensions are limited to gaml, experiment\n    \t\n----\n\n\n[//]: # (keyword|operator_gamma_index)\n### `gamma_index`\n\n#### Possible use: \n  *  **`gamma_index`** (`graph`) --->  `float` \n\n#### Result: \nreturns the gamma index of the graph (A measure of connectivity that considers the relationship between the number of observed links and the number of possible links: gamma = e/(3 `*` (v - 2)) - for planar graph.\n\n#### Examples: \n```\ngraph graphEpidemio   `float`\n  *  **`gamma_rnd`** (`float` , `float`) --->  `float` \n\n#### Result: \nreturns a random value from a gamma distribution with specified values of the shape and scale parameters\n\n#### Examples: \n```\ngamma_rnd(10.0,5.0)\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_gauss)\n### `gauss`\n\n#### Possible use: \n  *  **`gauss`** (`point`) --->  `float`\n  * `float` **`gauss`** `float` --->  `float`\n  *  **`gauss`** (`float` , `float`) --->  `float` \n\n#### Result: \nA value from a normally distributed random variable with expected value (mean) and variance (standardDeviation). The probability density function of such a variable is a Gaussian.\nA value from a normally distributed random variable with expected value (mean) and variance (standardDeviation). The probability density function of such a variable is a Gaussian.\n\n#### Special cases:     \n  * when the operand is a point, it is read as {mean, standardDeviation}    \n  * when standardDeviation value is 0.0, it always returns the mean value    \n  * when the operand is a point, it is read as {mean, standardDeviation}    \n  * when standardDeviation value is 0.0, it always returns the mean value\n\n#### Examples: \n```\nfloat var0 `, `species`, `int`, `bool`) --->  `graph`\n  *  **`generate_barabasi_albert`** (`species`, `species`, `int`, `int`, `bool`) --->  `graph` \n\n#### Result: \nreturns a random scale-free network (following Barabasi-Albert (BA) model).\nreturns a random scale-free network (following Barabasi-Albert (BA) model).  \n\n#### Comment: \nThe Barabasi-Albert (BA) model is an algorithm for generating random scale-free networks using a preferential attachment mechanism. A scale-free network is a network whose degree distribution follows a power law, at least asymptotically.Such networks are widely observed in natural and human-made systems, including the Internet, the world wide web, citation networks, and some social networks. [From Wikipedia article]The map operand should includes following elements:The Barabasi-Albert (BA) model is an algorithm for generating random scale-free networks using a preferential attachment mechanism. A scale-free network is a network whose degree distribution follows a power law, at least asymptotically.Such networks are widely observed in natural and human-made systems, including the Internet, the world wide web, citation networks, and some social networks. [From Wikipedia article]The map operand should includes following elements:\n\n#### Special cases:     \n  * \"vertices_specy\": the species of vertices    \n  * \"edges_species\": the species of edges    \n  * \"size\": the graph will contain (size + 1) nodes    \n  * \"m\": the number of edges added per novel node    \n  * \"synchronized\": is the graph and the species of vertices and edges synchronized?    \n  * \"agents\": list of existing node agents    \n  * \"edges_species\": the species of edges    \n  * \"size\": the graph will contain (size + 1) nodes    \n  * \"m\": the number of edges added per novel node    \n  * \"synchronized\": is the graph and the species of vertices and edges synchronized?\n\n#### Examples: \n```\ngraph graphEpidemio  graphEpidemio `, `species`, `bool`) --->  `graph`\n  *  **`generate_complete_graph`** (`container`, `species`, `float`, `bool`) --->  `graph`\n  *  **`generate_complete_graph`** (`species`, `species`, `int`, `bool`) --->  `graph`\n  *  **`generate_complete_graph`** (`species`, `species`, `int`, `float`, `bool`) --->  `graph` \n\n#### Result: \nreturns a fully connected graph.\nreturns a fully connected graph.\nreturns a fully connected graph.\nreturns a fully connected graph.  \n\n#### Comment: \nArguments should include following elements:Arguments should include following elements:Arguments should include following elements:Arguments should include following elements:\n\n#### Special cases:     \n  * \"agents\": list of existing node agents    \n  * \"edges_species\": the species of edges    \n  * \"layoutRadius\": nodes of the graph will be located on a circle with radius layoutRadius and centered in the environment.    \n  * \"synchronized\": is the graph and the species of vertices and edges synchronized?    \n  * \"vertices_specy\": the species of vertices    \n  * \"edges_species\": the species of edges    \n  * \"size\": the graph will contain size nodes.    \n  * \"layoutRadius\": nodes of the graph will be located on a circle with radius layoutRadius and centered in the environment.    \n  * \"synchronized\": is the graph and the species of vertices and edges synchronized?    \n  * \"vertices_specy\": the species of vertices    \n  * \"edges_species\": the species of edges    \n  * \"size\": the graph will contain size nodes.    \n  * \"synchronized\": is the graph and the species of vertices and edges synchronized?    \n  * \"agents\": list of existing node agents    \n  * \"edges_species\": the species of edges    \n  * \"synchronized\": is the graph and the species of vertices and edges synchronized?\n\n#### Examples: \n```\ngraph myGraph  myGraph  myGraph  myGraph `, `species`, `float`, `int`, `bool`) --->  `graph`\n  *  **`generate_watts_strogatz`** (`species`, `species`, `int`, `float`, `int`, `bool`) --->  `graph` \n\n#### Result: \nreturns a random small-world network (following Watts-Strogatz model).\nreturns a random small-world network (following Watts-Strogatz model).  \n\n#### Comment: \nThe Watts-Strogatz model is a random graph generation model that produces graphs with small-world properties, including short average path lengths and high clustering.A small-world network is a type of graph in which most nodes are not neighbors of one another, but most nodes can be reached from every other by a small number of hops or steps. [From Wikipedia article]The map operand should includes following elements:The Watts-Strogatz model is a random graph generation model that produces graphs with small-world properties, including short average path lengths and high clustering.A small-world network is a type of graph in which most nodes are not neighbors of one another, but most nodes can be reached from every other by a small number of hops or steps. [From Wikipedia article]The map operand should includes following elements:\n\n#### Special cases:     \n  * \"vertices_specy\": the species of vertices    \n  * \"edges_species\": the species of edges    \n  * \"size\": the graph will contain (size + 1) nodes. Size must be greater than k.    \n  * \"p\": probability to \"rewire\" an edge. So it must be between 0 and 1. The parameter is often called beta in the literature.    \n  * \"k\": the base degree of each node. k must be greater than 2 and even.    \n  * \"synchronized\": is the graph and the species of vertices and edges synchronized?    \n  * \"agents\": list of existing node agents    \n  * \"edges_species\": the species of edges    \n  * \"p\": probability to \"rewire\" an edge. So it must be between 0 and 1. The parameter is often called beta in the literature.    \n  * \"k\": the base degree of each node. k must be greater than 2 and even.    \n  * \"synchronized\": is the graph and the species of vertices and edges synchronized?\n\n#### Examples: \n```\ngraph myGraph  myGraph   `file` \n\n#### Result: \nConstructs a file of type geojson. Allowed extensions are limited to json, geojson, geo.json\n    \t\n----\n\n\n[//]: # (keyword|operator_geometric_mean)\n### `geometric_mean`\n\n#### Possible use: \n  *  **`geometric_mean`** (`container`) --->  `float` \n\n#### Result: \nthe geometric mean of the elements of the operand. See Geometric_mean for more details.  \n\n#### Comment: \nThe operator casts all the numerical element of the list into float. The elements that are not numerical are discarded.\n\n#### Examples: \n```\nfloat var0   `geometry` \n\n#### Result: \nCasts the operand into the type geometry\n    \t\n----\n\n\n[//]: # (keyword|operator_geometry_collection)\n### `geometry_collection`\n\n#### Possible use: \n  *  **`geometry_collection`** (`container`) --->  `geometry` \n\n#### Result: \nA geometry collection (multi-geometry) composed of the given list of geometries.\n\n#### Special cases:     \n  * if the operand is nil, returns the point geometry {0,0}    \n  * if the operand is composed of a single geometry, returns a copy of the geometry.\n\n#### Examples: \n```\ngeometry var0   `unknown`\n  *  **`get`** (`geometry` , `string`) --->  `unknown`\n  * `agent` **`get`** `string` --->  `unknown`\n  *  **`get`** (`agent` , `string`) --->  `unknown` \n\n#### Result: \nReads an attribute of the specified geometry (left operand). The attribute name is specified by the right operand.\nReads an attribute of the specified agent (left operand). The attribute name is specified by the right operand.\n\n#### Special cases:     \n  * Reading the attribute of a geometry \n  \n```\nstring geom_area   `predicate` \n\n#### Result: \nget the about value of the given emotion\n\n#### Examples: \n```\nget_about(emotion)\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_get_agent)\n### `get_agent`\n\n#### Possible use: \n  *  **`get_agent`** (`msi.gaml.architecture.simplebdi.SocialLink`) --->  `agent` \n\n#### Result: \nget the agent value of the given social link\n\n#### Examples: \n```\nget_agent(social_link1)\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_get_agent_cause)\n### `get_agent_cause`\n\n#### Possible use: \n  *  **`get_agent_cause`** (`emotion`) --->  `agent`\n  *  **`get_agent_cause`** (`predicate`) --->  `agent` \n\n#### Result: \nget the agent cause value of the given emotion\n\n#### Examples: \n```\nget_agent_cause(emotion)\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_get_decay)\n### `get_decay`\n\n#### Possible use: \n  *  **`get_decay`** (`emotion`) --->  `float` \n\n#### Result: \nget the decay value of the given emotion\n\n#### Examples: \n```\nget_decay(emotion)\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_get_dominance)\n### `get_dominance`\n\n#### Possible use: \n  *  **`get_dominance`** (`msi.gaml.architecture.simplebdi.SocialLink`) --->  `float` \n\n#### Result: \nget the dominance value of the given social link\n\n#### Examples: \n```\nget_dominance(social_link1)\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_get_familiarity)\n### `get_familiarity`\n\n#### Possible use: \n  *  **`get_familiarity`** (`msi.gaml.architecture.simplebdi.SocialLink`) --->  `float` \n\n#### Result: \nget the familiarity value of the given social link\n\n#### Examples: \n```\nget_familiarity(social_link1)\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_get_intensity)\n### `get_intensity`\n\n#### Possible use: \n  *  **`get_intensity`** (`emotion`) --->  `float` \n\n#### Result: \nget the intensity value of the given emotion\n\n#### Examples: \n```\nemotion set_intensity 12\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_get_lifetime)\n### `get_lifetime`\n\n#### Possible use: \n  *  **`get_lifetime`** (`predicate`) --->  `int`\n    \t\n----\n\n\n[//]: # (keyword|operator_get_liking)\n### `get_liking`\n\n#### Possible use: \n  *  **`get_liking`** (`msi.gaml.architecture.simplebdi.SocialLink`) --->  `float` \n\n#### Result: \nget the liking value of the given social link\n\n#### Examples: \n```\nget_liking(social_link1)\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_get_praiseworthiness)\n### `get_praiseworthiness`\n\n#### Possible use: \n  *  **`get_praiseworthiness`** (`predicate`) --->  `float`\n    \t\n----\n\n\n[//]: # (keyword|operator_get_priority)\n### `get_priority`\n\n#### Possible use: \n  *  **`get_priority`** (`predicate`) --->  `float`\n    \t\n----\n\n\n[//]: # (keyword|operator_get_solidarity)\n### `get_solidarity`\n\n#### Possible use: \n  *  **`get_solidarity`** (`msi.gaml.architecture.simplebdi.SocialLink`) --->  `float` \n\n#### Result: \nget the solidarity value of the given social link\n\n#### Examples: \n```\nget_solidarity(social_link1)\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_get_super_intention)\n### `get_super_intention`\n\n#### Possible use: \n  *  **`get_super_intention`** (`predicate`) --->  `predicate`\n    \t\n----\n\n\n[//]: # (keyword|operator_gif_file)\n### `gif_file`\n\n#### Possible use: \n  *  **`gif_file`** (`string`) --->  `file` \n\n#### Result: \nConstructs a file of type gif. Allowed extensions are limited to gif\n    \t\n----\n\n\n[//]: # (keyword|operator_gini)\n### `gini`\n\n#### Possible use: \n  *  **`gini`** (`list`) --->  `float`\n\n#### Special cases:     \n  * return the Gini Index of the given list of values (list of floats) \n  \n```\nfloat var0   `graph` \n\n#### Result: \nCasts the operand into the type graph\n    \t\n----\n\n\n[//]: # (keyword|operator_grayscale)\n### `grayscale`\n\n#### Possible use: \n  *  **`grayscale`** (`rgb`) --->  `rgb` \n\n#### Result: \nConverts rgb color to grayscale value  \n\n#### Comment: \nr=red, g=green, b=blue. Between 0 and 255 and gray = 0.299 `*` red + 0.587 `*` green + 0.114 `*` blue (Photoshop value)\n\n#### Examples: \n```\nrgb var0   `agent`\n  *  **`grid_at`** (`species` , `point`) --->  `agent` \n\n#### Result: \nreturns the cell of the grid (right-hand operand) at the position given by the right-hand operand  \n\n#### Comment: \nIf the left-hand operand is a point of floats, it is used as a point of ints.\n\n#### Special cases:     \n  * if the left-hand operand is not a grid cell species, returns nil\n\n#### Examples: \n```\nagent var0   `graph` \n\n#### Result: \ncreates a graph from a list of cells (operand). An edge is created between neighbors.\n\n#### Examples: \n```\nmy_cell_graph  `file` \n\n#### Result: \nConstructs a file of type grid. Allowed extensions are limited to asc, tif\n    \t\n----\n\n\n[//]: # (keyword|operator_group_by)\n### `group_by`\n\n#### Possible use: \n  * `container` **`group_by`** `any expression` --->  `map`\n  *  **`group_by`** (`container` , `any expression`) --->  `map` \n\n#### Result: \nReturns a map, where the keys take the possible values of the right-hand operand and the map values are the list of elements of the left-hand operand associated to the key value  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.\n\n#### Special cases:     \n  * if the left-hand operand is nil, group_by throws an error\n\n#### Examples: \n```\nmap var0  3); \t// var0 equals [false::[1, 2, 3], true::[4, 5, 6, 7, 8]]\nmap var1  4); \t// var3 equals [false::[2, 4], true::[6]]\n```\n      \n\n#### See also: \n[first_with](#first_with), [last_with](#last_with), [where](#where), \n    \t\n----\n\n\n[//]: # (keyword|operator_harmonic_mean)\n### `harmonic_mean`\n\n#### Possible use: \n  *  **`harmonic_mean`** (`container`) --->  `float` \n\n#### Result: \nthe harmonic mean of the elements of the operand. See Harmonic_mean for more details.  \n\n#### Comment: \nThe operator casts all the numerical element of the list into float. The elements that are not numerical are discarded.\n\n#### Examples: \n```\nfloat var0   `geometry`\n  *  **`hexagon`** (`float`) --->  `geometry` \n\n#### Result: \nA hexagon geometry which the given with and height  \n\n#### Comment: \nthe center of the hexagon is by default the location of the current agent in which has been called this operator.the center of the hexagon is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns nil if the operand is nil.    \n  * returns nil if the operand is nil.\n\n#### Examples: \n```\ngeometry var0 ` **`hierarchical_clustering`** `float` --->  `container`\n  *  **`hierarchical_clustering`** (`container` , `float`) --->  `container` \n\n#### Result: \nA tree (list of list) contained groups of agents clustered by distance considering a distance min between two groups.  \n\n#### Comment: \nuse of hierarchical clustering with Minimum for linkage criterion between two groups of agents.\n\n#### Examples: \n```\ncontainer var0   `rgb`\n  *  **`hsb`** (`float`, `float`, `float`, `int`) --->  `rgb`\n  *  **`hsb`** (`float`, `float`, `float`, `float`) --->  `rgb` \n\n#### Result: \nConverts hsb (h=hue, s=saturation, b=brightness) value to Gama color  \n\n#### Comment: \nh,s and b components should be floating-point values between 0.0 and 1.0 and when used alpha should be an integer (between 0 and 255) or a float (between 0 and 1) . Examples: Red=(0.0,1.0,1.0), Yellow=(0.16,1.0,1.0), Green=(0.33,1.0,1.0), Cyan=(0.5,1.0,1.0), Blue=(0.66,1.0,1.0), Magenta=(0.83,1.0,1.0)\n\n#### Examples: \n```\nrgb var0   `float` \n\n#### Result: \nReturns sqrt(x2 +y2) without intermediate overflow or underflow.\n\n#### Special cases:     \n  * If either argument is infinite, then the result is positive infinity. If either argument is NaN and neither argument is infinite, then the result is NaN.\n\n#### Examples: \n```\nfloat var0 `, `map`, `int`) --->  `map` \n\n#### Result: \nInverse Distance Weighting (IDW) is a type of deterministic method for multivariate interpolation with a known scattered set of points. The assigned values to each geometry are calculated with a weighted average of the values available at the known points. See: http://en.wikipedia.org/wiki/Inverse_distance_weighting Usage: IDW (list of geometries, map of points (key: point, value: value), power parameter)\n\n#### Examples: \n```\nmap var0   `file` \n\n#### Result: \nConstructs a file of type image. Allowed extensions are limited to tiff, jpg, jpeg, png, pict, bmp\n    \t\n----\n\n\n[//]: # (keyword|operator_in)\n### `in`\n\n#### Possible use: \n  * `unknown` **`in`** `container` --->  `bool`\n  *  **`in`** (`unknown` , `container`) --->  `bool`\n  * `string` **`in`** `string` --->  `bool`\n  *  **`in`** (`string` , `string`) --->  `bool` \n\n#### Result: \ntrue if the right operand contains the left operand, false otherwise  \n\n#### Comment: \nthe definition of in depends on the container\n\n#### Special cases:     \n  * if the right operand is nil or empty, in returns false    \n  * if both operands are strings, returns true if the left-hand operand patterns is included in to the right-hand string;\n\n#### Examples: \n```\nbool var0   `int`\n  *  **`in_degree_of`** (`graph` , `unknown`) --->  `int` \n\n#### Result: \nreturns the in degree of a vertex (right-hand operand) in the graph given as left-hand operand.\n\n#### Examples: \n```\nint var1   `container`\n  *  **`in_edges_of`** (`graph` , `unknown`) --->  `container` \n\n#### Result: \nreturns the list of the in-edges of a vertex (right-hand operand) in the graph given as left-hand operand.\n\n#### Examples: \n```\ncontainer var1   `string`\n  *  **`indented_by`** (`string` , `int`) --->  `string` \n\n#### Result: \nConverts a (possibly multiline) string by indenting it by a number -- specified by the second operand -- of tabulations to the right\n    \t\n----\n\n\n[//]: # (keyword|operator_index_by)\n### `index_by`\n\n#### Possible use: \n  * `container` **`index_by`** `any expression` --->  `map`\n  *  **`index_by`** (`container` , `any expression`) --->  `map` \n\n#### Result: \nproduces a new map from the evaluation of the right-hand operand for each element of the left-hand operand\n\n#### Special cases:     \n  * if the left-hand operand is nil, index_by throws an error. If the operation results in duplicate keys, only the first value corresponding to the key is kept\n\n#### Examples: \n```\nmap var0   `int`\n  *  **`index_of`** (`container` , `unknown`) --->  `int`\n  * `map` **`index_of`** `unknown` --->  `unknown`\n  *  **`index_of`** (`map` , `unknown`) --->  `unknown`\n  * `matrix` **`index_of`** `unknown` --->  `point`\n  *  **`index_of`** (`matrix` , `unknown`) --->  `point`\n  * `string` **`index_of`** `string` --->  `int`\n  *  **`index_of`** (`string` , `string`) --->  `int`\n  * `species` **`index_of`** `unknown` --->  `int`\n  *  **`index_of`** (`species` , `unknown`) --->  `int` \n\n#### Result: \nthe index of the first occurence of the right operand in the left operand container\nthe index of the first occurence of the right operand in the left operand container  \n\n#### Comment: \nThe definition of index_of and the type of the index depend on the container\n\n#### Special cases:     \n  * if the left operand is a map, index_of returns the index of a value or nil if the value is not mapped    \n  * if the left operator is a species, returns the index of an agent in a species. If the argument is not an agent of this species, returns -1. Use int(agent) instead    \n  * if the left operand is a list, index_of returns the index as an integer \n  \n```\nint var1 ` **`inside`** `geometry` --->  `list`\n  *  **`inside`** (`container` , `geometry`) --->  `list` \n\n#### Result: \nA list of agents or geometries among the left-operand list, species or meta-population (addition of species), covered by the operand (casted as a geometry).\n\n#### Examples: \n```\nlist var0  var1   `int` \n\n#### Result: \nCasts the operand into the type int\n    \t\n----\n\n\n[//]: # (keyword|operator_inter)\n### `inter`\n\n#### Possible use: \n  * `container` **`inter`** `container` --->  `container`\n  *  **`inter`** (`container` , `container`) --->  `container`\n  * `geometry` **`inter`** `geometry` --->  `geometry`\n  *  **`inter`** (`geometry` , `geometry`) --->  `geometry` \n\n#### Result: \nthe intersection of the two operands\nA geometry resulting from the intersection between the two geometries  \n\n#### Comment: \nboth containers are transformed into sets (so without duplicated element, cf. remove_deplicates operator) before the set intersection is computed.\n\n#### Special cases:     \n  * if an operand is a graph, it will be transformed into the set of its nodes    \n  * returns nil if one of the operands is nil    \n  * if an operand is a map, it will be transformed into the set of its values \n  \n```\ncontainer var0   `container` \n\n#### Result: \na new list containing the interleaved elements of the containers contained in the operand  \n\n#### Comment: \nthe operand should be a list of lists of elements. The result is a list of elements.\n\n#### Examples: \n```\ncontainer var0   `unknown`\n  *  **`internal_at`** (`agent` , `container`) --->  `unknown`\n  * `geometry` **`internal_at`** `container` --->  `unknown`\n  *  **`internal_at`** (`geometry` , `container`) --->  `unknown`\n  * `container` **`internal_at`** `list` --->  `ValueType`\n  *  **`internal_at`** (`container` , `list`) --->  `ValueType` \n\n#### Result: \nFor internal use only. Corresponds to the implementation, for agents, of the access to containers with [index]\nFor internal use only. Corresponds to the implementation, for geometries, of the access to containers with [index]\nFor internal use only. Corresponds to the implementation of the access to containers with [index]    \n\n#### See also: \n[at](#at), \n    \t\n----\n\n\n[//]: # (keyword|operator_internal_integrated_value)\n### `internal_integrated_value`\n\n#### Possible use: \n  * `any expression` **`internal_integrated_value`** `any expression` --->  `container`\n  *  **`internal_integrated_value`** (`any expression` , `any expression`) --->  `container` \n\n#### Result: \nFor internal use only. Corresponds to the implementation, for agents, of the access to containers with [index]\n    \t\n----\n\n\n[//]: # (keyword|operator_internal_zero_order_equation)\n### `internal_zero_order_equation`\n\n#### Possible use: \n  *  **`internal_zero_order_equation`** (`any expression`) --->  `float`\n    \t\n----\n\n\n[//]: # (keyword|operator_intersection)\n### `intersection`\nSame signification as [inter](#inter)\n    \t\n----\n\n\n[//]: # (keyword|operator_intersects)\n### `intersects`\n\n#### Possible use: \n  * `geometry` **`intersects`** `geometry` --->  `bool`\n  *  **`intersects`** (`geometry` , `geometry`) --->  `bool` \n\n#### Result: \nA boolean, equal to true if the left-geometry (or agent/point) intersects the right-geometry (or agent/point).\n\n#### Special cases:     \n  * if one of the operand is null, returns false.\n\n#### Examples: \n```\nbool var0   `matrix` \n\n#### Result: \nThe inverse matrix of the given matrix. If no inverse exists, returns a matrix that has properties that resemble that of an inverse.\n\n#### Examples: \n```\nmatrix var0   `bool`\n  *  **`is`** (`unknown` , `any expression`) --->  `bool` \n\n#### Result: \nreturns true if the left operand is of the right operand type, false otherwise\n\n#### Examples: \n```\nbool var0   `bool` \n\n#### Result: \nTests whether the operand is a csv file.\n    \t\n----\n\n\n[//]: # (keyword|operator_is_dxf)\n### `is_dxf`\n\n#### Possible use: \n  *  **`is_dxf`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a dxf file.\n    \t\n----\n\n\n[//]: # (keyword|operator_is_finite)\n### `is_finite`\n\n#### Possible use: \n  *  **`is_finite`** (`float`) --->  `bool` \n\n#### Result: \nReturns whether the argument is a finite number or not\n\n#### Examples: \n```\nbool var0   `bool` \n\n#### Result: \nTests whether the operand is a gaml file.\n    \t\n----\n\n\n[//]: # (keyword|operator_is_geojson)\n### `is_geojson`\n\n#### Possible use: \n  *  **`is_geojson`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a geojson file.\n    \t\n----\n\n\n[//]: # (keyword|operator_is_gif)\n### `is_gif`\n\n#### Possible use: \n  *  **`is_gif`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a gif file.\n    \t\n----\n\n\n[//]: # (keyword|operator_is_grid)\n### `is_grid`\n\n#### Possible use: \n  *  **`is_grid`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a grid file.\n    \t\n----\n\n\n[//]: # (keyword|operator_is_image)\n### `is_image`\n\n#### Possible use: \n  *  **`is_image`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a image file.\n    \t\n----\n\n\n[//]: # (keyword|operator_is_json)\n### `is_json`\n\n#### Possible use: \n  *  **`is_json`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a json file.\n    \t\n----\n\n\n[//]: # (keyword|operator_is_number)\n### `is_number`\n\n#### Possible use: \n  *  **`is_number`** (`string`) --->  `bool`\n  *  **`is_number`** (`float`) --->  `bool` \n\n#### Result: \ntests whether the operand represents a numerical value\nReturns whether the argument is a real number or not  \n\n#### Comment: \nNote that the symbol . should be used for a float value (a string with , will not be considered as a numeric value). Symbols e and E are also accepted. A hexadecimal value should begin with #.\n\n#### Examples: \n```\nbool var0   `bool` \n\n#### Result: \nTests whether the operand is a obj file.\n    \t\n----\n\n\n[//]: # (keyword|operator_is_osm)\n### `is_osm`\n\n#### Possible use: \n  *  **`is_osm`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a osm file.\n    \t\n----\n\n\n[//]: # (keyword|operator_is_pgm)\n### `is_pgm`\n\n#### Possible use: \n  *  **`is_pgm`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a pgm file.\n    \t\n----\n\n\n[//]: # (keyword|operator_is_property)\n### `is_property`\n\n#### Possible use: \n  *  **`is_property`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a property file.\n    \t\n----\n\n\n[//]: # (keyword|operator_is_R)\n### `is_R`\n\n#### Possible use: \n  *  **`is_R`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a R file.\n    \t\n----\n\n\n[//]: # (keyword|operator_is_shape)\n### `is_shape`\n\n#### Possible use: \n  *  **`is_shape`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a shape file.\n    \t\n----\n\n\n[//]: # (keyword|operator_is_skill)\n### `is_skill`\n\n#### Possible use: \n  * `unknown` **`is_skill`** `string` --->  `bool`\n  *  **`is_skill`** (`unknown` , `string`) --->  `bool` \n\n#### Result: \nreturns true if the left operand is an agent whose species implements the right-hand skill name\n\n#### Examples: \n```\nbool var0   `bool` \n\n#### Result: \nTests whether the operand is a svg file.\n    \t\n----\n\n\n[//]: # (keyword|operator_is_text)\n### `is_text`\n\n#### Possible use: \n  *  **`is_text`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a text file.\n    \t\n----\n\n\n[//]: # (keyword|operator_is_threeds)\n### `is_threeds`\n\n#### Possible use: \n  *  **`is_threeds`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a threeds file.\n    \t\n----\n\n\n[//]: # (keyword|operator_is_URL)\n### `is_URL`\n\n#### Possible use: \n  *  **`is_URL`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a URL file.\n    \t\n----\n\n\n[//]: # (keyword|operator_is_xml)\n### `is_xml`\n\n#### Possible use: \n  *  **`is_xml`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a xml file.\n    \t\n----\n\n\n[//]: # (keyword|operator_json_file)\n### `json_file`\n\n#### Possible use: \n  *  **`json_file`** (`string`) --->  `file` \n\n#### Result: \nConstructs a file of type json. Allowed extensions are limited to json\n    \t\n----\n\n\n[//]: # (keyword|operator_kappa)\n### `kappa`\n\n#### Possible use: \n  *  **`kappa`** (`list`, `list`, `list`) --->  `float`\n  *  **`kappa`** (`list`, `list`, `list`, `list`) --->  `float` \n\n#### Result: \nkappa indicator for 2 map comparisons: kappa(list_vals1,list_vals2,categories). Reference: Cohen, J. A coefficient of agreement for nominal scales. Educ. Psychol. Meas. 1960, 20.\nkappa indicator for 2 map comparisons: kappa(list_vals1,list_vals2,categories, weights). Reference: Cohen, J. A coefficient of agreement for nominal scales. Educ. Psychol. Meas. 1960, 20.\n\n#### Examples: \n```\nkappa([cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2],[cat1,cat2,cat3])\nfloat var1   `float`\n  *  **`kappa_sim`** (`list`, `list`, `list`, `list`, `list`) --->  `float` \n\n#### Result: \nkappa simulation indicator for 2 map comparisons: kappa(list_valsInits,list_valsObs,list_valsSim, categories). Reference: van Vliet, J., Bregt, A.K. & Hagen-Zanker, A. (2011). Revisiting Kappa to account for change in the accuracy assessment of land-use change models, Ecological Modelling 222(8).\nkappa simulation indicator for 2 map comparisons: kappa(list_valsInits,list_valsObs,list_valsSim, categories, weights). Reference: van Vliet, J., Bregt, A.K. & Hagen-Zanker, A. (2011). Revisiting Kappa to account for change in the accuracy assessment of land-use change models, Ecological Modelling 222(8)\n\n#### Examples: \n```\nkappa([cat1,cat1,cat2,cat2,cat2],[cat2,cat1,cat2,cat1,cat3],[cat2,cat1,cat2,cat3,cat3], [cat1,cat2,cat3])\nkappa([cat1,cat1,cat2,cat2,cat2],[cat2,cat1,cat2,cat1,cat3],[cat2,cat1,cat2,cat3,cat3], [cat1,cat2,cat3],[1.0, 2.0, 3.0, 1.0, 5.0])\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_kmeans)\n### `kmeans`\n\n#### Possible use: \n  * `list` **`kmeans`** `int` --->  `list`\n  *  **`kmeans`** (`list` , `int`) --->  `list`\n  *  **`kmeans`** (`list`, `int`, `int`) --->  `list` \n\n#### Result: \nreturns the list of clusters (list of instance indices) computed with the kmeans++ algorithm from the first operand data according to the number of clusters to split the data into (k) and the maximum number of iterations to run the algorithm for (If negative, no maximum will be used) (maxIt). Usage: kmeans(data,k,maxit)\nreturns the list of clusters (list of instance indices) computed with the kmeans++ algorithm from the first operand data according to the number of clusters to split the data into (k). Usage: kmeans(data,k)\n\n#### Special cases:     \n  * if the lengths of two vectors in the right-hand aren't equal, returns 0    \n  * if the lengths of two vectors in the right-hand aren't equal, returns 0\n\n#### Examples: \n```\nkmeans ([[2,4,5], [3,8,2], [1,1,3], [4,3,4]],2,10)\nkmeans ([[2,4,5], [3,8,2], [1,1,3], [4,3,4]],2)\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_kurtosis)\n### `kurtosis`\n\n#### Possible use: \n  *  **`kurtosis`** (`list`) --->  `float` \n\n#### Result: \nreturns kurtosis value computed from the operand list of values\n\n#### Special cases:     \n  * if the length of the list is lower than 3, returns NaN\n\n#### Examples: \n```\nkurtosis ([1,2,3,4,5])\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_last)\n### `last`\n\n#### Possible use: \n  *  **`last`** (`string`) --->  `string`\n  *  **`last`** (`container`) --->  `ValueType`\n  * `int` **`last`** `container` --->  `container`\n  *  **`last`** (`int` , `container`) --->  `container` \n\n#### Result: \nthe last element of the operand  \n\n#### Comment: \nthe last operator behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a map, last returns the value of the last pair (in insertion order)    \n  * if it is a file, last returns the last element of the content of the file (that is also a container)    \n  * if it is a population, last returns the last agent of the population    \n  * if it is a graph, last returns a list containing the last edge created    \n  * if it is a matrix, last returns the element at {length-1,length-1} in the matrix    \n  * for a matrix of int or float, it will return 0 if the matrix is empty    \n  * for a matrix of object or geometry, it will return nil if the matrix is empty    \n  * if it is a string, last returns a string composed of its last character, or an empty string if the operand is empty \n  \n```\nstring var0   `unknown`\n  *  **`last_index_of`** (`map` , `unknown`) --->  `unknown`\n  * `string` **`last_index_of`** `string` --->  `int`\n  *  **`last_index_of`** (`string` , `string`) --->  `int`\n  * `species` **`last_index_of`** `unknown` --->  `int`\n  *  **`last_index_of`** (`species` , `unknown`) --->  `int`\n  * `container` **`last_index_of`** `unknown` --->  `int`\n  *  **`last_index_of`** (`container` , `unknown`) --->  `int`\n  * `matrix` **`last_index_of`** `unknown` --->  `point`\n  *  **`last_index_of`** (`matrix` , `unknown`) --->  `point` \n\n#### Result: \nthe index of the last occurence of the right operand in the left operand container  \n\n#### Comment: \nThe definition of last_index_of and the type of the index depend on the container\n\n#### Special cases:     \n  * if the left operand is a species, the last index of an agent is the same as its index    \n  * if the left operand is a map, last_index_of returns the index as an int (the key of the pair) \n  \n```\nunknown var0   `unknown`\n  *  **`last_with`** (`container` , `any expression`) --->  `unknown` \n\n#### Result: \nthe last element of the left-hand operand that makes the right-hand operand evaluate to true.  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.\n\n#### Special cases:     \n  * if the left-hand operand is nil, last_with throws an error.    \n  * If there is no element that satisfies the condition, it returns nil    \n  * if the left-operand is a map, the keyword each will contain each value \n  \n```\nunknown var4 = 4); \t// var4 equals 6\nunknown var5 = 4); \t// var5 equals 5::6\n\n``` \n\n\n\n#### Examples: \n```\nunknown var0  3); \t// var0 equals 8\nunknown var2  32); \t// var3 equals node3\n```\n      \n\n#### See also: \n[group_by](#group_by), [first_with](#first_with), [where](#where), \n    \t\n----\n\n\n[//]: # (keyword|operator_layout)\n### `layout`\n\n#### Possible use: \n  * `graph` **`layout`** `string` --->  `graph`\n  *  **`layout`** (`graph` , `string`) --->  `graph`\n  *  **`layout`** (`graph`, `string`, `int`) --->  `graph`\n  *  **`layout`** (`graph`, `string`, `int`, `map`) --->  `graph` \n\n#### Result: \nlayouts a GAMA graph.\n    \t\n----\n\n\n[//]: # (keyword|operator_length)\n### `length`\n\n#### Possible use: \n  *  **`length`** (`string`) --->  `int`\n  *  **`length`** (`container`) --->  `int` \n\n#### Result: \nthe number of elements contained in the operand  \n\n#### Comment: \nthe length operator behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a population, length returns number of agents of the population    \n  * if it is a graph, length returns the number of vertexes or of edges (depending on the way it was created)    \n  * if it is a string, length returns the number of characters \n  \n```\nint var0 `) --->  `geometry`\n  * `container` **`line`** `float` --->  `geometry`\n  *  **`line`** (`container` , `float`) --->  `geometry` \n\n#### Result: \nA polyline geometry from the given list of points represented as a cylinder of radius r.\nA polyline geometry from the given list of points.\n\n#### Special cases:     \n  * if the operand is nil, returns the point geometry {0,0}    \n  * if the operand is composed of a single point, returns a point geometry.    \n  * if the operand is nil, returns the point geometry {0,0}    \n  * if the operand is composed of a single point, returns a point geometry.    \n  * if a radius is added, the given list of points represented as a cylinder of radius r \n  \n```\ngeometry var0   `geometry`\n  *  **`link`** (`geometry` , `geometry`) --->  `geometry` \n\n#### Result: \nA dynamic line geometry between the location of the two operands  \n\n#### Comment: \nThe geometry of the link is a line between the locations of the two operands, which is built and maintained dynamically\n\n#### Special cases:     \n  * if one of the operands is nil, link returns a point geometry at the location of the other. If both are null, it returns a point geometry at {0,0}\n\n#### Examples: \n```\ngeometry var0   `list` \n\n#### Result: \nCasts the operand into the type list\n    \t\n----\n\n\n[//]: # (keyword|operator_list_with)\n### `list_with`\n\n#### Possible use: \n  * `int` **`list_with`** `any expression` --->  `container`\n  *  **`list_with`** (`int` , `any expression`) --->  `container` \n\n#### Result: \ncreates a list with a size provided by the first operand, and filled with the second operand  \n\n#### Comment: \nNote that the right operand  should be positive, and that the second one is evaluated for each position  in the list.    \n\n#### See also: \n[list](#list), \n    \t\n----\n\n\n[//]: # (keyword|operator_ln)\n### `ln`\n\n#### Possible use: \n  *  **`ln`** (`int`) --->  `float`\n  *  **`ln`** (`float`) --->  `float` \n\n#### Result: \nReturns the natural logarithm (base e) of the operand.\n\n#### Special cases:     \n  * an exception is raised if the operand is less than zero.\n\n#### Examples: \n```\nfloat var0   `graph`\n  * `string` **`load_graph_from_file`** `file` --->  `graph`\n  *  **`load_graph_from_file`** (`string` , `file`) --->  `graph`\n  * `string` **`load_graph_from_file`** `string` --->  `graph`\n  *  **`load_graph_from_file`** (`string` , `string`) --->  `graph`\n  *  **`load_graph_from_file`** (`string`, `species`, `species`) --->  `graph`\n  *  **`load_graph_from_file`** (`string`, `file`, `species`, `species`) --->  `graph`\n  *  **`load_graph_from_file`** (`string`, `string`, `species`, `species`) --->  `graph`\n  *  **`load_graph_from_file`** (`string`, `string`, `species`, `species`, `bool`) --->  `graph` \n\n#### Result: \nloads a graph from a file\nreturns a graph loaded from a given file encoded into a given format. The last boolean parameter indicates whether the resulting graph will be considered as spatial or not by GAMA  \n\n#### Comment: \nAvailable formats: \"pajek\": Pajek (Slovene word for Spider) is a program, for Windows, for analysis and visualization of large networks. See: http://pajek.imfm.si/doku.php?id=pajek for more details.\"lgl\": LGL is a compendium of applications for making the visualization of large networks and trees tractable. See: http://lgl.sourceforge.net/ for more details.\"dot\": DOT is a plain text graph description language. It is a simple way of describing graphs that both humans and computer programs can use. See: http://en.wikipedia.org/wiki/DOT_language for more details.\"edge\": This format is a simple text file with numeric vertex ids defining the edges.\"gexf\": GEXF (Graph Exchange XML Format) is a language for describing complex networks structures, their associated data and dynamics. Started in 2007 at Gephi project by different actors, deeply involved in graph exchange issues, the gexf specifications are mature enough to claim being both extensible and open, and suitable for real specific applications. See: http://gexf.net/format/ for more details.\"graphml\": GraphML is a comprehensive and easy-to-use file format for graphs based on XML. See: http://graphml.graphdrawing.org/ for more details.\"tlp\" or \"tulip\": TLP is the Tulip software graph format. See: http://tulip.labri.fr/TulipDrupal/?q=tlp-file-format for more details. \"ncol\": This format is used by the Large Graph Layout progra. It is simply a symbolic weighted edge list. It is a simple text file with one edge per line. An edge is defined by two symbolic vertex names separated by whitespace. (The symbolic vertex names themselves cannot contain whitespace.) They might followed by an optional number, this will be the weight of the edge. See: http://bioinformatics.icmb.utexas.edu/lgl for more details.The map operand should includes following elements:Available formats: \"pajek\": Pajek (Slovene word for Spider) is a program, for Windows, for analysis and visualization of large networks. See: http://pajek.imfm.si/doku.php?id=pajek for more details.\"lgl\": LGL is a compendium of applications for making the visualization of large networks and trees tractable. See: http://lgl.sourceforge.net/ for more details.\"dot\": DOT is a plain text graph description language. It is a simple way of describing graphs that both humans and computer programs can use. See: http://en.wikipedia.org/wiki/DOT_language for more details.\"edge\": This format is a simple text file with numeric vertex ids defining the edges.\"gexf\": GEXF (Graph Exchange XML Format) is a language for describing complex networks structures, their associated data and dynamics. Started in 2007 at Gephi project by different actors, deeply involved in graph exchange issues, the gexf specifications are mature enough to claim being both extensible and open, and suitable for real specific applications. See: http://gexf.net/format/ for more details.\"graphml\": GraphML is a comprehensive and easy-to-use file format for graphs based on XML. See: http://graphml.graphdrawing.org/ for more details.\"tlp\" or \"tulip\": TLP is the Tulip software graph format. See: http://tulip.labri.fr/TulipDrupal/?q=tlp-file-format for more details. \"ncol\": This format is used by the Large Graph Layout progra. It is simply a symbolic weighted edge list. It is a simple text file with one edge per line. An edge is defined by two symbolic vertex names separated by whitespace. (The symbolic vertex names themselves cannot contain whitespace.) They might followed by an optional number, this will be the weight of the edge. See: http://bioinformatics.icmb.utexas.edu/lgl for more details.The map operand should includes following elements:\n\n#### Special cases:     \n  * \"format\": the format of the file    \n  * \"filename\": the filename of the file containing the network    \n  * \"edges_species\": the species of edges    \n  * \"vertices_specy\": the species of vertices    \n  * \"format\": the format of the file    \n  * \"filename\": the filename of the file containing the network    \n  * \"edges_species\": the species of edges    \n  * \"vertices_specy\": the species of vertices    \n  * \"format\": the format of the file, \"file\": the file containing the network, \"edges_species\": the species of edges, \"vertices_specy\": the species of vertices \n  \n```\ngraph myGraph  myGraph  myGraph  myGraph  myGraph  myGraph  myGraph   `graph`\n  *  **`load_shortest_paths`** (`graph` , `matrix`) --->  `graph` \n\n#### Result: \nput in the graph cache the computed shortest paths contained in the matrix (rows: source, columns: target)\n\n#### Examples: \n```\ngraph var0   `float`\n  *  **`log`** (`int`) --->  `float` \n\n#### Result: \nReturns the logarithm (base 10) of the operand.\n\n#### Special cases:     \n  * an exception is raised if the operand is equals or less than zero.\n\n#### Examples: \n```\nfloat var0   `string` \n\n#### Result: \nConverts all of the characters in the string operand to lower case\n\n#### Examples: \n```\nstring var0   `map` \n\n#### Result: \nCasts the operand into the type map\n    \t\n----\n\n\n[//]: # (keyword|operator_masked_by)\n### `masked_by`\n\n#### Possible use: \n  * `geometry` **`masked_by`** `container` --->  `geometry`\n  *  **`masked_by`** (`geometry` , `container`) --->  `geometry`\n  *  **`masked_by`** (`geometry`, `container`, `int`) --->  `geometry`\n\n#### Examples: \n```\ngeometry var0   `msi.gama.util.GamaMaterial`\n  *  **`material`** (`float` , `float`) --->  `msi.gama.util.GamaMaterial` \n\n#### Result: \nReturns\n\n#### Examples: \n```\n\n```\n      \n\n#### See also: \n[](#), \n    \t\n----\n\n\n[//]: # (keyword|operator_matrix)\n### `matrix`\n\n#### Possible use: \n  *  **`matrix`** (`any`) --->  `matrix` \n\n#### Result: \nCasts the operand into the type matrix\n    \t\n----\n\n\n[//]: # (keyword|operator_matrix_with)\n### `matrix_with`\n\n#### Possible use: \n  * `point` **`matrix_with`** `any expression` --->  `matrix`\n  *  **`matrix_with`** (`point` , `any expression`) --->  `matrix` \n\n#### Result: \ncreates a matrix with a size provided by the first operand, and filled with the second operand  \n\n#### Comment: \nNote that both components of the right operand point should be positive, otherwise an exception is raised.    \n\n#### See also: \n[matrix](#matrix), [as_matrix](#as_matrix), \n    \t\n----\n\n\n[//]: # (keyword|operator_max)\n### `max`\n\n#### Possible use: \n  *  **`max`** (`container`) --->  `unknown` \n\n#### Result: \nthe maximum element found in the operand  \n\n#### Comment: \nthe max operator behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a population of a list of other type: max transforms all elements into integer and returns the maximum of them    \n  * if it is a map, max returns the maximum among the list of all elements value    \n  * if it is a file, max returns the maximum of the content of the file (that is also a container)    \n  * if it is a graph, max returns the maximum of the list of the elements of the graph (that can be the list of edges or vertexes depending on the graph)    \n  * if it is a matrix of int, float or object, max returns the maximum of all the numerical elements (thus all elements for integer and float matrices)    \n  * if it is a matrix of geometry, max returns the maximum of the list of the geometries    \n  * if it is a matrix of another type, max returns the maximum of the elements transformed into float    \n  * if it is a list of int of float, max returns the maximum of all the elements \n  \n```\nunknown var0   `unknown`\n  *  **`max_of`** (`container` , `any expression`) --->  `unknown` \n\n#### Result: \nthe maximum value of the right-hand expression evaluated on each of the elements of the left-hand operand  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.\n\n#### Special cases:     \n  * As of GAMA 1.6, if the left-hand operand is nil or empty, max_of throws an error    \n  * if the left-operand is a map, the keyword each will contain each value \n  \n```\nunknown var5   `list` \n\n#### Result: \nreturns the maximal cliques of a graph using the Bron-Kerbosch clique detection algorithm: A clique is maximal if it is impossible to enlarge it by adding another vertex from the graph. Note that a maximal clique is not necessarily the biggest clique in the graph.\n\n#### Examples: \n```\ngraph my_graph  var1   `unknown` \n\n#### Result: \nthe mean of all the elements of the operand  \n\n#### Comment: \nthe elements of the operand are summed (see sum for more details about the sum of container elements ) and then the sum value is divided by the number of elements.\n\n#### Special cases:     \n  * if the container contains points, the result will be a point. If the container contains rgb values, the result will be a rgb color\n\n#### Examples: \n```\nunknown var0   `float` \n\n#### Result: \nthe deviation from the mean of all the elements of the operand. See Mean_deviation for more details.  \n\n#### Comment: \nThe operator casts all the numerical element of the list into float. The elements that are not numerical are discarded.\n\n#### Examples: \n```\nfloat var0   `unknown`\n  *  **`mean_of`** (`container` , `any expression`) --->  `unknown` \n\n#### Result: \nthe mean of the right-hand expression evaluated on each of the elements of the left-hand operand  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.\n\n#### Special cases:     \n  * if the left-operand is a map, the keyword each will contain each value \n  \n```\nunknown var2   `unknown` \n\n#### Result: \nreturns the mean value of given vector (right-hand operand) in given variable  (left-hand operand).\n\n#### Examples: \n```\nlist X   `unknown` \n\n#### Result: \nthe median of all the elements of the operand.\n\n#### Special cases:     \n  * if the container contains points, the result will be a point. If the container contains rgb values, the result will be a rgb color\n\n#### Examples: \n```\nunknown var0   `msi.gama.extensions.messaging.GamaMessage` \n\n#### Result: \nto be added\n    \t\n----\n\n\n[//]: # (keyword|operator_milliseconds_between)\n### `milliseconds_between`\n\n#### Possible use: \n  * `date` **`milliseconds_between`** `date` --->  `float`\n  *  **`milliseconds_between`** (`date` , `date`) --->  `float` \n\n#### Result: \nProvide the exact number of milliseconds between two dates. This number can be positive or negative (if the second operand is smaller than the first one)\n\n#### Examples: \n```\nmilliseconds_between(d1, d2) -: 10 \n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_min)\n### `min`\n\n#### Possible use: \n  *  **`min`** (`container`) --->  `unknown` \n\n#### Result: \nthe minimum element found in the operand.  \n\n#### Comment: \nthe min operator behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a list of points: min returns the minimum of all points as a point (i.e. the point with the smallest coordinate on the x-axis, in case of equality the point with the smallest coordinate on the y-axis is chosen. If all the points are equal, the first one is returned. )    \n  * if it is a population of a list of other types: min transforms all elements into integer and returns the minimum of them    \n  * if it is a map, min returns the minimum among the list of all elements value    \n  * if it is a file, min returns the minimum of the content of the file (that is also a container)    \n  * if it is a graph, min returns the minimum of the list of the elements of the graph (that can be the list of edges or vertexes depending on the graph)    \n  * if it is a matrix of int, float or object, min returns the minimum of all the numerical elements (thus all elements for integer and float matrices)    \n  * if it is a matrix of geometry, min returns the minimum of the list of the geometries    \n  * if it is a matrix of another type, min returns the minimum of the elements transformed into float    \n  * if it is a list of int or float: min returns the minimum of all the elements \n  \n```\nunknown var0   `unknown`\n  *  **`min_of`** (`container` , `any expression`) --->  `unknown` \n\n#### Result: \nthe minimum value of the right-hand expression evaluated on each of the elements of the left-hand operand  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.\n\n#### Special cases:     \n  * if the left-hand operand is nil or empty, min_of throws an error    \n  * if the left-operand is a map, the keyword each will contain each value \n  \n```\nunknown var5   `date`\n  *  **`minus_days`** (`date` , `int`) --->  `date` \n\n#### Result: \nSubtract a given number of days from a date\n\n#### Examples: \n```\ndate1 minus_days 20\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_minus_hours)\n### `minus_hours`\n\n#### Possible use: \n  * `date` **`minus_hours`** `int` --->  `date`\n  *  **`minus_hours`** (`date` , `int`) --->  `date` \n\n#### Result: \nRemove a given number of hours from a date\n\n#### Examples: \n```\ndate1 minus_hours 15 // equivalent to date1 - 15 #h\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_minus_minutes)\n### `minus_minutes`\n\n#### Possible use: \n  * `date` **`minus_minutes`** `int` --->  `date`\n  *  **`minus_minutes`** (`date` , `int`) --->  `date` \n\n#### Result: \nSubtract a given number of minutes from a date\n\n#### Examples: \n```\ndate1 minus_minutes 5 // equivalent to date1 - 5#mn\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_minus_months)\n### `minus_months`\n\n#### Possible use: \n  * `date` **`minus_months`** `int` --->  `date`\n  *  **`minus_months`** (`date` , `int`) --->  `date` \n\n#### Result: \nSubtract a given number of months from a date\n\n#### Examples: \n```\ndate1 minus_months 5\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_minus_ms)\n### `minus_ms`\n\n#### Possible use: \n  * `date` **`minus_ms`** `int` --->  `date`\n  *  **`minus_ms`** (`date` , `int`) --->  `date` \n\n#### Result: \nRemove a given number of milliseconds from a date\n\n#### Examples: \n```\ndate1 minus_ms 15 // equivalent to date1 - 15 #ms\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_minus_seconds)\n### `minus_seconds`\nSame signification as [-](#-)\n    \t\n----\n\n\n[//]: # (keyword|operator_minus_weeks)\n### `minus_weeks`\n\n#### Possible use: \n  * `date` **`minus_weeks`** `int` --->  `date`\n  *  **`minus_weeks`** (`date` , `int`) --->  `date` \n\n#### Result: \nSubtract a given number of weeks from a date\n\n#### Examples: \n```\ndate1 minus_weeks 15\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_minus_years)\n### `minus_years`\n\n#### Possible use: \n  * `date` **`minus_years`** `int` --->  `date`\n  *  **`minus_years`** (`date` , `int`) --->  `date` \n\n#### Result: \nSubtract a given number of year from a date\n\n#### Examples: \n```\ndate1 minus_years 3\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_mod)\n### `mod`\n\n#### Possible use: \n  * `int` **`mod`** `int` --->  `int`\n  *  **`mod`** (`int` , `int`) --->  `int` \n\n#### Result: \nReturns the remainder of the integer division of the left-hand operand by the right-hand operand.\n\n#### Special cases:     \n  * if operands are float, they are truncated    \n  * if the right-hand operand is equal to zero, raises an exception.\n\n#### Examples: \n```\nint var0   `int`\n  *  **`months_between`** (`date` , `date`) --->  `int` \n\n#### Result: \nProvide the exact number of months between two dates. This number can be positive or negative (if the second operand is smaller than the first one)\n\n#### Examples: \n```\nmonths_between(d1, d2) -: 10 \n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_moran)\n### `moran`\n\n#### Possible use: \n  * `list` **`moran`** `matrix` --->  `float`\n  *  **`moran`** (`list` , `matrix`) --->  `float`\n\n#### Special cases:     \n  * return the Moran Index of the given list of interest points (list of floats) and the weight matrix (matrix of float) \n  \n```\nfloat var0   `unknown` \n\n#### Result: \nthe product of all the elements of the operand  \n\n#### Comment: \nthe mul operator behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a list of points: mul returns the product of all points as a point (each coordinate is the product of the corresponding coordinate of each element)    \n  * if it is a list of other types: mul transforms all elements into integer and multiplies them    \n  * if it is a map, mul returns the product of the value of all elements    \n  * if it is a file, mul returns the product of the content of the file (that is also a container)    \n  * if it is a graph, mul returns the product of the list of the elements of the graph (that can be the list of edges or vertexes depending on the graph)    \n  * if it is a matrix of int, float or object, mul returns the product of all the numerical elements (thus all elements for integer and float matrices)    \n  * if it is a matrix of geometry, mul returns the product of the list of the geometries    \n  * if it is a matrix of other types: mul transforms all elements into float and multiplies them    \n  * if it is a list of int or float: mul returns the product of all the elements \n  \n```\nunknown var0   `int` \n\n#### Result: \nreturns the maximum number of independent cycles in a graph. This number (u) is estimated through the number of nodes (v), links (e) and of sub-graphs (p): u = e - v + p.\n\n#### Examples: \n```\ngraph graphEpidemio   `container`\n  *  **`neighbors_at`** (`geometry` , `float`) --->  `container` \n\n#### Result: \na list, containing all the agents of the same species than the left argument (if it is an agent) located at a distance inferior or equal to the right-hand operand to the left-hand operand (geometry, agent, point).  \n\n#### Comment: \nThe topology used to compute the neighborhood  is the one of the left-operand if this one is an agent; otherwise the one of the agent applying the operator.\n\n#### Examples: \n```\ncontainer var0   `container`\n  *  **`neighbors_of`** (`graph` , `unknown`) --->  `container`\n  * `topology` **`neighbors_of`** `agent` --->  `container`\n  *  **`neighbors_of`** (`topology` , `agent`) --->  `container`\n  *  **`neighbors_of`** (`topology`, `geometry`, `float`) --->  `container` \n\n#### Result: \na list, containing all the agents of the same species than the argument (if it is an agent) located at a distance inferior or equal to 1 to the right-hand operand agent considering the left-hand operand topology.\n\n#### Special cases:     \n  * a list, containing all the agents of the same species than the left argument (if it is an agent) located at a distance inferior or equal to the third argument to the second argument (agent, geometry or point) considering the first operand topology. \n  \n```\ncontainer var3   `emotion`\n  * `string` **`new_emotion`** `agent` --->  `emotion`\n  *  **`new_emotion`** (`string` , `agent`) --->  `emotion`\n  * `string` **`new_emotion`** `float` --->  `emotion`\n  *  **`new_emotion`** (`string` , `float`) --->  `emotion`\n  * `string` **`new_emotion`** `predicate` --->  `emotion`\n  *  **`new_emotion`** (`string` , `predicate`) --->  `emotion`\n  *  **`new_emotion`** (`string`, `float`, `predicate`) --->  `emotion`\n  *  **`new_emotion`** (`string`, `float`, `float`) --->  `emotion`\n  *  **`new_emotion`** (`string`, `predicate`, `agent`) --->  `emotion`\n  *  **`new_emotion`** (`string`, `float`, `agent`) --->  `emotion`\n  *  **`new_emotion`** (`string`, `float`, `float`, `agent`) --->  `emotion`\n  *  **`new_emotion`** (`string`, `float`, `predicate`, `float`) --->  `emotion`\n  *  **`new_emotion`** (`string`, `float`, `predicate`, `agent`) --->  `emotion`\n  *  **`new_emotion`** (`string`, `float`, `predicate`, `float`, `agent`) --->  `emotion` \n\n#### Result: \na new emotion with the given properties (name)\na new emotion with the given properties (name)\na new emotion with the given properties (name,intensity,about)\na new emotion with the given properties (name,intensity,decay)\na new emotion with the given properties (name)\na new emotion with the given properties (name, intensity)\na new emotion with the given properties (name,about)\na new emotion with the given properties (name)\na new emotion with the given properties (name)\na new emotion with the given properties (name)\na new emotion with the given properties (name)\na new emotion with the given properties (name)\n\n#### Examples: \n```\nemotion(\"joy\",12.3,eatFood,4)\nemotion(\"joy\",12.3,eatFood,4)\nemotion(\"joy\",12.3,eatFood)\nemotion(\"joy\",12.3,4)\nemotion(\"joy\",12.3,eatFood,4)\nemotion(\"joy\",12.3)\nemotion(\"joy\",eatFood)\nemotion(\"joy\")\nemotion(\"joy\",12.3,eatFood,4)\nemotion(\"joy\",12.3,eatFood,4)\nemotion(\"joy\",12.3,eatFood,4)\nemotion(\"joy\",12.3,eatFood,4)\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_new_folder)\n### `new_folder`\n\n#### Possible use: \n  *  **`new_folder`** (`string`) --->  `file` \n\n#### Result: \nopens an existing repository or create a new folder if it does not exist.\n\n#### Special cases:     \n  * If the specified string does not refer to an existing repository, the repository is created.    \n  * If the string refers to an existing file, an exception is risen.\n\n#### Examples: \n```\nfile dirNewT   `predicate`\n  * `string` **`new_predicate`** `agent` --->  `predicate`\n  *  **`new_predicate`** (`string` , `agent`) --->  `predicate`\n  * `string` **`new_predicate`** `float` --->  `predicate`\n  *  **`new_predicate`** (`string` , `float`) --->  `predicate`\n  * `string` **`new_predicate`** `int` --->  `predicate`\n  *  **`new_predicate`** (`string` , `int`) --->  `predicate`\n  * `string` **`new_predicate`** `map` --->  `predicate`\n  *  **`new_predicate`** (`string` , `map`) --->  `predicate`\n  * `string` **`new_predicate`** `bool` --->  `predicate`\n  *  **`new_predicate`** (`string` , `bool`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `float`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `int`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `agent`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `bool`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `int`, `bool`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `bool`, `agent`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `float`, `int`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `int`, `agent`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `float`, `agent`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `float`, `bool`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `float`, `int`, `bool`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `int`, `bool`, `agent`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `float`, `bool`, `agent`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `float`, `int`, `agent`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `float`, `int`, `bool`, `agent`) --->  `predicate` \n\n#### Result: \na new predicate with the given properties (name, values, lifetime, is_true)\na new predicate with the given properties (name, values, priority)\na new predicate with the given properties (name, values, priority, lifetime, is_true, agentCause)\na new predicate with the given properties (name, values, is_true, agentCause)\na new predicate with the given properties (name, values, lifetime)\na new predicate with the given properties (name, values, priority, lifetime, is_true)\na new predicate with the given properties (name, values, lifetime, is_true, agentCause)\na new predicate with the given is_true (name, priority)\na new predicate with the given is_true (name, lifetime)\na new predicate with the given properties (name, values)\na new predicate with the given properties (name, values, lifetime)\na new predicate with the given is_true (name, is_true)\na new predicate with the given properties (name, values, priority,lifetime)\na new predicate with the given properties (name, values, priority, is_true, agentCause)\na new predicate with the given properties (name, values, \tagentCause)\na new predicate with the given properties (name, values, lifetime, agentCause)\na new predicate with the given properties (name)\na new predicate with the given properties (name, values, priority, agentCause)\na new predicate with the given properties (name, values, priority, is_true)\na new predicate with the given properties (name, values, priority, lifetime, agentCause)\na new predicate with the given properties (name, values, is_true)\n\n#### Examples: \n```\npredicate(\"people to meet\", [\"time\"::10], 10,true)\npredicate(\"people to meet\", people1, [\"time\"::10])\npredicate(\"people to meet\", [\"time\"::10],2.0,10, true, agentA)\npredicate(\"people to meet\", [\"time\"::10], true, agentA)\npredicate(\"people to meet\", [\"time\"::10], true)\npredicate(\"people to meet\", [\"time\"::10],2.0,10, true)\npredicate(\"people to meet\", [\"time\"::10], 10, true, agentA)\npredicate(\"hasWater\", 2.0 )\npredicate(\"hasWater\", 10 \npredicate(\"people to meet\", people1 )\npredicate(\"people to meet\", [\"time\"::10], true)\npredicate(\"hasWater\", true)\npredicate(\"people to meet\", [\"time\"::10], 2.0,10)\npredicate(\"people to meet\", [\"time\"::10], 2.0, true, agentA)\npredicate(\"people to meet\", [\"time\"::10], agentA)\npredicate(\"people to meet\", [\"time\"::10], 10, agentA)\npredicate(\"people to meet\")\npredicate(\"people to meet\", [\"time\"::10], 2.0,agentA)\npredicate(\"people to meet\", [\"time\"::10],2.0, true)\npredicate(\"people to meet\", [\"time\"::10], 2.0,10,agentA)\npredicate(\"people to meet\", [\"time\"::10], true)\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_new_social_link)\n### `new_social_link`\n\n#### Possible use: \n  *  **`new_social_link`** (`agent`) --->  `msi.gaml.architecture.simplebdi.SocialLink`\n  *  **`new_social_link`** (`agent`, `float`, `float`, `float`, `float`) --->  `msi.gaml.architecture.simplebdi.SocialLink` \n\n#### Result: \na new social link\na new social link\n\n#### Examples: \n```\nnew_social_link(agentA)\nnew_social_link(agentA,0.0,-0.1,0.2,0.1)\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_node)\n### `node`\n\n#### Possible use: \n  *  **`node`** (`unknown`) --->  `unknown`\n  * `unknown` **`node`** `float` --->  `unknown`\n  *  **`node`** (`unknown` , `float`) --->  `unknown`\n    \t\n----\n\n\n[//]: # (keyword|operator_nodes)\n### `nodes`\n\n#### Possible use: \n  *  **`nodes`** (`container`) --->  `container`\n    \t\n----\n\n\n[//]: # (keyword|operator_norm)\n### `norm`\n\n#### Possible use: \n  *  **`norm`** (`point`) --->  `float` \n\n#### Result: \nthe norm of the vector with the coordinates of the point operand.\n\n#### Examples: \n```\nfloat var0   `file` \n\n#### Result: \nConstructs a file of type obj. Allowed extensions are limited to obj, OBJ\n    \t\n----\n\n\n[//]: # (keyword|operator_of)\n### `of`\nSame signification as [.](#.)\n    \t\n----\n\n\n[//]: # (keyword|operator_of_generic_species)\n### `of_generic_species`\n\n#### Possible use: \n  * `container` **`of_generic_species`** `species` --->  `container`\n  *  **`of_generic_species`** (`container` , `species`) --->  `container` \n\n#### Result: \na list, containing the agents of the left-hand operand whose species is that denoted by the right-hand operand and whose species extends the right-hand operand species\n\n#### Examples: \n```\n// species test {}\n// species sous_test parent: test {}\ncontainer var2   `container`\n  *  **`of_species`** (`container` , `species`) --->  `container` \n\n#### Result: \na list, containing the agents of the left-hand operand whose species is the one denoted by the right-hand operand.The expression agents of_species (species self) is equivalent to agents where (species each = species self); however, the advantage of using the first syntax is that the resulting list is correctly typed with the right species, whereas, in the second syntax, the parser cannot determine the species of the agents within the list (resulting in the need to cast it explicitly if it is to be used in an ask statement, for instance).\n\n#### Special cases:     \n  * if the right operand is nil, of_species returns the right operand\n\n#### Examples: \n```\ncontainer var0 `) --->  `ValueType` \n\n#### Result: \none of the values stored in this container  at a random key  \n\n#### Comment: \nthe one_of operator behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a graph, one_of returns one of the lists of edges    \n  * if it is a file, one_of returns one of the elements of the content of the file (that is also a container)    \n  * if the operand is empty, one_of returns nil \n  \n```\n\n``` \n\n    \n  * if it is a list or a matrix, one_of returns one of the values of the list or of the matrix \n  \n```\nint i   `bool`\n  *  **`or`** (`bool` , `any expression`) --->  `bool` \n\n#### Result: \na bool value, equal to the logical or between the left-hand operand and the right-hand operand.  \n\n#### Comment: \nboth operands are always casted to bool before applying the operator. Thus, an expression like 1 or 0 is accepted and returns true.    \n\n#### See also: \n[bool](#bool), [and](#and), [!](#!), \n    \t\n----\n\n\n[//]: # (keyword|operator_or)\n### `or`\n\n#### Possible use: \n  * `predicate` **`or`** `predicate` --->  `predicate`\n  *  **`or`** (`predicate` , `predicate`) --->  `predicate` \n\n#### Result: \ncreate a new predicate from two others by including them as subintentions. It's an exclusive \"or\"\n\n#### Examples: \n```\npredicate1 or predicate2\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_osm_file)\n### `osm_file`\n\n#### Possible use: \n  * `string` **`osm_file`** `map` --->  `file`\n  *  **`osm_file`** (`string` , `map`) --->  `file`\n  *  **`osm_file`** (`string`, `map`, `int`) --->  `file` \n\n#### Result: \nopens a file that a is a kind of OSM file with some filtering.\nopens a file that a is a kind of OSM file with some filtering, forcing the initial CRS to be the one indicated by the second int parameter (see http://spatialreference.org/ref/epsg/). If this int parameter is equal to 0, the data is considered as already projected.  \n\n#### Comment: \nThe file should have a OSM file extension, cf. file type definition for supported file extensions.The file should have a OSM file extension, cf. file type definition for supported file extensions.\n\n#### Special cases:     \n  * If the specified string does not refer to an existing OSM file, an exception is risen.    \n  * If the specified string does not refer to an existing OSM file, an exception is risen.\n\n#### Examples: \n```\nfile myOSMfile   `int`\n  *  **`out_degree_of`** (`graph` , `unknown`) --->  `int` \n\n#### Result: \nreturns the out degree of a vertex (right-hand operand) in the graph given as left-hand operand.\n\n#### Examples: \n```\nint var1   `container`\n  *  **`out_edges_of`** (`graph` , `unknown`) --->  `container` \n\n#### Result: \nreturns the list of the out-edges of a vertex (right-hand operand) in the graph given as left-hand operand.\n\n#### Examples: \n```\ncontainer var1 ` **`overlapping`** `geometry` --->  `list`\n  *  **`overlapping`** (`container` , `geometry`) --->  `list` \n\n#### Result: \nA list of agents or geometries among the left-operand list, species or meta-population (addition of species), overlapping the operand (casted as a geometry).\n\n#### Examples: \n```\nlist var0   `bool`\n  *  **`overlaps`** (`geometry` , `geometry`) --->  `bool` \n\n#### Result: \nA boolean, equal to true if the left-geometry (or agent/point) overlaps the right-geometry (or agent/point).\n\n#### Special cases:     \n  * if one of the operand is null, returns false.    \n  * if one operand is a point, returns true if the point is included in the geometry\n\n#### Examples: \n```\nbool var0   `pair` \n\n#### Result: \nCasts the operand into the type pair\n    \t\n----\n\n\n[//]: # (keyword|operator_partially_overlaps)\n### `partially_overlaps`\n\n#### Possible use: \n  * `geometry` **`partially_overlaps`** `geometry` --->  `bool`\n  *  **`partially_overlaps`** (`geometry` , `geometry`) --->  `bool` \n\n#### Result: \nA boolean, equal to true if the left-geometry (or agent/point) partially overlaps the right-geometry (or agent/point).  \n\n#### Comment: \nif one geometry operand fully covers the other geometry operand, returns false (contrarily to the overlaps operator).\n\n#### Special cases:     \n  * if one of the operand is null, returns false.\n\n#### Examples: \n```\nbool var0   `path` \n\n#### Result: \nCasts the operand into the type path\n    \t\n----\n\n\n[//]: # (keyword|operator_path_between)\n### `path_between`\n\n#### Possible use: \n  * `topology` **`path_between`** `container` --->  `path`\n  *  **`path_between`** (`topology` , `container`) --->  `path`\n  * `list` **`path_between`** `container` --->  `path`\n  *  **`path_between`** (`list` , `container`) --->  `path`\n  *  **`path_between`** (`graph`, `geometry`, `geometry`) --->  `path`\n  *  **`path_between`** (`list`, `geometry`, `geometry`) --->  `path`\n  *  **`path_between`** (`topology`, `geometry`, `geometry`) --->  `path` \n\n#### Result: \nThe shortest path between a list of two objects in a graph\nThe shortest path between two objects according to set of cells\nThe shortest path between several objects according to set of cells\n\n#### Examples: \n```\npath var0   `path`\n  *  **`path_to`** (`geometry` , `geometry`) --->  `path`\n  * `point` **`path_to`** `point` --->  `path`\n  *  **`path_to`** (`point` , `point`) --->  `path` \n\n#### Result: \nA path between two geometries (geometries, agents or points) considering the topology of the agent applying the operator.\n\n#### Examples: \n```\npath var0   `list` \n\n#### Result: \nThe K shortest paths between a list of two objects in a graph\n\n#### Examples: \n```\nlist var0 ` **`percent_absolute_deviation`** `list` --->  `float`\n  *  **`percent_absolute_deviation`** (`list` , `list`) --->  `float` \n\n#### Result: \npercent absolute deviation indicator for 2 series of values: percent_absolute_deviation(list_vals_observe,list_vals_sim)\n\n#### Examples: \n```\npercent_absolute_deviation([200,300,150,150,200],[250,250,100,200,200])\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_pgm_file)\n### `pgm_file`\n\n#### Possible use: \n  *  **`pgm_file`** (`string`) --->  `file` \n\n#### Result: \nConstructs a file of type pgm. Allowed extensions are limited to pgm\n    \t\n----\n\n\n[//]: # (keyword|operator_plan)\n### `plan`\n\n#### Possible use: \n  * `container` **`plan`** `float` --->  `geometry`\n  *  **`plan`** (`container` , `float`) --->  `geometry` \n\n#### Result: \nA polyline geometry from the given list of points.\n\n#### Special cases:     \n  * if the operand is nil, returns the point geometry {0,0}    \n  * if the operand is composed of a single point, returns a point geometry.\n\n#### Examples: \n```\ngeometry var0   `date`\n  *  **`plus_days`** (`date` , `int`) --->  `date` \n\n#### Result: \nAdd a given number of days to a date\n\n#### Examples: \n```\ndate1 plus_days 20\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_plus_hours)\n### `plus_hours`\n\n#### Possible use: \n  * `date` **`plus_hours`** `int` --->  `date`\n  *  **`plus_hours`** (`date` , `int`) --->  `date` \n\n#### Result: \nAdd a given number of hours to a date\n\n#### Examples: \n```\ndate1 plus_hours 15 // equivalent to date1 + 15 #h\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_plus_minutes)\n### `plus_minutes`\n\n#### Possible use: \n  * `date` **`plus_minutes`** `int` --->  `date`\n  *  **`plus_minutes`** (`date` , `int`) --->  `date` \n\n#### Result: \nAdd a given number of minutes to a date\n\n#### Examples: \n```\ndate1 plus_minutes 5 // equivalent to date1 + 5 #mn\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_plus_months)\n### `plus_months`\n\n#### Possible use: \n  * `date` **`plus_months`** `int` --->  `date`\n  *  **`plus_months`** (`date` , `int`) --->  `date` \n\n#### Result: \nAdd a given number of months to a date\n\n#### Examples: \n```\ndate1 plus_months 5\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_plus_ms)\n### `plus_ms`\n\n#### Possible use: \n  * `date` **`plus_ms`** `int` --->  `date`\n  *  **`plus_ms`** (`date` , `int`) --->  `date` \n\n#### Result: \nAdd a given number of milliseconds to a date\n\n#### Examples: \n```\ndate1 plus_ms 15 // equivalent to date1 + 15 #ms\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_plus_seconds)\n### `plus_seconds`\nSame signification as [+](#+)\n    \t\n----\n\n\n[//]: # (keyword|operator_plus_weeks)\n### `plus_weeks`\n\n#### Possible use: \n  * `date` **`plus_weeks`** `int` --->  `date`\n  *  **`plus_weeks`** (`date` , `int`) --->  `date` \n\n#### Result: \nAdd a given number of weeks to a date\n\n#### Examples: \n```\ndate1 plus_weeks 15\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_plus_years)\n### `plus_years`\n\n#### Possible use: \n  * `date` **`plus_years`** `int` --->  `date`\n  *  **`plus_years`** (`date` , `int`) --->  `date` \n\n#### Result: \nAdd a given number of years to a date\n\n#### Examples: \n```\ndate1 plus_years 3\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_point)\n### `point`\n\n#### Possible use: \n  * `float` **`point`** `int` --->  `point`\n  *  **`point`** (`float` , `int`) --->  `point`\n  * `int` **`point`** `float` --->  `point`\n  *  **`point`** (`int` , `float`) --->  `point`\n  * `int` **`point`** `int` --->  `point`\n  *  **`point`** (`int` , `int`) --->  `point`\n  * `float` **`point`** `float` --->  `point`\n  *  **`point`** (`float` , `float`) --->  `point`\n  *  **`point`** (`float`, `int`, `int`) --->  `point`\n  *  **`point`** (`int`, `int`, `int`) --->  `point`\n  *  **`point`** (`float`, `int`, `float`) --->  `point`\n  *  **`point`** (`int`, `int`, `float`) --->  `point`\n  *  **`point`** (`int`, `float`, `float`) --->  `point`\n  *  **`point`** (`float`, `float`, `float`) --->  `point`\n  *  **`point`** (`float`, `float`, `int`) --->  `point` \n\n#### Result: \ninternal use only. Use the standard construction {x,y} instead.\ninternal use only. Use the standard construction {x,y} instead.\ninternal use only. Use the standard construction {x,y, z} instead.\ninternal use only. Use the standard construction {x,y, z} instead.\ninternal use only. Use the standard construction {x,y, z} instead.\ninternal use only. Use the standard construction {x,y, z} instead.\ninternal use only. Use the standard construction {x,y, z} instead.\ninternal use only. Use the standard construction {x,y} instead.\ninternal use only. Use the standard construction {x,y} instead.\ninternal use only. Use the standard construction {x,y, z} instead.\ninternal use only. Use the standard construction {x,y, z} instead.\n    \t\n----\n\n\n[//]: # (keyword|operator_points_along)\n### `points_along`\n\n#### Possible use: \n  * `geometry` **`points_along`** `list` --->  `container`\n  *  **`points_along`** (`geometry` , `list`) --->  `container` \n\n#### Result: \nA list of points along the operand-geometry given its location in terms of rate of distance from the starting points of the geometry.\n\n#### Examples: \n```\ncontainer var0   `list`\n  *  **`points_at`** (`int` , `float`) --->  `list` \n\n#### Result: \nA list of left-operand number of points located at a the right-operand distance to the agent location.\n\n#### Examples: \n```\nlist var0   `container`\n  *  **`points_on`** (`geometry` , `float`) --->  `container` \n\n#### Result: \nA list of points of the operand-geometry distant from each other to the float right-operand .\n\n#### Examples: \n```\ncontainer var0   `int` \n\n#### Result: \nA value from a random variable following a Poisson distribution (with the positive expected number of occurence lambda as operand).  \n\n#### Comment: \nThe Poisson distribution is a discrete probability distribution that expresses the probability of a given number of events occurring in a fixed interval of time and/or space if these events occur with a known average rate and independently of the time since the last event, cf. Poisson distribution on Wikipedia.\n\n#### Examples: \n```\nint var0 `) --->  `geometry` \n\n#### Result: \nA polygon geometry from the given list of points.\n\n#### Special cases:     \n  * if the operand is nil, returns the point geometry {0,0}    \n  * if the operand is composed of a single point, returns a point geometry    \n  * if the operand is composed of 2 points, returns a polyline geometry.\n\n#### Examples: \n```\ngeometry var0 ` **`polyhedron`** `float` --->  `geometry`\n  *  **`polyhedron`** (`container` , `float`) --->  `geometry` \n\n#### Result: \nA polyhedron geometry from the given list of points.\n\n#### Special cases:     \n  * if the operand is nil, returns the point geometry {0,0}    \n  * if the operand is composed of a single point, returns a point geometry    \n  * if the operand is composed of 2 points, returns a polyline geometry.\n\n#### Examples: \n```\ngeometry var0   `container`\n  *  **`predecessors_of`** (`graph` , `unknown`) --->  `container` \n\n#### Result: \nreturns the list of predecessors (i.e. sources of in edges) of the given vertex (right-hand operand) in the given graph (left-hand operand)\n\n#### Examples: \n```\ncontainer var1   `predicate` \n\n#### Result: \nCasts the operand into the type predicate\n    \t\n----\n\n\n[//]: # (keyword|operator_predict)\n### `predict`\n\n#### Possible use: \n  * `regression` **`predict`** `list` --->  `float`\n  *  **`predict`** (`regression` , `list`) --->  `float` \n\n#### Result: \nreturns the value predict by the regression parameters for a given instance. Usage: predict(regression, instance)\n\n#### Examples: \n```\npredict(my_regression, [1,2,3]\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_product)\n### `product`\nSame signification as [mul](#mul)\n    \t\n----\n\n\n[//]: # (keyword|operator_product_of)\n### `product_of`\n\n#### Possible use: \n  * `container` **`product_of`** `any expression` --->  `unknown`\n  *  **`product_of`** (`container` , `any expression`) --->  `unknown` \n\n#### Result: \nthe product of the right-hand expression evaluated on each of the elements of the left-hand operand  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.\n\n#### Special cases:     \n  * if the left-operand is a map, the keyword each will contain each value \n  \n```\nunknown var2 ` **`promethee_DM`** `list>` --->  `int`\n  *  **`promethee_DM`** (`list` , `list>`) --->  `int` \n\n#### Result: \nThe index of the best candidate according to the Promethee II method. This method is based on a comparison per pair of possible candidates along each criterion: all candidates are compared to each other by pair and ranked. More information about this method can be found in [http://www.sciencedirect.com/science?_ob=ArticleURL&_udi=B6VCT-4VF56TV-1&_user=10&_coverDate=01%2F01%2F2010&_rdoc=1&_fmt=high&_orig=search&_sort=d&_docanchor=&view=c&_searchStrId=1389284642&_rerunOrigin=google&_acct=C000050221&_version=1&_urlVersion=0&_userid=10&md5=d334de2a4e0d6281199a39857648cd36 Behzadian, M., Kazemzadeh, R., Albadvi, A., M., A.: PROMETHEE: A comprehensive literature review on methodologies and applications. European Journal of Operational Research(2009)]. The first operand is the list of candidates (a candidate is a list of criterion values); the second operand the list of criterion: A criterion is a map that contains fours elements: a name, a weight, a preference value (p) and an indifference value (q). The preference value represents the threshold from which the difference between two criterion values allows to prefer one vector of values over another. The indifference value represents the threshold from which the difference between two criterion values is considered significant.\n\n#### Special cases:     \n  * returns -1 is the list of candidates is nil or empty\n\n#### Examples: \n```\nint var0   `file` \n\n#### Result: \nConstructs a file of type property. Allowed extensions are limited to properties\n    \t\n----\n\n\n[//]: # (keyword|operator_pyramid)\n### `pyramid`\n\n#### Possible use: \n  *  **`pyramid`** (`float`) --->  `geometry` \n\n#### Result: \nA square geometry which side size is given by the operand.  \n\n#### Comment: \nthe center of the pyramid is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns nil if the operand is nil.\n\n#### Examples: \n```\ngeometry var0   `file` \n\n#### Result: \nConstructs a file of type R. Allowed extensions are limited to r\n    \t\n----\n\n\n[//]: # (keyword|operator_R_mean)\n### `R_mean`\nSame signification as [meanR](#meanr)\n    \t\n----\n\n\n[//]: # (keyword|operator_range)\n### `range`\n\n#### Possible use: \n  *  **`range`** (`int`) --->  `container`\n  * `int` **`range`** `int` --->  `container`\n  *  **`range`** (`int` , `int`) --->  `container`\n  *  **`range`** (`int`, `int`, `int`) --->  `container` \n\n#### Result: \nAllows to build a list of int representing all contiguous values from zero to the argument. The range can be increasing or decreasing. Passing 0 will return a singleton list with 0\nAllows to build a list of int representing all contiguous values from the first to the second argument, using the step represented by the third argument. The range can be increasing or decreasing. Passing the same value for both will return a singleton list with this value. Passing a step of 0 will result in an exception. Attempting to build infinite ranges (e.g. end > start with a negative step) will similarly not be accepted and yield an exception\nAllows to build a list of int representing all contiguous values from the first to the second argument. The range can be increasing or decreasing. Passing the same value for both will return a singleton list with this value\n    \t\n----\n\n\n[//]: # (keyword|operator_read)\n### `read`\n\n#### Possible use: \n  *  **`read`** (`string`) --->  `unknown` \n\n#### Result: \nReads an attribute of the agent. The attribute's name is specified by the operand.\n\n#### Examples: \n```\nunknown agent_name   `geometry`\n  * `float` **`rectangle`** `float` --->  `geometry`\n  *  **`rectangle`** (`float` , `float`) --->  `geometry`\n  * `point` **`rectangle`** `point` --->  `geometry`\n  *  **`rectangle`** (`point` , `point`) --->  `geometry` \n\n#### Result: \nA rectangle geometry which side sizes are given by the operands.  \n\n#### Comment: \nthe center of the rectangle is by default the location of the current agent in which has been called this operator.the center of the rectangle is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns nil if the operand is nil.    \n  * returns nil if the operand is nil.    \n  * returns nil if the operand is nil.\n\n#### Examples: \n```\ngeometry var0   `regression` \n\n#### Result: \nCasts the operand into the type regression\n    \t\n----\n\n\n[//]: # (keyword|operator_remove_duplicates)\n### `remove_duplicates`\nSame signification as [distinct](#distinct)\n    \t\n----\n\n\n[//]: # (keyword|operator_remove_node_from)\n### `remove_node_from`\n\n#### Possible use: \n  * `geometry` **`remove_node_from`** `graph` --->  `graph`\n  *  **`remove_node_from`** (`geometry` , `graph`) --->  `graph` \n\n#### Result: \nremoves a node from a graph.  \n\n#### Comment: \nall the edges containing this node are also removed.\n\n#### Examples: \n```\ngraph var0   `string` \n\n#### Result: \nReturns the String resulting by replacing for the first operand all the sub-strings corresponding the second operand by the third operand\n\n#### Examples: \n```\nstring var0   `string` \n\n#### Result: \nReturns the String resulting by replacing for the first operand all the sub-strings corresponding to the regular expression given in the second operand by the third operand\n\n#### Examples: \n```\nstring var0   `string`\n  *  **`reverse`** (`container`) --->  `msi.gama.util.IContainer,?>` \n\n#### Result: \nthe operand elements in the reversed order in a copy of the operand.  \n\n#### Comment: \nthe reverse operator behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a file, reverse returns a copy of the file with a reversed content    \n  * if it is a population, reverse returns a copy of the population with elements in the reversed order    \n  * if it is a graph, reverse returns a copy of the graph (with all edges and vertexes), with all of the edges reversed    \n  * if it is a string, reverse returns a new string with characters in the reversed order \n  \n```\nstring var0  var1  var2  var3   `graph`\n  *  **`rewire_n`** (`graph` , `int`) --->  `graph` \n\n#### Result: \nrewires the given count of edges.  \n\n#### Comment: \nIf there are too many edges, all the edges will be rewired.\n\n#### Examples: \n```\ngraph var1   `rgb`\n  *  **`rgb`** (`rgb` , `float`) --->  `rgb`\n  * `rgb` **`rgb`** `int` --->  `rgb`\n  *  **`rgb`** (`rgb` , `int`) --->  `rgb`\n  * `string` **`rgb`** `int` --->  `rgb`\n  *  **`rgb`** (`string` , `int`) --->  `rgb`\n  *  **`rgb`** (`int`, `int`, `int`) --->  `rgb`\n  *  **`rgb`** (`int`, `int`, `int`, `float`) --->  `rgb`\n  *  **`rgb`** (`int`, `int`, `int`, `int`) --->  `rgb` \n\n#### Result: \nReturns a color defined by red, green, blue components and an alpha blending value.\n\n#### Special cases:     \n  * It can be used with r=red, g=green, b=blue (each between 0 and 255), a=alpha (between 0.0 and 1.0)    \n  * It can be used with a color and an alpha between 0 and 1    \n  * It can be used with a color and an alpha between 0 and 255    \n  * It can be used with r=red, g=green, b=blue, each between 0 and 255    \n  * It can be used with a name of color and alpha (between 0 and 255)    \n  * It can be used with r=red, g=green, b=blue (each between 0 and 255), a=alpha (between 0 and 255)\n\n#### Examples: \n```\nrgb var0   `list` \n\n#### Result: \nA list of point corresponding to RGB value of an image (r:x , g:y, b:z)\n\n#### Examples: \n```\nlist var0   `float`\n  *  **`rnd`** (`int`) --->  `int`\n  *  **`rnd`** (`point`) --->  `point`\n  * `point` **`rnd`** `point` --->  `point`\n  *  **`rnd`** (`point` , `point`) --->  `point`\n  * `int` **`rnd`** `int` --->  `int`\n  *  **`rnd`** (`int` , `int`) --->  `int`\n  * `float` **`rnd`** `float` --->  `float`\n  *  **`rnd`** (`float` , `float`) --->  `float`\n  *  **`rnd`** (`point`, `point`, `float`) --->  `point`\n  *  **`rnd`** (`float`, `float`, `float`) --->  `float`\n  *  **`rnd`** (`int`, `int`, `int`) --->  `int` \n\n#### Result: \na random integer in the interval [0, operand]  \n\n#### Comment: \nto obtain a probability between 0 and 1, use the expression (rnd n) / n, where n is used to indicate the precision\n\n#### Special cases:     \n  * if the operand is a float, returns an uniformly distributed float random number in [0.0, to]    \n  * if the operand is a point, returns a point with three random float ordinates, each in the interval [0, ordinate of argument]\n\n#### Examples: \n```\nfloat var0   `int` \n\n#### Result: \nreturns an index of the given list with a probability following the (normalized) distribution described in the list (a form of lottery)\n\n#### Examples: \n```\nint var0   `rgb` \n\n#### Result: \nrgb color  \n\n#### Comment: \nReturn a random color equivalent to rgb(rnd(operand),rnd(operand),rnd(operand))\n\n#### Examples: \n```\nrgb var0   `geometry`\n  *  **`rotated_by`** (`geometry` , `float`) --->  `geometry`\n  * `geometry` **`rotated_by`** `int` --->  `geometry`\n  *  **`rotated_by`** (`geometry` , `int`) --->  `geometry`\n  *  **`rotated_by`** (`geometry`, `float`, `point`) --->  `geometry` \n\n#### Result: \nA geometry resulting from the application of a rotation by the right-hand operand angle (degree) to the left-hand operand (geometry, agent, point)\nA geometry resulting from the application of a rotation by the right-hand operand angles (degree) along the three axis (x,y,z) to the left-hand operand (geometry, agent, point)  \n\n#### Comment: \nthe right-hand operand can be a float or a int\n\n#### Examples: \n```\ngeometry var0   `int`\n  *  **`round`** (`point`) --->  `point`\n  *  **`round`** (`float`) --->  `int` \n\n#### Result: \nReturns the rounded value of the operand.\n\n#### Special cases:     \n  * if the operand is an int, round returns it\n\n#### Examples: \n```\npoint var0   `list`\n  *  **`row_at`** (`matrix` , `int`) --->  `list` \n\n#### Result: \nreturns the row at a num_line (right-hand operand)\n\n#### Examples: \n```\nlist var0   `list` \n\n#### Result: \nreturns a list of the rows of the matrix, with each row as a list of elements\n\n#### Examples: \n```\nlist var0   `string`\n  * `string` **`sample`** `any expression` --->  `string`\n  *  **`sample`** (`string` , `any expression`) --->  `string`\n  *  **`sample`** (`container`, `int`, `bool`) --->  `container`\n  *  **`sample`** (`container`, `int`, `bool`, `container`) --->  `container` \n\n#### Result: \ntakes a sample of the specified size from the elements of x using either with or without replacement\ntakes a sample of the specified size from the elements of x using either with or without replacement with given weights\n\n#### Examples: \n```\ncontainer var0   `geometry`\n  *  **`scaled_to`** (`geometry` , `point`) --->  `geometry` \n\n#### Result: \nallows to restrict the size of a geometry so that it fits in the envelope {width, height, depth} defined by the second operand\n\n#### Examples: \n```\ngeometry var0   `emotion`\n  *  **`set_about`** (`emotion` , `predicate`) --->  `emotion` \n\n#### Result: \nchange the about value of the given emotion\n\n#### Examples: \n```\nemotion set_about predicate1\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_set_agent)\n### `set_agent`\n\n#### Possible use: \n  * `msi.gaml.architecture.simplebdi.SocialLink` **`set_agent`** `agent` --->  `msi.gaml.architecture.simplebdi.SocialLink`\n  *  **`set_agent`** (`msi.gaml.architecture.simplebdi.SocialLink` , `agent`) --->  `msi.gaml.architecture.simplebdi.SocialLink` \n\n#### Result: \nchange the agent value of the given social link\n\n#### Examples: \n```\nsocial_link set_agent agentA\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_set_agent_cause)\n### `set_agent_cause`\n\n#### Possible use: \n  * `emotion` **`set_agent_cause`** `agent` --->  `emotion`\n  *  **`set_agent_cause`** (`emotion` , `agent`) --->  `emotion`\n  * `predicate` **`set_agent_cause`** `agent` --->  `predicate`\n  *  **`set_agent_cause`** (`predicate` , `agent`) --->  `predicate` \n\n#### Result: \nchange the agentCause value of the given emotion\nchange the agentCause value of the given predicate\n\n#### Examples: \n```\nemotion set_agent_cause agentA\npredicate set_agent_cause agentA\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_set_decay)\n### `set_decay`\n\n#### Possible use: \n  * `emotion` **`set_decay`** `float` --->  `emotion`\n  *  **`set_decay`** (`emotion` , `float`) --->  `emotion` \n\n#### Result: \nchange the decay value of the given emotion\n\n#### Examples: \n```\nemotion set_decay 12\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_set_dominance)\n### `set_dominance`\n\n#### Possible use: \n  * `msi.gaml.architecture.simplebdi.SocialLink` **`set_dominance`** `float` --->  `msi.gaml.architecture.simplebdi.SocialLink`\n  *  **`set_dominance`** (`msi.gaml.architecture.simplebdi.SocialLink` , `float`) --->  `msi.gaml.architecture.simplebdi.SocialLink` \n\n#### Result: \nchange the dominance value of the given social link\n\n#### Examples: \n```\nsocial_link set_dominance 0.4\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_set_familiarity)\n### `set_familiarity`\n\n#### Possible use: \n  * `msi.gaml.architecture.simplebdi.SocialLink` **`set_familiarity`** `float` --->  `msi.gaml.architecture.simplebdi.SocialLink`\n  *  **`set_familiarity`** (`msi.gaml.architecture.simplebdi.SocialLink` , `float`) --->  `msi.gaml.architecture.simplebdi.SocialLink` \n\n#### Result: \nchange the familiarity value of the given social link\n\n#### Examples: \n```\nsocial_link set_familiarity 0.4\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_set_intensity)\n### `set_intensity`\n\n#### Possible use: \n  * `emotion` **`set_intensity`** `float` --->  `emotion`\n  *  **`set_intensity`** (`emotion` , `float`) --->  `emotion` \n\n#### Result: \nchange the intensity value of the given emotion\n\n#### Examples: \n```\nemotion set_intensity 12\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_set_liking)\n### `set_liking`\n\n#### Possible use: \n  * `msi.gaml.architecture.simplebdi.SocialLink` **`set_liking`** `float` --->  `msi.gaml.architecture.simplebdi.SocialLink`\n  *  **`set_liking`** (`msi.gaml.architecture.simplebdi.SocialLink` , `float`) --->  `msi.gaml.architecture.simplebdi.SocialLink` \n\n#### Result: \nchange the liking value of the given social link\n\n#### Examples: \n```\nsocial_link set_liking 0.4\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_set_solidarity)\n### `set_solidarity`\n\n#### Possible use: \n  * `msi.gaml.architecture.simplebdi.SocialLink` **`set_solidarity`** `float` --->  `msi.gaml.architecture.simplebdi.SocialLink`\n  *  **`set_solidarity`** (`msi.gaml.architecture.simplebdi.SocialLink` , `float`) --->  `msi.gaml.architecture.simplebdi.SocialLink` \n\n#### Result: \nchange the solidarity value of the given social link\n\n#### Examples: \n```\nsocial_link set_solidarity 0.4\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_set_truth)\n### `set_truth`\n\n#### Possible use: \n  * `predicate` **`set_truth`** `bool` --->  `predicate`\n  *  **`set_truth`** (`predicate` , `bool`) --->  `predicate` \n\n#### Result: \nchange the is_true value of the given predicate\n\n#### Examples: \n```\npredicate set_truth false\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_set_z)\n### `set_z`\n\n#### Possible use: \n  * `geometry` **`set_z`** `container` --->  `geometry`\n  *  **`set_z`** (`geometry` , `container`) --->  `geometry`\n  *  **`set_z`** (`geometry`, `int`, `float`) --->  `geometry` \n\n#### Result: \nSets the z ordinate of the n-th point of a geometry to the value provided by the third argument\n\n#### Examples: \n```\nloop i from: 0 to: length(shape.points) - 1{set shape   `file` \n\n#### Result: \nConstructs a file of type shape. Allowed extensions are limited to shp\n    \t\n----\n\n\n[//]: # (keyword|operator_shuffle)\n### `shuffle`\n\n#### Possible use: \n  *  **`shuffle`** (`matrix`) --->  `matrix`\n  *  **`shuffle`** (`string`) --->  `string`\n  *  **`shuffle`** (`container`) --->  `container` \n\n#### Result: \nThe elements of the operand in random order.\n\n#### Special cases:     \n  * if the operand is empty, returns an empty list (or string, matrix)\n\n#### Examples: \n```\nmatrix var0   `int` \n\n#### Result: \nReturns -1 if the argument is negative, +1 if it is positive, 0 if it is equal to zero or not a number\n\n#### Examples: \n```\nint var0 ` **`simple_clustering_by_distance`** `float` --->  `list>`\n  *  **`simple_clustering_by_distance`** (`container` , `float`) --->  `list>` \n\n#### Result: \nA list of agent groups clustered by distance considering a distance min between two groups.\n\n#### Examples: \n```\nlist> var0   `geometry`\n  *  **`simplification`** (`geometry` , `float`) --->  `geometry` \n\n#### Result: \nA geometry corresponding to the simplification of the operand (geometry, agent, point) considering a tolerance distance.  \n\n#### Comment: \nThe algorithm used for the simplification is Douglas-Peucker\n\n#### Examples: \n```\ngeometry var0   `float`\n  *  **`sin`** (`int`) --->  `float` \n\n#### Result: \nReturns the value (in [-1,1]) of the sinus of the operand (in decimal degrees). The argument is casted to an int before being evaluated.\n\n#### Special cases:     \n  * Operand values out of the range [0-359] are normalized.\n\n#### Examples: \n```\nfloat var0   `float` \n\n#### Result: \nReturns the value (in [-1,1]) of the sinus of the operand (in decimal degrees). The argument is casted to an int before being evaluated.\n\n#### Special cases:     \n  * Operand values out of the range [0-359] are normalized.\n\n#### Examples: \n```\nfloat var0   `bool`\n  * `any expression` **`since`** `date` --->  `bool`\n  *  **`since`** (`any expression` , `date`) --->  `bool` \n\n#### Result: \nReturns true if the current_date of the model is after (or equal to) the date passed in argument. Synonym of 'current_date >= argument'. Can be used, like 'after', in its composed form with 2 arguments to express the lowest boundary of the computation of a frequency. However, contrary to 'after', there is a subtle difference: the lowest boundary will be tested against the frequency as well\n\n#### Examples: \n```\nreflex when: since(starting_date) {} -: will always be run\nevery(2#days) since (starting_date + 1#day) // the computation will return true 1 day after the starting date and every two days after this reference date\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_skeletonize)\n### `skeletonize`\n\n#### Possible use: \n  *  **`skeletonize`** (`geometry`) --->  `list` \n\n#### Result: \nA list of geometries (polylines) corresponding to the skeleton of the operand geometry (geometry, agent)\n\n#### Examples: \n```\nlist var0   `float` \n\n#### Result: \nA value from a skew normally distributed random variable with min value (the minimum skewed value possible), max value (the maximum skewed value possible), skew (the degree to which the values cluster around the mode of the distribution; higher values mean tighter clustering) and bias (the tendency of the mode to approach the min, max or midpoint value; positive values bias toward max, negative values toward min).The algorithm was taken from http://stackoverflow.com/questions/5853187/skewing-java-random-number-generation-toward-a-certain-number\n\n#### Examples: \n```\nfloat var0   `float` \n\n#### Result: \nreturns skewness value computed from the operand list of values\n\n#### Special cases:     \n  * if the length of the list is lower than 3, returns NaN\n\n#### Examples: \n```\nskewness ([1,2,3,4,5])\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_skill)\n### `skill`\n\n#### Possible use: \n  *  **`skill`** (`any`) --->  `skill` \n\n#### Result: \nCasts the operand into the type skill\n    \t\n----\n\n\n[//]: # (keyword|operator_smooth)\n### `smooth`\n\n#### Possible use: \n  * `geometry` **`smooth`** `float` --->  `geometry`\n  *  **`smooth`** (`geometry` , `float`) --->  `geometry` \n\n#### Result: \nReturns a 'smoothed' geometry, where straight lines are replaces by polynomial (bicubic) curves. The first parameter is the original geometry, the second is the 'fit' parameter which can be in the range 0 (loose fit) to 1 (tightest fit).\n\n#### Examples: \n```\ngeometry var0   `social_link` \n\n#### Result: \nCasts the operand into the type social_link\n    \t\n----\n\n\n[//]: # (keyword|operator_solid)\n### `solid`\nSame signification as [without_holes](#without_holes)\n    \t\n----\n\n\n[//]: # (keyword|operator_sort)\n### `sort`\nSame signification as [sort_by](#sort_by)\n    \t\n----\n\n\n[//]: # (keyword|operator_sort_by)\n### `sort_by`\n\n#### Possible use: \n  * `container` **`sort_by`** `any expression` --->  `container`\n  *  **`sort_by`** (`container` , `any expression`) --->  `container` \n\n#### Result: \nReturns a list, containing the elements of the left-hand operand sorted in ascending order by the value of the right-hand operand when it is evaluated on them.  \n\n#### Comment: \nthe left-hand operand is casted to a list before applying the operator. In the right-hand operand, the keyword each can be used to represent, in turn, each of the elements.\n\n#### Special cases:     \n  * if the left-hand operand is nil, sort_by throws an error\n\n#### Examples: \n```\ncontainer var0   `unknown`\n  *  **`source_of`** (`graph` , `unknown`) --->  `unknown` \n\n#### Result: \nreturns the source of the edge (right-hand operand) contained in the graph given in left-hand operand.\n\n#### Special cases:     \n  * if the lef-hand operand (the graph) is nil, throws an Exception\n\n#### Examples: \n```\ngraph graphEpidemio   `graph` \n\n#### Result: \nallows to create a spatial graph from a container of vertices, without trying to wire them. The container can be empty. Emits an error if the contents of the container are not geometries, points or agents    \n\n#### See also: \n[graph](#graph), \n    \t\n----\n\n\n[//]: # (keyword|operator_species)\n### `species`\n\n#### Possible use: \n  *  **`species`** (`unknown`) --->  `species` \n\n#### Result: \ncasting of the operand to a species.\n\n#### Special cases:     \n  * if the operand is nil, returns nil;    \n  * if the operand is an agent, returns its species;    \n  * if the operand is a string, returns the species with this name (nil if not found);    \n  * otherwise, returns nil\n\n#### Examples: \n```\nspecies var0   `geometry` \n\n#### Result: \nA sphere geometry which radius is equal to the operand.  \n\n#### Comment: \nthe centre of the sphere is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns a point if the operand is lower or equal to 0.\n\n#### Examples: \n```\ngeometry var0   `list`\n  *  **`split_at`** (`geometry` , `point`) --->  `list` \n\n#### Result: \nThe two part of the left-operand lines split at the given right-operand point\n\n#### Special cases:     \n  * if the left-operand is a point or a polygon, returns an empty list\n\n#### Examples: \n```\nlist var0   `list`\n  *  **`split_geometry`** (`geometry` , `float`) --->  `list`\n  * `geometry` **`split_geometry`** `point` --->  `list`\n  *  **`split_geometry`** (`geometry` , `point`) --->  `list`\n  *  **`split_geometry`** (`geometry`, `int`, `int`) --->  `list` \n\n#### Result: \nA list of geometries that result from the decomposition of the geometry by square cells of the given side size (geometry, size)\nA list of geometries that result from the decomposition of the geometry by rectangle cells of the given dimension (geometry, {size_x, size_y})\nA list of geometries that result from the decomposition of the geometry according to a grid with the given number of rows and columns (geometry, nb_cols, nb_rows)\n\n#### Examples: \n```\nlist var0  var1  var2 `) --->  `list` \n\n#### Result: \nA list of geometries resulting after cutting the lines at their intersections.\n\n#### Examples: \n```\nlist var0   `container`\n  *  **`split_with`** (`string` , `string`) --->  `container` \n\n#### Result: \nReturns a list containing the sub-strings (tokens) of the left-hand operand delimited by each of the characters of the right-hand operand.  \n\n#### Comment: \nDelimiters themselves are excluded from the resulting list.\n\n#### Examples: \n```\ncontainer var0   `float`\n  *  **`sqrt`** (`float`) --->  `float` \n\n#### Result: \nReturns the square root of the operand.\n\n#### Special cases:     \n  * if the operand is negative, an exception is raised\n\n#### Examples: \n```\nfloat var0   `geometry` \n\n#### Result: \nA square geometry which side size is equal to the operand.  \n\n#### Comment: \nthe centre of the square is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns nil if the operand is nil.\n\n#### Examples: \n```\ngeometry var0   `geometry`\n  *  **`squircle`** (`float` , `float`) --->  `geometry` \n\n#### Result: \nA mix of square and circle geometry (see : http://en.wikipedia.org/wiki/Squircle), which side size is equal to the first operand and power is equal to the second operand  \n\n#### Comment: \nthe center of the ellipse is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns a point if the side operand is lower or equal to 0.\n\n#### Examples: \n```\ngeometry var0   `float` \n\n#### Result: \nthe standard deviation on the elements of the operand. See Standard_deviation for more details.  \n\n#### Comment: \nThe operator casts all the numerical element of the list into float. The elements that are not numerical are discarded.\n\n#### Examples: \n```\nfloat var0   `string`\n  *  **`string`** (`date` , `string`) --->  `string` \n\n#### Result: \nconverts a date to astring following a custom pattern. The pattern can use \"%Y %M %N %D %E %h %m %s %z\" for outputting years, months, name of month, days, name of days, hours, minutes, seconds and the time-zone. A null or empty pattern will return the complete date as defined by the ISO date & time format. The pattern can also follow the pattern definition found here, which gives much more control over the format of the date: https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#patterns. Different patterns are available by default as constants: #iso_local, #iso_simple, #iso_offset, #iso_zoned and #custom, which can be changed in the preferences\n\n#### Examples: \n```\nformat(#now, 'yyyy-MM-dd')\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_subtract_days)\n### `subtract_days`\nSame signification as [minus_days](#minus_days)\n    \t\n----\n\n\n[//]: # (keyword|operator_subtract_hours)\n### `subtract_hours`\nSame signification as [minus_hours](#minus_hours)\n    \t\n----\n\n\n[//]: # (keyword|operator_subtract_minutes)\n### `subtract_minutes`\nSame signification as [minus_minutes](#minus_minutes)\n    \t\n----\n\n\n[//]: # (keyword|operator_subtract_months)\n### `subtract_months`\nSame signification as [minus_months](#minus_months)\n    \t\n----\n\n\n[//]: # (keyword|operator_subtract_ms)\n### `subtract_ms`\nSame signification as [minus_ms](#minus_ms)\n    \t\n----\n\n\n[//]: # (keyword|operator_subtract_seconds)\n### `subtract_seconds`\nSame signification as [-](#-)\n    \t\n----\n\n\n[//]: # (keyword|operator_subtract_weeks)\n### `subtract_weeks`\nSame signification as [minus_weeks](#minus_weeks)\n    \t\n----\n\n\n[//]: # (keyword|operator_subtract_years)\n### `subtract_years`\nSame signification as [minus_years](#minus_years)\n    \t\n----\n\n\n[//]: # (keyword|operator_successors_of)\n### `successors_of`\n\n#### Possible use: \n  * `graph` **`successors_of`** `unknown` --->  `container`\n  *  **`successors_of`** (`graph` , `unknown`) --->  `container` \n\n#### Result: \nreturns the list of successors (i.e. targets of out edges) of the given vertex (right-hand operand) in the given graph (left-hand operand)\n\n#### Examples: \n```\ncontainer var1   `float`\n  *  **`sum`** (`container`) --->  `unknown` \n\n#### Result: \nthe sum of all the elements of the operand  \n\n#### Comment: \nthe behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a population or a list of other types: sum transforms all elements into float and sums them    \n  * if it is a map, sum returns the sum of the value of all elements    \n  * if it is a file, sum returns the sum of the content of the file (that is also a container)    \n  * if it is a graph, sum returns the total weight of the graph    \n  * if it is a matrix of int, float or object, sum returns the sum of all the numerical elements (i.e. all elements for integer and float matrices)    \n  * if it is a matrix of other types: sum transforms all elements into float and sums them    \n  * if it is a list of colors: sum will sum them and return the blended resulting color    \n  * if it is a list of int or float: sum returns the sum of all the elements \n  \n```\nint var0   `unknown`\n  *  **`sum_of`** (`container` , `any expression`) --->  `unknown` \n\n#### Result: \nthe sum of the right-hand expression evaluated on each of the elements of the left-hand operand  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.\n\n#### Special cases:     \n  * if the left-operand is a map, the keyword each will contain each value \n  \n```\nunknown var2   `file` \n\n#### Result: \nConstructs a file of type svg. Allowed extensions are limited to svg\n    \t\n----\n\n\n[//]: # (keyword|operator_tan)\n### `tan`\n\n#### Possible use: \n  *  **`tan`** (`int`) --->  `float`\n  *  **`tan`** (`float`) --->  `float` \n\n#### Result: \nReturns the value (in [-1,1]) of the trigonometric tangent of the operand (in decimal degrees). The argument is casted to an int before being evaluated.\n\n#### Special cases:     \n  * Operand values out of the range [0-359] are normalized. Notice that tan(360) does not return 0.0 but -2.4492935982947064E-16    \n  * The tangent is only defined for any real number except 90 + k `*` 180 (k an positive or negative integer). Nevertheless notice that tan(90) returns 1.633123935319537E16 (whereas we could except infinity).\n\n#### Examples: \n```\nfloat var0   `float` \n\n#### Result: \nReturns the value (in [-1,1]) of the trigonometric tangent of the operand (in decimal degrees). The argument is casted to an int before being evaluated.\n\n#### Special cases:     \n  * Operand values out of the range [0-359] are normalized. Notice that tan(360) does not return 0.0 but -2.4492935982947064E-16    \n  * The tangent is only defined for any real number except 90 + k `*` 180 (k an positive or negative integer). Nevertheless notice that tan(90) returns 1.633123935319537E16 (whereas we could except infinity).    \n\n#### See also: \n[cos](#cos), [sin](#sin), \n    \t\n----\n\n\n[//]: # (keyword|operator_tanh)\n### `tanh`\n\n#### Possible use: \n  *  **`tanh`** (`float`) --->  `float`\n  *  **`tanh`** (`int`) --->  `float` \n\n#### Result: \nReturns the value (in the interval [-1,1]) of the hyperbolic tangent of the operand (which can be any real number, expressed in decimal degrees).\n\n#### Examples: \n```\nfloat var0   `unknown`\n  *  **`target_of`** (`graph` , `unknown`) --->  `unknown` \n\n#### Result: \nreturns the target of the edge (right-hand operand) contained in the graph given in left-hand operand.\n\n#### Special cases:     \n  * if the lef-hand operand (the graph) is nil, returns nil\n\n#### Examples: \n```\ngraph graphEpidemio   `geometry` \n\n#### Result: \nA teapot geometry which radius is equal to the operand.  \n\n#### Comment: \nthe centre of the teapot is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns a point if the operand is lower or equal to 0.\n\n#### Examples: \n```\ngeometry var0   `file` \n\n#### Result: \nConstructs a file of type text. Allowed extensions are limited to txt, data, text\n    \t\n----\n\n\n[//]: # (keyword|operator_TGauss)\n### `TGauss`\nSame signification as [truncated_gauss](#truncated_gauss)\n    \t\n----\n\n\n[//]: # (keyword|operator_threeds_file)\n### `threeds_file`\n\n#### Possible use: \n  *  **`threeds_file`** (`string`) --->  `file` \n\n#### Result: \nConstructs a file of type threeds. Allowed extensions are limited to 3ds, max\n    \t\n----\n\n\n[//]: # (keyword|operator_to)\n### `to`\n\n#### Possible use: \n  * `date` **`to`** `date` --->  `msi.gama.util.IList`\n  *  **`to`** (`date` , `date`) --->  `msi.gama.util.IList` \n\n#### Result: \nbuilds an interval between two dates (the first inclusive and the second exclusive, which behaves like a read-only list of dates. The default step between two dates is the step of the model  \n\n#### Comment: \nThe default step can be overruled by using the every operator applied to this interval\n\n#### Examples: \n```\ndate('2000-01-01') to date('2010-01-01') // builds an interval between these two dates\n(date('2000-01-01') to date('2010-01-01')) every (#month) // builds an interval between these two dates which contains all the monthly dates starting from the beginning of the interval\n```\n      \n\n#### See also: \n[every](#every), \n    \t\n----\n\n\n[//]: # (keyword|operator_to_GAMA_CRS)\n### `to_GAMA_CRS`\n\n#### Possible use: \n  *  **`to_GAMA_CRS`** (`geometry`) --->  `geometry`\n  * `geometry` **`to_GAMA_CRS`** `string` --->  `geometry`\n  *  **`to_GAMA_CRS`** (`geometry` , `string`) --->  `geometry`\n\n#### Special cases:     \n  * returns the geometry corresponding to the transformation of the given geometry to the GAMA CRS (Coordinate Reference System) assuming the given geometry is referenced by given CRS \n  \n```\ngeometry var0   `string` \n\n#### Result: \nreturns the literal description of an expression or description -- action, behavior, species, aspect, even model -- in gaml\n\n#### Examples: \n```\nstring var0   `list`\n  *  **`to_rectangles`** (`geometry`, `int`, `int`, `bool`) --->  `list` \n\n#### Result: \nA list of rectangles of the size corresponding to the given dimension that result from the decomposition of the geometry into rectangles (geometry, dimension, overlaps), if overlaps = true, add the rectangles that overlap the border of the geometry\nA list of rectangles corresponding to the given dimension that result from the decomposition of the geometry into rectangles (geometry, nb_cols, nb_rows, overlaps) by a grid composed of the given number of columns and rows, if overlaps = true, add the rectangles that overlap the border of the geometry\n\n#### Examples: \n```\nlist var0  var1   `list`\n  *  **`to_squares`** (`geometry`, `float`, `bool`) --->  `list`\n  *  **`to_squares`** (`geometry`, `int`, `bool`, `float`) --->  `list` \n\n#### Result: \nA list of a given number of squares from the decomposition of the geometry into squares (geometry, nb_square, overlaps), if overlaps = true, add the squares that overlap the border of the geometry\nA list of squares of the size corresponding to the given size that result from the decomposition of the geometry into squares (geometry, size, overlaps), if overlaps = true, add the squares that overlap the border of the geometry\nA list of a given number of squares from the decomposition of the geometry into squares (geometry, nb_square, overlaps, precision_coefficient), if overlaps = true, add the squares that overlap the border of the geometry, coefficient_precision should be close to 1.0\n\n#### Examples: \n```\nlist var0  var1  var2   `topology` \n\n#### Result: \ncasting of the operand to a topology.\n\n#### Special cases:     \n  * if the operand is a topology, returns the topology itself;    \n  * if the operand is a spatial graph, returns the graph topology associated;    \n  * if the operand is a population, returns the topology of the population;    \n  * if the operand is a shape or a geometry, returns the continuous topology bounded by the geometry;    \n  * if the operand is a matrix, returns the grid topology associated    \n  * if the operand is another kind of container, returns the multiple topology associated to the container    \n  * otherwise, casts the operand to a geometry and build a topology from it.\n\n#### Examples: \n```\ntopology var0   `bool`\n  *  **`touches`** (`geometry` , `geometry`) --->  `bool` \n\n#### Result: \nA boolean, equal to true if the left-geometry (or agent/point) touches the right-geometry (or agent/point).  \n\n#### Comment: \nreturns true when the left-operand only touches the right-operand. When one geometry covers partially (or fully) the other one, it returns false.\n\n#### Special cases:     \n  * if one of the operand is null, returns false.\n\n#### Examples: \n```\nbool var0   `int`\n  *  **`towards`** (`geometry` , `geometry`) --->  `int` \n\n#### Result: \nThe direction (in degree) between the two geometries (geometries, agents, points) considering the topology of the agent applying the operator.\n\n#### Examples: \n```\nint var0   `float` \n\n#### Result: \nThe trace of the given matrix (the sum of the elements on the main diagonal).\n\n#### Examples: \n```\nfloat var0   `geometry`\n  *  **`transformed_by`** (`geometry` , `point`) --->  `geometry` \n\n#### Result: \nA geometry resulting from the application of a rotation and a scaling (right-operand : point {angle(degree), scale factor} of the left-hand operand (geometry, agent, point)\n\n#### Examples: \n```\ngeometry var0   `geometry`\n  *  **`translated_by`** (`geometry` , `point`) --->  `geometry` \n\n#### Result: \nA geometry resulting from the application of a translation by the right-hand operand distance to the left-hand operand (geometry, agent, point)\n\n#### Examples: \n```\ngeometry var0   `matrix` \n\n#### Result: \nThe transposition of the given matrix\n\n#### Examples: \n```\nmatrix var0   `geometry` \n\n#### Result: \nA triangle geometry which side size is given by the operand.  \n\n#### Comment: \nthe center of the triangle is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns nil if the operand is nil.\n\n#### Examples: \n```\ngeometry var0 `) --->  `list`\n  *  **`triangulate`** (`geometry`) --->  `list` \n\n#### Result: \nA list of geometries (triangles) corresponding to the Delaunay triangulation of the operand geometry (geometry, agent, point)\n\n#### Examples: \n```\nlist var0  var1   `float`\n  *  **`truncated_gauss`** (`point`) --->  `float` \n\n#### Result: \nA random value from a normally distributed random variable in the interval ]mean - standardDeviation; mean + standardDeviation[.\n\n#### Special cases:     \n  * if the operand is a list, only the two first elements are taken into account as [mean, standardDeviation]    \n  * when truncated_gauss is called with a list of only one element mean, it will always return 0.0    \n  * when the operand is a point, it is read as {mean, standardDeviation}\n\n#### Examples: \n```\nfloat var0   `graph` \n\n#### Result: \nthe operand graph becomes an undirected graph.  \n\n#### Comment: \nthe operator alters the operand graph, it does not create a new one.    \n\n#### See also: \n[directed](#directed), \n    \t\n----\n\n\n[//]: # (keyword|operator_union)\n### `union`\n\n#### Possible use: \n  *  **`union`** (`container`) --->  `geometry`\n  * `container` **`union`** `container` --->  `container`\n  *  **`union`** (`container` , `container`) --->  `container` \n\n#### Result: \nreturns a new list containing all the elements of both containers without duplicated elements.\n\n#### Special cases:     \n  * if the left or right operand is nil, union throws an error    \n  * if the right-operand is a container of points, geometries or agents, returns the geometry resulting from the union all the geometries\n\n#### Examples: \n```\ncontainer var0   `unknown` \n\n#### Result: \nCasts the operand into the type unknown\n    \t\n----\n\n\n[//]: # (keyword|operator_until)\n### `until`\n\n#### Possible use: \n  *  **`until`** (`date`) --->  `bool`\n  * `any expression` **`until`** `date` --->  `bool`\n  *  **`until`** (`any expression` , `date`) --->  `bool` \n\n#### Result: \nReturns true if the current_date of the model is before (or equel to) the date passed in argument. Synonym of 'current_date <= argument'\n\n#### Examples: \n```\nreflex when: until(starting_date) {} -: will be run only once at the beginning of the simulation\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_upper_case)\n### `upper_case`\n\n#### Possible use: \n  *  **`upper_case`** (`string`) --->  `string` \n\n#### Result: \nConverts all of the characters in the string operand to upper case\n\n#### Examples: \n```\nstring var0   `file` \n\n#### Result: \nConstructs a file of type URL. Allowed extensions are limited to url\n    \t\n----\n\n\n[//]: # (keyword|operator_use_cache)\n### `use_cache`\n\n#### Possible use: \n  * `graph` **`use_cache`** `bool` --->  `graph`\n  *  **`use_cache`** (`graph` , `bool`) --->  `graph` \n\n#### Result: \nif the second operand is true, the operand graph will store in a cache all the previously computed shortest path (the cache be cleared if the graph is modified).  \n\n#### Comment: \nthe operator alters the operand graph, it does not create a new one.    \n\n#### See also: \n[path_between](#path_between), \n    \t\n----\n\n\n[//]: # (keyword|operator_user_input)\n### `user_input`\n\n#### Possible use: \n  *  **`user_input`** (`any expression`) --->  `map`\n  * `string` **`user_input`** `any expression` --->  `map`\n  *  **`user_input`** (`string` , `any expression`) --->  `map` \n\n#### Result: \nasks the user for some values (not defined as parameters). Takes a string (optional) and a map as arguments. The string is used to specify the message of the dialog box. The map is to specify the parameters you want the user to change before the simulation starts, with the name of the parameter in string key, and the default value as value.  \n\n#### Comment: \nThis operator takes a map [string::value] as argument, displays a dialog asking the user for these values, and returns the same map with the modified values (if any). The dialog is modal and will interrupt the execution of the simulation until the user has either dismissed or accepted it. It can be used, for instance, in an init section to force the user to input new values instead of relying on the initial values of parameters :\n\n#### Examples: \n```\nmap values2  values   `unknown`\n  *  **`using`** (`any expression` , `topology`) --->  `unknown` \n\n#### Result: \nAllows to specify in which topology a spatial computation should take place.\n\n#### Special cases:     \n  * has no effect if the topology passed as a parameter is nil\n\n#### Examples: \n```\nunknown var0   `float` \n\n#### Result: \nthe variance of the elements of the operand. See Variance for more details.  \n\n#### Comment: \nThe operator casts all the numerical element of the list into float. The elements that are not numerical are discarded.\n\n#### Examples: \n```\nfloat var0   `unknown`\n  *  **`variance_of`** (`container` , `any expression`) --->  `unknown` \n\n#### Result: \nthe variance of the right-hand expression evaluated on each of the elements of the left-hand operand  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.    \n\n#### See also: \n[min_of](#min_of), [max_of](#max_of), [sum_of](#sum_of), [product_of](#product_of), \n    \t\n----\n\n\n[//]: # (keyword|operator_voronoi)\n### `voronoi`\n\n#### Possible use: \n  *  **`voronoi`** (`list`) --->  `list`\n  * `list` **`voronoi`** `geometry` --->  `list`\n  *  **`voronoi`** (`list` , `geometry`) --->  `list` \n\n#### Result: \nA list of geometries corresponding to the Voronoi diagram built from the list of points according to the given clip\nA list of geometries corresponding to the Voronoi diagram built from the list of points\n\n#### Examples: \n```\nlist var0  var1   `float`\n  *  **`weight_of`** (`graph` , `unknown`) --->  `float` \n\n#### Result: \nreturns the weight of the given edge (right-hand operand) contained in the graph given in right-hand operand.  \n\n#### Comment: \nIn a localized graph, an edge has a weight by default (the distance between both vertices).\n\n#### Special cases:     \n  * if the left-operand (the graph) is nil, returns nil    \n  * if the right-hand operand is not an edge of the given graph, weight_of checks whether it is a node of the graph and tries to return its weight    \n  * if the right-hand operand is neither a node, nor an edge, returns 1.\n\n#### Examples: \n```\ngraph graphFromMap ` **`weighted_means_DM`** `list>` --->  `int`\n  *  **`weighted_means_DM`** (`list` , `list>`) --->  `int` \n\n#### Result: \nThe index of the candidate that maximizes the weighted mean of its criterion values. The first operand is the list of candidates (a candidate is a list of criterion values); the second operand the list of criterion (list of map)\n\n#### Special cases:     \n  * returns -1 is the list of candidates is nil or empty\n\n#### Examples: \n```\nint var0   `container`\n  *  **`where`** (`container` , `any expression`) --->  `container` \n\n#### Result: \na list containing all the elements of the left-hand operand that make the right-hand operand evaluate to true.  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.\n\n#### Special cases:     \n  * if the left-hand operand is a list nil, where returns a new empty list    \n  * if the left-operand is a map, the keyword each will contain each value \n  \n```\ncontainer var4 = 4); \t// var4 equals [4, 6]\n\n``` \n\n\n\n#### Examples: \n```\ncontainer var0  3); \t// var0 equals [4, 5, 6, 7, 8] \ncontainer var2  32); \t// var3 equals [node2, node3]\n```\n      \n\n#### See also: \n[first_with](#first_with), [last_with](#last_with), [where](#where), \n    \t\n----\n\n\n[//]: # (keyword|operator_with_lifetime)\n### `with_lifetime`\n\n#### Possible use: \n  * `predicate` **`with_lifetime`** `int` --->  `predicate`\n  *  **`with_lifetime`** (`predicate` , `int`) --->  `predicate` \n\n#### Result: \nchange the parameters of the given predicate\n\n#### Examples: \n```\npredicate with_lifetime 10\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_with_max_of)\n### `with_max_of`\n\n#### Possible use: \n  * `container` **`with_max_of`** `any expression` --->  `unknown`\n  *  **`with_max_of`** (`container` , `any expression`) --->  `unknown` \n\n#### Result: \none of elements of the left-hand operand that maximizes the value of the right-hand operand  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.\n\n#### Special cases:     \n  * if the left-hand operand is nil, with_max_of returns the default value of the right-hand operand\n\n#### Examples: \n```\nunknown var0   `unknown`\n  *  **`with_min_of`** (`container` , `any expression`) --->  `unknown` \n\n#### Result: \none of elements of the left-hand operand that minimizes the value of the right-hand operand  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.\n\n#### Special cases:     \n  * if the left-hand operand is nil, with_max_of returns the default value of the right-hand operand\n\n#### Examples: \n```\nunknown var0   `graph`\n  *  **`with_optimizer_type`** (`graph` , `string`) --->  `graph` \n\n#### Result: \nchanges the shortest path computation method of the given graph  \n\n#### Comment: \nthe right-hand operand can be \"Djikstra\", \"Bellmann\", \"Astar\" to use the associated algorithm. Note that these methods are dynamic: the path is computed when needed. In contrarily, if the operand is another string, a static method will be used, i.e. all the shortest are previously computed.\n\n#### Examples: \n```\ngraphEpidemio   `predicate`\n  *  **`with_praiseworthiness`** (`predicate` , `float`) --->  `predicate` \n\n#### Result: \nchange the praiseworthiness value of the given predicate\n\n#### Examples: \n```\npredicate set_truth false\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_with_precision)\n### `with_precision`\n\n#### Possible use: \n  * `float` **`with_precision`** `int` --->  `float`\n  *  **`with_precision`** (`float` , `int`) --->  `float`\n  * `point` **`with_precision`** `int` --->  `point`\n  *  **`with_precision`** (`point` , `int`) --->  `point` \n\n#### Result: \nRounds off the value of left-hand operand to the precision given by the value of right-hand operand\nRounds off the ordinates of the left-hand point to the precision given by the value of right-hand operand\n\n#### Examples: \n```\nfloat var0   `predicate`\n  *  **`with_priority`** (`predicate` , `float`) --->  `predicate` \n\n#### Result: \nchange the priority of the given predicate\n\n#### Examples: \n```\npredicate with_priority 2\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_with_values)\n### `with_values`\n\n#### Possible use: \n  * `predicate` **`with_values`** `map` --->  `predicate`\n  *  **`with_values`** (`predicate` , `map`) --->  `predicate` \n\n#### Result: \nchange the parameters of the given predicate\n\n#### Examples: \n```\npredicate with_values [\"time\"::10]\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_with_weights)\n### `with_weights`\n\n#### Possible use: \n  * `graph` **`with_weights`** `map` --->  `graph`\n  *  **`with_weights`** (`graph` , `map`) --->  `graph`\n  * `graph` **`with_weights`** `container` --->  `graph`\n  *  **`with_weights`** (`graph` , `container`) --->  `graph` \n\n#### Result: \nreturns the graph (left-hand operand) with weight given in the map (right-hand operand).  \n\n#### Comment: \nthis operand re-initializes the path finder\n\n#### Special cases:     \n  * if the right-hand operand is a list, affects the n elements of the list to the n first edges. Note that the ordering of edges may change overtime, which can create some problems...    \n  * if the left-hand operand is a map, the map should contains pairs such as: vertex/edge::double \n  \n```\ngraph_from_edges (list(ant) as_map each::one_of (list(ant))) with_weights (list(ant) as_map each::each.food)\n\n``` \n\n\n    \t\n----\n\n\n[//]: # (keyword|operator_without_holes)\n### `without_holes`\n\n#### Possible use: \n  *  **`without_holes`** (`geometry`) --->  `geometry` \n\n#### Result: \nA geometry corresponding to the operand geometry (geometry, agent, point) without its holes\n\n#### Examples: \n```\ngeometry var0   `file`\n  *  **`writable`** (`file` , `bool`) --->  `file` \n\n#### Result: \nMarks the file as read-only or not, depending on the second boolean argument, and returns the first argument  \n\n#### Comment: \nA file is created using its native flags. This operator can change them. Beware that this change is system-wide (and not only restrained to GAMA): changing a file to read-only mode (e.g. \"writable(f, false)\")\n\n#### Examples: \n```\nfile var0   `file` \n\n#### Result: \nConstructs a file of type xml. Allowed extensions are limited to xml\n    \t\n----\n\n\n[//]: # (keyword|operator_years_between)\n### `years_between`\n\n#### Possible use: \n  * `date` **`years_between`** `date` --->  `int`\n  *  **`years_between`** (`date` , `date`) --->  `int` \n\n#### Result: \nProvide the exact number of years between two dates. This number can be positive or negative (if the second operand is smaller than the first one)\n\n#### Examples: \n```\nyears_between(d1, d2) -: 10 \n```\n  ","url":"wiki/Operators.md"},{"id":"wiki/OtherBuiltInSpecies.md","title":" Other Built-in Species (Under Construction)","content":"# Other Built-in Species (Under Construction)\n\nTODO","url":"wiki/OtherBuiltInSpecies.md"},{"id":"wiki/PseudoVariables.md","title":" Pseudo-variables","content":"[//]: # (keyword|concept_pseudo_variable)\n# Pseudo-variables\n\n\n\nThe expressions known as **pseudo-variables** are special read-only variables that are not declared anywhere (at least not in a species), and which represent a value that changes depending on the context of execution.\n\n\n## Table of contents \n\n* [Pseudo-variables](#pseudo-variables)\n\t* [self](#self)\n\t* [myself](#myself)\n\t* [each](#each)\n\n\n\n## self\nThe pseudo-variable `self` always holds a reference to the agent executing the current statement.\n\n  * Example (sets the `friend` attribute of another random agent of the same species to `self` and conversely):\n\n```\nfriend potential_friend  names ","url":"wiki/PseudoVariables.md"},{"id":"wiki/SpeciesBuiltIn.md","title":" Built-in Species","content":"# Built-in Species\n\n\n\n This file is automatically generated from java files. Do Not Edit It. \n\n\n\n\n\nIt is possible to use in the models a set of built-in agents. These agents allow to directly use some advance features like clustering, multi-criteria analysis, etc. The creation of these agents are similar as for other kinds of agents:\n\n```\ncreate species: my_built_in_agent returns: the_agent;\n```\n\nSo, for instance, to be able to use clustering techniques in the model:\n```\ncreate cluster_builder returns: clusterer;\n```\n\nThe list of available built-in agents in GAMA is:\n\n  * cluster\\_builder: allows to use clustering techniques on a set of agents.\n  * multicriteria\\_analyzer: allows to use multi-criteria analysis methods.\n\n[Top of the page](#Table_of_Contents)\n\n# Table of Contents\n\n\n\n\n\n\n## agent\n\n### Actions\n\n\n#### **_init_**\n\n  * returns: unknown\n\n#### **_step_**\n\n  * returns: unknown\n\n[Top of the page](#Table_of_Contents)\n\n\n\n\n\n## AgentDB\n\n### Actions\n\n\n#### **close**\n\n  * returns: unknown\n\n#### **connect**\n\n  * returns: unknown\n  * → **params** (map): Connection parameters\n\n#### **executeUpdate**\n\n  * returns: int\n  * → **updateComm** (string): SQL commands such as Create, Update, Delete, Drop with question mark\n  * → **values** (list): List of values that are used to replace question mark\n\n#### **getParameter**\n\n  * returns: unknown\n\n#### **helloWorld**\n\n  * returns: unknown\n\n#### **insert**\n\n  * returns: int\n  * → **into** (string): Table name\n  * → **columns** (list): List of column name of table\n  * → **values** (list): List of values that are used to insert into table. Columns and values must have same size\n\n#### **isConnected**\n\n  * returns: bool\n\n#### **select**\n\n  * returns: list\n  * → **select** (string): select string\n  * → **values** (list): List of values that are used to replace question marks\n\n#### **setParameter**\n\n  * returns: unknown\n  * → **params** (map): Connection parameters\n\n#### **testConnection**\n\n  * returns: bool\n  * → **params** (map): Connection parameters\n\n#### **timeStamp**\n\n  * returns: float\n\n[Top of the page](#Table_of_Contents)\n\n\n\n\n\n## base\\_edge\n\n### Actions\n\n\n[Top of the page](#Table_of_Contents)\n\n\n\n\n\n## experiment\n\n### Actions\n\n\n[Top of the page](#Table_of_Contents)\n\n\n\n\n\n## graph\\_edge\n\n### Actions\n\n\n[Top of the page](#Table_of_Contents)\n\n\n\n\n\n## graph\\_node\n\n### Actions\n\n\n#### **related\\_to**\n\n  * returns: bool\n  * → **other** (agent):\n\n[Top of the page](#Table_of_Contents)\n\n\n\n\n\n## model\n\n### Actions\n\n\n#### **halt**\nAllows to stop the current simulation so that cannot be continued after. All the behaviors and updates are stopped.\n  * returns: unknown\n\n#### **pause**\nAllows to pause the current simulation ACTUALLY EXPERIMENT FOR THE MOMENT. It can be set to continue with the manual intervention of the user.\n  * returns: unknown\n\n[Top of the page](#Table_of_Contents)\n\n\n\n\n\n## multicriteria\\_analyzer\n\n### Actions\n\n\n#### **electre\\_DM**\n\n  * returns: int\n\n#### **evidence\\_theory\\_DM**\n\n  * returns: int\n\n#### **promethee\\_DM**\n\n  * returns: int\n\n#### **weighted\\_means\\_DM**\n\n  * returns: int\n\n[Top of the page](#Table_of_Contents)\n\n\n\n\n\n## Physical3DWorld\n\n### Actions\n\n\n#### **computeForces**\n\n  * returns: unknown\n\n[Top of the page](#Table_of_Contents)","url":"wiki/SpeciesBuiltIn.md"},{"id":"wiki/Statements.md","title":" Statements","content":"# Statements\n\n----\n\n**This file is automatically generated from java files. Do Not Edit It.**\n\n----\n\n## Table of Contents\n\n[=](#=), [action](#action), [add](#add), [agents](#agents), [annealing](#annealing), [ask](#ask), [aspect](#aspect), [assert](#assert), [benchmark](#benchmark), [break](#break), [camera](#camera), [capture](#capture), [chart](#chart), [conscious_contagion](#conscious_contagion), [create](#create), [data](#data), [datalist](#datalist), [default](#default), [diffuse](#diffuse), [display](#display), [display_grid](#display_grid), [display_population](#display_population), [do](#do), [draw](#draw), [else](#else), [emotional_contagion](#emotional_contagion), [enter](#enter), [equation](#equation), [error](#error), [event](#event), [exhaustive](#exhaustive), [exit](#exit), [experiment](#experiment), [export](#export), [focus](#focus), [focus_on](#focus_on), [genetic](#genetic), [graphics](#graphics), [highlight](#highlight), [hill_climbing](#hill_climbing), [if](#if), [image](#image), [inspect](#inspect), [let](#let), [light](#light), [loop](#loop), [match](#match), [migrate](#migrate), [monitor](#monitor), [output](#output), [output_file](#output_file), [overlay](#overlay), [parameter](#parameter), [perceive](#perceive), [permanent](#permanent), [plan](#plan), [put](#put), [reactive_tabu](#reactive_tabu), [reflex](#reflex), [release](#release), [remove](#remove), [return](#return), [rule](#rule), [run](#run), [save](#save), [save_batch](#save_batch), [set](#set), [setup](#setup), [simulate](#simulate), [socialize](#socialize), [solve](#solve), [species](#species), [state](#state), [status](#status), [switch](#switch), [tabu](#tabu), [task](#task), [test](#test), [trace](#trace), [transition](#transition), [unconscious_contagion](#unconscious_contagion), [user_command](#user_command), [user_init](#user_init), [user_input](#user_input), [user_panel](#user_panel), [using](#using), [Variable_container](#variable_container), [Variable_number](#variable_number), [Variable_regular](#variable_regular), [warn](#warn), [write](#write), \n\n\n## Statements by kinds\n\n  * **Batch method**\n    * [annealing](#annealing),  [exhaustive](#exhaustive),  [genetic](#genetic),  [hill_climbing](#hill_climbing),  [reactive_tabu](#reactive_tabu),  [save_batch](#save_batch),  [tabu](#tabu),  \n  * **Behavior**\n    * [aspect](#aspect),  [plan](#plan),  [reflex](#reflex),  [state](#state),  [task](#task),  [test](#test),  [user_init](#user_init),  [user_panel](#user_panel),  \n  * **Experiment**\n    * [experiment](#experiment),  \n  * **Layer**\n    * [agents](#agents),  [camera](#camera),  [chart](#chart),  [display_grid](#display_grid),  [display_population](#display_population),  [event](#event),  [graphics](#graphics),  [image](#image),  [light](#light),  [overlay](#overlay),  \n  * **Output**\n    * [display](#display),  [inspect](#inspect),  [monitor](#monitor),  [output](#output),  [output_file](#output_file),  [permanent](#permanent),  \n  * **Parameter**\n    * [parameter](#parameter),  \n  * **Sequence of statements or action**\n    * [action](#action),  [ask](#ask),  [benchmark](#benchmark),  [capture](#capture),  [create](#create),  [default](#default),  [else](#else),  [enter](#enter),  [equation](#equation),  [exit](#exit),  [if](#if),  [loop](#loop),  [match](#match),  [migrate](#migrate),  [perceive](#perceive),  [release](#release),  [run](#run),  [setup](#setup),  [switch](#switch),  [trace](#trace),  [transition](#transition),  [user_command](#user_command),  [using](#using),  \n  * **Single statement**\n    * [=](#=),  [add](#add),  [assert](#assert),  [break](#break),  [conscious_contagion](#conscious_contagion),  [data](#data),  [datalist](#datalist),  [diffuse](#diffuse),  [do](#do),  [draw](#draw),  [emotional_contagion](#emotional_contagion),  [error](#error),  [export](#export),  [focus](#focus),  [focus_on](#focus_on),  [highlight](#highlight),  [let](#let),  [put](#put),  [remove](#remove),  [return](#return),  [rule](#rule),  [save](#save),  [set](#set),  [simulate](#simulate),  [socialize](#socialize),  [solve](#solve),  [status](#status),  [unconscious_contagion](#unconscious_contagion),  [user_input](#user_input),  [warn](#warn),  [write](#write),  \n  * **Species**\n    * [species](#species),  \n  * **Variable (container)**\n    * [Variable_container](#variable_container),  \n  * **Variable (number)**\n    * [Variable_number](#variable_number),  \n  * **Variable (regular)**\n    * [Variable_regular](#variable_regular),  \n\n\n## Statements by embedment\n\n  * **Behavior**\n    * [add](#add), [ask](#ask), [benchmark](#benchmark), [capture](#capture), [conscious_contagion](#conscious_contagion), [create](#create), [diffuse](#diffuse), [do](#do), [emotional_contagion](#emotional_contagion), [error](#error), [focus](#focus), [focus_on](#focus_on), [highlight](#highlight), [if](#if), [inspect](#inspect), [let](#let), [loop](#loop), [migrate](#migrate), [put](#put), [release](#release), [remove](#remove), [return](#return), [run](#run), [save](#save), [set](#set), [simulate](#simulate), [socialize](#socialize), [solve](#solve), [status](#status), [switch](#switch), [trace](#trace), [transition](#transition), [unconscious_contagion](#unconscious_contagion), [using](#using), [warn](#warn), [write](#write), \n  * **Environment**\n    * [species](#species), \n  * **Experiment**\n    * [action](#action), [annealing](#annealing), [exhaustive](#exhaustive), [export](#export), [genetic](#genetic), [hill_climbing](#hill_climbing), [output](#output), [parameter](#parameter), [permanent](#permanent), [reactive_tabu](#reactive_tabu), [reflex](#reflex), [save_batch](#save_batch), [setup](#setup), [simulate](#simulate), [state](#state), [tabu](#tabu), [task](#task), [test](#test), [user_command](#user_command), [user_init](#user_init), [user_panel](#user_panel), [Variable_container](#variable_container), [Variable_number](#variable_number), [Variable_regular](#variable_regular), \n  * **Layer**\n    * [add](#add), [benchmark](#benchmark), [draw](#draw), [error](#error), [focus_on](#focus_on), [highlight](#highlight), [if](#if), [let](#let), [loop](#loop), [put](#put), [remove](#remove), [set](#set), [status](#status), [switch](#switch), [trace](#trace), [using](#using), [warn](#warn), [write](#write), \n  * **Model**\n    * [action](#action), [aspect](#aspect), [equation](#equation), [experiment](#experiment), [output](#output), [perceive](#perceive), [plan](#plan), [reflex](#reflex), [rule](#rule), [run](#run), [setup](#setup), [species](#species), [state](#state), [task](#task), [test](#test), [user_command](#user_command), [user_init](#user_init), [user_panel](#user_panel), [Variable_container](#variable_container), [Variable_number](#variable_number), [Variable_regular](#variable_regular), \n  * **Sequence of statements or action**\n    * [add](#add), [ask](#ask), [benchmark](#benchmark), [break](#break), [capture](#capture), [conscious_contagion](#conscious_contagion), [create](#create), [data](#data), [datalist](#datalist), [diffuse](#diffuse), [do](#do), [draw](#draw), [emotional_contagion](#emotional_contagion), [error](#error), [focus](#focus), [focus_on](#focus_on), [highlight](#highlight), [if](#if), [inspect](#inspect), [let](#let), [loop](#loop), [migrate](#migrate), [put](#put), [release](#release), [remove](#remove), [return](#return), [save](#save), [set](#set), [simulate](#simulate), [socialize](#socialize), [solve](#solve), [status](#status), [switch](#switch), [trace](#trace), [transition](#transition), [unconscious_contagion](#unconscious_contagion), [using](#using), [warn](#warn), [write](#write), \n  * **Single statement**\n    * [run](#run), \n  * **Species**\n    * [action](#action), [aspect](#aspect), [equation](#equation), [perceive](#perceive), [plan](#plan), [reflex](#reflex), [rule](#rule), [run](#run), [setup](#setup), [simulate](#simulate), [species](#species), [state](#state), [task](#task), [test](#test), [user_command](#user_command), [user_init](#user_init), [user_panel](#user_panel), [Variable_container](#variable_container), [Variable_number](#variable_number), [Variable_regular](#variable_regular), \n  * **action**\n    * [return](#return), \n  * **aspect**\n    * [draw](#draw), \n  * **chart**\n    * [add](#add), [ask](#ask), [data](#data), [datalist](#datalist), [do](#do), [put](#put), [remove](#remove), [set](#set), [simulate](#simulate), [using](#using), \n  * **display**\n    * [agents](#agents), [camera](#camera), [chart](#chart), [display_grid](#display_grid), [display_population](#display_population), [event](#event), [graphics](#graphics), [image](#image), [light](#light), [overlay](#overlay), \n  * **display_population**\n    * [display_population](#display_population), \n  * **equation**\n    * [=](#=), \n  * **fsm**\n    * [state](#state), [user_panel](#user_panel), \n  * **if**\n    * [else](#else), \n  * **output**\n    * [display](#display), [inspect](#inspect), [monitor](#monitor), [output_file](#output_file), \n  * **permanent**\n    * [display](#display), [inspect](#inspect), [monitor](#monitor), [output_file](#output_file), \n  * **probabilistic_tasks**\n    * [task](#task), \n  * **sorted_tasks**\n    * [task](#task), \n  * **state**\n    * [enter](#enter), [exit](#exit), \n  * **switch**\n    * [default](#default), [match](#match), \n  * **test**\n    * [assert](#assert), \n  * **user_command**\n    * [user_input](#user_input), \n  * **user_first**\n    * [user_panel](#user_panel), \n  * **user_init**\n    * [user_panel](#user_panel), \n  * **user_last**\n    * [user_panel](#user_panel), \n  * **user_only**\n    * [user_panel](#user_panel), \n  * **user_panel**\n    * [user_command](#user_command), \n  * **weighted_tasks**\n    * [task](#task), \n\n\n## General syntax\n\nA statement represents either a declaration or an imperative command. It consists in a keyword, followed by specific facets, some of them mandatory (in bold), some of them optional. One of the facet names can be omitted (the one denoted as omissible). It has to be the first one.\n\n```\nstatement_keyword expression1 facet2: expression2 ... ;\nor\nstatement_keyword facet1: expression1 facet2: expression2 ...;\n```\n\nIf the statement encloses other statements, it is called a **sequence statement**, and its sub-statements (either sequence statements or single statements) are declared between curly brackets, as in:\n\n```\nstatement_keyword1 expression1 facet2: expression2... { // a sequence statement\n     statement_keyword2 expression1 facet2: expression2...;  // a single statement\n     statement_keyword3 expression1 facet2: expression2...;\n}\n```\n\t\n\n----\n\n[//]: # (keyword|statement_=)\n### = \n#### Facets \n  \n  * **`right`** (float), (omissible) : the right part of the equation (it is mandatory that it can be evaluated as a float  \n  * **`left`** (any type): the left part of the equation (it should be a variable or a call to the diff() or diff2() operators) \n \t\n#### Definition\n\nAllows to implement an equation in the form function(n, t) = expression. The left function is only here as a placeholder for enabling a simpler syntax and grabbing the variable as its left member.\n\n#### Usages\n\n* The syntax of the = statement is a bit different from the other statements. It has to be used as follows (in an equation):\n\n```\nfloat t;\nfloat S;\nfloat I;\nequation SI { \n   diff(S,t) = (- 0.3 * S * I / 100);\n   diff(I,t) = (0.3 * S * I / 100);\n} \n```\n\n    \n* See also: [equation](#equation), [solve](#solve), \n\n#### Embedments\n* The `=` statement is of type: **Single statement**\n* The `=` statement can be embedded into: equation, \n* The `=` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_action)\n### action \n#### Facets \n  \n  * **`name`** (an identifier), (omissible) : identifier of the action\n  * `index` (a datatype identifier): if the action returns a map, the type of its keys\n  * `of` (a datatype identifier): if the action returns a container, the type of its elements\n  * `type` (a datatype identifier): the action returned type\n  * `virtual` (boolean): whether the action is virtual (defined without a set of instructions) (false by default) \n \t\n#### Definition\n\nAllows to define in a species, model or experiment a new action that can be called elsewhere.\n\n#### Usages\n\n* The simplest syntax to define an action that does not take any parameter and does not return anything is:\n\n```\naction simple_action {\n   // [set of statements]\n}\n```\n\n\n* If the action needs some parameters, they can be specified betwee, braquets after the identifier of the action:\n\n```\naction action_parameters(int i, string s){\n   // [set of statements using i and s]\n}\n```\n\n\n* If the action returns any value, the returned type should be used instead of the \"action\" keyword. A return statement inside the body of the action statement is mandatory.\n\n```\nint action_return_val(int i, string s){\n   // [set of statements using i and s]\n   return i + i;\n}\n```\n\n\n* If virtual: is true, then the action is abstract, which means that the action is defined without body. A species containing at least one abstract action is abstract. Agents of this species cannot be created. The common use of an abstract action is to define an action that can be used by all its sub-species, which should redefine all abstract actions and implements its body.\n\n```\nspecies parent_species {\n   int virtual_action(int i, string s);\n}\n\nspecies children parent: parent_species {\n   int virtual_action(int i, string s) {\n      return i + i;\n   }\n}\n```\n\n    \n* See also: [do](#do), \n\n#### Embedments\n* The `action` statement is of type: **Sequence of statements or action**\n* The `action` statement can be embedded into: Species, Experiment, Model, \n* The `action` statement embeds statements: [return](#return),  \n\n----\n\n[//]: # (keyword|statement_add)\n### add \n#### Facets \n  \n  * **`to`** (any type in [container, species, agent, geometry]): an expression that evaluates to a container\n  * `item` (any type), (omissible) : any expression to add in the container\n  * `all` (any type): Allows to either pass a container so as to add all its element, or 'true', if the item to add is already a container.\n  * `at` (any type): position in the container of added element\n  * `edge` (any type): a pair that will be added to a graph as an edge (if nodes do not exist, they are also added)\n  * `node` (any type): an expression that will be added to a graph as a node.\n  * `vertex` (any type): \n  * `weight` (float):  \n \t\n#### Definition\n\nAllows to add, i.e. to insert, a new element in a container (a list, matrix, map, ...).Incorrect use: The addition of a new element at a position out of the bounds of the container will produce a warning and let the container unmodified. If all: is specified, it has no effect if its argument is not a container, or if its argument is 'true' and the item to add is not a container. In that latter case\n\n#### Usages\n\n* The new element can be added either at the end of the container or at a particular position.\n\n```\nadd expr to: expr_container;    // Add at the end\nadd expr at: expr to: expr_container;   // Add at position expr\n```\n\n\n* Case of a list, the expression in the facet at: should be an integer.\n\n```\nlist workingList  workingMap  1 are treated as absolute sizes in model units (i.e. considering the model occupies the entire view). Like in 'position', an elevation can be provided with the z coordinate, allowing to scale the layer in the 3 directions\n  * `trace` (any type in [boolean, int]): Allows to aggregate the visualization of agents at each timestep on the display. Default is false. If set to an int value, only the last n-th steps will be visualized. If set to true, no limit of timesteps is applied.\n  * `transparency` (float): the transparency rate of the agents (between 0 and 1, 1 means no transparency) \n \t\n#### Definition\n\n`agents` allows the modeler to display only the agents that fulfill a given condition.\n\n#### Usages\n\n* The general syntax is:\n\n```\ndisplay my_display {\n   agents layer_name value: expression [additional options];\n}\n```\n\n\n* For instance, in a segregation model, `agents` will only display unhappy agents:\n\n```\ndisplay Segregation {\n   agents agentDisappear value: people as list where (each.is_happy = false) aspect: with_group_color;\n}\n```\n\n    \n* See also: [display](#display), [chart](#chart), [event](#event), [graphics](#graphics), [display_grid](#display_grid), [image](#image), [overlay](#overlay), [display_population](#display_population), \n\n#### Embedments\n* The `agents` statement is of type: **Layer**\n* The `agents` statement can be embedded into: display, \n* The `agents` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_annealing)\n### annealing \n#### Facets \n  \n  * **`name`** (an identifier), (omissible) : \n  * `aggregation` (a label), takes values in: {min, max}: the agregation method\n  * `maximize` (float): the value the algorithm tries to maximize\n  * `minimize` (float): the value the algorithm tries to minimize\n  * `nb_iter_cst_temp` (int): number of iterations per level of temperature\n  * `temp_decrease` (float): temperature decrease coefficient\n  * `temp_end` (float): final temperature\n  * `temp_init` (float): initial temperature \n \t\n#### Definition\n\nThis algorithm is an implementation of the Simulated Annealing algorithm. See the wikipedia article and [batch161 the batch dedicated page].\n\n#### Usages\n\n* As other batch methods, the basic syntax of the annealing statement uses `method annealing` instead of the expected `annealing name: id` : \n\n```\nmethod annealing [facet: value];\n```\n\n\n* For example: \n\n```\nmethod annealing temp_init: 100  temp_end: 1 temp_decrease: 0.5 nb_iter_cst_temp: 5 maximize: food_gathered;\n```\n\n\n\n#### Embedments\n* The `annealing` statement is of type: **Batch method**\n* The `annealing` statement can be embedded into: Experiment, \n* The `annealing` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_ask)\n### ask \n#### Facets \n  \n  * **`target`** (any type in [container, agent]), (omissible) : an expression that evaluates to an agent or a list of agents\n  * `as` (species): an expression that evaluates to a species\n  * `parallel` (any type in [boolean, int]): (experimental) setting this facet to 'true' will allow 'ask' to use concurrency when traversing the targets; setting it to an integer will set the threshold under which they will be run sequentially (the default is initially 20, but can be fixed in the preferences). This facet is false by default. \n \t\n#### Definition\n\nAllows an agent, the sender agent (that can be the [Sections161#global world agent]), to ask another (or other) agent(s) to perform a set of statements. If the value of the target facet is nil or empty, the statement is ignored.\n\n#### Usages\n\n* Ask  a set of receiver agents, stored in a container, to perform a block of statements. The block is evaluated in the context of the agents' species\n\n```\nask ${receiver_agents} {\n     ${cursor}\n}\n```\n\n\n* Ask  one agent to perform a block of statements. The block is evaluated in the context of the agent's species\n\n```\nask ${one_agent} {\n     ${cursor}\n}\n```\n\n\n* If the species of the receiver agent(s) cannot be determined, it is possible to force it using the `as` facet. An error is thrown if an agent is not a direct or undirect instance of this species\n\n```\nask${receiver_agent(s)} as: ${a_species_expression} {\n     ${cursor}\n}\n```\n\n\n* To ask a set of agents to do something only if they belong to a given species, the `of_species` operator can be used. If none of the agents belong to the species, nothing happens\n\n```\nask ${receiver_agents} of_species ${species_name} {\n     ${cursor}\n}\n```\n\n\n* Any statement can be declared in the block statements. All the statements will be evaluated in the context of the receiver agent(s), as if they were defined in their species, which means that an expression like `self` will represent the receiver agent and not the sender. If the sender needs to refer to itself, some of its own attributes (or temporary variables) within the block statements, it has to use the keyword `myself`.\n\n```\nspecies animal {\n    float energy  500 { // executed when the energy is above the given threshold\n         list others  math_diff  1 are treated as absolute sizes in model units (i.e. considering the model occupies the entire view). Like in 'position', an elevation can be provided with the z coordinate, allowing to scale the layer in the 3 directions\n  * `text` (boolean): specify whether the attribute used to compute the elevation is displayed on each cells (false by default)\n  * `texture` (any type in [boolean, file]): Either file  containing the texture image to be applied on the grid or, if true, the use of the image composed by the colors of the cells. If false, no texture is applied\n  * `transparency` (float): the transparency rate of the agents (between 0 and 1, 1 means no transparency)\n  * `triangulation` (boolean): specifies whther the cells will be triangulated: if it is false, they will be displayed as horizontal squares at a given elevation, whereas if it is true, cells will be triangulated and linked to neighbors in order to have a continuous surface (false by default) \n \t\n#### Definition\n\n`display_grid` is used using the `grid` keyword. It allows the modeler to display in an optimized way all cell agents of a grid (i.e. all agents of a species having a grid topology).\n\n#### Usages\n\n* The general syntax is:\n\n```\ndisplay my_display {\n   grid ant_grid lines: #black position: { 0.5, 0 } size: {0.5,0.5};\n}\n```\n\n\n* To display a grid as a DEM:\n\n```\ndisplay my_display {\n    grid cell texture: texture_file text: false triangulation: true elevation: true;\n}\n```\n\n    \n* See also: [display](#display), [agents](#agents), [chart](#chart), [event](#event), [graphics](#graphics), [image](#image), [overlay](#overlay), [display_population](#display_population), \n\n#### Embedments\n* The `display_grid` statement is of type: **Layer**\n* The `display_grid` statement can be embedded into: display, \n* The `display_grid` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_display_population)\n### display_population \n#### Facets \n  \n  * **`species`** (species), (omissible) : the species to be displayed\n  * `aspect` (an identifier): the name of the aspect that should be used to display the species\n  * `fading` (boolean): Used in conjunction with 'trace:', allows to apply a fading effect to the previous traces. Default is false\n  * `position` (point): position of the upper-left corner of the layer. Note that if coordinates are in [0,1[, the position is relative to the size of the environment (e.g. {0.5,0.5} refers to the middle of the display) whereas it is absolute when coordinates are greater than 1 for x and y. The z-ordinate can only be defined between 0 and 1. The position can only be a 3D point {0.5, 0.5, 0.5}, the last coordinate specifying the elevation of the layer.\n  * `refresh` (boolean): (openGL only) specify whether the display of the species is refreshed. (true by default, usefull in case of agents that do not move)\n  * `selectable` (boolean): Indicates whether the agents present on this layer are selectable by the user. Default is true\n  * `size` (point): extent of the layer in the screen from its position. Coordinates in [0,1[ are treated as percentages of the total surface, while coordinates > 1 are treated as absolute sizes in model units (i.e. considering the model occupies the entire view). Like in 'position', an elevation can be provided with the z coordinate, allowing to scale the layer in the 3 directions\n  * `trace` (any type in [boolean, int]): Allows to aggregate the visualization of agents at each timestep on the display. Default is false. If set to an int value, only the last n-th steps will be visualized. If set to true, no limit of timesteps is applied.\n  * `transparency` (float): the transparency rate of the agents (between 0 and 1, 1 means no transparency) \n \t\n#### Definition\n\nThe `display_population` statement is used using the `species keyword`. It allows modeler to display all the agent of a given species in the current display. In particular, modeler can choose the aspect used to display them.\n\n#### Usages\n\n* The general syntax is:\n\n```\ndisplay my_display {\n   species species_name [additional options];\n}\n```\n\n\n* Species can be superposed on the same plan (be careful with the order, the last one will be above all the others):\n\n```\ndisplay my_display {\n   species agent1 aspect: base;\n   species agent2 aspect: base;\n   species agent3 aspect: base;\n}\n```\n\n\n* Each species layer can be placed at a different z value using the opengl display. position:{0,0,0} means the layer will be placed on the ground and position:{0,0,1} means it will be placed at an height equal to the maximum size of the environment.\n\n```\ndisplay my_display type: opengl{\n   species agent1 aspect: base ;\n   species agent2 aspect: base position:{0,0,0.5};\n   species agent3 aspect: base position:{0,0,1};\n}\n```\n\n    \n* See also: [display](#display), [agents](#agents), [chart](#chart), [event](#event), [graphics](#graphics), [display_grid](#display_grid), [image](#image), [overlay](#overlay), \n\n#### Embedments\n* The `display_population` statement is of type: **Layer**\n* The `display_population` statement can be embedded into: display, display_population, \n* The `display_population` statement embeds statements: [display_population](#display_population),  \n\n----\n\n[//]: # (keyword|statement_do)\n### do \n#### Facets \n  \n  * **`action`** (an identifier), (omissible) : the name of an action or a primitive\n  * `internal_function` (any type): \n  * `returns` (a new identifier): create a new variable and assign to it the result of the action\n  * `with` (map): a map expression containing the parameters of the action \n \t\n#### Definition\n\nAllows the agent to execute an action or a primitive.  For a list of primitives available in every species, see this [BuiltIn161 page]; for the list of primitives defined by the different skills, see this [Skills161 page]. Finally, see this [Species161 page] to know how to declare custom actions.\n\n#### Usages\n\n* The simple syntax (when the action does not expect any argument and the result is not to be kept) is:\n\n```\ndo name_of_action_or_primitive;\n```\n\n\n* In case the action expects one or more arguments to be passed, they are defined by using facets (enclosed tags or a map are now deprecated):\n\n```\ndo name_of_action_or_primitive arg1: expression1 arg2: expression2;\n```\n\n\n* In case the result of the action needs to be made available to the agent, the action can be called with the agent calling the action (`self` when the agent itself calls the action) instead of `do`; the result should be assigned to a temporary variable:\n\n```\ntype_returned_by_action result  selected_agents  2) {\n\t\t\twrite \"transition s_init -> s1\";\n\t\t}\n\t\texit {\n\t\t\twrite \"EXIT from \"+state;\n\t\t}\n\t}\n```\n\n    \n* See also: [enter](#enter), [state](#state), [transition](#transition), \n\n#### Embedments\n* The `exit` statement is of type: **Sequence of statements or action**\n* The `exit` statement can be embedded into: state, \n* The `exit` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_experiment)\n### experiment \n#### Facets \n  \n  * **`name`** (a label), (omissible) : identifier of the experiment  \n  * **`title`** (a label):   \n  * **`type`** (a label), takes values in: {batch, memorize, gui, headless}: the type of the experiment (either 'gui' or 'batch'\n  * `control` (an identifier): \n  * `frequency` (int): the execution frequence of the experiment (default value: 1). If frequency: 10, the experiment is executed only each 10 steps.\n  * `keep_seed` (boolean): \n  * `keep_simulations` (boolean): In the case of a batch experiment, specifies whether or not the simulations should be kept in memory for further analysis or immediately discarded with only their fitness kept in memory\n  * `parallel` (any type in [boolean, int]): When set to true, use multiple threads to run its simulations. Setting it to n will set the numbers of threads to use\n  * `parent` (an identifier): the parent experiment (in case of inheritance between experiments)\n  * `repeat` (int): In the case of a batch experiment, expresses hom many times the simulations must be repeated\n  * `schedules` (container): A container of agents (a species, a dynamic list, or a combination of species and containers) , which represents which agents will be actually scheduled when the population is scheduled for execution. For instance, 'species a schedules: (10 among a)' will result in a population that schedules only 10 of its own agents every cycle. 'species b schedules: []' will prevent the agents of 'b' to be scheduled. Note that the scope of agents covered here can be larger than the population, which allows to build complex scheduling controls; for instance, defining 'global schedules: [] {...} species b schedules: []; species c schedules: b + world; ' allows to simulate a model where the agents of b are scheduled first, followed by the world, without even having to create an instance of c.\n  * `skills` (list): \n  * `until` (boolean): In the case of a batch experiment, an expression that will be evaluated to know when a simulation should be terminated\n\n#### Embedments\n* The `experiment` statement is of type: **Experiment**\n* The `experiment` statement can be embedded into: Model, \n* The `experiment` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_export)\n### export \n#### Facets \n  \n  * **`var`** (an identifier), (omissible) : \n  * `framerate` (int): \n  * `name` (string): \n\n#### Embedments\n* The `export` statement is of type: **Single statement**\n* The `export` statement can be embedded into: Experiment, \n* The `export` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_focus)\n### focus \n#### Facets \n\n  * `name` (an identifier), (omissible) : the identifier of the focus\n  * `agent_cause` (agent): the agentCause value of the created belief (can be nil\n  * `expression` (any type): an expression that will be the value kept in the belief\n  * `lifetime` (int): the lifetime value of the created belief\n  * `priority` (any type in [float, int]): The priority of the created predicate\n  * `truth` (boolean): the truth value of the created belief\n  * `var` (any type in [any type, list, container]): the variable of the perceived agent you want to add to your beliefs\n  * `when` (boolean): A boolean value to focus only with a certain condition \n \t\n#### Definition\n\nenables to directly add a belief from the variable of a perceived specie.\n\n#### Usages\n\n* Other examples of use: \n```\nfocus var:speed /*where speed is a variable from a species that is being perceived*/\n``` \n  \n\n#### Embedments\n* The `focus` statement is of type: **Single statement**\n* The `focus` statement can be embedded into: Behavior, Sequence of statements or action, \n* The `focus` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_focus_on)\n### focus_on \n#### Facets \n  \n  * **`value`** (any type), (omissible) : The agent, list of agents, geometry to focus on \n \t\n#### Definition\n\nAllows to focus on the passed parameter in all available displays. Passing 'nil' for the parameter will make all screens return to their normal zoom\n\n#### Usages\n\n* Focuses on an agent, a geometry, a set of agents, etc...)\n\n```\nfocus_on my_species(0);\n```\n\n\n\n#### Embedments\n* The `focus_on` statement is of type: **Single statement**\n* The `focus_on` statement can be embedded into: Behavior, Sequence of statements or action, Layer, \n* The `focus_on` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_genetic)\n### genetic \n#### Facets \n  \n  * **`name`** (an identifier), (omissible) : \n  * `aggregation` (a label), takes values in: {min, max}: the agregation method\n  * `crossover_prob` (float): crossover probability between two individual solutions\n  * `max_gen` (int): number of generations\n  * `maximize` (float): the value the algorithm tries to maximize\n  * `minimize` (float): the value the algorithm tries to minimize\n  * `mutation_prob` (float): mutation probability for an individual solution\n  * `nb_prelim_gen` (int): number of random populations used to build the initial population\n  * `pop_dim` (int): size of the population (number of individual solutions) \n \t\n#### Definition\n\nThis is a simple implementation of Genetic Algorithms (GA). See the wikipedia article and [batch161 the batch dedicated page]. The principle of the GA is to search an optimal solution by applying evolution operators on an initial population of solutions. There are three types of evolution operators: crossover, mutation and selection. Different techniques can be applied for this selection. Most of them are based on the solution quality (fitness).\n\n#### Usages\n\n* As other batch methods, the basic syntax of the `genetic` statement uses `method genetic` instead of the expected `genetic name: id` : \n\n```\nmethod genetic [facet: value];\n```\n\n\n* For example: \n\n```\nmethod genetic maximize: food_gathered pop_dim: 5 crossover_prob: 0.7 mutation_prob: 0.1 nb_prelim_gen: 1 max_gen: 20; \n```\n\n\n\n#### Embedments\n* The `genetic` statement is of type: **Batch method**\n* The `genetic` statement can be embedded into: Experiment, \n* The `genetic` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_graphics)\n### graphics \n#### Facets \n\n  * `name` (a label), (omissible) : the human readable title of the graphics\n  * `fading` (boolean): Used in conjunction with 'trace:', allows to apply a fading effect to the previous traces. Default is false\n  * `position` (point): position of the upper-left corner of the layer. Note that if coordinates are in [0,1[, the position is relative to the size of the environment (e.g. {0.5,0.5} refers to the middle of the display) whereas it is absolute when coordinates are greater than 1 for x and y. The z-ordinate can only be defined between 0 and 1. The position can only be a 3D point {0.5, 0.5, 0.5}, the last coordinate specifying the elevation of the layer.\n  * `refresh` (boolean): (openGL only) specify whether the display of the species is refreshed. (true by default, usefull in case of agents that do not move)\n  * `size` (point): extent of the layer in the screen from its position. Coordinates in [0,1[ are treated as percentages of the total surface, while coordinates > 1 are treated as absolute sizes in model units (i.e. considering the model occupies the entire view). Like in 'position', an elevation can be provided with the z coordinate, allowing to scale the layer in the 3 directions\n  * `trace` (any type in [boolean, int]): Allows to aggregate the visualization at each timestep on the display. Default is false. If set to an int value, only the last n-th steps will be visualized. If set to true, no limit of timesteps is applied.\n  * `transparency` (float): the transparency rate of the agents (between 0 and 1, 1 means no transparency) \n \t\n#### Definition\n\n`graphics` allows the modeler to freely draw shapes/geometries/texts without having to define a species. It works exactly like a species [Aspect161 aspect]: the draw statement can be used in the same way.\n\n#### Usages\n\n* The general syntax is:\n\n```\ndisplay my_display {\n   graphics \"my new layer\" {\n      draw circle(5) at: {10,10} color: #red;\n      draw \"test\" at: {10,10} size: 20 color: #black;\n   }\n}\n```\n\n    \n* See also: [display](#display), [agents](#agents), [chart](#chart), [event](#event), [graphics](#graphics), [display_grid](#display_grid), [image](#image), [overlay](#overlay), [display_population](#display_population), \n\n#### Embedments\n* The `graphics` statement is of type: **Layer**\n* The `graphics` statement can be embedded into: display, \n* The `graphics` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_highlight)\n### highlight \n#### Facets \n  \n  * **`value`** (agent), (omissible) : The agent to hightlight\n  * `color` (rgb): An optional color to highlight the agent. Note that this color will become the default color for further higlight operations \n \t\n#### Definition\n\nAllows to highlight the agent passed in parameter in all available displays, optionaly setting a color. Passing 'nil' for the agent will remove the current highlight\n\n#### Usages\n\n* Highlighting an agent\n\n```\nhighlight my_species(0) color: #blue;\n```\n\n\n\n#### Embedments\n* The `highlight` statement is of type: **Single statement**\n* The `highlight` statement can be embedded into: Behavior, Sequence of statements or action, Layer, \n* The `highlight` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_hill_climbing)\n### hill_climbing \n#### Facets \n  \n  * **`name`** (an identifier), (omissible) : \n  * `aggregation` (a label), takes values in: {min, max}: the agregation method\n  * `iter_max` (int): number of iterations\n  * `maximize` (float): the value the algorithm tries to maximize\n  * `minimize` (float): the value the algorithm tries to minimize \n \t\n#### Definition\n\nThis algorithm is an implementation of the Hill Climbing algorithm. See the wikipedia article and [batch161 the batch dedicated page].\n\n#### Usages\n\n* As other batch methods, the basic syntax of the `hill_climbing` statement uses `method hill_climbing` instead of the expected `hill_climbing name: id` : \n\n```\nmethod hill_climbing [facet: value];\n```\n\n\n* For example: \n\n```\nmethod hill_climbing iter_max: 50 maximize : food_gathered; \n```\n\n\n\n#### Embedments\n* The `hill_climbing` statement is of type: **Batch method**\n* The `hill_climbing` statement can be embedded into: Experiment, \n* The `hill_climbing` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_if)\n### if \n#### Facets \n  \n  * **`condition`** (boolean), (omissible) : A boolean expression: the condition that is evaluated. \n \t\n#### Definition\n\nAllows the agent to execute a sequence of statements if and only if the condition evaluates to true.\n\n#### Usages\n\n* The generic syntax is:\n\n```\nif bool_expr {\n    [statements]\n}\n```\n\n\n* Optionally, the statements to execute when the condition evaluates to false can be defined in a following statement else. The syntax then becomes:\n\n```\nif bool_expr {\n    [statements]\n}\nelse {\n    [statements]\n}\nstring valTrue  1 are treated as absolute sizes in model units (i.e. considering the model occupies the entire view). Like in 'position', an elevation can be provided with the z coordinate, allowing to scale the layer in the 3 directions\n  * `transparency` (float): the transparency rate of the agents (between 0 and 1, 1 means no transparency) \n \t\n#### Definition\n\n`image` allows modeler to display an image (e.g. as background of a simulation).\n\n#### Usages\n\n* The general syntax is:\n\n```\ndisplay my_display {\n   image layer_name file: image_file [additional options];\n}\n```\n\n\n* For instance, in the case of a bitmap image\n\n```\ndisplay my_display {\n   image background file:\"../images/my_backgound.jpg\";\n}\n```\n\n\n* Or in the case of a shapefile:\n\n```\ndisplay my_display {\n   image testGIS gis: \"../includes/building.shp\" color: rgb('blue');\n}\n```\n\n\n* It is also possible to superpose images on different layers in the same way as for species using opengl display:\n\n```\ndisplay my_display {\n  image image1 file:\"../images/image1.jpg\";\n  image image2 file:\"../images/image2.jpg\";\n  image image3 file:\"../images/image3.jpg\" position: {0,0,0.5};\n}\n```\n\n    \n* See also: [display](#display), [agents](#agents), [chart](#chart), [event](#event), [graphics](#graphics), [display_grid](#display_grid), [overlay](#overlay), [display_population](#display_population), \n\n#### Embedments\n* The `image` statement is of type: **Layer**\n* The `image` statement can be embedded into: display, \n* The `image` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_inspect)\n### inspect \n#### Facets \n  \n  * **`name`** (any type), (omissible) : the identifier of the inspector\n  * `attributes` (list): the list of attributes to inspect\n  * `refresh` (boolean): Indicates the condition under which this output should be refreshed (default is true)\n  * `refresh_every` (int): Allows to refresh the inspector every n time steps (default is 1)\n  * `type` (an identifier), takes values in: {agent, table}: the way to inspect agents: in a table, or a set of inspectors\n  * `value` (any type): the set of agents to inspect, could be a species, a list of agents or an agent \n \t\n#### Definition\n\n`inspect` (and `browse`) statements allows modeler to inspect a set of agents, in a table with agents and all their attributes or an agent inspector per agent, depending on the type: chosen. Modeler can choose which attributes to display. When `browse` is used, type: default value is table, whereas when`inspect` is used, type: default value is agent.\n\n#### Usages\n\n* An example of syntax is:\n\n```\ninspect \"my_inspector\" value: ant attributes: [\"name\", \"location\"];\n```\n\n\n\n#### Embedments\n* The `inspect` statement is of type: **Output**\n* The `inspect` statement can be embedded into: output, permanent, Behavior, Sequence of statements or action, \n* The `inspect` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_let)\n### let \n#### Facets \n  \n  * **`name`** (a new identifier), (omissible) : \n  * `index` (a datatype identifier): \n  * `of` (a datatype identifier): \n  * `type` (a datatype identifier): \n  * `value` (any type): \n\n#### Embedments\n* The `let` statement is of type: **Single statement**\n* The `let` statement can be embedded into: Behavior, Sequence of statements or action, Layer, \n* The `let` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_light)\n### light \n#### Facets \n  \n  * **`id`** (int), (omissible) : a number from 1 to 7 to specify which light we are using\n  * `active` (boolean): a boolean expression telling if you want this light to be switch on or not. (default value : true)\n  * `color` (any type in [int, rgb]): an int / rgb / rgba value to specify the color and the intensity of the light. (default value : (127,127,127,255) ).\n  * `direction` (point): the direction of the light (only for direction and spot light). (default value : {0.5,0.5,-1})\n  * `draw_light` (boolean): draw or not the light. (default value : false).\n  * `linear_attenuation` (float): the linear attenuation of the positionnal light. (default value : 0)\n  * `position` (point): the position of the light (only for point and spot light). (default value : {0,0,1})\n  * `quadratic_attenuation` (float): the linear attenuation of the positionnal light. (default value : 0)\n  * `spot_angle` (float): the angle of the spot light in degree (only for spot light). (default value : 45)\n  * `type` (a label): the type of light to create. A value among {point, direction, spot}. (default value : direction)\n  * `update` (boolean): specify if the light has to be updated. (default value : true). \n \t\n#### Definition\n\n`light` allows to define diffusion lights in your 3D display.\n\n#### Usages\n\n* The general syntax is:\n\n```\nlight 1 type:point position:{20,20,20} color:255, linear_attenuation:0.01 quadratic_attenuation:0.0001 draw_light:true update:false\nlight 2 type:spot position:{20,20,20} direction:{0,0,-1} color:255 spot_angle:25 linear_attenuation:0.01 quadratic_attenuation:0.0001 draw_light:true update:false\nlight 3 type:point direction:{1,1,-1} color:255 draw_light:true update:false\n```\n\n    \n* See also: [display](#display), \n\n#### Embedments\n* The `light` statement is of type: **Layer**\n* The `light` statement can be embedded into: display, \n* The `light` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_loop)\n### loop \n#### Facets \n\n  * `name` (a new identifier), (omissible) : a temporary variable name\n  * `from` (int): an int expression\n  * `over` (any type in [container, point]): a list, point, matrix or map expression\n  * `step` (int): an int expression\n  * `times` (int): an int expression\n  * `to` (int): an int expression\n  * `while` (boolean): a boolean expression \n \t\n#### Definition\n\nAllows the agent to perform the same set of statements either a fixed number of times, or while a condition is true, or by progressing in a collection of elements or along an interval of integers. Be aware that there are no prevention of infinite loops. As a consequence, open loops should be used with caution, as one agent may block the execution of the whole model.\n\n#### Usages\n\n* The basic syntax for repeating a fixed number of times a set of statements is:\n\n```\nloop times: an_int_expression {\n     // [statements]\n}\n```\n\n\n* The basic syntax for repeating a set of statements while a condition holds is:\n\n```\nloop while: a_bool_expression {\n     // [statements]\n}\n```\n\n\n* The basic syntax for repeating a set of statements by progressing over a container of a point is:\n\n```\nloop a_temp_var over: a_collection_expression {\n     // [statements]\n}\n```\n\n\n* The basic syntax for repeating a set of statements while an index iterates over a range of values with a fixed step of 1 is:\n\n```\nloop a_temp_var from: int_expression_1 to: int_expression_2 {\n     // [statements]\n}\n```\n\n\n* The incrementation step of the index can also be chosen:\n\n```\nloop a_temp_var from: int_expression_1 to: int_expression_2 step: int_expression3 {\n     // [statements]\n}\n```\n\n\n* In these latter three cases, the name facet designates the name of a temporary variable, whose scope is the loop, and that takes, in turn, the value of each of the element of the list (or each value in the interval). For example, in the first instance of the \"loop over\" syntax :\n\n```\nint a  1 are treated as absolute sizes in model units (i.e. considering the model occupies the entire view). Unlike  'position', no elevation can be provided with the z coordinate\n  * `transparency` (float): the transparency rate of the overlay (between 0 and 1, 1 means no transparency) when it is displayed inside the view. The bottom overlay will remain at 0.75 \n \t\n#### Definition\n\n`overlay` allows the modeler to display a line to the already existing bottom overlay, where the results of 'left', 'center' and 'right' facets, when they are defined, are displayed with the corresponding color if defined.\n\n#### Usages\n\n* To display information in the bottom overlay, the syntax is:\n\n```\noverlay \"Cycle: \" + (cycle) center: \"Duration: \" + total_duration + \"ms\" right: \"Model time: \" + as_date(time,\"\") color: [#yellow, #orange, #yellow];\n```\n\n    \n* See also: [display](#display), [agents](#agents), [chart](#chart), [event](#event), [graphics](#graphics), [display_grid](#display_grid), [image](#image), [display_population](#display_population), \n\n#### Embedments\n* The `overlay` statement is of type: **Layer**\n* The `overlay` statement can be embedded into: display, \n* The `overlay` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_parameter)\n### parameter \n#### Facets \n  \n  * **`var`** (an identifier): the name of the variable (that should be declared in the global)\n  * `name` (a label), (omissible) : The message displayed in the interface\n  * `among` (list): the list of possible values\n  * `category` (a label): a category label, used to group parameters in the interface\n  * `init` (any type): the init value\n  * `max` (any type): the maximum value\n  * `min` (any type): the minimum value\n  * `on_change` (any type): Provides a block of statements that will be executed whenever the value of the parameter changes\n  * `slider` (boolean): Whether or not to display a slider for entering an int or float value. Default is true when max and min values are defined, false otherwise. If no max or min value is defined, setting this facet to true will have no effect\n  * `step` (float): the increment step (mainly used in batch mode to express the variation step between simulation)\n  * `type` (a datatype identifier): the variable type\n  * `unit` (a label): the variable unit \n \t\n#### Definition\n\nThe parameter statement specifies which global attributes (i) will change through the successive simulations (in batch experiments), (ii) can be modified by user via the interface (in gui experiments). In GUI experiments, parameters are displayed depending on their type.\n\n#### Usages\n\n* In gui experiment, the general syntax is the following:\n\n```\nparameter title var: global_var category: cat;\n```\n\n\n* In batch experiment, the two following syntaxes can be used to describe the possible values of a parameter:\n\n```\nparameter 'Value of toto:' var: toto among: [1, 3, 7, 15, 100]; \nparameter 'Value of titi:' var: titi min: 1 max: 100 step: 2; \n```\n\n\n\n#### Embedments\n* The `parameter` statement is of type: **Parameter**\n* The `parameter` statement can be embedded into: Experiment, \n* The `parameter` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_perceive)\n### perceive \n#### Facets \n  \n  * **`target`** (any type in [container, point, agent]): the list of the agent you want to perceive\n  * `name` (an identifier), (omissible) : the name of the perception\n  * `as` (species): an expression that evaluates to a species\n  * `emotion` (546706): The emotion needed to do the perception\n  * `in` (any type in [float, geometry]): a float or a geometry. If it is a float, it's a radius of a detection area. If it is a geometry, it is the area of detection of others species.\n  * `parallel` (any type in [boolean, int]): setting this facet to 'true' will allow 'perceive' to use concurrency with a parallel_bdi architecture; setting it to an integer will set the threshold under which they will be run sequentially (the default is initially 20, but can be fixed in the preferences). This facet is true by default.\n  * `threshold` (float): Threshold linked to the emotion.\n  * `when` (boolean): a boolean to tell when does the perceive is active \n \t\n#### Definition\n\nAllow the agent, with a bdi architecture, to perceive others agents\n\n#### Usages\n\n* the basic syntax to perceive agents inside a circle of perception\n\n```\nperceive name_of-perception target: the_agents_you_want_to_perceive in: a_distance when: a_certain_condition {\nHere you are in the context of the perceived agents. To refer to the agent who does the perception, use myself.\nIf you want to make an action (such as adding a belief for example), use ask myself{ do the_action}\n}\n```\n\n\n\n#### Embedments\n* The `perceive` statement is of type: **Sequence of statements or action**\n* The `perceive` statement can be embedded into: Species, Model, \n* The `perceive` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_permanent)\n### permanent \n#### Facets \n\n  * `layout` (int), (omissible) : Either #none, to indicate that no layout will be imposed, or one of the four possible predefined layouts: #stack, #split, #horizontal or #vertical. This layout will be applied to both experiment and simulation display views \n \t\n#### Definition\n\nRepresents the outputs of the experiment itself. In a batch experiment, the permanent section allows to define an output block that will NOT be re-initialized at the beginning of each simulation but will be filled at the end of each simulation.\n\n#### Usages\n\n* For instance, this permanent section will allow to display for each simulation the end value of the food_gathered variable:\n\n```\npermanent {\n\tdisplay Ants background: rgb('white') refresh_every: 1 {\n\t\tchart \"Food Gathered\" type: series {\n\t\t\tdata \"Food\" value: food_gathered;\n\t\t}\n\t}\n}\n```\n\n\n\n#### Embedments\n* The `permanent` statement is of type: **Output**\n* The `permanent` statement can be embedded into: Experiment, \n* The `permanent` statement embeds statements: [display](#display),  [inspect](#inspect),  [monitor](#monitor),  [output_file](#output_file),  \n\n----\n\n[//]: # (keyword|statement_plan)\n### plan \n#### Facets \n\n  * `name` (an identifier), (omissible) : \n  * `emotion` (546706): \n  * `finished_when` (boolean): \n  * `instantaneous` (boolean): \n  * `intention` (546704): \n  * `priority` (float): \n  * `threshold` (float): \n  * `when` (boolean): \n\n#### Embedments\n* The `plan` statement is of type: **Behavior**\n* The `plan` statement can be embedded into: Species, Model, \n* The `plan` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_put)\n### put \n#### Facets \n  \n  * **`in`** (any type in [container, species, agent, geometry]): an expression that evaluates to a container\n  * `item` (any type), (omissible) : any expression\n  * `all` (any type): any expression\n  * `at` (any type): any expression\n  * `edge` (any type): Indicates that the item to put should be considered as an edge of the receiving graph. Soon to be deprecated, use 'put edge(item)...' instead\n  * `key` (any type): any expression\n  * `weight` (float): an expression that evaluates to a float \n \t\n#### Definition\n\nAllows the agent to replace a value in a container at a given position (in a list or a map) or for a given key (in a map). Note that the behavior and the type of the attributes depends on the specific kind of container.\n\n#### Usages\n\n* The allowed parameters configurations are the following ones:\n\n```\nput expr at: expr in: expr_container;\nput all: expr in: expr_container;\n```\n\n\n* In the case of a list, the position should an integer in the bound of the list. The facet all: is used to replace all the elements of the list by the given value.\n\n```\nlist putList  putMatrix  putMap  removeList  removeMap  removeMapList \"  + name + \":\" + location) to: \"save_data.txt\" type: \"text\";\n```\n\n\n* To save the values of some attributes of the current agent in csv file:\n\n```\nsave [name, location, host] to: \"save_data.csv\" type: \"csv\";\n```\n\n\n* To save the values of all attributes of all the agents of a species into a csv (with optional attributes):\n\n```\nsave species_of(self) to: \"save_csvfile.csv\" type: \"csv\" header: false;\n```\n\n\n* To save the geometries of all the agents of a species into a shapefile (with optional attributes):\n\n```\nsave species_of(self) to: \"save_shapefile.shp\" type: \"shp\" with: [name::\"nameAgent\", location::\"locationAgent\"] crs: \"EPSG:4326\";\n```\n\n\n* To save the grid_value attributes of all the cells of a grid into an ESRI ASCII Raster file:\n\n```\nsave grid to: \"save_grid.asc\" type: \"asc\";\n```\n\n\n* To save the grid_value attributes of all the cells of a grid into geotiff:\n\n```\nsave grid to: \"save_grid.tif\" type: \"geotiff\";\n```\n\n\n* To save the grid_value attributes of all the cells of a grid into png (with a worldfile):\n\n```\nsave grid to: \"save_grid.png\" type: \"image\";\n```\n\n\n* The save statement can be use in an init block, a reflex, an action or in a user command. Do not use it in experiments.\n\n#### Embedments\n* The `save` statement is of type: **Single statement**\n* The `save` statement can be embedded into: Behavior, Sequence of statements or action, \n* The `save` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_save_batch)\n### save_batch \n#### Facets \n  \n  * **`to`** (a label): \n  * `data` (any type), (omissible) : \n  * `rewrite` (boolean): \n\n#### Embedments\n* The `save_batch` statement is of type: **Batch method**\n* The `save_batch` statement can be embedded into: Experiment, \n* The `save_batch` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_set)\n### set \n#### Facets \n  \n  * **`name`** (any type), (omissible) : the name of an existing variable or attribute to be modified  \n  * **`value`** (any type): the value to affect to the variable or attribute \n \t\n#### Definition\n\nAllows to assign a value to the variable or attribute specified\n\n#### Usages\n\n\n#### Embedments\n* The `set` statement is of type: **Single statement**\n* The `set` statement can be embedded into: chart, Behavior, Sequence of statements or action, Layer, \n* The `set` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_setup)\n### setup \n#### Facets \n \n \t\n#### Definition\n\nThe setup statement is used to define the set of instructions that will be executed before every [#test test].\n\n#### Usages\n\n* As every test should be independent from the others, the setup will mainly contain initialization of variables that will be used in each test.\n\n```\nspecies Tester {\n    int val_to_test;\n\n    setup {\n        val_to_test  Concurrency)\n  * `parent` (species): the parent class (inheritance)\n  * `schedules` (container): A container of agents (a species, a dynamic list, or a combination of species and containers) , which represents which agents will be actually scheduled when the population is scheduled for execution. For instance, 'species a schedules: (10 among a)' will result in a population that schedules only 10 of its own agents every cycle. 'species b schedules: []' will prevent the agents of 'b' to be scheduled. Note that the scope of agents covered here can be larger than the population, which allows to build complex scheduling controls; for instance, defining 'global schedules: [] {...} species b schedules: []; species c schedules: b + world; ' allows to simulate a model where the agents of b are scheduled first, followed by the world, without even having to create an instance of c.\n  * `skills` (list): The list of skills that will be made available to the instances of this species. Each new skill provides attributes and actions that will be added to the ones defined in this species\n  * `topology` (topology): The topology of the population of agents defined by this species. In case of nested species, it can for example be the shape of the macro-agent. In case of grid or graph species, the topology is automatically computed and cannot be redefined\n  * `torus` (boolean): is the topology toric (defaut: false). Needs to be defined on the global species.\n  * `use_individual_shapes` (boolean): (grid only),(true by default). Allows to specify whether or not the agents of the grid will have distinct geometries. If set to false, they will all have simpler proxy geometries\n  * `use_neighbors_cache` (boolean): (grid only),(true by default). Allows to turn on or off the use of the neighbors cache used for grids. Note that if a diffusion of variable occurs, GAMA will emit a warning and automatically switch to a caching version\n  * `use_regular_agents` (boolean): (grid only),(true by default). Allows to specify if the agents of the grid are regular agents (like those of any other species) or minimal ones (which can't have sub-populations, can't inherit from a regular species, etc.)\n  * `width` (int): (grid only), the width of the grid (in terms of agent number) \n \t\n#### Definition\n\nThe species statement allows modelers to define new species in the model. `global` and `grid` are speciel cases of species: `global` being the definition of the global agent (which has automatically one instance, world) and `grid` being a species with a grid topology.\n\n#### Usages\n\n* Here is an example of a species definition with a FSM architecture and the additional skill moving:\n\n```\nspecies ant skills: [moving] control: fsm {\n```\n\n\n* In the case of a species aiming at mirroring another one:\n\n```\nspecies node_agent mirrors: list(bug) parent: graph_node edge_species: edge_agent {\n```\n\n\n* The definition of the single grid of a model will automatically create gridwidth x gridheight agents:\n\n```\ngrid ant_grid width: gridwidth height: gridheight file: grid_file neighbors: 8 use_regular_agents: false { \n```\n\n\n* Using a file to initialize the grid can replace width/height facets:\n\n```\ngrid ant_grid file: grid_file neighbors: 8 use_regular_agents: false { \n```\n\n\n\n#### Embedments\n* The `species` statement is of type: **Species**\n* The `species` statement can be embedded into: Model, Environment, Species, \n* The `species` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_state)\n### state \n#### Facets \n  \n  * **`name`** (an identifier), (omissible) : the identifier of the state\n  * `final` (boolean): specifies whether the state is a final one (i.e. there is no transition from this state to another state) (default value= false)\n  * `initial` (boolean): specifies whether the state is the initial one (default value = false) \n \t\n#### Definition\n\nA state, like a reflex, can contains several statements that can be executed at each time step by the agent.\n\n#### Usages\n\n* Here is an exemple integrating 2 states and the statements in the FSM architecture:\n\n```\n\tstate s_init initial: true {\n\t\tenter { write \"Enter in\" + state; }\n\t\t\twrite \"Enter in\" + state;\n\t\t}\n\n\t\twrite state;\n\n\t\ttransition to: s1 when: (cycle > 2) {\n\t\t\twrite \"transition s_init -> s1\";\n\t\t}\n\n\t\texit {\n\t\t\twrite \"EXIT from \"+state;\n\t\t}\n\t}\n\tstate s1 {\n\n\tenter {write 'Enter in '+state;}\n\n\twrite state;\n\n\texit {write 'EXIT from '+state;}\n}\n```\n\n    \n* See also: [enter](#enter), [exit](#exit), [transition](#transition), \n\n#### Embedments\n* The `state` statement is of type: **Behavior**\n* The `state` statement can be embedded into: fsm, Species, Experiment, Model, \n* The `state` statement embeds statements: [enter](#enter),  [exit](#exit),  \n\n----\n\n[//]: # (keyword|statement_status)\n### status \n#### Facets \n  \n  * **`message`** (any type), (omissible) : Allows to display a necessarily short message in the status box in the upper left corner. No formatting characters (carriage returns, tabs, or Unicode characters) should be used, but a background color can be specified. The message will remain in place until it is replaced by another one or by nil, in which case the standard status (number of cycles) will be displayed again\n  * `color` (rgb):  \n \t\n#### Definition\n\nThe statement makes the agent output an arbitrary message in the status box.\n\n#### Usages\n\n* Outputting a message\n\n```\nstatus ('This is my status ' + self) color: #yellow;\n```\n\n\n\n#### Embedments\n* The `status` statement is of type: **Single statement**\n* The `status` statement can be embedded into: Behavior, Sequence of statements or action, Layer, \n* The `status` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_switch)\n### switch \n#### Facets \n  \n  * **`value`** (any type), (omissible) : an expression \n \t\n#### Definition\n\nThe \"switch... match\" statement is a powerful replacement for imbricated \"if ... else ...\" constructs. All the blocks that match are executed in the order they are defined. The block prefixed by default is executed only if none have matched (otherwise it is not).\n\n#### Usages\n\n* The prototypical syntax is as follows:\n\n```\nswitch an_expression {\n        match value1 {...}\n        match_one [value1, value2, value3] {...}\n        match_between [value1, value2] {...}\n        default {...}\n}\n```\n\n\n* Example:\n\n```\nswitch 3 {\n   match 1 {write \"Match 1\"; }\n   match 2 {write \"Match 2\"; }\n   match 3 {write \"Match 3\"; }\n   match_one [4,4,6,3,7]  {write \"Match one_of\"; }\n   match_between [2, 4] {write \"Match between\"; }\n   default {write \"Match Default\"; }\n}\n```\n\n    \n* See also: [match](#match), [default](#default), [if](#if), \n\n#### Embedments\n* The `switch` statement is of type: **Sequence of statements or action**\n* The `switch` statement can be embedded into: Behavior, Sequence of statements or action, Layer, \n* The `switch` statement embeds statements: [default](#default),  [match](#match),  \n\n----\n\n[//]: # (keyword|statement_tabu)\n### tabu \n#### Facets \n  \n  * **`name`** (an identifier), (omissible) : \n  * `aggregation` (a label), takes values in: {min, max}: the agregation method\n  * `iter_max` (int): number of iterations\n  * `maximize` (float): the value the algorithm tries to maximize\n  * `minimize` (float): the value the algorithm tries to minimize\n  * `tabu_list_size` (int): size of the tabu list \n \t\n#### Definition\n\nThis algorithm is an implementation of the Tabu Search algorithm. See the wikipedia article and [batch161 the batch dedicated page].\n\n#### Usages\n\n* As other batch methods, the basic syntax of the tabu statement uses `method tabu` instead of the expected `tabu name: id` : \n\n```\nmethod tabu [facet: value];\n```\n\n\n* For example: \n\n```\nmethod tabu iter_max: 50 tabu_list_size: 5 maximize: food_gathered;\n```\n\n\n\n#### Embedments\n* The `tabu` statement is of type: **Batch method**\n* The `tabu` statement can be embedded into: Experiment, \n* The `tabu` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_task)\n### task \n#### Facets \n  \n  * **`name`** (an identifier), (omissible) : the identifier of the task  \n  * **`weight`** (float): the priority level of the task \n \t\n#### Definition\n\nAs reflex, a task is a sequence of statements that can be executed, at each time step, by the agent. If an agent owns several tasks, the scheduler chooses a task to execute based on its current priority weight value.\n\n#### Usages\n\n\n#### Embedments\n* The `task` statement is of type: **Behavior**\n* The `task` statement can be embedded into: weighted_tasks, sorted_tasks, probabilistic_tasks, Species, Experiment, Model, \n* The `task` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_test)\n### test \n#### Facets \n\n  * `name` (an identifier), (omissible) : identifier of the test \n \t\n#### Definition\n\nThe test statement allows modeler to define a set of assertions that will be tested. Before the execution of the embedded set of instructions, if a setup is defined in the species, model or experiment, it is executed. In a test, if one assertion fails, the evaluation of other assertions continue (if GAMA is configured in the preferences that the program does not stop at the first exception).\n\n#### Usages\n\n* An example of use:\n\n```\nspecies Tester {\n    // set of attributes that will be used in test\n\n    setup {\n        // [set of instructions... in particular initializations]\n    }\n\n    test t1 {\n       // [set of instructions, including asserts]\n    }\n}\n```\n\n    \n* See also: [setup](#setup), [assert](#assert), \n\n#### Embedments\n* The `test` statement is of type: **Behavior**\n* The `test` statement can be embedded into: Species, Experiment, Model, \n* The `test` statement embeds statements: [assert](#assert),  \n\n----\n\n[//]: # (keyword|statement_trace)\n### trace \n#### Facets \n \n \t\n#### Definition\n\nAll the statements executed in the trace statement are displayed in the console.\n\n#### Usages\n\n\n#### Embedments\n* The `trace` statement is of type: **Sequence of statements or action**\n* The `trace` statement can be embedded into: Behavior, Sequence of statements or action, Layer, \n* The `trace` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_transition)\n### transition \n#### Facets \n  \n  * **`to`** (an identifier): the identifier of the next state\n  * `when` (boolean), (omissible) : a condition to be fulfilled to have a transition to another given state \n \t\n#### Definition\n\nIn an FSM architecture, `transition` specifies the next state of the life cycle. The transition occurs when the condition is fulfilled. The embedded statements are executed when the transition is triggered.\n\n#### Usages\n\n* In the following example, the transition is executed when after 2 steps:\n\n```\n\tstate s_init initial: true {\n\t\twrite state;\n\t\ttransition to: s1 when: (cycle > 2) {\n\t\t\twrite \"transition s_init -> s1\";\n\t\t}\n\t}\n```\n\n    \n* See also: [enter](#enter), [state](#state), [exit](#exit), \n\n#### Embedments\n* The `transition` statement is of type: **Sequence of statements or action**\n* The `transition` statement can be embedded into: Sequence of statements or action, Behavior, \n* The `transition` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_unconscious_contagion)\n### unconscious_contagion \n#### Facets \n  \n  * **`emotion`** (546706): the emotion that will be copied with the contagion\n  * `name` (an identifier), (omissible) : the identifier of the unconscious contagion\n  * `charisma` (float): The charisma value of the perceived agent (between 0 and 1)\n  * `receptivity` (float): The receptivity value of the current agent (between 0 and 1)\n  * `threshold` (float): The threshold value to make the contagion\n  * `when` (boolean): A boolean value to get the emotion only with a certain condition \n \t\n#### Definition\n\nenables to directly copy an emotion presents in the perceived specie.\n\n#### Usages\n\n* Other examples of use: \n```\nunconscious_contagion emotion:fearConfirmed; \nunconscious_contagion emotion:fearConfirmed charisma: 0.5 receptivity: 0.5;\n``` \n  \n\n#### Embedments\n* The `unconscious_contagion` statement is of type: **Single statement**\n* The `unconscious_contagion` statement can be embedded into: Behavior, Sequence of statements or action, \n* The `unconscious_contagion` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_user_command)\n### user_command \n#### Facets \n  \n  * **`name`** (a label), (omissible) : the identifier of the user_command\n  * `action` (26): the identifier of the action to be executed. This action should be accessible in the context in which the user_command is defined (an experiment, the global section or a species). A special case is allowed to maintain the compatibility with older versions of GAMA, when the user_command is declared in an experiment and the action is declared in 'global'. In that case, all the simulations managed by the experiment will run the action in response to the user executing the command\n  * `color` (rgb): The color of the button to display\n  * `continue` (boolean): Whether or not the button, when clicked, should dismiss the user panel it is defined in. Has no effect in other contexts (menu, parameters, inspectors)\n  * `when` (boolean): the condition that should be fulfilled (in addition to the user clicking it) in order to execute this action\n  * `with` (map): the map of the parameters::values required by the action \n \t\n#### Definition\n\nAnywhere in the global block, in a species or in an (GUI) experiment, user_command statements allows to either call directly an existing action (with or without arguments) or to be followed by a block that describes what to do when this command is run.\n\n#### Usages\n\n* The general syntax is for example:\n\n```\nuser_command kill_myself action: some_action with: [arg1::val1, arg2::val2, ...];\n```\n\n    \n* See also: [user_init](#user_init), [user_panel](#user_panel), [user_input](#user_input), \n\n#### Embedments\n* The `user_command` statement is of type: **Sequence of statements or action**\n* The `user_command` statement can be embedded into: user_panel, Species, Experiment, Model, \n* The `user_command` statement embeds statements: [user_input](#user_input),  \n\n----\n\n[//]: # (keyword|statement_user_init)\n### user_init \n#### Facets \n  \n  * **`name`** (an identifier), (omissible) : The name of the panel\n  * `initial` (boolean): Whether or not this panel will be the initial one \n \t\n#### Definition\n\nUsed in the user control architecture, user_init is executed only once when the agent is created. It opens a special panel (if it contains user_commands statements). It is the equivalent to the init block in the basic agent architecture.\n\n#### Usages\n    \n* See also: [user_command](#user_command), [user_init](#user_init), [user_input](#user_input), \n\n#### Embedments\n* The `user_init` statement is of type: **Behavior**\n* The `user_init` statement can be embedded into: Species, Experiment, Model, \n* The `user_init` statement embeds statements: [user_panel](#user_panel),  \n\n----\n\n[//]: # (keyword|statement_user_input)\n### user_input \n#### Facets \n  \n  * **`returns`** (a new identifier): a new local variable containing the value given by the user\n  * `name` (a label), (omissible) : the displayed name\n  * `among` (list): the set of acceptable values for the variable\n  * `init` (any type): the init value\n  * `max` (float): the maximum value\n  * `min` (float): the minimum value\n  * `slider` (boolean): Whether to display a slider or not when applicable\n  * `type` (a datatype identifier): the variable type \n \t\n#### Definition\n\nIt allows to let the user define the value of a variable.\n\n#### Usages\n\n* Other examples of use: \n```\nuser_panel \"Advanced Control\" {\n\tuser_input \"Location\" returns: loc type: point ","url":"wiki/Statements.md"},{"id":"wiki/UnitsAndConstants.md","title":" Units and constants","content":"# Units and constants\n \t\n----\n\n**This file is automatically generated from java files. Do Not Edit It.**\n\n----\n\n## Introduction\nUnits can be used to qualify the values of numeric variables. By default, unqualified values are considered as:\n* meters for distances, lengths...\n* seconds for durations\n* cubic meters for volumes\n* kilograms for masses \n\nSo, an expression like:\n```\nfloat foo \n\n\t\n\t\t\n----\n\n## Constants\n\n[//]: # (keyword|constant_#e)\n* **`#e`**, value= 2.718281828459045, Comment: The e constant\n\n[//]: # (keyword|constant_#infinity)\n* **`#infinity`**, value= Infinity, Comment: A constant holding the positive infinity of type (Java Double.POSITIVE_INFINITY)\n\n[//]: # (keyword|constant_#max_float)\n* **`#max_float`**, value= 1.7976931348623157E308, Comment: A constant holding the largest positive finite value of type float (Java Double.MAX_VALUE)\n\n[//]: # (keyword|constant_#max_int)\n* **`#max_int`**, value= 2.147483647E9, Comment: A constant holding the maximum value an int can have (Java Integer.MAX_VALUE)\n\n[//]: # (keyword|constant_#min_float)\n* **`#min_float`**, value= 4.9E-324, Comment: A constant holding the smallest positive nonzero value of type float (Java Double.MIN_VALUE)\n\n[//]: # (keyword|constant_#min_int)\n* **`#min_int`**, value= -2.147483648E9, Comment: A constant holding the minimum value an int can have (Java Integer.MIN_VALUE)\n\n[//]: # (keyword|constant_#nan)\n* **`#nan`**, value= NaN, Comment: A constant holding a Not-a-Number (NaN) value of type float (Java Double.POSITIVE_INFINITY)\n\n[//]: # (keyword|constant_#pi)\n* **`#pi`**, value= 3.141592653589793, Comment: The PI constant\n\n[//]: # (keyword|constant_#to_deg)\n* **`#to_deg`**, value= 57.29577951308232, Comment: A constant holding the value to convert radians into degrees\n\n[//]: # (keyword|constant_#to_rad)\n* **`#to_rad`**, value= 0.017453292519943295, Comment: A constant holding the value to convert degrees into radians\n\t\t\n----\n\n## Graphics units\n\n[//]: # (keyword|constant_#bold)\n* **`#bold`**, value= 1, Comment: This constant allows to build a font with a bold face. Can be combined with #italic\n\n[//]: # (keyword|constant_#camera_location)\n* **`#camera_location`**, value= No Default Value, Comment: This unit, only available when running aspects or declaring displays, returns the current position of the camera as a point\n\n[//]: # (keyword|constant_#camera_orientation)\n* **`#camera_orientation`**, value= No Default Value, Comment: This unit, only available when running aspects or declaring displays, returns the current orientation of the camera as a point\n\n[//]: # (keyword|constant_#camera_target)\n* **`#camera_target`**, value= No Default Value, Comment: This unit, only available when running aspects or declaring displays, returns the current target of the camera as a point\n\n[//]: # (keyword|constant_#display_height)\n* **`#display_height`**, value= 1.0, Comment: This constant is only accessible in a graphical context: display, graphics...\n\n[//]: # (keyword|constant_#display_width)\n* **`#display_width`**, value= 1.0, Comment: This constant is only accessible in a graphical context: display, graphics...\n\n[//]: # (keyword|constant_#flat)\n* **`#flat`**, value= 2, Comment: This constant represents a flat line buffer end cap style\n\n[//]: # (keyword|constant_#horizontal)\n* **`#horizontal`**, value= 3, Comment: This constant represents a layout where all display views are aligned horizontally\n\n[//]: # (keyword|constant_#italic)\n* **`#italic`**, value= 2, Comment: This constant allows to build a font with an italic face. Can be combined with #bold\n\n[//]: # (keyword|constant_#none)\n* **`#none`**, value= 0, Comment: This constant represents the absence of a predefined layout\n\n[//]: # (keyword|constant_#pixels)\n* **`#pixels`** (#px), value= 1.0, Comment: This unit, only available when running aspects or declaring displays,  returns a dynamic value instead of a fixed one. px (or pixels), returns the value of one pixel on the current view in terms of model units.\n\n[//]: # (keyword|constant_#plain)\n* **`#plain`**, value= 0, Comment: This constant allows to build a font with a plain face\n\n[//]: # (keyword|constant_#round)\n* **`#round`**, value= 1, Comment: This constant represents a round line buffer end cap style\n\n[//]: # (keyword|constant_#split)\n* **`#split`**, value= 2, Comment: This constant represents a layout where all display views are split in a grid-like structure\n\n[//]: # (keyword|constant_#square)\n* **`#square`**, value= 3, Comment: This constant represents a square line buffer end cap style\n\n[//]: # (keyword|constant_#stack)\n* **`#stack`**, value= 1, Comment: This constant represents a layout where all display views are stacked\n\n[//]: # (keyword|constant_#user_location)\n* **`#user_location`**, value= No Default Value, Comment: This unit contains in permanence the location of the mouse on the display in which it is situated. The latest location is provided when it is out of a display\n\n[//]: # (keyword|constant_#vertical)\n* **`#vertical`**, value= 4, Comment: This constant represents a layout where all display views are aligned vertically\n\n[//]: # (keyword|constant_#zoom)\n* **`#zoom`**, value= 1.0, Comment: This unit, only available when running aspects or declaring displays, returns the current zoom level of the display as a positive float, where 1.0 represent the neutral zoom (100%)\n\t\t\n----\n\n## Length units\n\n[//]: # (keyword|constant_#cm)\n* **`#cm`** (#centimeter,#centimeters), value= 0.009999999776482582, Comment: centimeter unit\n\n[//]: # (keyword|constant_#dm)\n* **`#dm`** (#decimeter,#decimeters), value= 0.10000000149011612, Comment: decimeter unit\n\n[//]: # (keyword|constant_#foot)\n* **`#foot`** (#feet,#ft), value= 0.3047999931871891, Comment: foot unit\n\n[//]: # (keyword|constant_#inch)\n* **`#inch`** (#inches), value= 0.025399999432265757, Comment: inch unit\n\n[//]: # (keyword|constant_#km)\n* **`#km`** (#kilometer,#kilometers), value= 1000.0, Comment: kilometer unit\n\n[//]: # (keyword|constant_#m)\n* **`#m`** (#meter,#meters), value= 1.0, Comment: meter: the length basic unit\n\n[//]: # (keyword|constant_#mile)\n* **`#mile`** (#miles), value= 1609.344, Comment: mile unit\n\n[//]: # (keyword|constant_#mm)\n* **`#mm`** (#milimeter,#milimeters), value= 9.999999776482583E-4, Comment: millimeter unit\n\n[//]: # (keyword|constant_#yard)\n* **`#yard`** (#yards), value= 0.9144, Comment: yard unit\n\t\t\n----\n\n## Surface units\n\n[//]: # (keyword|constant_#m2)\n* **`#m2`**, value= 1.0, Comment: square meter: the basic unit for surfaces\n\n[//]: # (keyword|constant_#sqft)\n* **`#sqft`** (#square_foot,#square_feet), value= 0.09290303584691051, Comment: square foot unit\n\n[//]: # (keyword|constant_#sqin)\n* **`#sqin`** (#square_inch,#square_inches), value= 6.451599711591008E-4, Comment: square inch unit\n\n[//]: # (keyword|constant_#sqmi)\n* **`#sqmi`** (#square_mile,#square_miles), value= 2589988.110336, Comment: square mile unit\n\t\t\n----\n\n## Time units\n\n[//]: # (keyword|constant_#custom)\n* **`#custom`**, value= CUSTOM, Comment: custom: a custom date/time pattern that can be defined in the preferences of GAMA and reused in models\n\n[//]: # (keyword|constant_#cycle)\n* **`#cycle`** (#cycles), value= 1, Comment: cycle: the discrete measure of time in the simulation. Used to force a temporal expression to be expressed in terms of cycles rather than seconds\n\n[//]: # (keyword|constant_#day)\n* **`#day`** (#days), value= 86400.0, Comment: day time unit: defines an exact duration of 24 hours\n\n[//]: # (keyword|constant_#epoch)\n* **`#epoch`**, value= No Default Value, Comment: The epoch default starting date as defined by the ISO format (1970-01-01T00:00Z)\n\n[//]: # (keyword|constant_#h)\n* **`#h`** (#hour,#hours), value= 3600.0, Comment: hour time unit: defines an exact duration of 60 minutes\n\n[//]: # (keyword|constant_#iso_local)\n* **`#iso_local`**, value= ISO_LOCAL_DATE_TIME, Comment: iso_local: the standard ISO 8601 output / parsing format for local dates (i.e. with no time-zone information)\n\n[//]: # (keyword|constant_#iso_offset)\n* **`#iso_offset`**, value= ISO_OFFSET_DATE_TIME, Comment: iso_offset: the standard ISO 8601 output / parsing format for dates with a time offset\n\n[//]: # (keyword|constant_#iso_zoned)\n* **`#iso_zoned`**, value= ISO_ZONED_DATE_TIME, Comment: iso_zoned: the standard ISO 8601 output / parsing format for dates with a time zone\n\n[//]: # (keyword|constant_#minute)\n* **`#minute`** (#minutes,#mn), value= 60.0, Comment: minute time unit: defined an exact duration of 60 seconds\n\n[//]: # (keyword|constant_#month)\n* **`#month`** (#months), value= 2592000.0, Comment: month time unit: does not define an exact duration. The duration will depend on the step/date at which this unit is computed.\n\n[//]: # (keyword|constant_#msec)\n* **`#msec`** (#millisecond,#milliseconds,#ms), value= 0.001, Comment: millisecond time unit: defines an exact duration of 0.001 second\n\n[//]: # (keyword|constant_#now)\n* **`#now`**, value= 1.0, Comment: This value represents the current date\n\n[//]: # (keyword|constant_#sec)\n* **`#sec`** (#second,#seconds,#s), value= 1.0, Comment: second: the time basic unit, with a fixed value of 1. All other durations are expressed with respect to it\n\n[//]: # (keyword|constant_#week)\n* **`#week`** (#weeks), value= 604800.0, Comment: week time unit: defines an exact duration of  7 days\n\n[//]: # (keyword|constant_#year)\n* **`#year`** (#years,#y), value= 3.1104E7, Comment: year time unit: does not define an exact duration. The duration will depend on the step/date at which this unit is computed.\n\t\t\n----\n\n## Volume units\n\n[//]: # (keyword|constant_#cl)\n* **`#cl`** (#centiliter,#centiliters), value= 1.0E-5, Comment: centiliter unit\n\n[//]: # (keyword|constant_#dl)\n* **`#dl`** (#deciliter,#deciliters), value= 1.0E-4, Comment: deciliter unit\n\n[//]: # (keyword|constant_#hl)\n* **`#hl`** (#hectoliter,#hectoliters), value= 0.1, Comment: hectoliter unit\n\n[//]: # (keyword|constant_#l)\n* **`#l`** (#liter,#liters,#dm3), value= 0.001, Comment: liter unit\n\n[//]: # (keyword|constant_#m3)\n* **`#m3`**, value= 1.0, Comment: cube meter: the basic unit for volumes\n\t\t\n----\n\n## Weight units\n\n[//]: # (keyword|constant_#gram)\n* **`#gram`** (#grams), value= 0.001, Comment: gram unit\n\n[//]: # (keyword|constant_#kg)\n* **`#kg`** (#kilo,#kilogram,#kilos), value= 1.0, Comment: second: the basic unit for weights\n\n[//]: # (keyword|constant_#longton)\n* **`#longton`** (#lton), value= 1016.0469088000001, Comment: short ton unit\n\n[//]: # (keyword|constant_#ounce)\n* **`#ounce`** (#oz,#ounces), value= 0.028349523125, Comment: ounce unit\n\n[//]: # (keyword|constant_#pound)\n* **`#pound`** (#lb,#pounds,#lbm), value= 0.45359237, Comment: pound unit\n\n[//]: # (keyword|constant_#shortton)\n* **`#shortton`** (#ston), value= 907.18474, Comment: short ton unit\n\n[//]: # (keyword|constant_#stone)\n* **`#stone`** (#st), value= 6.35029318, Comment: stone unit\n\n[//]: # (keyword|constant_#ton)\n* **`#ton`** (#tons), value= 1000.0, Comment: ton unit\n\n\n----\n\n## Colors\n\nIn addition to the previous units, GAML provides a direct access to the 147 named colors defined in CSS (see http://www.cssportal.com/css3-color-names/). E.g,\n```\nrgb my_color ","url":"wiki/UnitsAndConstants.md"},{"id":"wiki/UnitsAndConstantsPDF.md","title":" Units and constants","content":"# Units and constants\n \t\n----\n\n**This file is automatically generated from java files. Do Not Edit It.**\n\n----\n\n## Introduction\nUnits can be used to qualify the values of numeric variables. By default, unqualified values are considered as:\n* meters for distances, lengths...\n* seconds for durations\n* cubic meters for volumes\n* kilograms for masses \n\nSo, an expression like:\n```\nfloat foo \n\n\t\n\t\t\n----\n\n## Constants\n\n[//]: # (keyword|constant_#e)\n* **`\\#e`**, value= 2.718281828459045, Comment: The e constant\n\n[//]: # (keyword|constant_#infinity)\n* **`\\#infinity`**, value= Infinity, Comment: A constant holding the positive infinity of type (Java Double.POSITIVE_INFINITY)\n\n[//]: # (keyword|constant_#max_float)\n* **`\\#max_float`**, value= 1.7976931348623157E308, Comment: A constant holding the largest positive finite value of type float (Java Double.MAX_VALUE)\n\n[//]: # (keyword|constant_#max_int)\n* **`\\#max_int`**, value= 2.147483647E9, Comment: A constant holding the maximum value an int can have (Java Integer.MAX_VALUE)\n\n[//]: # (keyword|constant_#min_float)\n* **`\\#min_float`**, value= 4.9E-324, Comment: A constant holding the smallest positive nonzero value of type float (Java Double.MIN_VALUE)\n\n[//]: # (keyword|constant_#min_int)\n* **`\\#min_int`**, value= -2.147483648E9, Comment: A constant holding the minimum value an int can have (Java Integer.MIN_VALUE)\n\n[//]: # (keyword|constant_#nan)\n* **`\\#nan`**, value= NaN, Comment: A constant holding a Not-a-Number (NaN) value of type float (Java Double.POSITIVE_INFINITY)\n\n[//]: # (keyword|constant_#pi)\n* **`\\#pi`**, value= 3.141592653589793, Comment: The PI constant\n\n[//]: # (keyword|constant_#to_deg)\n* **`\\#to_deg`**, value= 57.29577951308232, Comment: A constant holding the value to convert radians into degrees\n\n[//]: # (keyword|constant_#to_rad)\n* **`\\#to_rad`**, value= 0.017453292519943295, Comment: A constant holding the value to convert degrees into radians\n\t\t\n----\n\n## Graphics units\n\n[//]: # (keyword|constant_#bold)\n* **`\\#bold`**, value= 1, Comment: This constant allows to build a font with a bold face. Can be combined with #italic\n\n[//]: # (keyword|constant_#camera_location)\n* **`\\#camera_location`**, value= No Default Value, Comment: This unit, only available when running aspects or declaring displays, returns the current position of the camera as a point\n\n[//]: # (keyword|constant_#camera_orientation)\n* **`\\#camera_orientation`**, value= No Default Value, Comment: This unit, only available when running aspects or declaring displays, returns the current orientation of the camera as a point\n\n[//]: # (keyword|constant_#camera_target)\n* **`\\#camera_target`**, value= No Default Value, Comment: This unit, only available when running aspects or declaring displays, returns the current target of the camera as a point\n\n[//]: # (keyword|constant_#display_height)\n* **`\\#display_height`**, value= 1.0, Comment: This constant is only accessible in a graphical context: display, graphics...\n\n[//]: # (keyword|constant_#display_width)\n* **`\\#display_width`**, value= 1.0, Comment: This constant is only accessible in a graphical context: display, graphics...\n\n[//]: # (keyword|constant_#flat)\n* **`\\#flat`**, value= 2, Comment: This constant represents a flat line buffer end cap style\n\n[//]: # (keyword|constant_#horizontal)\n* **`\\#horizontal`**, value= 3, Comment: This constant represents a layout where all display views are aligned horizontally\n\n[//]: # (keyword|constant_#italic)\n* **`\\#italic`**, value= 2, Comment: This constant allows to build a font with an italic face. Can be combined with #bold\n\n[//]: # (keyword|constant_#none)\n* **`\\#none`**, value= 0, Comment: This constant represents the absence of a predefined layout\n\n[//]: # (keyword|constant_#pixels)\n* **`\\#pixels`** (#px), value= 1.0, Comment: This unit, only available when running aspects or declaring displays,  returns a dynamic value instead of a fixed one. px (or pixels), returns the value of one pixel on the current view in terms of model units.\n\n[//]: # (keyword|constant_#plain)\n* **`\\#plain`**, value= 0, Comment: This constant allows to build a font with a plain face\n\n[//]: # (keyword|constant_#round)\n* **`\\#round`**, value= 1, Comment: This constant represents a round line buffer end cap style\n\n[//]: # (keyword|constant_#split)\n* **`\\#split`**, value= 2, Comment: This constant represents a layout where all display views are split in a grid-like structure\n\n[//]: # (keyword|constant_#square)\n* **`\\#square`**, value= 3, Comment: This constant represents a square line buffer end cap style\n\n[//]: # (keyword|constant_#stack)\n* **`\\#stack`**, value= 1, Comment: This constant represents a layout where all display views are stacked\n\n[//]: # (keyword|constant_#user_location)\n* **`\\#user_location`**, value= No Default Value, Comment: This unit contains in permanence the location of the mouse on the display in which it is situated. The latest location is provided when it is out of a display\n\n[//]: # (keyword|constant_#vertical)\n* **`\\#vertical`**, value= 4, Comment: This constant represents a layout where all display views are aligned vertically\n\n[//]: # (keyword|constant_#zoom)\n* **`\\#zoom`**, value= 1.0, Comment: This unit, only available when running aspects or declaring displays, returns the current zoom level of the display as a positive float, where 1.0 represent the neutral zoom (100%)\n\t\t\n----\n\n## Length units\n\n[//]: # (keyword|constant_#cm)\n* **`\\#cm`** (#centimeter,#centimeters), value= 0.009999999776482582, Comment: centimeter unit\n\n[//]: # (keyword|constant_#dm)\n* **`\\#dm`** (#decimeter,#decimeters), value= 0.10000000149011612, Comment: decimeter unit\n\n[//]: # (keyword|constant_#foot)\n* **`\\#foot`** (#feet,#ft), value= 0.3047999931871891, Comment: foot unit\n\n[//]: # (keyword|constant_#inch)\n* **`\\#inch`** (#inches), value= 0.025399999432265757, Comment: inch unit\n\n[//]: # (keyword|constant_#km)\n* **`\\#km`** (#kilometer,#kilometers), value= 1000.0, Comment: kilometer unit\n\n[//]: # (keyword|constant_#m)\n* **`\\#m`** (#meter,#meters), value= 1.0, Comment: meter: the length basic unit\n\n[//]: # (keyword|constant_#mile)\n* **`\\#mile`** (#miles), value= 1609.344, Comment: mile unit\n\n[//]: # (keyword|constant_#mm)\n* **`\\#mm`** (#milimeter,#milimeters), value= 9.999999776482583E-4, Comment: millimeter unit\n\n[//]: # (keyword|constant_#yard)\n* **`\\#yard`** (#yards), value= 0.9144, Comment: yard unit\n\t\t\n----\n\n## Surface units\n\n[//]: # (keyword|constant_#m2)\n* **`\\#m2`**, value= 1.0, Comment: square meter: the basic unit for surfaces\n\n[//]: # (keyword|constant_#sqft)\n* **`\\#sqft`** (#square_foot,#square_feet), value= 0.09290303584691051, Comment: square foot unit\n\n[//]: # (keyword|constant_#sqin)\n* **`\\#sqin`** (#square_inch,#square_inches), value= 6.451599711591008E-4, Comment: square inch unit\n\n[//]: # (keyword|constant_#sqmi)\n* **`\\#sqmi`** (#square_mile,#square_miles), value= 2589988.110336, Comment: square mile unit\n\t\t\n----\n\n## Time units\n\n[//]: # (keyword|constant_#custom)\n* **`\\#custom`**, value= CUSTOM, Comment: custom: a custom date/time pattern that can be defined in the preferences of GAMA and reused in models\n\n[//]: # (keyword|constant_#cycle)\n* **`\\#cycle`** (#cycles), value= 1, Comment: cycle: the discrete measure of time in the simulation. Used to force a temporal expression to be expressed in terms of cycles rather than seconds\n\n[//]: # (keyword|constant_#day)\n* **`\\#day`** (#days), value= 86400.0, Comment: day time unit: defines an exact duration of 24 hours\n\n[//]: # (keyword|constant_#epoch)\n* **`\\#epoch`**, value= No Default Value, Comment: The epoch default starting date as defined by the ISO format (1970-01-01T00:00Z)\n\n[//]: # (keyword|constant_#h)\n* **`\\#h`** (#hour,#hours), value= 3600.0, Comment: hour time unit: defines an exact duration of 60 minutes\n\n[//]: # (keyword|constant_#iso_local)\n* **`\\#iso_local`**, value= ISO_LOCAL_DATE_TIME, Comment: iso_local: the standard ISO 8601 output / parsing format for local dates (i.e. with no time-zone information)\n\n[//]: # (keyword|constant_#iso_offset)\n* **`\\#iso_offset`**, value= ISO_OFFSET_DATE_TIME, Comment: iso_offset: the standard ISO 8601 output / parsing format for dates with a time offset\n\n[//]: # (keyword|constant_#iso_zoned)\n* **`\\#iso_zoned`**, value= ISO_ZONED_DATE_TIME, Comment: iso_zoned: the standard ISO 8601 output / parsing format for dates with a time zone\n\n[//]: # (keyword|constant_#minute)\n* **`\\#minute`** (#minutes,#mn), value= 60.0, Comment: minute time unit: defined an exact duration of 60 seconds\n\n[//]: # (keyword|constant_#month)\n* **`\\#month`** (#months), value= 2592000.0, Comment: month time unit: does not define an exact duration. The duration will depend on the step/date at which this unit is computed.\n\n[//]: # (keyword|constant_#msec)\n* **`\\#msec`** (#millisecond,#milliseconds,#ms), value= 0.001, Comment: millisecond time unit: defines an exact duration of 0.001 second\n\n[//]: # (keyword|constant_#now)\n* **`\\#now`**, value= 1.0, Comment: This value represents the current date\n\n[//]: # (keyword|constant_#sec)\n* **`\\#sec`** (#second,#seconds,#s), value= 1.0, Comment: second: the time basic unit, with a fixed value of 1. All other durations are expressed with respect to it\n\n[//]: # (keyword|constant_#week)\n* **`\\#week`** (#weeks), value= 604800.0, Comment: week time unit: defines an exact duration of  7 days\n\n[//]: # (keyword|constant_#year)\n* **`\\#year`** (#years,#y), value= 3.1104E7, Comment: year time unit: does not define an exact duration. The duration will depend on the step/date at which this unit is computed.\n\t\t\n----\n\n## Volume units\n\n[//]: # (keyword|constant_#cl)\n* **`\\#cl`** (#centiliter,#centiliters), value= 1.0E-5, Comment: centiliter unit\n\n[//]: # (keyword|constant_#dl)\n* **`\\#dl`** (#deciliter,#deciliters), value= 1.0E-4, Comment: deciliter unit\n\n[//]: # (keyword|constant_#hl)\n* **`\\#hl`** (#hectoliter,#hectoliters), value= 0.1, Comment: hectoliter unit\n\n[//]: # (keyword|constant_#l)\n* **`\\#l`** (#liter,#liters,#dm3), value= 0.001, Comment: liter unit\n\n[//]: # (keyword|constant_#m3)\n* **`\\#m3`**, value= 1.0, Comment: cube meter: the basic unit for volumes\n\t\t\n----\n\n## Weight units\n\n[//]: # (keyword|constant_#gram)\n* **`\\#gram`** (#grams), value= 0.001, Comment: gram unit\n\n[//]: # (keyword|constant_#kg)\n* **`\\#kg`** (#kilo,#kilogram,#kilos), value= 1.0, Comment: second: the basic unit for weights\n\n[//]: # (keyword|constant_#longton)\n* **`\\#longton`** (#lton), value= 1016.0469088000001, Comment: short ton unit\n\n[//]: # (keyword|constant_#ounce)\n* **`\\#ounce`** (#oz,#ounces), value= 0.028349523125, Comment: ounce unit\n\n[//]: # (keyword|constant_#pound)\n* **`\\#pound`** (#lb,#pounds,#lbm), value= 0.45359237, Comment: pound unit\n\n[//]: # (keyword|constant_#shortton)\n* **`\\#shortton`** (#ston), value= 907.18474, Comment: short ton unit\n\n[//]: # (keyword|constant_#stone)\n* **`\\#stone`** (#st), value= 6.35029318, Comment: stone unit\n\n[//]: # (keyword|constant_#ton)\n* **`\\#ton`** (#tons), value= 1000.0, Comment: ton unit\n\n\n----\n\n## Colors\n\nIn addition to the previous units, GAML provides a direct access to the 147 named colors defined in CSS (see http://www.cssportal.com/css3-color-names/). E.g,\n```\nrgb my_color ","url":"wiki/UnitsAndConstantsPDF.md"},{"id":"wiki/VariablesAndAttributes.md","title":" Variables and Attributes","content":"# Variables and Attributes\n\n\n\nVariables and attributes represent named data that can be used in an expression. They can be accessed depending on their _scope_:\n  * the scope of attributes declared in a species is itself, its child species and its micro-species.\n  * the scope of temporary variables is the one in which they have been declared, and all its sub-scopes.\nOutside its _scope_ of validity, an expression cannot use a variable or an attribute directly. However, attributes can be used in a remote fashion by using a dotted notation on a given agent (see [here](#Remote_Access)).\n\n\n## Table of contents \n\n* [Variables and Attributes](#variables-and-attributes)\n\t* [Direct Access](#direct-access)\n\t* [Remote Access](#remote-access)\n\n\n\n## Direct Access\nWhen an agent wants to use either one of the variables declared locally, one of the attributes declared in its species (or parent species), one of the attributes declared in the macro-species of its species, it can directly invoke its name and the compiler will do the rest (i.e. finding the variable or attribute in the right scope).\nFor instance, we can have a look at the following example:\n\n```\nspecies animal {\n   float energy  Everywhere in the species declaration, we are able to directly name and use:\n    * `time`, a global built-in variable,\n    * `energy` and `age_in_years`, the two species attributes.\n> Nevertheless, in the species declaration, but outside of the action `eat` and the reflex `feed`, we **cannot** name the variables:\n    * `amount`, the argument of `eat` action,\n    * `gain`, a local variable defined into the `eat` action,\n    * `food_found`, the local variable defined into the `feed` reflex.\n\n  * **`Eat` action declaration**\n> In the `eat` action declaration, we can directly name and use:\n    * `time`, a global built-in variable,\n    * `energy` and `age_in_years`, the two species attributes,\n    * `amount`, which is an argument to the action `eat`,\n    * `gain`, a temporary variable within the action.\n> We **cannot** name and use the variables:\n    * `food_found`, the local variable defined into the `feed` reflex.\n\n  * **`feed` reflex declaration**\n> Similarly, in the `feed` reflex declaration, we can directly name and use:\n    * `time`, a global built-in variable,\n    * `energy` and `age_in_years`, the two species variables,\n    * `food_found`, the local variable defined into the reflex.\n> But we **cannot** access to variables:\n    * `amount`, the argument of `eat` action,\n    * `gain`, a local variable defined into the `eat` action.\n\n\n\n\n\n## Remote Access\nWhen an expression needs to get access to the attribute of an agent which does not belong to its scope of execution, a special notation (similar to that used in Java) has to be used:\n\n```\nremote_agent.variable\n```\n\nwhere remote\\_agent can be the name of an agent, an expression returning an agent, self, myself or each. For instance, if we modify the previous species by giving its agents the possibility to feed another agent found in its neighbourhood, the result would be:\n\n```\nspecies animal {\n   float energy \n     float temp  ","url":"wiki/VariablesAndAttributes.md"},{"id":"wiki/Diffusion-Statement-Anisotropic-Diffusion-(Simple).md","title":" Anisotropic diffusion (Simple)","content":"[//]: # (keyword|operator_hsb)\n[//]: # (keyword|statement_diffuse)\n[//]: # (keyword|type_matrix)\n[//]: # (keyword|concept_diffusion)\n[//]: # (keyword|concept_matrix)\n[//]: # (keyword|concept_math)\n[//]: # (keyword|concept_elevation)\n# Anisotropic diffusion (Simple)\n\n\n_Author : Benoit Gaudou_\n\nThis model is used to show how to construct an anisotropic diffusion through a grid. The cell at the center of the grid emit a pheromon at each step, which is spread through the grid thanks to the diffusion mechanism, using a particular matrix of diffusion.\n\n\n == $0Code of the model : \n\n```\n\nmodel anisotropic_diffusion\n\nglobal {\n\tint size  mat_diff ","url":"wiki/Diffusion-Statement-Anisotropic-Diffusion-(Simple).md"},{"id":"wiki/Diffusion-Statement-Anisotropic-Diffusion-(Toroidal).md","title":" Anisotropic diffusion (Toroidal)","content":"[//]: # (keyword|operator_hsb)\n[//]: # (keyword|statement_diffuse)\n[//]: # (keyword|type_matrix)\n[//]: # (keyword|concept_diffusion)\n[//]: # (keyword|concept_matrix)\n[//]: # (keyword|concept_math)\n[//]: # (keyword|concept_elevation)\n# Anisotropic diffusion (Toroidal)\n\n\n_Author : Benoit Gaudou_\n\nThis model is used to show how to construct an anisotropic diffusion through a grid. The cell at the center of the grid emit a pheromon at each step, which is spread through the grid thanks to the diffusion mechanism, using a particular matrix of diffusion, in a toroidal world.\n\n\n == $0Code of the model : \n\n```\n\nmodel anisotropic_diffusion_torus\n\nglobal torus: true {\n\tint size  mat_diff ","url":"wiki/Diffusion-Statement-Anisotropic-Diffusion-(Toroidal).md"},{"id":"wiki/Diffusion-Statement-Anisotropic-Diffusion-(Various-Methods).md","title":" Anisotropic diffusion with several computation method","content":"[//]: # (keyword|operator_hsb)\n[//]: # (keyword|statement_diffuse)\n[//]: # (keyword|type_matrix)\n[//]: # (keyword|concept_diffusion)\n[//]: # (keyword|concept_matrix)\n[//]: # (keyword|concept_math)\n[//]: # (keyword|concept_elevation)\n# Anisotropic diffusion with several computation method\n\n\n_Author : Benoit Gaudou_\n\nThis model is used to show two different computation methods to use diffusion : with the dot product method and with the convolution method. The cell at the center of the grid emit a pheromon at each step, which is spread through the grid thanks to the diffusion mechanism, using a particular matrix of diffusion. \n\n\n == $0 == $0Code of the model : \n\n```\n\nmodel diffusion_computation_method\n\nglobal{\n\tint size  mat_diff ","url":"wiki/Diffusion-Statement-Anisotropic-Diffusion-(Various-Methods).md"},{"id":"wiki/Diffusion-Statement-Blend-color-in-a-cuve-(Multiple-Signals).md","title":" Blend color in a cuve","content":"[//]: # (keyword|statement_diffuse)\n[//]: # (keyword|type_matrix)\n[//]: # (keyword|concept_diffusion)\n[//]: # (keyword|concept_matrix)\n[//]: # (keyword|concept_math)\n[//]: # (keyword|concept_color)\n[//]: # (keyword|concept_elevation)\n# Blend color in a cuve\n\n\n_Author : Julien Mazars_\n\nThis model is used to show how we can diffuse several variables in the same grid. At the cycle 0, 3 different pheromons are emited in 3 of the 4 corners of the cuve (each one associated to a color). Thanks to the diffusion mechanism, all the 3 colors will blend each other. The process is accelerated by using the facet \"cycle_length\". The \"avoid_mask\" facet is used in order to have a constant sum of pheromon. \n\n\n == $0Code of the model : \n\n```\n\nmodel cycle_length\n\nglobal {\n\tint size  top_left_cells;\n  \tlist top_right_cells;\n  \tlist bot_left_cells;\n  \t// Declare the uniform matrix\n  \tmatrix mat_diff (cells where (each.grid_x < location.x\n\t\t\tand each.grid_x > cycle_length\n\t\t\tand each.grid_y < location.y\n\t\t\tand each.grid_y > cycle_length\n\t\t));\n\t\ttop_right_cells (cells where (each.grid_x < size-cycle_length\n\t\t\tand each.grid_x > location.x\n\t\t\tand each.grid_y < location.y\n\t\t\tand each.grid_y > cycle_length\n\t\t));\n\t\tbot_left_cells (cells where (each.grid_x < location.x\n\t\t\tand each.grid_x > cycle_length\n\t\t\tand each.grid_y < size-cycle_length\n\t\t\tand each.grid_y > location.y\n\t\t));\n\t}\n\treflex init_value when:cycle=0 {\n\t\task(top_left_cells){\n\t\t\tphero1  cycle_length and each.grid_y < size-cycle_length and each.grid_y > cycle_length);\n\t\tdiffuse var: phero1 on: cells_where_diffuse matrix: mat_diff avoid_mask: true method:dot_product cycle_length:cycle_length;\n\t\tdiffuse var: phero2 on: cells_where_diffuse matrix: mat_diff avoid_mask: true method:dot_product cycle_length:cycle_length;\n\t\tdiffuse var: phero3 on: cells_where_diffuse matrix: mat_diff avoid_mask: true method:dot_product cycle_length:cycle_length;\n\t}\n}\n\n\ngrid cells height: size width: size {\n\t// \"phero1\", \"phero2\", \"phero3\" are the variables storing the value of the diffusion\n\tfloat phero1  ","url":"wiki/Diffusion-Statement-Blend-color-in-a-cuve-(Multiple-Signals).md"},{"id":"wiki/Diffusion-Statement-Diffusion-in-a-cuve-(Cycle-length).md","title":" Diffusion in a cuve (Cycle length)","content":"[//]: # (keyword|operator_hsb)\n[//]: # (keyword|statement_diffuse)\n[//]: # (keyword|type_matrix)\n[//]: # (keyword|concept_diffusion)\n[//]: # (keyword|concept_matrix)\n[//]: # (keyword|concept_math)\n[//]: # (keyword|concept_elevation)\n# Diffusion in a cuve (Cycle length)\n\n\n_Author : Julien Mazars_\n\nThis model is used to show how to use diffusion on a grid, and how to accelerate the process by computing several times the diffusion at each step. The cells at the center of the grid emit a pheromon at the cycle 0, which is spread through the grid thanks to the diffusion mechanism, using a particular matrix of diffusion. The \"avoid_mask\" facet is used in order to have a constant sum of pheromon. \n\n\n == $0 == $0Code of the model : \n\n```\n\nmodel cycle_length\n\nglobal {\n\tint size  selected_cells;\n  \tlist selected_quick_cells;\n  \t// Declare an uniform diffusion matrix\n  \tmatrix mat_diff (cells where (each.grid_x < location.x+impulse_area_size\n\t\t\tand each.grid_x > location.x-impulse_area_size\n\t\t\tand each.grid_y < location.y+impulse_area_size\n\t\t\tand each.grid_y > location.y-impulse_area_size\n\t\t));\n\t\tselected_quick_cells (quick_cells where (each.grid_x < location.x+impulse_area_size\n\t\t\tand each.grid_x > location.x-impulse_area_size\n\t\t\tand each.grid_y < location.y+impulse_area_size\n\t\t\tand each.grid_y > location.y-impulse_area_size\n\t\t));\n\t}\n\treflex init_value when:cycle=0 {\n\t\task(selected_cells){\n\t\t\tphero  cycle_length and each.grid_y < size-cycle_length and each.grid_y > cycle_length);\n\t\tdiffuse var: phero on: cells_where_diffuse matrix: mat_diff avoid_mask: true method:dot_product;\t\n\t\tlist quick_cells_where_diffuse  cycle_length and each.grid_y < size-cycle_length and each.grid_y > cycle_length);\n\t\tdiffuse var: phero on: quick_cells_where_diffuse matrix: mat_diff avoid_mask: true cycle_length: 10 method:dot_product;\n\t}\n}\n\n\ngrid cells height: size width: size {\n\t// \"phero\" is the variable storing the value of the diffusion\n\tfloat phero  ","url":"wiki/Diffusion-Statement-Diffusion-in-a-cuve-(Cycle-length).md"},{"id":"wiki/Diffusion-Statement-Kernel-matrix-generation.md","title":" Generate diffusion matrix with parameters","content":"[//]: # (keyword|operator_cube)\n[//]: # (keyword|operator_hsb)\n[//]: # (keyword|operator_font)\n[//]: # (keyword|statement_diffuse)\n[//]: # (keyword|constant_#zoom)\n[//]: # (keyword|constant_#bold)\n[//]: # (keyword|constant_#msec)\n[//]: # (keyword|concept_diffusion)\n[//]: # (keyword|concept_math)\n[//]: # (keyword|concept_matrix)\n# Generate diffusion matrix with parameters\n\n\n_Author : Julien Mazars_\n\nThis model shows how to create a diffusion matrix by using the 4 parameters variation, proportion, radius and min-value. Manipulate the parameters to see in real time the result. The number displayed in each cells are the ratio of the initial signal diffused at the end of a step.\n\n\n == $0Code of the model : \n\n```\n\nmodel kernelmatrixgeneration\n\nglobal {\n\t// parameters\n\tfloat variation  x_max) {\n\t\t\t\t\tx_max  y_max) {\n\t\t\t\t\ty_max = x_min and grid_y <= y_max and grid_y >= y_min)\n\t\t{\n\t\t\t// compute dynamically the size of the current cell.\n\t\t\tfloat size_cell ","url":"wiki/Diffusion-Statement-Kernel-matrix-generation.md"},{"id":"wiki/Diffusion-Statement-Uniform-Diffusion.md","title":" Uniform diffusion","content":"[//]: # (keyword|operator_hsb)\n[//]: # (keyword|statement_diffuse)\n[//]: # (keyword|concept_diffusion)\n[//]: # (keyword|concept_matrix)\n[//]: # (keyword|concept_math)\n[//]: # (keyword|concept_elevation)\n# Uniform diffusion\n\n\n_Author : Benoit Gaudou_\n\nThis model is used to show how a diffusion works with a uniform matrix of diffusion in a grid. The cell at the center of the grid emit a pheromon at each step, which is spread through the grid thanks to the diffusion mechanism. Without passing a diffusion matrix, the default diffusion matrix is a uniform matrix 3x3, with value 1/nb_neighbors.\n\n\n == $0 == $0Code of the model : \n\n```\n\nmodel uniform_diffusion\n\nglobal {\n\tint size ","url":"wiki/Diffusion-Statement-Uniform-Diffusion.md"},{"id":"wiki/Diffusion-Statement-Uniform-diffusion-with-mask-(Avoid-mask).md","title":" Uniform diffusion with mask (Avoid mask)","content":"[//]: # (keyword|operator_as_matrix)\n[//]: # (keyword|operator_row_at)\n[//]: # (keyword|operator_hsb)\n[//]: # (keyword|statement_diffuse)\n[//]: # (keyword|type_matrix)\n[//]: # (keyword|concept_diffusion)\n[//]: # (keyword|concept_matrix)\n[//]: # (keyword|concept_math)\n[//]: # (keyword|concept_obstacle)\n[//]: # (keyword|concept_elevation)\n# Uniform diffusion with mask (Avoid mask)\n\n\n_Author : Julien Mazars_\n\nThis model is used to show how a uniform diffusion can be used with a mask. The cell at the center of the grid emit a pheromon at each step, which is spread through the grid thanks to the diffusion mechanism. A mask is used to restrict the diffusion to a \"corridor\" (the white part of the bmp image). The first display shows a diffusion avoiding the masked cells (the value is redistributed to the neighboring cells, to have a constant number of pheromon), the second display shows a diffusion without avoiding the masked cells (the value is diffused in the masked cell, and never rediffused again).\n\n\n == $0 == $0Code of the model : \n\n```\n\nmodel diffusion_with_mask\n\nglobal {\n\tint grid_size  mat_diff ","url":"wiki/Diffusion-Statement-Uniform-diffusion-with-mask-(Avoid-mask).md"},{"id":"wiki/FIPA-Skill-FIPA-CFP-(1).md","title":" FIPA Contract Net","content":"[//]: # (keyword|skill_fipa)\n[//]: # (keyword|type_message)\n[//]: # (keyword|concept_fipa)\n# FIPA Contract Net\n\n\nThis model demonstrates a use-case of the FIPA Contract Net interaction protocol. One initiator sends a 'cfp' message to other participants. All participants reply with a 'refuse' messages which end the interaction protocol.\n\n\nCode of the model : \n\n```\n\nmodel cfp_cfp_1\n\nglobal {\n\tint nbOfParticipants  participants ","url":"wiki/FIPA-Skill-FIPA-CFP-(1).md"},{"id":"wiki/FIPA-Skill-FIPA-CFP-(2).md","title":" FIPA Contract Net (2)","content":"[//]: # (keyword|operator_in)\n[//]: # (keyword|statement_remove)\n[//]: # (keyword|skill_fipa)\n[//]: # (keyword|type_message)\n[//]: # (keyword|concept_fipa)\n# FIPA Contract Net (2)\n\n\nThis model demonstrates a use-case of the FIPA Contract Net interaction protocol. \n\nOne initiator sends a 'cfp' message to 5 participants.\nThe first participants (participant0) replies with a refuse message.\nFour participants (participant1, participant2, participant3, participant4) reply with four propose messages.\n\nWhen the initiator receives the propose messages, it proceeds as follows:\nThe initiator replies the participant1 with a reject_proposal message.\nThe initiator replies participant2, participant3, participant4 with three accept_proposal messages respectively.\n\nWhen participant2, participant3 and participant4 receive the accept_proposal messages from the initiator, they proceed as follows:\nParticipant2 replies with a failure message.\nParticipant3 replies with an inform_done message.\nParticipant4 replies with an inform_result message.\n\n\nCode of the model : \n\n```\n\nmodel cfp_cfp_2\n\nglobal {\n\tint nbOfParticipants  proposers;\n\tparticipant reject_proposal_participant;\n\tlist accept_proposal_participants ;\n\tparticipant failure_participant;\n\tparticipant inform_done_participant;\n\tparticipant inform_result_participant;\n\t\n\t\n\tinit {\n\t\tcreate initiator;\n\t\tcreate participant number: nbOfParticipants returns: ps;\n\t\t\n\t\trefuser ","url":"wiki/FIPA-Skill-FIPA-CFP-(2).md"},{"id":"wiki/FIPA-Skill-FIPA-No-Protocol.md","title":" FIPA no protocol","content":"[//]: # (keyword|skill_fipa)\n[//]: # (keyword|type_message)\n[//]: # (keyword|concept_fipa)\n# FIPA no protocol\n\n\nThis model demonstrates a usecase of 'no-protocol' interaction protocol.\n'no-protocol' is a freestyle intecraction protocol in which the modeller\n(1) can send whatever type of message (i.e., message performative) in the corresponding conversation\n(2) is responsible for marking the end of the conversation by sending a message with 'end_conversation' performative. \n\n\nCode of the model : \n\n```\nmodel no_protocol_1\n\nglobal {\n\tParticipant p;\n\t\n\tinit {\n\t\tcreate Initiator;\n\t\tcreate Participant returns: ps;\n\t\t\n\t\tp ","url":"wiki/FIPA-Skill-FIPA-No-Protocol.md"},{"id":"wiki/FIPA-Skill-FIPA-Propose-(1).md","title":" FIPA Propose","content":"[//]: # (keyword|skill_fipa)\n[//]: # (keyword|type_message)\n[//]: # (keyword|concept_fipa)\n# FIPA Propose\n\n\nThis model demontrates a usecase of the FIPA Propose interaction protocol. (Please see http://www.fipa.org/specs/fipa00036/SC00036H.html for the detail description of this protocol).\n\nThe Initiator agent begins the conversation/interaction protocol by sending a 'propose' message to the Participant agent with 'Go swimming?' as content.\nOn receiving the 'propose' message, the participant agent replies with an 'accept_proposal' message indicating that it agrees to go swimming.\nAfter the Initiator agent reads the 'accept_proposal' message, the conversation ends.\n\n\nCode of the model : \n\n```\nmodel fipa_propose_1\n\nglobal {\n\tParticipant p;\n\t\n\tinit {\n\t\tcreate Initiator;\n\t\tcreate Participant returns: ps;\n\t\t\n\t\tp ","url":"wiki/FIPA-Skill-FIPA-Propose-(1).md"},{"id":"wiki/FIPA-Skill-FIPA-Propose-(2).md","title":" FIPA Propose (2)","content":"[//]: # (keyword|skill_fipa)\n[//]: # (keyword|type_message)\n[//]: # (keyword|concept_fipa)\n# FIPA Propose (2)\n\n\nThis model demontrates a usecase of the FIPA Propose interaction protocol. (Please see http://www.fipa.org/specs/fipa00036/SC00036H.html for the detail description of this protocol).\n\nThe Initiator agent begins the conversation/interaction protocol by sending a 'propose' message to the Participant agent with 'Go swimming?' as content.\nOn receiving the 'propose' message, the participant agent replies with an 'reject_proposal' message indicating that it refuses to go swimming.\nAfter the Initiator agent reads the 'reject_proposal' message, the conversation ends.\n\n\nCode of the model : \n\n```\nmodel fipa_propose_2\n\nglobal {\n\tParticipant p;\n\t\n\tinit {\n\t\tcreate Initiator;\n\t\tcreate Participant returns: ps;\n\t\t\n\t\t p ","url":"wiki/FIPA-Skill-FIPA-Propose-(2).md"},{"id":"wiki/FIPA-Skill-FIPA-Query-(1).md","title":" FIPA Query","content":"[//]: # (keyword|skill_fipa)\n[//]: # (keyword|type_message)\n[//]: # (keyword|concept_fipa)\n# FIPA Query\n\n\nThis model demontrates a usecase of the FIPA Query interaction protocol. (Please see http://www.fipa.org/specs/fipa00027/SC00027H.html for the detail description of this protocol).\n\nThe Initiator agent begins the 'fipa-query' conversation/interaction protocol by sending a 'query' message to the Participant agent with 'your name?' as content.\nOn receiving the 'query' message, the Participant agent replies with two consecutive messages :\n(1) an 'agree' message indicating that the Participant agent accepts to execute the query of the Initiator agent,\n(2) an 'inform' message informing the Initiation agent of Participant agent's name.\n\nAfter the Initiator agent read the 'inform' message from the Participant agent, the conversation ends.\n\n\nCode of the model : \n\n```\nmodel fipa_query_1\n\nglobal {\n\tParticipant p;\n\t\n\tinit {\n\t\tcreate Initiator;\n\t\tcreate Participant returns: ps;\n\t\t\n\t\t p ","url":"wiki/FIPA-Skill-FIPA-Query-(1).md"},{"id":"wiki/FIPA-Skill-FIPA-Query-(2).md","title":" FIPA Query (2)","content":"[//]: # (keyword|skill_fipa)\n[//]: # (keyword|type_message)\n[//]: # (keyword|concept_fipa)\n# FIPA Query (2)\n\n\nThis model demontrates a usecase of the FIPA Query interaction protocol. (Please see http://www.fipa.org/specs/fipa00027/SC00027H.html for the detail description of this protocol).\n\nThe Intiator agent begins the 'fipa-query' conversation/interaction protocol by sending a 'query' message to the Participant agent with 'your name?' as content.\nOn receiving the 'query' message, the Participant agent replies with a 'refuse' message indicating that its name is a secret!\nAfter the Initiator agent reads the 'refuse' message, the conversation ends.\n\n\nCode of the model : \n\n```\nmodel fipa_query_2\n\nglobal {\n\tParticipant p;\n\t\n\tinit {\n\t\tcreate Initiator;\n\t\tcreate Participant returns: ps;\n\t\t\n\t\t p ","url":"wiki/FIPA-Skill-FIPA-Query-(2).md"},{"id":"wiki/FIPA-Skill-FIPA-Request-(1).md","title":" FIPA Request","content":"[//]: # (keyword|skill_fipa)\n[//]: # (keyword|type_message)\n[//]: # (keyword|concept_fipa)\n# FIPA Request\n\n\nThis model demontrates a usecase of the FIPA Request interaction protocol. (Please see http://www.fipa.org/specs/fipa00026/index.html for the detail description of this protocol).\n\nThe Initiator agent begins the 'fipa-request' conversation/interaction protocol by sending a 'request' message to the Participant agent with 'go sleeping' as content.\nOn receiving the 'request' message, the Participant agent replies with a 'refuse' message.\nAfter the Initiator reads the 'refuse' message, the 'fipa-request' conversation ends.\n\n\nCode of the model : \n\n```\nmodel fipa_request_1\n\nglobal {\n\tParticipant p;\n\t\n\tinit {\n\t\tcreate Initiator;\n\t\tcreate Participant returns: ps;\n\t\t\n\t\t p ","url":"wiki/FIPA-Skill-FIPA-Request-(1).md"},{"id":"wiki/FIPA-Skill-FIPA-Request-(2).md","title":" FIPA Request (2)","content":"[//]: # (keyword|skill_fipa)\n[//]: # (keyword|type_message)\n[//]: # (keyword|concept_fipa)\n# FIPA Request (2)\n\n\nThis model demontrates a usecase of the FIPA Request interaction protocol. (Please see http://www.fipa.org/specs/fipa00026/index.html for the detail description of this protocol).\n\nThe Initiator agent begins the 'fipa-request' conversation/interaction protocol by sending a 'request' message to the Participant agent with 'go sleeping' as content.\nOn receiving the 'request' message, the Participant agent replies with two consecutive messages : \n(1) an 'agree' message indicating that the Participant agent accepts to execute the request of the Initiator agent, \n(2) a 'failure' message indicating that the Participant agent fails to (can not) execute the requestion of the Initiator agent (in this case, the Participant agent says that it can not go sleeping because the bed is broken!).\nAfter the Initiator reads the 'failure' message from the Participant, the corresponding conversation ends.\n\n\nCode of the model : \n\n```\nmodel fipa_request_2\n\nglobal {\n\tParticipant p;\n\t\n\tinit {\n\t\tcreate Initiator;\n\t\tcreate Participant returns: ps;\n\t\t\n\t\t p ","url":"wiki/FIPA-Skill-FIPA-Request-(2).md"},{"id":"wiki/FIPA-Skill-FIPA-Request-(3).md","title":" FIPA Request (3)","content":"[//]: # (keyword|skill_fipa)\n[//]: # (keyword|type_message)\n[//]: # (keyword|concept_fipa)\n# FIPA Request (3)\n\n\nThis model demontrates a usecase of the FIPA Request interaction protocol. (Please see http://www.fipa.org/specs/fipa00026/index.html for the detail description of this protocol).\n\nThe Initiator agent begins the 'fipa-request' conversation/interaction protocol by sending a 'request'  message to the Participant agent with 'go sleeping' as content.\nOn receiving the 'request' message, the Participant replies with two consecutive messages :\n(1) an 'agree' message indicating that the Participant agent accepts to execute the request of the Initiator agent,\n(2) an 'inform' message indicating that the Participant agent has already executed the request of the Initiator agent (in this case, the 'inform' message informs the Initiator that the Participant agent has already gone to bed!).\nAfter the Initiator agent reads the 'inform' message, the conversation ends.\n\n\nCode of the model : \n\n```\nmodel fipa_request_3\n\nglobal {\n\tParticipant p;\n\t\n\tinit {\n\t\tcreate Initiator;\n\t\tcreate Participant returns: ps;\n\t\t\n\t\tp ","url":"wiki/FIPA-Skill-FIPA-Request-(3).md"},{"id":"wiki/FIPA-Skill-FIPA-Request-(4).md","title":" FIPA Request (4)","content":"[//]: # (keyword|skill_fipa)\n[//]: # (keyword|type_message)\n[//]: # (keyword|concept_fipa)\n# FIPA Request (4)\n\n\nThis model demontrates a usecase of the FIPA Request interaction protocol. \n * (Please see http://www.fipa.org/specs/fipa00026/index.html for the detail description of this protocol).\n \n \n * The Initiator agent begins the 'fipa-request' conversation/intaction protocol by sending a 'request' \n * message to the Participant agent with 'go sleeping' as content.\n \n * On receiving a 'request' message, the Participant agent replies with an 'inform' message. \n * According to the specification of the FIPA Requestion interaction protocol, the next possible messages \n * after receiving a 'request' message are either 'refuse' message or 'agree' message. \n * Hence replying with an 'inform' message upon receiving a 'request' message violates the protocol specification. \n * GAMA will hence raise a GamaRuntimeException. \n * A conversation is automatically ended in case of GamaRuntimeException raised. Hence this conversation ends.\n \n\nCode of the model : \n\n```\nmodel fipa_request_4\n\nglobal {\n\tParticipant p;\n\t\n\tinit {\n\t\tcreate Initiator;\n\t\tcreate Participant returns: ps;\n\t\t\n\t\tp ","url":"wiki/FIPA-Skill-FIPA-Request-(4).md"},{"id":"wiki/Ordinary-Differential-Equations-Built-In-Equations.md","title":" Predefined equestions","content":"[//]: # (keyword|operator_diff)\n[//]: # (keyword|statement_equation)\n[//]: # (keyword|statement_solve)\n[//]: # (keyword|statement_\\=)\n[//]: # (keyword|constant_#lightgray)\n[//]: # (keyword|concept_equation)\n[//]: # (keyword|concept_math)\n# Predefined equestions\n\n\n_Author : Benoit Gaudou_\n\nPresentation of all the predefined equation systems.Comparaison with hand-written systems to test them.\n\n\n == $0 == $0 == $0 == $0 == $0 == $0 == $0Code of the model : \n\n```\nmodel all_predefined_equations\n\nglobal {\n\tfloat mu ","url":"wiki/Ordinary-Differential-Equations-Built-In-Equations.md"},{"id":"wiki/Ordinary-Differential-Equations-SIR-(Influence-of-Integration-Step).md","title":" SIR (Influence of Integration Step).gaml","content":"[//]: # (keyword|operator_diff)\n[//]: # (keyword|statement_equation)\n[//]: # (keyword|statement_\\=)\n[//]: # (keyword|statement_solve)\n[//]: # (keyword|constant_#sec)\n[//]: # (keyword|concept_equation)\n[//]: # (keyword|concept_math)\n# SIR (Influence of Integration Step).gaml\n\n\n_Author : hqnghi_\n\nA SIR model to illustrate the impact of the change of the integration parameters.\n\n\n == $0 == $0 == $0Code of the model : \n\n```\n\nmodel SIR_influence_of_integration_step\n\nglobal { \n\tfloat step","url":"wiki/Ordinary-Differential-Equations-SIR-(Influence-of-Integration-Step).md"},{"id":"wiki/Ordinary-Differential-Equations-SIR-(Simple-with-charts).md","title":" SIR (Simple)","content":"[//]: # (keyword|operator_diff)\n[//]: # (keyword|operator_internal_integrated_value)\n[//]: # (keyword|statement_equation)\n[//]: # (keyword|statement_\\=)\n[//]: # (keyword|statement_solve)\n[//]: # (keyword|concept_equation)\n[//]: # (keyword|concept_math)\n# SIR (Simple)\n\n\n_Author : hqnghi_\n\nA simple example of ODE use into agents with the example of the SIR equation system.\n\n\n == $0 == $0 == $0Code of the model : \n\n```\n\nmodel simple_ODE_SIR\n\nglobal {\n\tinit{\n\t\tcreate aSIR number:10{\n\t\t\tS{aSIR collect each.S};\n\tlist I_3d->{aSIR collect each.I};\n\tlist R_3d->{aSIR collect each.R};\n\treflex ss when: cycle>=40{\n    \tdo pause;\n\t\t\n\t}\n}\n\n\nspecies aSIR {\n\tint N ","url":"wiki/Ordinary-Differential-Equations-SIR-(Simple-with-charts).md"},{"id":"wiki/Ordinary-Differential-Equations-SIR-(Simple).md","title":" SIR (Simple)","content":"[//]: # (keyword|operator_diff)\n[//]: # (keyword|statement_equation)\n[//]: # (keyword|statement_\\=)\n[//]: # (keyword|statement_solve)\n[//]: # (keyword|concept_equation)\n[//]: # (keyword|concept_math)\n# SIR (Simple)\n\n\n_Author : hqnghi_\n\nA simple example of ODE use into agents with the example of the SIR equation system.\n\n\n == $0Code of the model : \n\n```\n\nmodel simple_ODE_SIR\n\nglobal {\n\tinit{\n\t\tcreate agent_with_SIR_dynamic number:1;\n\t}\n}\n\n\nspecies agent_with_SIR_dynamic {\n\tint N ","url":"wiki/Ordinary-Differential-Equations-SIR-(Simple).md"},{"id":"wiki/Ordinary-Differential-Equations-SIR-(Split-in-Agents,-Multiple-Strains).md","title":" SIR (Split in Agents, Multiple Strains)","content":"[//]: # (keyword|operator_diff)\n[//]: # (keyword|operator_sum)\n[//]: # (keyword|operator_accumulate)\n[//]: # (keyword|operator_last)\n[//]: # (keyword|statement_equation)\n[//]: # (keyword|statement_\\=)\n[//]: # (keyword|statement_solve)\n[//]: # (keyword|constant_#lightgray)\n[//]: # (keyword|concept_equation)\n[//]: # (keyword|concept_math)\n# SIR (Split in Agents, Multiple Strains)\n\n\n_Author : tri and nghi_\n\nThis model is an extension of the model SIR_split_in_agents.gaml. It creates several agents of one compartment type (here typically several I_agt).\n\n\n == $0 == $0Code of the model : \n\n```\nmodel SIR_split_in_agents_multiple_strains\n\nglobal {\n\t// Parameters\n\tint number_S I)'  type: float var: _beta R)' type: float var: _delta ","url":"wiki/Ordinary-Differential-Equations-SIR-(Split-in-Agents,-Multiple-Strains).md"},{"id":"wiki/Physics-Engine-Hello-World.md","title":" Falling Balls","content":"[//]: # (keyword|skill_physics)\n[//]: # (keyword|concept_physics_engine)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_spatial_computation)\n[//]: # (keyword|concept_3d)\n# Falling Balls\n\n\n_Author : Arnaud Grignard_\n\nThis is a model that shows how the physics engine work by displaying two species (a floor and balls). Ball agents use the skill physical3D. The ball agents fall on a floor and fall from the floor to the void. \n\n\nCode of the model : \n\n```\n\nmodel FallingHelloWorld\n\n\n\nglobal {\n\tint environment_size ","url":"wiki/Physics-Engine-Hello-World.md"},{"id":"wiki/Physics-Engine-Perfect-Gas.md","title":" Balls without gravity","content":"[//]: # (keyword|skill_physics)\n[//]: # (keyword|concept_physics_engine)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_spatial_computation)\n# Balls without gravity\n\n\n_Author : Arnaud Grignard_\n\nThis is a model that shows how the physics engine work without gravity. Balls can collide each other and can't go further than the wall and the ground agents.\n\n\nCode of the model : \n\n```\nmodel Perfect_Gas\n\n \n \nglobal {\n\t//Bounds of the environment\n\tint width_of_environment parameter: 'Dimensions' init:200 ; \n\tint height_of_environment parameter: 'Dimensions' init:200  ; \n\t\n\t//Range, Speed ans Size of the agents\n\tint range_of_agents parameter: 'Range of Agents' min: 1 ","url":"wiki/Physics-Engine-Perfect-Gas.md"},{"id":"wiki/Physics-Engine-Pool.md","title":" Pool using Physic Engine","content":"[//]: # (keyword|skill_physics)\n[//]: # (keyword|concept_physics_engine)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_spatial_computation)\n[//]: # (keyword|concept_obstacle)\n# Pool using Physic Engine\n\n\n_Author : Arnaud Grignard_\n\nThis is a model that shows how the physics engine works using a pool with balls, collided by a white ball. The balls use the skill Physical3D.\n\n\nCode of the model : \n\n```\nmodel pool3D\n\nglobal {\n\t//Parameters for the environment\n\tint width_of_environment ","url":"wiki/Physics-Engine-Pool.md"},{"id":"wiki/Physics-Engine-Water-Tank.md","title":" Water Tank","content":"[//]: # (keyword|skill_physics)\n[//]: # (keyword|concept_physics_engine)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_spatial_computation)\n# Water Tank\n\n\n_Author : Arnaud Grignard_\n\nThis is a model that shows how the physics engine works using a tank, with a floor and 4 walls, and balls falling into it. The floor doesn't have any mass, \n\n\nCode of the model : \n\n```\nmodel Tank\n\nglobal {\n\t\n\t//Dimensions of the environment\n\tint width_of_environment parameter: 'Dimensions' init: 100;\n\tint height_of_environment parameter: 'Dimensions' init: 100;\n\t\n\t//Parameters for the ball species\n\tint nb_balls parameter: 'Number of Agents' min: 1 ","url":"wiki/Physics-Engine-Water-Tank.md"},{"id":"wiki/Diffusion-Statement.md","title":" Diffusion Statement","content":"# Diffusion Statement\n\nThis sub-section is composed of the following models :\n\n* [Anisotropic diffusion (Simple)](references#DiffusionStatementAnisotropicDiffusion(Simple))\n\n == $0* [Anisotropic diffusion (Toroidal)](references#DiffusionStatementAnisotropicDiffusion(Toroidal))\n\n == $0* [Anisotropic diffusion with several computation method](references#DiffusionStatementAnisotropicDiffusion(VariousMethods))\n\n == $0 == $0* [Blend color in a cuve](references#DiffusionStatementBlendcolorinacuve(MultipleSignals))\n\n == $0* [Diffusion in a cuve (Cycle length)](references#DiffusionStatementDiffusioninacuve(Cyclelength))\n\n == $0 == $0* [Generate diffusion matrix with parameters](references#DiffusionStatementKernelmatrixgeneration)\n\n == $0* [Uniform diffusion with mask (Avoid mask)](references#DiffusionStatementUniformdiffusionwithmask(Avoidmask))\n\n == $0 == $0* [Uniform diffusion](references#DiffusionStatementUniformDiffusion)\n\n == $0 == $0","url":"wiki/Diffusion-Statement.md"},{"id":"wiki/FIPA-Skill.md","title":" FIPA Skill","content":"# FIPA Skill\n\nThis sub-section is composed of the following models :\n\n* [FIPA Contract Net](references#FIPASkillFIPACFP(1))\n\n* [FIPA Contract Net (2)](references#FIPASkillFIPACFP(2))\n\n* [FIPA no protocol](references#FIPASkillFIPANoProtocol)\n\n* [FIPA Propose](references#FIPASkillFIPAPropose(1))\n\n* [FIPA Propose (2)](references#FIPASkillFIPAPropose(2))\n\n* [FIPA Query](references#FIPASkillFIPAQuery(1))\n\n* [FIPA Query (2)](references#FIPASkillFIPAQuery(2))\n\n* [FIPA Request](references#FIPASkillFIPARequest(1))\n\n* [FIPA Request (2)](references#FIPASkillFIPARequest(2))\n\n* [FIPA Request (3)](references#FIPASkillFIPARequest(3))\n\n* [FIPA Request (4)](references#FIPASkillFIPARequest(4))\n\n","url":"wiki/FIPA-Skill.md"},{"id":"wiki/Ordinary-Differential-Equations.md","title":" Ordinary Differential Equations","content":"# Ordinary Differential Equations\n\nThis sub-section is composed of the following models :\n\n* [Predefined equestions](references#OrdinaryDifferentialEquationsBuilt-InEquations)\n\n == $0 == $0 == $0 == $0 == $0 == $0 == $0* [SIR (Influence of Integration Step).gaml](references#OrdinaryDifferentialEquationsSIR(InfluenceofIntegrationStep))\n\n == $0 == $0 == $0* [SIR (Simple)](references#OrdinaryDifferentialEquationsSIR(Simplewithcharts))\n\n == $0 == $0 == $0* [SIR (Simple)](references#OrdinaryDifferentialEquationsSIR(Simple))\n\n == $0* [SIR (Split in Agents, Multiple Strains)](references#OrdinaryDifferentialEquationsSIR(SplitinAgents,MultipleStrains))\n\n == $0 == $0","url":"wiki/Ordinary-Differential-Equations.md"},{"id":"wiki/Physics-Engine.md","title":" Physics Engine","content":"# Physics Engine\n\nThis sub-section is composed of the following models :\n\n* [Falling Balls](references#PhysicsEngineHelloWorld)\n\n* [Balls without gravity](references#PhysicsEnginePerfectGas)\n\n* [Pool using Physic Engine](references#PhysicsEnginePool)\n\n* [Water Tank](references#PhysicsEngineWaterTank)\n\n","url":"wiki/Physics-Engine.md"},{"id":"wiki/Agent-movement-Follow-Path.md","title":"  Movement of an agent on different paths","content":"[//]: # (keyword|operator_as_path)\n[//]: # (keyword|operator_as_map)\n[//]: # (keyword|operator_\\:\\:)\n[//]: # (keyword|operator_with_weights)\n[//]: # (keyword|type_path)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_agent_movement)\n[//]: # (keyword|concept_skill)\n#  Movement of an agent on different paths\n\n\n_Author : _\n\nModel showing the movement of an agent following three different paths : one defined by its vertices, an other defined thanks to all the roads species, and finally a path defined by a graph with weights (graph created thanks to an other species)\n\n\nCode of the model : \n\n```\nmodel path_and_follow\n\nglobal{\n\tgraph the_graph;\n    init{\n    \t\t//It is possible to define a road by defining its shape, being a line. The line need to be created by passing the location of the vertices\n       create road {\n       \t\tshape  weight_map 200)\n\t \t{\n\t \t\tpath_following100)\n\t\t \t{\n\t\t \t\tpath_following","url":"wiki/Agent-movement-Follow-Path.md"},{"id":"wiki/Agent-movement-Follow-Weighted-Network-(Agents).md","title":"  Follow Weighted Network","content":"[//]: # (keyword|operator_path_between)\n[//]: # (keyword|operator_with_weights)\n[//]: # (keyword|operator_as_map)\n[//]: # (keyword|operator_\\:\\:)\n[//]: # (keyword|type_path)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_agent_movement)\n[//]: # (keyword|concept_skill)\n#  Follow Weighted Network\n\n\n_Author :  Martine Taillandier_\n\nModel representing how to make a weighted graph and the impacts of the weights on the time to follow the path for the agents. Two agents are represented to show this difference : one knowing the weights and following a fast path, an other following a path longer without knowing it's a longer path.\n\n\nCode of the model : \n\n```\n\nmodel weightperagents\n\nglobal {\n\tmap roads_weight;\n\tgraph road_network;\n\tfloat slow_coeff  roads_knowledge;\n\tpoint the_target;\n\trgb color;\n\tfloat size;\n\tpath path_to_follow;\n\t\n\tinit {\n\t\tthe_target ","url":"wiki/Agent-movement-Follow-Weighted-Network-(Agents).md"},{"id":"wiki/Agent-movement-Goto-Directed-Graph.md","title":"  Directed Graph Model","content":"[//]: # (keyword|operator_polyline)\n[//]: # (keyword|operator_reverse)\n[//]: # (keyword|operator_directed)\n[//]: # (keyword|statement_switch)\n[//]: # (keyword|statement_match)\n[//]: # (keyword|type_path)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_agent_movement)\n[//]: # (keyword|concept_skill)\n#  Directed Graph Model\n\n\n_Author :  Patrick Taillandier_\n\nModel representing how to directed graph using GIS Data for the road networks : the GIS contains a column defining the direction of the roads and people moving from one random point to another on this graph\n\n\nCode of the model : \n\n```\n\nmodel simplemodel\n\nglobal {\n\tfile road_file ","url":"wiki/Agent-movement-Goto-Directed-Graph.md"},{"id":"wiki/Agent-movement-Goto-Grid.md","title":"  Movement on a Grid of Cells","content":"[//]: # (keyword|operator_intersects)\n[//]: # (keyword|constant_#magenta)\n[//]: # (keyword|type_path)\n[//]: # (keyword|concept_grid)\n[//]: # (keyword|concept_agent_movement)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_obstacle)\n[//]: # (keyword|concept_shortest_path)\n#  Movement on a Grid of Cells\n\n\n_Author :  Patrick Taillandier_\n\nModel to represent how the agents move from one point to a target agent on a grid of cells with obstacles, following the shortest path and coloring in magenta the cells intersecting the path of an agent\n\n\nCode of the model : \n\n```\n\nmodel Grid\n\nglobal {\n\tinit {    \n\t\tcreate goal{\n\t\t\tlocation  neighs ","url":"wiki/Agent-movement-Goto-Grid.md"},{"id":"wiki/Agent-movement-Goto-Network.md","title":"  Shortest Path Computation on a Graph","content":"[//]: # (keyword|operator_with_optimizer_type)\n[//]: # (keyword|operator_use_cache)\n[//]: # (keyword|operator_load_shortest_paths)\n[//]: # (keyword|operator_all_pairs_shortest_path)\n[//]: # (keyword|statement_save)\n[//]: # (keyword|type_path)\n[//]: # (keyword|type_matrix)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_agent_movement)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_shortest_path)\n[//]: # (keyword|concept_algorithm)\n#  Shortest Path Computation on a Graph\n\n\n_Author :  Patrick Taillandier_\n\nModel to show how to use the optimizer methods to compute the shortest path for the agents placed on a network with all of them having the same goal location. It also shows how to save these paths computed into a text file.\n\n\nCode of the model : \n\n```\n\nmodel Network\n\nglobal {\n\tfile shape_file_in ","url":"wiki/Agent-movement-Goto-Network.md"},{"id":"wiki/Agent-movement-Goto-Polygon.md","title":"  Movement on a Graph created by Polygons","content":"[//]: # (keyword|operator_triangulate)\n[//]: # (keyword|operator_skeletonize)\n[//]: # (keyword|operator_split_lines)\n[//]: # (keyword|type_path)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_agent_movement)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_shortest_path)\n#  Movement on a Graph created by Polygons\n\n\n_Author :  Patrick Taillandier_\n\nModel to show how to create a graph using a polygon shapefile by skeletonizing it, and creating roads using the skeleton. All of the agents will use this graph to go to the same targeted location.\n\n\nCode of the model : \n\n```\n\nmodel polygon\nglobal {\n\t//Import of the shapefile containing the different polygons\n\tfile shape_file_in  triangles  skeletons  skeletons_split  ","url":"wiki/Agent-movement-Goto-Polygon.md"},{"id":"wiki/Agent-movement-Moving3D.md","title":"  Movement in 3D","content":"[//]: # (keyword|operator_cube)\n[//]: # (keyword|operator_sin)\n[//]: # (keyword|operator_floor)\n[//]: # (keyword|operator_as_distance_graph)\n[//]: # (keyword|skill_moving3D)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_agent_movement)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_skill)\n#  Movement in 3D\n\n\n_Author :  Arnaud Grignard - Tri Nguyen Huu_\n\nThis model illustrates the different action and effect offered by the movingSkill3D (move,wander,goto and follow)\n\n\nCode of the model : \n\n```\n\n\n\nmodel Moving3DModel   \n\nglobal {\n\tint number_of_agents parameter: 'Number of Agents' min: 1 ","url":"wiki/Agent-movement-Moving3D.md"},{"id":"wiki/Batch-Batch.md","title":"  Model using Batch mode","content":"[//]: # (keyword|operator_among)\n[//]: # (keyword|statement_save)\n[//]: # (keyword|statement_exhaustive)\n[//]: # (keyword|statement_permanent)\n[//]: # (keyword|statement_genetic)\n[//]: # (keyword|statement_tabu)\n[//]: # (keyword|constant_#darkgreen)\n[//]: # (keyword|concept_batch)\n[//]: # (keyword|concept_algorithm)\n[//]: # (keyword|concept_save_file)\n#  Model using Batch mode\n\n\n_Author :  Patrick Taillandier_\n\nA model showing how to use batch experiments to find the best combination of parameters to minimize the numbers of infected people in a SIR infection model where agents infect others and become immune for a certain time. The batch mode uses three different methods : Exhaustive, GA and Tabu Search. The model proposes five experiments : one simple with a User Interface, one running 5 experiments and saving the data, and one for each strategy. \n\n\nCode of the model : \n\n```\n\n\nmodel batch_example\n\nglobal {\n    int number_people  end_immunity_step) {\n\t\t\tcpt  immune_step) {\n\t\t\tcpt  1000 ) {\n\t\n\t// the reflex will be activated at the end of each run; in this experiment a run consists of the execution of 5 simulations (repeat: 5)\n\treflex end_of_runs\n\t{\n\t\tint cpt  1000 ) {\n\tparameter 'Infection rate' var: infection_rate among: [ 0.1 , 0.5 , 1.0 ];\n\tparameter 'Speed of people:' var: speed_people min: 1.0 max: 3.0 step:1.0;\n\tmethod exhaustive minimize: nb_infected;\n\t\n\t//the permanent section allows to define a output section that will be kept during all the batch experiment\n\tpermanent {\n\t\tdisplay Comparison {\n\t\t\tchart \"Number of people infected\" type: series {\n\t\t\t\t//we can access to all the simulations of a run (here composed of 5 simulation -> repeat: 5) by the variable \"simulations\" of the experiment.\n\t\t\t\t//here we display for the 5 simulations, the mean, min and max values of the nb_infected variable.\n\t\t\t\tdata \"Mean\" value: mean(simulations collect each.nb_infected ) style: spline color: #blue ;\n\t\t\t\tdata \"Min\" value:  min(simulations collect each.nb_infected ) style: spline color: #darkgreen ;\n\t\t\t\tdata \"Max\" value:  max(simulations collect each.nb_infected ) style: spline color: #red ;\n\t\t\t}\n\t\t}\t\n\t}\n}\n\n// This experiment explores two parameters with a GA strategy,\n// repeating each simulation three times (the aggregated fitness correspond to the min fitness), \n// in order to find the best combination of parameters to minimize the number of infected people\nexperiment Genetic type: batch keep_seed: true repeat: 3 until: ( time > 1000 ) {\n\tparameter 'Infection rate' var: infection_rate among: [ 0.1 ,0.2, 0.5 , 0.6,0.8, 1.0 ];\n\tparameter 'Speed of people:' var: speed_people min: 1.0 max: 10.0 step:1.0;\n\tmethod genetic pop_dim: 3 crossover_prob: 0.7 mutation_prob: 0.1\n\tnb_prelim_gen: 1 max_gen: 5  minimize: nb_infected  aggregation: \"min\";\n}\n\n// This experiment explores two parameters with a Tabu Search strategy,\n// repeating each simulation three times (the aggregated fitness correspond to the max fitness), \n// in order to find the best combination of parameters to minimize the number of infected people\nexperiment Tabu_Search type: batch keep_seed: true repeat: 3 until: ( time > 1000 ) {\n\tparameter 'Infection rate' var: infection_rate among: [ 0.1 ,0.2, 0.5 , 0.6,0.8, 1.0 ];\n\tparameter 'Speed of people:' var: speed_people min: 1.0 max: 10.0 step:1.0;\n\tmethod tabu iter_max: 10 tabu_list_size: 5 minimize: nb_infected aggregation: \"max\";\n}\n```\n","url":"wiki/Batch-Batch.md"},{"id":"wiki/Charts-Ant-Foraging-(Charts-examples).md","title":" Ant Foraging (Charts examples)","content":"[//]: # (keyword|operator_min_of)\n[//]: # (keyword|operator_sort)\n[//]: # (keyword|operator_last)\n[//]: # (keyword|operator_contains)\n[//]: # (keyword|operator_distribution_of)\n[//]: # (keyword|operator_reverse)\n[//]: # (keyword|operator_distribution2d_of)\n[//]: # (keyword|skill_fsm)\n[//]: # (keyword|statement_state)\n[//]: # (keyword|statement_transition)\n[//]: # (keyword|statement_diffuse)\n[//]: # (keyword|statement_datalist)\n[//]: # (keyword|architecture_fsm)\n[//]: # (keyword|constant_#violet)\n[//]: # (keyword|concept_gui)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_chart)\n[//]: # (keyword|concept_grid)\n[//]: # (keyword|concept_diffusion)\n# Ant Foraging (Charts examples)\n\n\n_Author : _\n\nToy Model ant using the question of how ants search food and use pheromons to return to their nest once they did find food. In this model, the charts are particularly used.\n\n\nCode of the model : \n\n```\nmodel ants\n\nglobal {\n\t//Number of ants\n\tint ants_number  0)? °blue : ((road < 0.001)? rgb ([100,100,100]) : ((road > 2)? °white : ((road > 0.5)? (C00CC00) : ((road > 0.2)? (C009900) : (C005500)))))) update: isNestLocation ? °violet:((food > 0)? °blue : ((road < 0.001)? rgb ([100,100,100]) : ((road > 2)? °white : ((road > 0.5)? (C00CC00) : ((road > 0.2)? (C009900) : (C005500)))))) ;\n\tint food  list_places  0)) > 0  {\n\t\t\treturn (list_places first_with (each.food > 0)) ;\n\t\t} else {\n\t\t\t\tint min_nest   0 {\n\t\t\tdo pick ;\n\t\t}\n\t\ttransition to: followingRoad when: place.road > 0.05 ;\n\t}\n\t//State to carry food to the nest once the food is found\n\tstate carryingFood {\n\t\tdo goto target: center ;\n\t\ttransition to: wandering when: place.isNestLocation { \n\t\t\tdo drop ;\n\t\t}\n\t}\n\t//State to follow a road \n\tstate followingRoad {\n\t\tlocation  0 {\n\t\t\tdo pick ;\n\t\t}\n\t\ttransition to: wandering when: (place.road < 0.05) ;\n\t}\n\taspect text {\n\t\tif use_icons {\n\t\t\tdraw  hasFood ? file(ant_shape_full) : file(ant_shape_empty) rotate: heading at: location size: {7,5} ;\n\t\t} else {\n\t\t\tdraw circle(1.0) empty: !hasFood color: rgb ('orange') ;\n\t\t}\n\t\tif display_state {\n\t\t\tdraw state at: location + {-3,1.5} color: °white size: 0.8 ;\n\t\t}\n\t}\n\taspect default {\n\t\tdraw circle(1.0) empty: !hasFood color: #orange ; \n\t}\n}\nexperiment Ant type: gui {\n\t//Parameters to play with  in the gui\n\tparameter 'Number of ants:' var: ants_number category: 'Model' ;\n\tparameter 'Evaporation of the signal (unit/cycle):' var: evaporation_per_cycle category: 'Model' ;\n\tparameter 'Rate of diffusion of the signal (%/cycle):' var: diffusion_rate category: 'Model' ;\n\tparameter 'Use icons for the agents:' var: use_icons category: 'Display' ;\n\tparameter 'Display state of agents:' var: display_state category: 'Display' ;\n\n\tlist> nbants statesnames categnames> nbantsbydist> xyval>([]);\n\t\tstatesnames([]);\n\t\tcategnames>([]);\n\t\tant x nl([]);\n\t\t\tloop d from:0 to:9\n\t\t\t\t{\n\t\t\tadd (list(ant) count (each.state=x.state and (((each distance_to center)>gridsize/20*d) and ((each distance_to center)> nbants statesnames categnames> nbantsbydist> xyval>([]);\n\t\tstatesnames([]);\n\t\tloop x over:list(world.ant)\n\t\t{\n\t\t\tif !(statesnames contains (x.state))\n\t\t\t{\t\t\t\t\n\t\t\tadd [(list(ant) count (each.state=x.state and !each.hasFood)),(list(ant) count (each.state=x.state and each.hasFood))] to: nbants;\n\t\t\tadd (x.state) to:statesnames;\t\t\t\t\n\t\t\tint d nl([]);\n\t\t\tloop d from:0 to:9\n\t\t\t\t{\n\t\t\tadd (list(ant) count (each.state=x.state and (((each distance_to center)>gridsize/20*d) and ((each distance_to center)","url":"wiki/Charts-Ant-Foraging-(Charts-examples).md"},{"id":"wiki/Clustering-Clustering.md","title":"  Clustering of agents by K Means and DBScan","content":"[//]: # (keyword|operator_dbscan)\n[//]: # (keyword|operator_rnd_color)\n[//]: # (keyword|operator_kmeans)\n[//]: # (keyword|constant_#grey)\n[//]: # (keyword|concept_clustering)\n[//]: # (keyword|concept_statistic)\n#  Clustering of agents by K Means and DBScan\n\n\n_Author :  Patrick Taillandier_\n\nA model to show how to use clustering operators and two methods of clustering (K Means and DBScan) with the goal of regrouping agents in clusters\n\n\nCode of the model : \n\n```\n\nmodel clustering\n\nglobal {\n\t//the number of groups to create (kmeans)\n\tint k  instances > clusters_dbscan >(dbscan(instances, eps,minPoints));\n\t\t\n\t\t//We give a random color to each group (i.e. to each dummy agents of the group)\n       loop cluster over: clusters_dbscan {\n\t\t\trgb col > clusters_kmeans >(kmeans(instances, k));\n\t\t\n\t\t//We give a random color to each group (i.e. to each dummy agents of the group)\n\t\tloop cluster over: clusters_kmeans {\n\t\t\trgb col ","url":"wiki/Clustering-Clustering.md"},{"id":"wiki/Clustering-Spatial-Clustering.md","title":"  Clustering of agents by their distance ","content":"[//]: # (keyword|operator_is)\n[//]: # (keyword|operator_polyline)\n[//]: # (keyword|operator_simple_clustering_by_distance)\n[//]: # (keyword|operator_rnd_color)\n[//]: # (keyword|operator_hierarchical_clustering)\n[//]: # (keyword|operator_union)\n[//]: # (keyword|type_species)\n[//]: # (keyword|concept_clustering)\n[//]: # (keyword|concept_statistic)\n[//]: # (keyword|concept_grid)\n#  Clustering of agents by their distance \n\n\n_Author :  Patrick Taillandier_\n\nA model to show how to use clustering operators with simple_clustering_by_distance to take into account the distances between agents or between cells to create the clusters,  and showing the relations between the people from the same cluster. \n\n\nCode of the model : \n\n```\n\nmodel clustering\n\nglobal {\n\t//define the maximal distance between people in the continuous environement (in meters): if the distance between 2 people is lower than this value, they will be in the same group\n\tfloat max_dist_people > clusters >(simple_clustering_by_distance(people, max_dist_people));\n        \n        //We give a random color to each group (i.e. to each people agents of the group)\n        loop cluster over: clusters {\n        \trgb rnd_color > clusters >(simple_clustering_by_distance(vegetation_cell where (each.color = #green), max_dist_cell));\n        loop cluster over: clusters {\n        \tcreate forest {\n        \t\tcells  cells;\n\taspect default {\n\t\tdraw shape.contour + 0.5 color: #red;\n\t}\n}\n\nspecies people {\n\trgb color_cluster  sub_groups;\n\tgroup_people parent;\n\taspect default {\n\t\tdraw shape + 0.2 color: #red;\n\t\tif (parent != nil) {\n\t\t\tdraw line ([location, parent.location]) end_arrow: 2 color: #red;\n\t\t}\n\t}\n}\n\nexperiment clustering type: gui {\n\tparameter \"Maximal distance for people clustering\" var: max_dist_people min: 0.0 max: 100.0 category: \"People\";\n\tparameter \"Maximal distance for vegetation cell clustering\" var: max_dist_cell min: 0 max: 5 category: \"Forest\";\n\tparameter \"Probability for vegetation cells\" var: proba_vegetation min: 0.1 max: 1.0 category: \"Forest\";\n\toutput {\n\t\tdisplay map_people_clusters {\n\t\t\tspecies people aspect: cluster;\n\t\t}\n\t\tdisplay map_people_tree {\n\t\t\tspecies people aspect: tree;\n\t\t\tspecies group_people;\n\t\t}\n\t\tdisplay map_forest_clusters {\n\t\t\tgrid vegetation_cell lines: #black;\n\t\t\tspecies forest;\n\t\t}\n\t}\n}\n```\n","url":"wiki/Clustering-Spatial-Clustering.md"},{"id":"wiki/Co-model-Usage-comodel_mix_behaviors.md","title":" comodel with mixed behaviors ","content":"[//]: # (keyword|operator_dead)\n[//]: # (keyword|operator_any)\n[//]: # (keyword|operator_triangle)\n[//]: # (keyword|operator_sort)\n[//]: # (keyword|operator_round)\n[//]: # (keyword|operator_sort_by)\n[//]: # (keyword|operator_last)\n[//]: # (keyword|operator_font)\n[//]: # (keyword|operator_distance_between)\n[//]: # (keyword|operator_with_precision)\n[//]: # (keyword|operator_accumulate)\n[//]: # (keyword|skill_fsm)\n[//]: # (keyword|architecture_fsm)\n[//]: # (keyword|type_topology)\n[//]: # (keyword|statement_state)\n[//]: # (keyword|statement_transition)\n[//]: # (keyword|statement_diffuse)\n[//]: # (keyword|statement_agents)\n[//]: # (keyword|statement_overlay)\n[//]: # (keyword|statement_inspect)\n[//]: # (keyword|statement_exhaustive)\n[//]: # (keyword|statement_permanent)\n[//]: # (keyword|statement_genetic)\n[//]: # (keyword|constant_#lime)\n[//]: # (keyword|constant_#zoom)\n[//]: # (keyword|constant_#bold)\n[//]: # (keyword|constant_#plain)\n[//]: # (keyword|constant_#darkgray)\n[//]: # (keyword|constant_#pixels)\n[//]: # (keyword|constant_#darkgreen)\n[//]: # (keyword|concept_comodel)\n# comodel with mixed behaviors \n\n\n_Author : HUYNH Quang Nghi_\n\nThis is a simple comodel serve to demonstrate the mixing behaviors of preyPredator with the Ants. Ants are the prey, fleeing from Predators, when they are not chasing, they try to do job of the ants.\n\n\nImported models : \n\n```\nmodel ants\n\nglobal {\n\t//Evaporation value per cycle\n\tfloat evaporation_per_cycle  food_places  0) ? food_color : ((road < 0.001) ? background : rgb(#009900) + int(road * 5))) update: is_nest ? nest_color : ((food > 0) ?\n\tfood_color : ((road < 0.001) ? background : rgb(#009900) + int(road * 5)));\n\tint food  0)) > 0 {\n\t\t\treturn point(list_places first_with (each.food > 0));\n\t\t} else {\n\t\t\tlist_places  0) and ((each distance_to center) > (self distance_to center)))) sort_by (each.road);\n\t\t\treturn point(last(list_places));\n\t\t}\n\n\t}\n\t//Reflex to drop food once the ant is in the nest\n\treflex drop when: has_food and (ant_grid(location)).is_nest {\n\t\tdo drop();\n\t}\n\t//Reflex to pick food when there is one at the same location\n\treflex pick when: !has_food and (ant_grid(location)).food > 0 {\n\t\tdo pick(1);\n\t}\n\t//Initial state to make the ant wander \n\tstate wandering initial: true {\n\t\tdo wander(amplitude: 90);\n\t\tfloat pr  0.05) and (pr < 4);\n\t}\n\t//State to carry food once it has been found\n\tstate carryingFood {\n\t\tdo goto(target: center);\n\t\ttransition to: wandering when: !has_food;\n\t}\n\t//State to follow a pheromon road if once has been found\n\tstate followingRoad {\n\t\tpoint next_place  0.5 or pos <= 0) {\n\t\t\tinc  0) or (each.road > 0) or (each.is_nest));\n\t\t\tspecies ant position: { pos, pos } size: quadrant_size aspect: icon;\n\t\t\tgrid ant_grid lines: #darkgray position: { 0.5, 0 } size: quadrant_size;\n\t\t\tspecies ant position: { 0.5, 0 } size: quadrant_size aspect: info;\n\t\t}\n\t}\n}\n//Complete experiment that will inspect all ants in a table\nexperiment Complete type: gui {\n\tparameter 'Number:' var: ants_number init: 100 unit: 'ants' category: 'Environment and Population';\n\tparameter 'Grid dimension:' var: gridsize init: 100 unit: '(number of rows and columns)' category: 'Environment and Population';\n\tparameter 'Number of food depots:' var: number_of_food_places init: 5 min: 1 category: 'Environment and Population';\n\n\t// Experimentator\n\n\tinit {\n\t\twrite \"Experimentator agent running \" + self;\n\t   ants_number  0) or (each.road > 0) or (each.is_nest)) ;\n\t\t\tspecies ant position: { 0.05, 0.05 } size: { 0.9, 0.9 } aspect: icon;\n\t\t\toverlay \"Texts\" transparency: 0.3 background: rgb (99, 85, 66,255)  position: {10°px, 10°px} size: {250°px, 150°px} border: rgb (99, 85, 66,255) rounded: true{\n\t\t\t\tdraw ant_shape_full at: {60°px, 70°px} size: {140°px, 100°px} rotate: -60;\n\t\t\t\tdraw ('Food foraged: ' + (((food_placed = 0 ? 0 : food_gathered / food_placed) * 100) with_precision 2) + '%') at: {40°px,70°px} font:font(\"Arial\", 18, #bold) color: #white;\n\t\t\t\tdraw ('Carrying ants: ' + (((100 * ant count (each.has_food or each.state = \"followingRoad\")) / length(ant)) with_precision 2) + '%') at: {40°px, 100°px} font:font(\"Arial\", 18 , #bold) color: #white;\n\t\t\t}\n\t\t\t\t\t\n\t\t}\n\t\tinspect \"All ants\" type: table value: ant attributes: ['name', 'location', 'heading','state'];\n\t}\n}\n//Batch experiment to find the best way to maximize the food gathered using exhaustive method\nexperiment Batch type: batch repeat: 4 keep_seed: true until: (food_gathered = food_placed) or (time > 1000) {\n\tparameter 'Size of the grid:' var: gridsize init: 75 unit: 'width and height';\n\tparameter 'Number:' var: ants_number among:[10,20,50] unit: 'ants';\n\tparameter  'Evaporation:' var: evaporation_per_cycle among: [0.1, 0.5, 2.0, 10.0] unit: 'units every cycle';\n\tparameter  'Diffusion:' var: diffusion_rate min: 0.1 max: 1.0 unit: 'rate every cycle (1.0 means 100%)' step: 0.2;\n\tmethod exhaustive maximize: food_gathered;\n\n\t\n\tpermanent {\n\t\tdisplay Comparison background: #white {\n\t\t\tchart \"Food Gathered\" type: series {\n\t\t\t\t\tdata \"Min\" value:  min(ants_model collect each.food_gathered ) style: spline color: #darkgreen ;\n\t\t\t\t\tdata \"Max\" value:  max(ants_model collect each.food_gathered ) style: spline color: #red ;\n\t\t\t}\n\t\t}\n\t}\n}\n\n//Batch experiment to find the best way to maximize the food gathered using genetic method\nexperiment Genetic type: batch repeat: 2 keep_seed: true until: (food_gathered = food_placed) or (time > 1000) {\n\tparameter 'Size of the grid:' var: gridsize init: 75 unit: '(width and height)';\n\tparameter 'Number:' var: ants_number among:[10,20,50] unit: 'ants';\n\tparameter  'Evaporation:' var: evaporation_per_cycle among: [0.1, 0.5, 2.0, 10.0] unit: 'units every cycle';\n\tparameter 'Diffusion:' var: diffusion_rate min: 0.1 max: 1.0 unit: 'rate every cycle (1.0 means 100%)' step: 0.2;\n\tmethod genetic maximize: food_gathered pop_dim: 5 crossover_prob: 0.7 mutation_prob: 0.1 nb_prelim_gen: 1 max_gen: 20;\n\t\n\t\tpermanent {\n\t\tdisplay Comparison background: #white {\n\t\t\tchart \"Food Gathered\" type: series {\n\t\t\t\t\tdata \"Min\" value:  min(ants_model collect each.food_gathered ) style: spline color: #darkgreen ;\n\t\t\t\t\tdata \"Max\" value:  max(ants_model collect each.food_gathered ) style: spline color: #red ;\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n\n```\nmodel Ants_coupling\n\nimport \"../../../Toy Models/Ants (Foraging and Sorting)/models/Ant Foraging (Complex).gaml\" \n\n\n\nexperiment Ants_coupling_exp type:gui  parent:Complete{\n\t\n\tlist getAnts{\n\t\treturn list(ant);\n\t}\n\t\n\tlist getAnt_grid{\n\t\treturn list(ant_grid);\n\t}\n\t\n\toutput{\t\n\t}\n}\n```\n\n\n```\nmodel PreyPredator\n global\n{\n\tgeometry shape  lstPredator (predator);\n\tlist lstPrey (prey);\n\tinit\n\t{\n\t\tcreate prey number: preyinit;\n\t\tcreate predator number: predatorinit;\n\t\tlstPredator (predator);\n\t\tlstPrey (prey);\n\t}\n\n}\n\nspecies generic_species skills: [moving]\n{\n\tfloat speed  0)\n\t\t{\n\t\t\tspeed  0)\n\t\t\t{\n\t\t\t\tagent a  getPrey{\n\t\treturn list(prey);\n\t}\n\t\tlist getPredator{\n\t\treturn list(predator);\n\t}\n\t\n\t//if we redefine the output, i.e, a blank output, the displays in parent experiement dont show.\n\toutput\n\t{\n\t}\n\n}\n\n\n```\n\n\nCode of the model : \n\n```\nmodel comodel_mix_behaviors\n\nimport \"PreyPredator_coupling.gaml\" as myPreyPredator\nimport \"Ants_coupling.gaml\" as myAnt\n\n\nglobal\n{\n\t//set the shape of environment: square 100 \n\tgeometry shape  theAnts;\n\t// the variable that refer to the prey population in micro-model\n\tlist thePreys;\n\t\n\tinit\n\t{\n\t\t//create the Ants micro-model with the size of grid is 100 and the population have 500 ants.\n\t\tcreate myAnt.Ants_coupling_exp with: [gridsize::100,ants_number::500];\n\t\t//create the PreyPredator micro-model with the parameters and the number of the prey is equal with the size of ants population\n\t\tcreate myPreyPredator.PreyPredator_coupling_exp with: [shape::square(100), preyinit::myAnt.Ants_coupling_exp[0].simulation.ants_number, predatorinit::3]  \n\t\t{\n\t\t\t// set the size of micro-model PreyPredator equal with the size of the grid of myAnt\n\t\t\tshape (myPreyPredator.PreyPredator_coupling_exp accumulate each.getPrey());\n\n\n\t}\n\n\treflex simulate_micro_models\n\t{\n\t\t// ask myAnt do a step\n\t\task (myAnt.Ants_coupling_exp collect each.simulation)\n\t\t{\n\t\t\tdo _step_;\n\t\t}\n\t\t// ask myPreyPredator do a step, too\n\t\task (myPreyPredator.PreyPredator_coupling_exp collect each.simulation)\n\t\t{\n\t\t\tdo _step_;\n\t\t}\n\n\t\t//check if a Prey is chased, set the position of that agent to the location of prey \n\t\t//if not, set ant's location to agent location.\n\t\t// if the agent (prey) died, then tell the ant do die\n\t\tloop i from: 0 to: length(theAnts) - 1\n\t\t{\n\t\t\tif (!dead(thePreys at i) and !dead(theAnts at i))\n\t\t\t{\n\t\t\t\tif (!(thePreys at i).is_chased)\n\t\t\t\t{\n\t\t\t\t\t(thePreys at i).location ","url":"wiki/Co-model-Usage-comodel_mix_behaviors.md"},{"id":"wiki/Co-model-Usage-comodel_mutate_population.md","title":" comodel_with_the_coupling","content":"[//]: # (keyword|operator_dead)\n[//]: # (keyword|operator_any)\n[//]: # (keyword|operator_triangle)\n[//]: # (keyword|operator_sort)\n[//]: # (keyword|operator_accumulate)\n[//]: # (keyword|statement_agents)\n[//]: # (keyword|constant_#lime)\n[//]: # (keyword|concept_comodel)\n# comodel_with_the_coupling\n\n\n_Author : HUYNH Quang Nghi_\n\nThis is a simple comodel serve to demonstrate the importation and instatiation of micro-model  using the couplings  with the mutation the population of micro-model. A population can be a collection from itself and from other mircro-model\n\n\nImported models : \n\n```\nmodel PreyPredator\n global\n{\n\tgeometry shape  lstPredator (predator);\n\tlist lstPrey (prey);\n\tinit\n\t{\n\t\tcreate prey number: preyinit;\n\t\tcreate predator number: predatorinit;\n\t\tlstPredator (predator);\n\t\tlstPrey (prey);\n\t}\n\n}\n\nspecies generic_species skills: [moving]\n{\n\tfloat speed  0)\n\t\t{\n\t\t\tspeed  0)\n\t\t\t{\n\t\t\t\tagent a  getPrey{\n\t\treturn list(prey);\n\t}\n\t\tlist getPredator{\n\t\treturn list(predator);\n\t}\n\t\n\t//if we redefine the output, i.e, a blank output, the displays in parent experiement dont show.\n\toutput\n\t{\n\t}\n\n}\n\n\n```\n\n\nCode of the model : \n\n```\nmodel comodel_with_the_coupling\n\nimport \"PreyPredator_coupling.gaml\" as myP\n\n\nglobal\n{\n\t// set the shape of world as a rectangle 200 x 100\n\tgeometry shape  lstpredator0  lstprey0  lstpredator1  lstprey1  lstpredator2  lstprey2 ","url":"wiki/Co-model-Usage-comodel_mutate_population.md"},{"id":"wiki/Co-model-Usage-comodel_simple.md","title":" Simple syntax demonstration of Comodeling ","content":"[//]: # (keyword|concept_comodel)\n# Simple syntax demonstration of Comodeling \n\n\n_Author : HUYNH Quang Nghi_\n\nThis is a simple comodel serve to demonstrate the importation and instatiation of micro-model without using the couplings  \n\n\nImported models : \n\n```\nmodel M2\n\n\nglobal\n{\n\tint n ","url":"wiki/Co-model-Usage-comodel_simple.md"},{"id":"wiki/Co-model-Usage-comodel_with_the_coupling.md","title":" comodel_with_the_coupling","content":"[//]: # (keyword|statement_agents)\n[//]: # (keyword|concept_comodel)\n# comodel_with_the_coupling\n\n\n_Author : HUYNH Quang Nghi_\n\nThis is a simple comodel serve to demonstrate the importation and instatiation of micro-model using the couplings  \n\n\nImported models : \n\n```\nmodel M2\n\n\nglobal\n{\n\tint n  getB{\n\t\treturn list(B);\n\t}\n\t\n\t//if we redefine the output, i.e, a blank output, the displays in parent experiement dont show.\n\toutput\n\t{\n\t}\n\n}\n\n\n```\n\n\n```\nmodel M1\n\n\nglobal\n{\n\tint n  getA{\n\t\treturn list(A);\n\t}\n\t\n\t//if we redefine the output, i.e, a blank output, the displays in parent experiement dont show.\n\toutput\n\t{\n\t}\n\n}\n\n\n```\n\n\nCode of the model : \n\n```\nmodel comodel_with_the_coupling\n\nimport \"m1_coupling.gaml\" as micro_model_1\nimport \"m2_coupling.gaml\" as micro_model_2\n\nglobal\n{\n\tgeometry shape","url":"wiki/Co-model-Usage-comodel_with_the_coupling.md"},{"id":"wiki/Color-Bubble-Sort-3D.md","title":" Creating color and sort cubes by color","content":"[//]: # (keyword|operator_cube)\n[//]: # (keyword|operator_copy)\n[//]: # (keyword|constant_#magenta)\n[//]: # (keyword|constant_#cyan)\n[//]: # (keyword|concept_color)\n[//]: # (keyword|concept_3d)\n# Creating color and sort cubes by color\n\n\n_Author :  Arnaud Grignard_\n\nA model to show how to create color by using the rgb operator, the color depending on the position of cube in the xyz space. The cubes are randomly mixed to finally be sorted according to the color of each vertix of the whole big cube, using the bubble sort algorithm (https://en.wikipedia.org/wiki/Bubble_sort). \n\n\nCode of the model : \n\n```\n\nmodel bubblesort3D\n\n\nglobal {\n\n//Number of cubes by faces of the whole big cube\nint nb_cells neigbhours update: cells at_distance (1.1);\n\t\n\t//Update of the neighbours cubes at each cycle of the simulation according to their location\n\tcells upper_cell_y update: neigbhours first_with (shape.location.y > each.shape.location.y);\n\tcells upper_cell_x update: neigbhours first_with (shape.location.x > each.shape.location.x);\n\tcells upper_cell_z update: neigbhours first_with (shape.location.z > each.shape.location.z);\n\t\n\t//We permute the cube agent with its neighbour if its intensity is greater according to the canal related to its axis (z for canal blue, y for green and x for red)\n\treflex swap_z when: upper_cell_z != nil and blue < upper_cell_z.blue{ \n\t\tpoint tmp1Loc ","url":"wiki/Color-Bubble-Sort-3D.md"},{"id":"wiki/Color-Color-Brewer.md","title":" Color defined by choosing a Color Brewer","content":"[//]: # (keyword|operator_brewer_palettes)\n[//]: # (keyword|operator_brewer_colors)\n[//]: # (keyword|concept_color)\n# Color defined by choosing a Color Brewer\n\n\n_Author :  Arnaud Grignard & Patrick Taillandier_\n\nA model to show how to use color brewer. In this model, two experiments are presents : one just to show the different colors present in some selected brewer, and a second one to show in a grid the different colors of brewler having at least a minimal number of colors passed in parameter.\n\n\nCode of the model : \n\n```\n\n\nmodel ColorBrewer\n\n\nglobal {\n\n//number of colors\nint nb_classes palettes  SequentialColors(brewer_colors(sequentialPalette));\nlist DivergingColors(brewer_colors(divergingPalette));\nlist QualitativeColors(brewer_colors(qualitativePalette));\n\n\n\tinit {\n\t\t//if the palettes is not empty\n\t\tif (not empty(palettes)) {\n\t\t\t//for each palette\n\t\t\tloop i from: 0 to: length(palettes) - 1 {\n\t\t\t\t//define a  list of nb_classes colors from the current palette\n\t\t\t\tlist colors(brewer_colors(palettes[i],nb_classes));\n\t\t\t\t\n\t\t\t\t//define the colors of the corresponding cells\n\t\t\t\task cell where (each.grid_y = i){\n\t\t\t\t\tcolor ","url":"wiki/Color-Color-Brewer.md"},{"id":"wiki/Color-RGB-to-XYZ.md","title":" RGB color to XYZ position","content":"[//]: # (keyword|operator_rgb_to_xyz)\n[//]: # (keyword|operator_cube)\n[//]: # (keyword|concept_color)\n[//]: # (keyword|concept_3d)\n# RGB color to XYZ position\n\n\n_Author :  Arnaud Grignard_\n\nA model to show how to convert rgb values in xyz position using the operator rgb_to_xyz. Each pixel of a given image is used to create a point with its coordinates depending on its color : red value for x coordinate, green value for y coordinate and blue value for the z coordinate.\n\n\nCode of the model : \n\n```\n\nmodel rgbCube\n\nglobal {\n\t//import an image\n\tfile imageRaster  p;\n\t\n\t//geometry of the world (environment)\n\tgeometry shape  (rgb_to_xyz(imageRaster));\n\t}\n}\n\n\nexperiment Display type: gui {\n\toutput {\n\t\tdisplay RGB_to_XYZ type: opengl { \n\t\t\timage imageRaster.path refresh: false;\n\t\t\tgraphics \"pts\" refresh: false{\n\t\t\t\tloop pt over: p {\n\t\t\t\t\tdraw cube(1) at: pt color: rgb(pt.x, pt.y, pt.z);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n```\n","url":"wiki/Color-RGB-to-XYZ.md"},{"id":"wiki/Data-Importation-3D-shapefile-Loading.md","title":" 3D shapefile loading","content":"[//]: # (keyword|operator_shape_file)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_load_file)\n# 3D shapefile loading\n\n\n_Author :  _\n\nModel which shows how to create a shape using a 3D Shapefile after this one has been loaded. \n\n\nCode of the model : \n\n```\nmodel shapefile_loading\n\nglobal {\n\t\n\t//file variable that will store the shape file\n\tfile shape_file_gis_3d_objects ","url":"wiki/Data-Importation-3D-shapefile-Loading.md"},{"id":"wiki/Data-Importation-ASC-file-Import.md","title":" ESRI ASCII to grid model","content":"[//]: # (keyword|concept_grid)\n[//]: # (keyword|concept_load_file)\n[//]: # (keyword|concept_asc)\n# ESRI ASCII to grid model\n\n\n_Author :  Patrick Taillandier_\n\nModel which shows how to initialize a grid using a ESRI ASCII file\n\n\nCode of the model : \n\n```\n\nmodel ascimport\n\nglobal {\n\t//definiton of the file to import\n\tfile grid_data ","url":"wiki/Data-Importation-ASC-file-Import.md"},{"id":"wiki/Data-Importation-CSV-Agents.md","title":" CSV to Agents Model","content":"[//]: # (keyword|operator_csv_file)\n[//]: # (keyword|operator_get)\n[//]: # (keyword|concept_csv)\n[//]: # (keyword|concept_load_file)\n# CSV to Agents Model\n\n\n_Author :  Patrick Taillandier_\n\nModel which shows how to create agents by importing data of a CSV file. The model read the CSV File and create an agent Iris for each line of the CSV, linking its attributes to columns of the CSV File. \n\n\nCode of the model : \n\n```\n\nmodel CSVfileloading\n\nglobal {\n\t\n\tinit {\n\t\t//create iris agents from the CSV file (use of the header of the CSV file), the attributes of the agents are initialized from the CSV files: \n\t\t//we set the header facet to true to directly read the values corresponding to the right column. If the header was set to false, we could use the index of the columns to initialize the agent attributes\n\t\tcreate iris from:csv_file( \"../includes/iris.csv\",true) with:\n\t\t\t[sepal_length::float(get(\"sepallength\")), \n\t\t\t\tsepal_width::float(get(\"sepalwidth\")), \n\t\t\t\tpetal_length::float(get(\"petallength\")),\n\t\t\t\tpetal_width::float(get(\"petalwidth\")), \n\t\t\t\ttype::string(get(\"type\"))\n\t\t\t];\t\n\t}\n}\n\nspecies iris {\n\tfloat sepal_length;\n\tfloat sepal_width;\n\tfloat petal_length;\n\tfloat petal_width;\n\tstring type;\n\trgb color ;\n\t\n\tinit {\n\t\tcolor ","url":"wiki/Data-Importation-CSV-Agents.md"},{"id":"wiki/Data-Importation-CSV-File-Loading.md","title":" Convertion of CSV data to Matrix","content":"[//]: # (keyword|operator_csv_file)\n[//]: # (keyword|type_matrix)\n[//]: # (keyword|concept_csv)\n[//]: # (keyword|concept_load_file)\n# Convertion of CSV data to Matrix\n\n\n_Author :  Patrick Taillandier_\n\nModel which shows how to initialize a matrix by using the content of a CSV File. The model load a CSV File, and write its content in the console. \n\n\nCode of the model : \n\n```\n\n\nmodel CSVfileloading\n\nglobal {\n\tfile my_csv_file ","url":"wiki/Data-Importation-CSV-File-Loading.md"},{"id":"wiki/Data-Importation-Contour-Lines.md","title":" Contour Lines Import","content":"[//]: # (keyword|operator_triangulate)\n[//]: # (keyword|operator_closest_to)\n[//]: # (keyword|operator_set_z)\n[//]: # (keyword|constant_#grey)\n[//]: # (keyword|concept_load_file)\n[//]: # (keyword|concept_gis)\n[//]: # (keyword|concept_shapefile)\n# Contour Lines Import\n\n\n_Author : Patrick Taillandier_\n\nModel which imports a shapefile of contour lines, build triangles from these contour lines, compute their elevation by using the elevation attribute of the contour lines which had been linked to the elevation column of the shapefile. \n\n\nCode of the model : \n\n```\n\n\nmodel contour_lines_import\n\nglobal {\n\t//the contour lines shapefile\n\tfile shape_file_cl  triangles  ","url":"wiki/Data-Importation-Contour-Lines.md"},{"id":"wiki/Data-Importation-DXF-Agents.md","title":" DXF to Agents Model","content":"[//]: # (keyword|operator_get)\n[//]: # (keyword|operator_group_by)\n[//]: # (keyword|operator_rnd_color)\n[//]: # (keyword|constant_#brown)\n[//]: # (keyword|concept_dxf)\n[//]: # (keyword|concept_load_file)\n# DXF to Agents Model\n\n\n_Author :  Patrick Taillandier_\n\nModel which shows how to create agents by importing data of a DXF file\n\n\nCode of the model : \n\n```\n\nmodel DXFAgents \n\nglobal {\n\tfile house_file ","url":"wiki/Data-Importation-DXF-Agents.md"},{"id":"wiki/Data-Importation-GEOTIFF-file-Import.md","title":" GeoTIFF file to Grid of Cells ","content":"[//]: # (keyword|operator_max_of)\n[//]: # (keyword|operator_min_of)\n[//]: # (keyword|concept_load_file)\n[//]: # (keyword|concept_tif)\n[//]: # (keyword|concept_gis)\n[//]: # (keyword|concept_grid)\n# GeoTIFF file to Grid of Cells \n\n\n_Author :  Patrick Taillandier_\n\nModel which shows how to create a grid of cells by using a GeoTIFF File. \n\n\nCode of the model : \n\n```\n\nmodel geotiffimport\n\nglobal {\n\t//definiton of the file to import\n\tfile grid_data ","url":"wiki/Data-Importation-GEOTIFF-file-Import.md"},{"id":"wiki/Data-Importation-GIS-Export.md","title":" Shapefiles Import and Save","content":"[//]: # (keyword|operator_get)\n[//]: # (keyword|statement_save)\n[//]: # (keyword|concept_gis)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_save_file)\n[//]: # (keyword|concept_load_file)\n[//]: # (keyword|concept_3d)\n# Shapefiles Import and Save\n\n\n_Author : Patrick Taillandier_\n\nModel using shapefiles to create buildings, linking their height and type attributes to the height and nature columns of the shapefiles to finally save the data in an other shapefile.\n\n\nCode of the model : \n\n```\n  \n\nmodel saveGIS\n\nglobal {\n\tfile shape_file_buildings ","url":"wiki/Data-Importation-GIS-Export.md"},{"id":"wiki/Data-Importation-Grid-DEM.md","title":" ASCII File to DEM Representation","content":"[//]: # (keyword|operator_dem)\n[//]: # (keyword|concept_load_file)\n[//]: # (keyword|concept_gis)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_dem)\n# ASCII File to DEM Representation\n\n\n_Author : Arnaud Grignard_\n\nModel to show how to import a ASCII File to make a DEM Representation and apply a Texture on it. In this model, three experiments are presented : DEM to show the grid elevation using the ASCII File as data for the height of the cells, and showing different 3D displays. GridDEMComplete shows more displays with the three of the previous experiment, the grid of the cells in a 2D Display, with the Elevation but without triangulation, and the grid with text values to show the content of the ASCII used by the cells. GraphicDEMComplete shows the use of the z_factor to amplify or reduces the difference between the z values of a Dem geometry.\n\n\nCode of the model : \n\n```\n\nmodel gridloading\n\nglobal {\n\tfile grid_data ","url":"wiki/Data-Importation-Grid-DEM.md"},{"id":"wiki/Data-Importation-OBJ-file-drawing.md","title":" OBJ File to Geometry","content":"[//]: # (keyword|operator_\\:\\:)\n[//]: # (keyword|concept_load_file)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_obj)\n# OBJ File to Geometry\n\n\n_Author :  Arnaud Grignard_\n\nModel which shows how to use a OBJ File to draw a complex geometry. The geometry is simply used, in this case, to draw the agents.\n\n\nCode of the model : \n\n```\n\n\nmodel obj_drawing   \n\nglobal {\n\tgeometry shape ","url":"wiki/Data-Importation-OBJ-file-drawing.md"},{"id":"wiki/Data-Importation-OBJ-file-loading.md","title":" Complex Object Loading","content":"[//]: # (keyword|concept_load_file)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_obj)\n# Complex Object Loading\n\n\n_Author :  Arnaud Grignard_\n\nProvides a  complex geometry to agents (svg,obj or 3ds are accepted). The geometry becomes that of the agents.\n\n\nCode of the model : \n\n```\n\nmodel obj_loading   \n\nglobal {\n\n\tinit { \n\t\tcreate object;\n\t}  \n} \n\nspecies object skills:[moving]{\n\t\n\tgeometry shape ","url":"wiki/Data-Importation-OBJ-file-loading.md"},{"id":"wiki/Data-Importation-OSM-Loading.md","title":" OSM file to Agents","content":"[//]: # (keyword|operator_osm_file)\n[//]: # (keyword|operator_rnd_color)\n[//]: # (keyword|concept_load_file)\n[//]: # (keyword|concept_osm)\n[//]: # (keyword|concept_gis)\n# OSM file to Agents\n\n\n_Author :  Patrick Taillandier_\n\nModel which shows how to import a OSM File in GAMA and use it to create Agents. In this model, a filter is done to take only into account the roads and the buildings contained in the file. \n\n\nCode of the model : \n\n```\n\nmodel simpleOSMLoading \n \nglobal{\n\t\n\t//map used to filter the object to build from the OSM file according to attributes. for an exhaustive list, see: http://wiki.openstreetmap.org/wiki/Map_Features\n\tmap filtering  osmfile (osm_file(\"../includes/rouen.gz\", filtering))  ;\n\t\n\t//compute the size of the environment from the envelope of the OSM file\n\tgeometry shape ","url":"wiki/Data-Importation-OSM-Loading.md"},{"id":"wiki/Data-Importation-Raster-Image-Import.md","title":" Raster File in a Grid of cells","content":"[//]: # (keyword|operator_inside)\n[//]: # (keyword|concept_load_file)\n[//]: # (keyword|concept_gis)\n[//]: # (keyword|concept_raster)\n# Raster File in a Grid of cells\n\n\n_Author : Maroussia Vavasseur and Benoit Gaudou_\n\nModel which shows how to import a Raster file in GAMA and use it to initialize the color attributes of a grid of cells. This model represents a grid with a cell, each cell has a color, and this color is used for animals (izards) to be placed on a cell that verifies some conditions. The izards do not move once they have been placed. \n\n\nCode of the model : \n\n```\n\nmodel HowToImportRaster\n\nglobal {\t\n\t// Constants \n\tint heightImg const: true ","url":"wiki/Data-Importation-Raster-Image-Import.md"},{"id":"wiki/Data-Importation-Raster-Images-and-shapefile-Import.md","title":" Raster File and Shapefiles Import","content":"[//]: # (keyword|operator_inside)\n[//]: # (keyword|operator_as_matrix)\n[//]: # (keyword|type_matrix)\n[//]: # (keyword|concept_load_file)\n[//]: # (keyword|concept_gis)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_raster)\n# Raster File and Shapefiles Import\n\n\n_Author : Maroussia Vavasseur and Benoit Gaudou_\n\nModel which imports data from a raster file and two shapefiles to initilalize a grid and two species. The roaster file initialize a grid attribute for the cells and the shapefiles a river species just with the same shape, and the managementUnit species with a link between the columns of the shapefile and the attributes of the species. \n\n\nCode of the model : \n\n```\n\nmodel RasterAndShapefiles\n\n\n \nglobal {\n\t// Constants\n\tint heightImg const: true  mapColor (mntImageRaster as_matrix {widthImg/factorDiscret,heightImg/factorDiscret}) ;\n\t\task cell {\t\t\n\t\t\tcolor ","url":"wiki/Data-Importation-Raster-Images-and-shapefile-Import.md"},{"id":"wiki/Database-Usage-Agents-from-Database-in-MSSQL.md","title":"  Agents from Database in MSSQL","content":"[//]: # (keyword|skill_SQLSKILL)\n[//]: # (keyword|concept_database)\n#  Agents from Database in MSSQL\n\n\n_Author : Benoit Gaudou_\n\n This model does SQl query commands and create agents using the results\n\n\nCode of the model : \n\n```\nmodel DB2agentMSSQL\n\nglobal {\n\tmap BOUNDS  PARAMS ","url":"wiki/Database-Usage-Agents-from-Database-in-MSSQL.md"},{"id":"wiki/Database-Usage-Agents-from-Database-in-MySQL.md","title":"  Agents from Database in MySQL","content":"[//]: # (keyword|skill_SQLSKILL)\n[//]: # (keyword|concept_database)\n#  Agents from Database in MySQL\n\n\n_Author : Benoit Gaudou_\n\n This model does SQl query commands and create agents using the results\n\n\nCode of the model : \n\n```\nmodel DB2agentMySQL\n\nglobal {\n\tmap BOUNDS  PARAMS ","url":"wiki/Database-Usage-Agents-from-Database-in-MySQL.md"},{"id":"wiki/Database-Usage-Agents-from-Database-in-PostGIS.md","title":"  Agents from Database in PostGIS","content":"[//]: # (keyword|skill_SQLSKILL)\n[//]: # (keyword|concept_database)\n#  Agents from Database in PostGIS\n\n\n_Author : Benoit Gaudou_\n\n This model does SQL query commands and create agents using the results\n\n\nCode of the model : \n\n```\nmodel DB2agentMySQL \n\nglobal {\n\tmap BOUNDS  PARAMS ","url":"wiki/Database-Usage-Agents-from-Database-in-PostGIS.md"},{"id":"wiki/Database-Usage-Agents-from-Database-in-SQLite.md","title":"  Agents from Database in SQLite ","content":"[//]: # (keyword|skill_SQLSKILL)\n[//]: # (keyword|concept_database)\n#  Agents from Database in SQLite \n\n\n_Author : Benoit Gaudou_\n\n This model creates buildings agents from the sqlite database using the result of a query\n\n\nCode of the model : \n\n```\nmodel DB2agentSQLite\n\nglobal {\n//\tfile buildingsShp  BOUNDS  PARAMS ","url":"wiki/Database-Usage-Agents-from-Database-in-SQLite.md"},{"id":"wiki/Database-Usage-Agents-from-Database-in-SQLite_QGis.md","title":"  Agents from Database in SQLite QGIS","content":"[//]: # (keyword|skill_SQLSKILL)\n[//]: # (keyword|concept_database)\n#  Agents from Database in SQLite QGIS\n\n\n_Author : Truong Minh Thai_\n\n This model loads data from vnm_adm2 that is created by QGis.\n\n * In this case we do not need using AsBinary() to convert blob data to WKB format.  \n \n * In other case, if we load Geometry data that is created by using libspatialite library then we must use Asbinary() \n * to convert geometry to WKB format (see SQLite_libspatialite model)\n\n\nCode of the model : \n\n```\nmodel Sqlite_QGis\n \n  \nglobal { \n\tmap BOUNDS ","url":"wiki/Database-Usage-Agents-from-Database-in-SQLite_QGis.md"},{"id":"wiki/Database-Usage-Agents-to-Database-in-MSSQL.md","title":"  Agents to Database in MSSQL","content":"[//]: # (keyword|skill_SQLSKILL)\n[//]: # (keyword|concept_database)\n#  Agents to Database in MSSQL\n\n\n_Author : Truong Minh Thai_\n\n This model shows how to Insert and Delete agents from a MSSQL DB\n\n\nCode of the model : \n\n```\nmodel agent2DB_MSSQL \n  \nglobal {  \n\tfile buildingsShp  PARAMS > button to save data of agents to DB\";\t\t \n\t}\n}   \n  \nspecies DB_Accessor skills: [SQLSKILL] ;   \n\nspecies bounds {\n\treflex printdata{\n\t\t write ' name : ' + (name) ;\n\t}\n\t\n\treflex savetosql{  // save data into MSSQL\n\t\twrite \"begin\"+ name;\n\t\task DB_Accessor {\n\t\t\tdo insert params: PARAMS into: \"bounds\"\n\t\t\t\t\t  columns: [\"geom\"]\n\t\t\t\t\t  values: [myself.shape];\n\t\t}\n\t    write \"finish \"+ name;\n\t}\t\t\n}\n\nspecies buildings {\n\tstring type;\n\t\n\treflex printdata{\n\t\t write ' name : ' + (name) + '; type: ' + (type) + \"shape:\" + shape;\n\t}\n\t\n\treflex savetosql{  // save data into MSSQL\n\t\twrite \"begin\"+ name;\n\t\task DB_Accessor {\n\t\t\tdo insert params: PARAMS into: \"buildings\"\n\t\t\t\t\t  columns: [\"name\", \"type\",\"geom\"]\n\t\t\t\t\t  values: [myself.name,myself.type,myself.shape];\n\t\t}\n\t    write \"finish \"+ name;\n\t}\t\n\t\n\taspect default {\n\t\tdraw shape color: #gray ;\n\t}\n}     \n\nexperiment default_expr type: gui {\n\toutput {\n\t\t\n\t\tdisplay GlobalView {\n\t\t\tspecies buildings aspect: default;\n\t\t}\n\t}\n}\n\n```\n","url":"wiki/Database-Usage-Agents-to-Database-in-MSSQL.md"},{"id":"wiki/Database-Usage-Agents-to-Database-in-MySQL.md","title":"  Agents to Database in MySQL","content":"[//]: # (keyword|skill_SQLSKILL)\n[//]: # (keyword|concept_database)\n#  Agents to Database in MySQL\n\n\n_Author : Truong Minh Thai_\n\n  init: Select data from table vnm_adm2 (Created via QGis software)  and create  agents\nsavetosql: Save data of agent into MySQL. \ntransform= true because you need to transform geometry data from Absolute(GAMA) to Gis\nNOTE: You should have imported the database (spatial_DB.sql) into the MySQL server in order that the model can run properly.\n\n\nCode of the model : \n\n```\n\nmodel agent2DB_MySQL \n  \nglobal { \n\tfile buildingsShp  PARAMS > button to save data of agents to DB\";\t\t \n\t}\n}   \n \nspecies DB_Accessor skills: [SQLSKILL] ;   \n\nspecies bounds {\n\treflex printdata{\n\t\t write ' name : ' + (name) ;\n\t}\n\t\n\treflex savetosql{  // save data into MySQL\n\t\twrite \"begin\"+ name;\n\t\task DB_Accessor {\n\t\t\tdo insert params: PARAMS into: \"bounds\"\n\t\t\t\t\t  columns: [\"geom\"]\n\t\t\t\t\t  values: [myself.shape];\n\t\t}\n\t    write \"finish \"+ name;\n\t}\t\t\n}\n\nspecies buildings {\n\tstring type;\n\t\n\treflex printdata{\n\t\t write ' name : ' + (name) + '; type: ' + (type) + \"shape:\" + shape;\n\t}\n\t\n\treflex savetosql{  // save data into MySQL\n\t\twrite \"begin\"+ name;\n\t\task DB_Accessor {\n\t\t\tdo insert params: PARAMS into: \"buildings\"\n\t\t\t\t\t  columns: [\"name\", \"type\",\"geom\"]\n\t\t\t\t\t  values: [myself.name,myself.type,myself.shape];\n\t\t}\n\t    write \"finish \"+ name;\n\t}\t\n\t\n\taspect default {\n\t\tdraw shape color: #gray ;\n\t}\n}     \n\nexperiment default_expr type: gui {\n\toutput {\n\t\t\n\t\tdisplay GlobalView {\n\t\t\tspecies buildings aspect: default;\n\t\t}\n\t}\n}\n\n```\n","url":"wiki/Database-Usage-Agents-to-Database-in-MySQL.md"},{"id":"wiki/Database-Usage-Agents-to-Database-in-PostGIS.md","title":"  Agents to Database in PostGIS","content":"[//]: # (keyword|skill_SQLSKILL)\n[//]: # (keyword|concept_database)\n#  Agents to Database in PostGIS\n\n\n_Author : Truong Minh Thai_\n\ninit: Select data from table vnm_adm2 (Created via QGis software)  and create  agents\nsavetosql: Save data of agent into MySQL.\ntransform= true because you need to transform geometry data from Absolute(GAMA) to Gis\nNOTE: You should have imported the database (spatial_DB.sql) into the MySQL server in order that the model can run properly.\n\n\n\nCode of the model : \n\n```\n\nmodel agent2DB_MySQL \n  \nglobal { \n\tfile buildingsShp  PARAMS > button to save data of agents to DB\";\t\t \n\t}\n}   \n  \nspecies DB_Accessor skills: [SQLSKILL] ;   \n\nspecies bounds {\n\treflex printdata{\n\t\t write \" name : \" + (name) ;\n\t}\n\t\n\treflex savetosql{  // save data into Postgres\n\t\twrite \"begin\"+ name;\n\t\task DB_Accessor {\n\t\t\tdo insert params: PARAMS into: \"bounds\"\n\t\t\t\t\t  columns: [\"geom\"]\n\t\t\t\t\t  values: [myself.shape];\n\t\t}\n\t    write \"finish \"+ name;\n\t}\t\t\n}\n\nspecies buildings {\n\tstring type;\n\t\n\treflex printdata{\n\t\twrite \" name : \" + (name) + \"; type: \" + (type) + \"shape:\" + shape;\n\t}\n\t\n\treflex savetosql{  // save data into Postgres\n\t\twrite \"begin\"+ name;\n\t\task DB_Accessor {\n\t\t\tdo insert params: PARAMS into: \"buildings\"\n\t\t\t\t\t  columns: [\"name\", \"type\",\"geom\"]\n\t\t\t\t\t  values: [myself.name,myself.type,myself.shape];\n\t\t}\n\t    write \"finish \"+ name;\n\t}\t\n\t\n\taspect default {\n\t\tdraw shape color: #gray ;\n\t}\n}   \n\nexperiment default_expr type: gui {\n\toutput {\n\t\t\n\t\tdisplay GlobalView {\n\t\t\tspecies buildings aspect: default;\n\t\t}\n\t}\n}\n\n```\n","url":"wiki/Database-Usage-Agents-to-Database-in-PostGIS.md"},{"id":"wiki/Database-Usage-Agents-to-Database-in-SQLite.md","title":"  Agents to Database in SQLite","content":"[//]: # (keyword|skill_SQLSKILL)\n[//]: # (keyword|concept_database)\n#  Agents to Database in SQLite\n\n\n_Author : Truong Minh Thai_\n\n   init: Select data from table vnm_adm2 (Created via QGis software)  and create  agents\n\n * savetosql: Save data of agent into MySQL.\n \n * transform= true because you need to transform geometry data from Absolute(GAMA) to Gis\n \n\nCode of the model : \n\n```\n\nmodel agent2DB_SQLite  \n  \nglobal {  \n\tfile buildingsShp  PARAMS > button to save data of agents to DB\";\t\t \n\t}\n}   \n \nspecies DB_Accessor skills: [SQLSKILL] ;   \n\nspecies bounds {\n\treflex printdata{\n\t\t write ' name : ' + (name) ;\n\t}\n\t \n\treflex savetosql{  // save data into SQLite\n\t\twrite \"begin bound\";\n\t\task DB_Accessor {\n\t\t\tdo insert params: PARAMS into: \"bounds\"\n\t\t\t\t\t  columns: [\"geom\"]\n\t\t\t\t\t  values: [myself.shape];\n\t\t}\n\t    write \"finish bound\";\n\t}\t\t\n}\t\n\nspecies buildings {\n\tstring type;\n\t\n\treflex printdata{\n\t\t write ' name : ' + (name) + '; type: ' + (type) + \"shape:\" + shape;\n\t}\n\t\n\treflex savetosql{  // save data into SQLite\n\t\twrite \"begin\"+ name;\n\t\task DB_Accessor {\n\t\t\tdo insert params: PARAMS into: \"buildings\"\n\t\t\t\t\t  columns: [\"name\", \"type\",\"geom\"]\n\t\t\t\t\t  values: [myself.name,myself.type,myself.shape];\n\t\t}\n\t    write \"finish \"+ name;\n\t}\t\n\t\n\taspect default {\n\t\tdraw shape color: #gray ;\n\t}\n}    \n\nexperiment default_expr type: gui {\n\toutput {\n\t\t\n\t\tdisplay GlobalView {\n\t\t\tspecies buildings aspect: default;\n\t\t}\n\t}\n}\n\n```\n","url":"wiki/Database-Usage-Agents-to-Database-in-SQLite.md"},{"id":"wiki/Database-Usage-Connection-Test.md","title":" SQLConnection","content":"[//]: # (keyword|skill_SQLSKILL)\n[//]: # (keyword|concept_database)\n# SQLConnection\n\n\n_Author : thaitruongminh_\n\nHow to create a connection to a database in GAMA\n\n\nCode of the model : \n\n```\nmodel test_connection\n\nglobal {\n\tmap SQLSERVER  MySQL  ORACLE  POSTGRES  SQLITE ","url":"wiki/Database-Usage-Connection-Test.md"},{"id":"wiki/Database-Usage-Create-Agents-and-Insert-in-MySQL.md","title":"  create_agents_Insert_result_MySQL","content":"[//]: # (keyword|skill_SQLSKILL)\n[//]: # (keyword|concept_database)\n#  create_agents_Insert_result_MySQL\n\n\n_Author : Benoit Gaudou_\n\nThis model illustrates the use of the MySQL DBMS to: \n\n *     - create agents from a database\n \n *     - store every cycle some results into a database\n \n \n *  Note: this model could be used with any DBMS just by changing the PARAMS variable.\n \n \n *  NOTE: YOU SHOULD HAVE ALREADY CREATED YOUR DATABASE (meteo_DB here) AND IMPORTED THE FILE (../../includes/meteo_DB_dump.sql)\n *        IN ORDER THAT THE MODEL CAN RUN PROPERLY.\n\n\nCode of the model : \n\n```\nmodel create_agents_Insert_result_MySQL \n\nglobal {\n\tstring res_DB  PARAMS ","url":"wiki/Database-Usage-Create-Agents-and-Insert-in-MySQL.md"},{"id":"wiki/Database-Usage-Create-Spatial-Table-in-MSSQL.md","title":"  CreateBuildingTableMSSQL","content":"[//]: # (keyword|statement_remove)\n[//]: # (keyword|statement_put)\n[//]: # (keyword|skill_SQLSKILL)\n[//]: # (keyword|concept_database)\n#  CreateBuildingTableMSSQL\n\n\n_Author : Truong Minh Thai_\n\nThis model shows how to create a database and a table in MSSQL using GAMA\n \n\nCode of the model : \n\n```\nmodel CreateBuildingTable_MSSQL\n\n\nglobal\n{\n\tmap PARAMS ","url":"wiki/Database-Usage-Create-Spatial-Table-in-MSSQL.md"},{"id":"wiki/Database-Usage-Create-Spatial-Table-in-MySQL.md","title":"  CreateBuildingTableMySQL","content":"[//]: # (keyword|statement_remove)\n[//]: # (keyword|statement_put)\n[//]: # (keyword|skill_SQLSKILL)\n[//]: # (keyword|concept_database)\n#  CreateBuildingTableMySQL\n\n\n_Author : Truong Minh Thai_\n\nThis model shows how to create a database and a table in MySQL using GAMA\n \n\nCode of the model : \n\n```\nmodel CreateBuildingTableMySQL\n\n\nglobal\n{\n\tmap PARAMS ","url":"wiki/Database-Usage-Create-Spatial-Table-in-MySQL.md"},{"id":"wiki/Database-Usage-Create-Spatial-Table-in-PostGIS.md","title":"  CreateBuildingTablePostGIS","content":"[//]: # (keyword|statement_remove)\n[//]: # (keyword|statement_put)\n[//]: # (keyword|skill_SQLSKILL)\n[//]: # (keyword|concept_database)\n#  CreateBuildingTablePostGIS\n\n\n_Author : Truong Minh Thai_\n\nThis model shows how to create a database and a table in PostGIS using GAMA\n \n\nCode of the model : \n\n```\nmodel CreateBuildingTablePostGIS\n\n\nglobal\n{\n\tmap PARAMS ","url":"wiki/Database-Usage-Create-Spatial-Table-in-PostGIS.md"},{"id":"wiki/Database-Usage-Create-Spatial-Table-in-SQLite.md","title":"  CreateBuildingTableSQLite","content":"[//]: # (keyword|skill_SQLSKILL)\n[//]: # (keyword|concept_database)\n#  CreateBuildingTableSQLite\n\n\n_Author : Truong Minh Thai_\n\nThis model shows how to create a database and a table in SQLite using GAMA\n \n\nCode of the model : \n\n```\n\nmodel SQLite_selectNUpdate\n  \nglobal {\n\tmap PARAMS ","url":"wiki/Database-Usage-Create-Spatial-Table-in-SQLite.md"},{"id":"wiki/Database-Usage-Simple-SQL-Command-in-SQLite.md","title":"  Simple SQL Command in SQLIte","content":"[//]: # (keyword|skill_SQLSKILL)\n[//]: # (keyword|concept_database)\n#  Simple SQL Command in SQLIte\n\n\n_Author : Truong Minh Thai_\n\n This model does SQl query commands:\n\n * - Create table \n \n * - Insert data\n \n * - Select data\n \n * - Delete data\n \n * - Drop table \n \n \n *  Note: the file emptyFile.db is only ... an empty file.\n\n\nCode of the model : \n\n```\nmodel SQLite_selectNUpdate\n\nglobal {\n\tmap PARAMS > button to view selected data\";\n\t\t}\n\n\t}\n\n}\n\nspecies DB_Accessor skills: [SQLSKILL] {\n\treflex select {\n\t\tlist t  (self select [params::PARAMS, select::\"SELECT * FROM registration\"]);\n\t\twrite \"Select before updated \" + t;\n\t}\n\n\treflex update {\n\t\tdo executeUpdate params: PARAMS updateComm: \"UPDATE registration SET age = 30 WHERE id IN (100, 101)\";\n\t\tdo executeUpdate params: PARAMS updateComm: \"DELETE FROM registration where id=103 \";\n\t\tlist t  (self select [params::PARAMS, select::\"SELECT * FROM registration\"]);\n\t\twrite \"Select after updated \" + t;\n\t}\n\n\treflex drop {\n\t\tdo executeUpdate params: PARAMS updateComm: \"DROP TABLE registration\";\n\t\twrite \"Registration table has been dropped.\";\n\t}\n\n}\n\nexperiment simple_SQL_exp type: gui {\n}     \n```\n","url":"wiki/Database-Usage-Simple-SQL-Command-in-SQLite.md"},{"id":"wiki/Database-Usage-Simple-Species-MySQL.md","title":"  Simple Species MySql","content":"[//]: # (keyword|concept_database)\n#  Simple Species MySql\n\n\n_Author : Truong Minh Thai_\n\n This model illustrates the use of the AgentDB species (instead of the SQLSKILL), and in particular following actions:\n\n *    - testConection\n \n *    - isConnected\n \n *    - close \n \n *    - executeUpdate\n \n *    - insert\n \n *    - select\n \n *    - getParameter \n \n \n *  This model does SQl query commands:\n \n * - Create table \n \n * - Insert data\n \n * - Select data\n \n * - Delete data\n \n * - Drop table \n \n \n *  NOTE: YOU SHOULD HAVE ALREADY CREATED YOUR DATABASE (meteo_DB here) AND IMPORTED THE FILE (../../includes/meteo_DB_dump.sql)\n *        IN ORDER THAT THE MODEL CAN RUN PROPERLY.\n\n\nCode of the model : \n\n```\nmodel simpleSQL_DBSpecies_MySQL\n\nglobal {\n\tmap PARAMS > button to view selected data\";\n\t\t}\n\n\t}\n\n}\n\nspecies DB_Accessor parent: AgentDB {\n\treflex select {\n\t\tlist t  (self select (select::\"SELECT * FROM registration\"));\n\t\twrite \"Select before updated \" + t;\n\t}\n\n\treflex update {\n\t\tdo executeUpdate updateComm: \"UPDATE registration SET age = 30 WHERE id IN (100, 101)\";\n\t\tdo executeUpdate updateComm: \"DELETE FROM registration where id=103 \";\n\t\tlist t  (self select (select::\"SELECT * FROM registration\"));\n\t\twrite \"Select after updated \" + t;\n\t}\n\n\treflex drop {\n\t\tdo executeUpdate updateComm: \"DROP TABLE registration\";\n\t\twrite \"Registration table has been dropped.\";\n\t}\n\n}\n\nexperiment simple_SQL_exp type: gui {\n}     \n```\n","url":"wiki/Database-Usage-Simple-Species-MySQL.md"},{"id":"wiki/Date-and-Time-Date-type-and-real-dates.md","title":" Use of the Date variables","content":"[//]: # (keyword|operator_add_years)\n[//]: # (keyword|operator_add_months)\n[//]: # (keyword|operator_add_weeks)\n[//]: # (keyword|operator_add_days)\n[//]: # (keyword|operator_add_hours)\n[//]: # (keyword|operator_add_minutes)\n[//]: # (keyword|operator_add_seconds)\n[//]: # (keyword|operator_subtract_years)\n[//]: # (keyword|operator_subtract_months)\n[//]: # (keyword|operator_subtract_weeks)\n[//]: # (keyword|operator_subtract_days)\n[//]: # (keyword|operator_subtract_hours)\n[//]: # (keyword|operator_subtract_minutes)\n[//]: # (keyword|operator_subtract_seconds)\n[//]: # (keyword|concept_date)\n# Use of the Date variables\n\n\n_Author :  Patrick Taillandier_\n\nA model to show how to use date variables and more particularly the starting_date and current_date global variables.\n\n\nCode of the model : \n\n```\nmodel date_model \n\nglobal {\n\t\n\t//definition of the date of begining of the simulation - defining this date will allows to change the normal date management of the simulation by a more realistic one (using calendar) \n\tdate starting_date ","url":"wiki/Date-and-Time-Date-type-and-real-dates.md"},{"id":"wiki/Date-and-Time-Simple-Time-definition.md","title":" Simple definition of time property in a model","content":"[//]: # (keyword|constant_#sec)\n[//]: # (keyword|constant_#minute)\n[//]: # (keyword|constant_#d)\n[//]: # (keyword|constant_#month)\n[//]: # (keyword|constant_#year)\n[//]: # (keyword|concept_date)\n# Simple definition of time property in a model\n\n\n_Author : Patrick Taillandier_\n\nShow how the time is managed is GAMA.\n\n\nCode of the model : \n\n```\n\nmodel SimpleTimedefinition\n\nglobal {\n\t//redifitiion of the duration of one simulation step to 1 hour. By default the duration is one second.\n\tfloat step ","url":"wiki/Date-and-Time-Simple-Time-definition.md"},{"id":"wiki/Driving-Skill-OSM-Loading-Driving.md","title":" OSM Loading Driving","content":"[//]: # (keyword|operator_osm_file)\n[//]: # (keyword|operator_covers)\n[//]: # (keyword|operator_get)\n[//]: # (keyword|operator_in)\n[//]: # (keyword|operator_last)\n[//]: # (keyword|statement_put)\n[//]: # (keyword|statement_save)\n[//]: # (keyword|concept_load_file)\n[//]: # (keyword|concept_gis)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_save_file)\n[//]: # (keyword|concept_osm)\n# OSM Loading Driving\n\n\n_Author : Patrick Taillandier_\n\nModel to show how to import OSM Files, using them to create agents for a road network, and saving the different agents in shapefiles. The first goal of this model is to prepare data for the driving skill models.\n\n\nCode of the model : \n\n```\n\n\nmodel OSMdata_to_shapefile \n \nglobal{\n\t//map used to filter the object to build from the OSM file according to attributes. for an exhaustive list, see: http://wiki.openstreetmap.org/wiki/Map_Features\n\tmap filtering  osmfile (osm_file(\"../includes/rouen.gz\", filtering))  ;\n\t\n\tgeometry shape  nodes_map;\n\t\n\t\n\n\tinit {\n\t\twrite \"OSM file loaded: \" + length(osmfile) + \" geometries\";\n\t\t\n\t\t//from the OSM file, creation of the selected agents\n\t\tloop geom over: osmfile {\n\t\t\tif (shape covers geom) {\n\t\t\t\tstring highway_str  1) ? int(first(lanes_str)) : int(lanes_str));\n\t\t\t\t\tcreate road with: [shape ::geom, type:: highway_str, oneway::oneway, maxspeed::maxspeed_val, lanes::lanes_val] {\n\t\t\t\t\t\tif lanes < 1 {lanes ","url":"wiki/Driving-Skill-OSM-Loading-Driving.md"},{"id":"wiki/Driving-Skill-Road-Traffic-advanced.md","title":" Complex Road Network ","content":"[//]: # (keyword|operator_direction_to)\n[//]: # (keyword|operator_last)\n[//]: # (keyword|operator_abs)\n[//]: # (keyword|operator_in)\n[//]: # (keyword|operator_box)\n[//]: # (keyword|operator_sin)\n[//]: # (keyword|operator_triangle)\n[//]: # (keyword|operator_polyline)\n[//]: # (keyword|operator_reverse)\n[//]: # (keyword|operator_as_map)\n[//]: # (keyword|operator_\\:\\:)\n[//]: # (keyword|operator_with_weights)\n[//]: # (keyword|operator_as_driving_graph)\n[//]: # (keyword|statement_put)\n[//]: # (keyword|statement_switch)\n[//]: # (keyword|statement_match)\n[//]: # (keyword|skill_skill_road_node)\n[//]: # (keyword|skill_skill_road)\n[//]: # (keyword|skill_advanced_driving)\n[//]: # (keyword|constant_#km)\n[//]: # (keyword|constant_#m)\n[//]: # (keyword|constant_#minute)\n[//]: # (keyword|type_path)\n[//]: # (keyword|concept_gis)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_agent_movement)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_transport)\n# Complex Road Network \n\n\n_Author : Patrick Taillandier_\n\nModel to show how to use the driving skill to represent the traffic on a road network generated thanks to shapefiles, with intersections and traffic lights going from red to green to let people move or stop. Two experiments are presented : experiment_2D to display the model in 2D and which better display the orientation of roads and experiment_3D to display the model in 3D.\n\n\nCode of the model : \n\n```\n\nmodel RoadTrafficComplex\n \nglobal {   \n\tbool simple_data  stop;\n\tint time_to_change  ways1;\n\tlist ways2;\n\tbool is_green;\n\trgb color_fire;\n\t\n\taction initialize {\n\t\tif (is_traffic_signal) {\n\t\t\tdo compute_crossing;\n\t\t\tstop<< [];\n\t\t\tif (flip(0.5)) {\n\t\t\t\tdo to_green;\n\t\t\t} else {\n\t\t\t\tdo to_red;\n\t\t\t}\t\n\t\t}\n\t}\n\t\n\taction compute_crossing{\n\t\tif  (length(roads_in) >= 2) {\n\t\t\troad rd0  pts  pts2  45 and ang < 135) or  (ang > 225 and ang < 315) {\n\t\t\t\t\tways2<< road(rd);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tloop rd over: roads_in {\n\t\t\tif not(rd in ways2) {\n\t\t\t\tways1 << road(rd);\n\t\t\t}\n\t\t}\n\t}\n\t\n\taction to_green {\n\t\tstop[0] = time_to_change) { \n\t\t\tcounter ","url":"wiki/Driving-Skill-Road-Traffic-advanced.md"},{"id":"wiki/Driving-Skill-Road-Traffic-simple-(City).md","title":" Simple Road Network ","content":"[//]: # (keyword|operator_as_map)\n[//]: # (keyword|operator_\\:\\:)\n[//]: # (keyword|operator_with_weights)\n[//]: # (keyword|operator_copy)\n[//]: # (keyword|operator_last)\n[//]: # (keyword|operator_max_of)\n[//]: # (keyword|statement_user_command)\n[//]: # (keyword|statement_switch)\n[//]: # (keyword|statement_match)\n[//]: # (keyword|skill_driving)\n[//]: # (keyword|constant_#magenta)\n[//]: # (keyword|type_species)\n[//]: # (keyword|concept_gis)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_agent_movement)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_transport)\n# Simple Road Network \n\n\n_Author : Patrick Taillandier_\n\nModel using shapefiles to create buildings and a road graph, with people going from their living place to their work place depending on the hour. The traffic jam is also taken into account to slow the people agents when they are too much on the same road. The experiment shows a display of the city, with people agents, buildings and roads, a display of the traffic jam occuring on the roads, and a chart display showing two charts : one for the traffic jam coefficients, and an other for the objectives of the people agents.\n\n\nCode of the model : \n\n```\n  \nmodel RoadTrafficCity\n \n   \nglobal {   \n\t\n\t//Shapefiles for the buildings, the roads and the bounds of the environment\n\tfile shape_file_roads parameter: \"Shapefile for the roads:\" category: \"GIS\"  weights_map  weights_map  weights_map  0.025) {\n\t\t\tdraw shape + (coeff_traffic / 4.0) color: #red ;\n\t\t}\n\t} \t\t\n}\n\t\nspecies building  { \n\trgb color ","url":"wiki/Driving-Skill-Road-Traffic-simple-(City).md"},{"id":"wiki/Driving-Skill-Road-Traffic-simple-(Simple-track).md","title":" Easy Road Network ","content":"[//]: # (keyword|operator_with_min_of)\n[//]: # (keyword|operator_select)\n[//]: # (keyword|operator_last)\n[//]: # (keyword|statement_switch)\n[//]: # (keyword|statement_match)\n[//]: # (keyword|skill_driving)\n[//]: # (keyword|type_species)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_agent_movement)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_transport)\n# Easy Road Network \n\n\n_Author : Patrick Taillandier_\n\nModel using shapefiles to create roads using shapefiles with people driving on these roads. The model take into account the number of lanes of the roads.\n\n\nCode of the model : \n\n```\n  \n \nmodel RoadTrafficSimple \n  \nglobal {  \n\tfile shape_file_roads   rls ","url":"wiki/Driving-Skill-Road-Traffic-simple-(Simple-track).md"},{"id":"wiki/Graphs-3D-Graph.md","title":" 3D Graph","content":"[//]: # (keyword|operator_cube)\n[//]: # (keyword|operator_as_distance_graph)\n[//]: # (keyword|operator_degree_of)\n[//]: # (keyword|operator_^)\n[//]: # (keyword|operator_hsb)\n[//]: # (keyword|skill_moving3D)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_skill)\n# 3D Graph\n\n\n_Author : Arnaud Grignard_\n\nModel using a 3D Graph and updating it at each step according to the location and the degree of each sphere. An arc is created between two adjacent spheres. Two different experiments are proposed : one with a dynamic size for the spheres according to their degree, one simpler with no update of the size.\n\n\nCode of the model : \n\n```\n  \n\nmodel graph3D\n\nglobal {\n\tint number_of_agents parameter: 'Number of Agents' min: 1  degreeMax) {\n\t\t\t\tdegreeMax ","url":"wiki/Graphs-3D-Graph.md"},{"id":"wiki/Graphs-Classic-Graph-Generation.md","title":" Graph Generation","content":"[//]: # (keyword|operator_generate_barabasi_albert)\n[//]: # (keyword|operator_generate_watts_strogatz)\n[//]: # (keyword|operator_generate_complete_graph)\n[//]: # (keyword|statement_switch)\n[//]: # (keyword|statement_match)\n[//]: # (keyword|concept_graph)\n# Graph Generation\n\n\n_Author : Patrick Taillandier_\n\nModel which shows how to create three kind of graphs : a scale-free graph, a small-world graph, a complete graph and a complete graph with a radius.\n\n\nCode of the model : \n\n```\n\nmodel classicgraphgeneration\n\nglobal {\n\tgraph the_graph ;\n\tstring graph_type ","url":"wiki/Graphs-Classic-Graph-Generation.md"},{"id":"wiki/Graphs-Graph-Building-From-Agents.md","title":" Graph Generation using Agents","content":"[//]: # (keyword|operator_as_distance_graph)\n[//]: # (keyword|operator_as_intersection_graph)\n[//]: # (keyword|statement_switch)\n[//]: # (keyword|statement_match)\n[//]: # (keyword|concept_graph)\n# Graph Generation using Agents\n\n\n_Author : Patrick Taillandier_\n\nModel which shows how to create a graph using agents of a species as vertices. Two kinds of generations are presented : one where the distance taken into account to link two vertices by an edge, an other where the intersections of two vertices joins these vertices by an edge. \n\n\nCode of the model : \n\n```\n\nmodel graphbuilding\n\nglobal {\n\tgraph the_graph ;\n\tstring graph_builing_type ","url":"wiki/Graphs-Graph-Building-From-Agents.md"},{"id":"wiki/Graphs-Graph-Loading-Layout.md","title":" Graph from DGS File and Layout Changed","content":"[//]: # (keyword|operator_load_graph_from_file)\n[//]: # (keyword|operator_layout)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_load_file)\n[//]: # (keyword|concept_dgs)\n# Graph from DGS File and Layout Changed\n\n\n_Author : Patrick Taillandier_\n\nModel which shows how to load a graph from a DGS File, and change is layout. \n\n\nCode of the model : \n\n```\n\nmodel graphloadinglayout\n\nglobal {\n\tgraph the_graph ;\n\tstring barabasi_file ","url":"wiki/Graphs-Graph-Loading-Layout.md"},{"id":"wiki/Graphs-Graph-Operators.md","title":" Graph Operators","content":"[//]: # (keyword|operator_as_distance_graph)\n[//]: # (keyword|operator_betweenness_centrality)\n[//]: # (keyword|operator_degree_of)\n[//]: # (keyword|operator_nb_cycles)\n[//]: # (keyword|operator_alpha_index)\n[//]: # (keyword|operator_beta_index)\n[//]: # (keyword|operator_gamma_index)\n[//]: # (keyword|operator_connectivity_index)\n[//]: # (keyword|operator_connected_components_of)\n[//]: # (keyword|operator_maximal_cliques_of)\n[//]: # (keyword|operator_biggest_cliques_of)\n[//]: # (keyword|constant_#lightgray)\n[//]: # (keyword|concept_graph)\n# Graph Operators\n\n\n_Author : Patrick Taillandier_\n\nModel to show how to use the different existing operators for the graph species\n\n\nCode of the model : \n\n```\n\nmodel graphoperators\n\nglobal {\n\tgraph the_graph;\n\tlist cliques;\n\tinit {\n\t\tcreate people number: 50;\n\t\t\n\t\t//creation of the graph: all vertices that are at distance <= 20 are connected\n\t\tthe_graph  bc (betweenness_centrality(the_graph));\n\t\tfloat max_centrality ","url":"wiki/Graphs-Graph-Operators.md"},{"id":"wiki/Graphs-Hand-Made-Graph.md","title":" Hand Made Graph","content":"[//]: # (keyword|operator_edge)\n[//]: # (keyword|operator_node)\n[//]: # (keyword|operator_add_node)\n[//]: # (keyword|operator_add_edge)\n[//]: # (keyword|operator_\\:\\:)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_node)\n[//]: # (keyword|concept_edge)\n# Hand Made Graph\n\n\n_Author : Patrick Taillandier_\n\nModel to show how to build a graph from scratch using three ways : by putting a list of edges as parameter of as_edge_graph, by adding a node or an edge manually using facet to or by changing the graph itself after adding a node or an edge. The experiment has two displays : one for the first graph created from the list of edges, an other for the graph creating by adding the nodes and edges manually using add operator.\n\n\nCode of the model : \n\n```\n\n@no_warning\nmodel handMadeGraph\n\nglobal {\n\tgraph the_graph1 ;\n\tgraph the_graph2;\n\t\n\tinit {\n\t\tthe_graph1 ([]);\n\t\t//first way to add nodes and edges\n\t\tthe_graph2 << node({50,50}) ;\n\t\tthe_graph2 << edge({10,10},{90,50});\n\t\t\n\t\t//second way to add nodes and edges\n\t\tthe_graph2 ","url":"wiki/Graphs-Hand-Made-Graph.md"},{"id":"wiki/Graphs-Multigraph.md","title":" Multigraph","content":"[//]: # (keyword|operator_path_between)\n[//]: # (keyword|operator_node)\n[//]: # (keyword|operator_edge)\n[//]: # (keyword|operator_link)\n[//]: # (keyword|type_path)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_load_file)\n[//]: # (keyword|concept_skill)\n# Multigraph\n\n\n_Author : Patrick Taillandier_\n\nThis model shows how to build a graph on which people agents will move with GIS Shapefile, but also to generate an other graph representing the friendship between the people agents, people agents trying to be closer spatially to each other\n\n\nCode of the model : \n\n```\n\nmodel multigraph\n\nglobal {\n\tfile shape_file_in ","url":"wiki/Graphs-Multigraph.md"},{"id":"wiki/Graphs-Shortest-paths.md","title":" ShortestPath","content":"[//]: # (keyword|operator_load_shortest_paths)\n[//]: # (keyword|operator_all_pairs_shortest_path)\n[//]: # (keyword|operator_path_between)\n[//]: # (keyword|operator_paths_between)\n[//]: # (keyword|operator_\\:\\:)\n[//]: # (keyword|statement_save)\n[//]: # (keyword|constant_#cyan)\n[//]: # (keyword|constant_#magenta)\n[//]: # (keyword|type_path)\n[//]: # (keyword|type_matrix)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_load_file)\n[//]: # (keyword|concept_shortest_path)\n[//]: # (keyword|concept_save_file)\n# ShortestPath\n\n\n_Author : Patrick Taillandier_\n\nThis model shows how get the shortest path from one point to another on a graph. The experiment proposes two displays : one to show the shortest path, an other to show the first k shortest paths. \n\n\nCode of the model : \n\n```\n\nmodel ShortestPath\n\nglobal {\n\tfile shape_file_in  k_shortest_paths;\n\tint k  colors (paths_between(road_graph,source::target,k));\t\n\t\t}\n\t}\n}\n\nspecies road  {\n\taspect base {\n\t\tdraw shape color: #black ;\n\t} \n}\n\nexperiment ShortestPath type: gui {\n\tparameter \"number of shortest paths (k)\" var: k min: 1 max: 7;\n\tparameter \"Computed all the shortest paths and save the results\" var: save_shortest_paths;\n\tparameter \"Load the shortest paths from the file\" var: load_shortest_paths;\n\t\n\toutput {\n\t\tdisplay map_shortest_path {\n\t\t\tspecies road aspect: base;\n\t\t\tgraphics \"shortest path\" {\n\t\t\t\tif (shortest_path != nil) {\n\t\t\t\t\tdraw circle(5) at: source color: #green;\n\t\t\t\t\tdraw circle(5) at: target color: #cyan;\n\t\t\t\t\tdraw (shortest_path.shape + 2.0) color: #magenta;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdisplay map_k_shortest_paths {\n\t\t\tspecies road aspect: base;\n\t\t\tgraphics \"k shortest paths\" {\n\t\t\t\tif (shortest_path != nil) {\n\t\t\t\t\tdraw circle(5) at: source color: #green;\n\t\t\t\t\tdraw circle(5) at: target color: #cyan;\n\t\t\t\t\tloop i from: 0 to: length(k_shortest_paths) - 1{\n\t\t\t\t\t\tdraw ((k_shortest_paths[i]).shape + 2.0) color: colors[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n","url":"wiki/Graphs-Shortest-paths.md"},{"id":"wiki/Init-Action-Init-Action.md","title":" InitAction","content":"[//]: # (keyword|operator_user_input)\n# InitAction\n\n\n_Author : Alexis Drogoul_\n\n This simple example shows how to use the _init_ callback action to build a simulation with some parameters, without declaring them as parameters\n\n\nCode of the model : \n\n```\n\nmodel InitAction\n\nglobal {\n\tint agent_number  params ","url":"wiki/Init-Action-Init-Action.md"},{"id":"wiki/Map-comparison-Raster-Map-Comparison.md","title":" Raster Map Comparison","content":"[//]: # (keyword|operator_in)\n[//]: # (keyword|operator_as_matrix)\n[//]: # (keyword|operator_kappa)\n[//]: # (keyword|operator_kappa_sim)\n[//]: # (keyword|operator_fuzzy_kappa)\n[//]: # (keyword|operator_fuzzy_kappa_sim)\n[//]: # (keyword|operator_percent_absolute_deviation)\n[//]: # (keyword|statement_put)\n[//]: # (keyword|statement_using)\n[//]: # (keyword|type_matrix)\n[//]: # (keyword|type_topology)\n[//]: # (keyword|concept_grid)\n[//]: # (keyword|concept_comparison)\n[//]: # (keyword|concept_raster)\n[//]: # (keyword|concept_statistic)\n# Raster Map Comparison\n\n\n_Author : Patrick Taillandier_\n\nThis model shows how to use different comparators to know the accuracy of a prediction model. Four comparators are used :\n- kappa, comparing the map observed and the map simulation ; kappa simulation comparing the initial map, the map observed and the map simulation;\n- fuzzy kappa, comparing the map observed and the map simulation but being more permissive by using fuzzy logic;\n- fuzzy kappa simulation, comparing the map observed, the map simulation and the map initial but being more permissive by using fuzzy logic\n\n\nCode of the model : \n\n```\n\nmodel mapcomparison\n\nglobal {\n\tlist categories  color_cat  fuzzy_categories;\n\tmatrix fuzzy_transitions;\n\tlist nb_per_cat_obs;\n\tlist nb_per_cat_sim;\n\t \n\tinit {\n\t\t//Initialize randomly the category of each cell\n\t\task shuffle(cell) {\n\t\t\tstring neigh_cat  similarity_per_agents ;\n\t\twrite \"kappa(map observed, map simulation, categories): \" + kappa( cell collect (each.cat_observed),cell collect (each.cat),categories);\n\t\twrite \"kappa simulation(map init, map observed, map simulation,categories): \" + kappa_sim( cell collect (each.cat_init), cell collect (each.cat_observed),cell collect (each.cat),categories);\n\t\tusing topology(cell) {\n\t\t\twrite \"fuzzy kappa(map observed, map simulation,categories): \" + fuzzy_kappa(list(cell), cell collect (each.cat_observed),cell collect (each.cat), similarity_per_agents,categories,fuzzy_categories, 10);\n\t\t\twrite \"fuzzy kappa sim(map init, map observed, map simulation,categories): \" + fuzzy_kappa_sim(list(cell), cell collect (each.cat_init), cell collect (each.cat_observed),cell collect (each.cat), similarity_per_agents,categories,fuzzy_transitions, 10);\n\t\t}\n\t\tloop i from: 0 to: length(cell) - 1 {\n\t\t\tint val  neighbours ","url":"wiki/Map-comparison-Raster-Map-Comparison.md"},{"id":"wiki/Map-comparison-Vector-Map-Comparison.md","title":" Vector Map Comparison","content":"[//]: # (keyword|operator_in)\n[//]: # (keyword|operator_as_matrix)\n[//]: # (keyword|operator_kappa)\n[//]: # (keyword|operator_kappa_sim)\n[//]: # (keyword|operator_fuzzy_kappa)\n[//]: # (keyword|operator_fuzzy_kappa_sim)\n[//]: # (keyword|operator_sum)\n[//]: # (keyword|operator_percent_absolute_deviation)\n[//]: # (keyword|statement_put)\n[//]: # (keyword|type_matrix)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_comparison)\n[//]: # (keyword|concept_statistic)\n# Vector Map Comparison\n\n\n_Author : Patrick Taillandier_\n\nThis model shows how to use different comparators to know the accuracy of a prediction model. Four comparators are used :\n- kappa, comparing the map observed and the map simulation ; kappa simulation comparing the initial map, the map observed and the map simulation;\n- fuzzy kappa, comparing the map observed and the map simulation but being more permissive by using fuzzy logic;\n- fuzzy kappa simulation, comparing the map observed, the map simulation and the map initial but being more permissive by using fuzzy logic\nFor each comparator, two comparisons are made : one without taking into account the weights of an area, just computing with each area having the same importance, and an other using weights related to the area of the region\n\n\nCode of the model : \n\n```\n\nmodel mapcomparison\n\nglobal {\n\tlist categories ;\n\tmap color_cat ;\n\tmatrix fuzzy_categories;\n\tmatrix fuzzy_transitions;\n\tlist nb_per_cat_obs;\n\tlist nb_per_cat_sim;\n\tfile data  similarity_per_agents ;\n\t\twrite \"kappa(map observed, map simulation, categories): \" + kappa( areaclc collect (each.obs_cover),areaclc collect (each.sim_cover),categories);\n\t\twrite \"kappa(map observed, map simulation,categories, weights): \" + kappa( areaclc collect (each.obs_cover),areaclc collect (each.sim_cover),categories,areaclc collect (each.shape.area));\n\t\t\n\t\twrite \"kappa simulation(map init, map observed, map simulation, categories): \" + kappa_sim( areaclc collect (each.init_cover), areaclc collect (each.obs_cover),areaclc collect (each.sim_cover),categories);\n\t\twrite \"kappa simulation(map init, map observed, map simulation, categories, weights): \" + kappa_sim( areaclc collect (each.init_cover), areaclc collect (each.obs_cover),areaclc collect (each.sim_cover),categories,areaclc collect (each.shape.area));\n\t\t\n\t\twrite \"fuzzy kappa(map observed, map simulation,categories): \" + fuzzy_kappa(areaclc, areaclc collect (each.obs_cover),areaclc collect (each.sim_cover), similarity_per_agents,categories,fuzzy_categories, 3000);\n\t\twrite \"fuzzy kappa(map observed, map simulation,categories,weights): \" + fuzzy_kappa(areaclc, areaclc collect (each.obs_cover),areaclc collect (each.sim_cover), similarity_per_agents,categories,fuzzy_categories, 3000,areaclc collect (each.shape.area));\n\t\t\n\t\twrite \"fuzzy kappa sim(map init, map observed, map simulation,categories): \" + fuzzy_kappa_sim(areaclc, areaclc collect (each.init_cover), areaclc collect (each.obs_cover),areaclc collect (each.sim_cover), similarity_per_agents,categories,fuzzy_transitions, 3000);\n\t\twrite \"fuzzy kappa sim(map init, map observed, map simulation,categories,weights): \" + fuzzy_kappa_sim(areaclc, areaclc collect (each.init_cover), areaclc collect (each.obs_cover),areaclc collect (each.sim_cover), similarity_per_agents,categories,fuzzy_transitions, 3000,areaclc collect (each.shape.area));\n\t\t\n\t\tloop i from: 0 to: length(areaclc) - 1 {\n\t\t\tint val  area_c  area_shape_c ","url":"wiki/Map-comparison-Vector-Map-Comparison.md"},{"id":"wiki/Multi-Level-Usage-Balls,-Groups-and-Clouds.md","title":" Balls, Groups and Clouds Multilevel Architecture","content":"[//]: # (keyword|operator_towards)\n[//]: # (keyword|operator_sin)\n[//]: # (keyword|operator_at_location)\n[//]: # (keyword|operator_intersects)\n[//]: # (keyword|operator_closest_to)\n[//]: # (keyword|operator_buffer)\n[//]: # (keyword|operator_polygon)\n[//]: # (keyword|operator_in)\n[//]: # (keyword|operator_direction_to)\n[//]: # (keyword|operator_species_of)\n[//]: # (keyword|operator_convex_hull)\n[//]: # (keyword|operator_overlaps)\n[//]: # (keyword|operator_dead)\n[//]: # (keyword|operator_of_generic_species)\n[//]: # (keyword|operator_simple_clustering_by_distance)\n[//]: # (keyword|skill_fsm)\n[//]: # (keyword|statement_state)\n[//]: # (keyword|statement_enter)\n[//]: # (keyword|statement_transition)\n[//]: # (keyword|statement_release)\n[//]: # (keyword|statement_capture)\n[//]: # (keyword|statement_migrate)\n[//]: # (keyword|type_topology)\n[//]: # (keyword|architecture_fsm)\n[//]: # (keyword|concept_multi_level)\n[//]: # (keyword|concept_agent_movement)\n# Balls, Groups and Clouds Multilevel Architecture\n\n\n_Author : _\n\nThis model shows how to use multi-level architecture to group agents, and regroup groups. The operators capture is used to capture an agent by a group and change its species as a species contained by the group and defined in the group species section. The operator release is used to release contained agents and change them into an other species. The experiment shows ball moving randomly, and following other balls. When they are close to each other, they generate a group of balls with its own behavior. A group of group agents generate a cloud in the same way. When the number of balls contained inside the group is too high, the group disappears and releases all its balls repulsively. \n\n\nCode of the model : \n\n```\n\nmodel balls_groups_clouds\n\nglobal { \n\t// Parameters\n\tbool create_group  free_balls  1) {\n\t\t\t//Clustering of the balls according to their distance with at least a minimal number of balls in a group\n\t\t\tlist> satisfying_ball_groups  min_group_member ) ;\n\t\t\t\n\t\t\t\n\t\t\tloop one_group over: satisfying_ball_groups {\n\t\t\t\tcreate group returns: new_groups;\n\t\t\t\t\n\t\t\t\t//Capture by the new groups created of the different balls present in the list one_group\n\t\t\t\task (new_groups at 0) as: group {\n\t\t\t\t\tcapture one_group as: ball_in_group; \n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//The simulation will try to create clouds at each frequence cycle\n\treflex create_clouds when: (create_cloud and ((cycle mod creation_frequency) = 0) ) {\n\t\t//A cloud can be created only using group with a number of balls inside greater than 5% of the total ball number\n\t\tlist candidate_groups  (0.05 * ball_number) );\n\t\t\n\t\t//A cloud can be created also only using group which aren't too far away \n\t\tlist> satisfying_groups = min_cloud_member);\n\t\t\n\t\t//Creation of the different clouds using the groups satisfying both conditions\n\t\tloop one_group over: satisfying_groups {\n\t\t\tcreate cloud returns: rets;\t\t\t\n\t\t\tcloud newCloud  nearby_balls) {\n\t\t\tfloat repulsive_dx  xmax) and !(a_point.y < ymin) and !(a_point.y > ymax) ) ;\n\t\t}\n\t\t \n\t\t//State that will make the agent follows the closest ball if it is not in the chaos state anymore\n\t\tstate follow_nearest_ball initial: true {\n\t\t\tenter {   \n\t\t\t\tcolor  free_balls  (beginning_chaos_time + time_in_chaos_state) ;\n\t\t}\n\t\t\n\t\taspect default {\n\t\t\tdraw ball_shape color: color size: ball_size at:self.location;\n\t\t}\n\t}\n\t\n\t//Species representing the group of balls\n\tspecies group parent: base { \n\t\t\n\t\trgb color  nearby_balls  nearby_free_balls  nearby_groups  target_coms (target.members) ;\n\t\t\t\t\t\tlist released_balls ;\n\t\t\t\t\t\task target {\n\t\t\t\t\t\t\trelease target_coms as: ball in: world returns: released_coms;\n\t\t\t\t\t\t\treleased_balls = bottomright_point.x) and (p.y >= bottomright_point.y) ) {\n\t\t\t\t\tbottomright_point  (environment_bounds.x) {\n\t\t\t\t\tfloat tmp_dx  (environment_bounds.y) {\n\t\t\t\t\tfloat tmp_dy  ( 0.8 * (ball_number) ) ) {\n\t\t\t\tdo disaggregate ;\n\t\t\t}\n\t\t}\n\t\t\n\t\taspect default {\n\t\t\tdraw shape color: color;\n\t\t}\n\t}\n\t\n\t//Species cloud that will be created by an agglomeration of groups.\n\tspecies cloud parent: base {\n\t\tgeometry shape ","url":"wiki/Multi-Level-Usage-Balls,-Groups-and-Clouds.md"},{"id":"wiki/Multi-Level-Usage-Corridor-(Hybrid-vs-ABM).md","title":" Corridor Multi-Level Architecture with Mathematics Model and Agent Based Model","content":"[//]: # (keyword|operator_at_location)\n[//]: # (keyword|operator_towards)\n[//]: # (keyword|statement_capture)\n[//]: # (keyword|statement_release)\n[//]: # (keyword|concept_multi_level)\n[//]: # (keyword|concept_agent_movement)\n# Corridor Multi-Level Architecture with Mathematics Model and Agent Based Model\n\n\n_Author : _\n\nThis model shows how to use multi-level architecture. Two corridors are presented : one which can capture the pedestrians going through it and computing for them the time before releasing them at the end of the corridor, and an other doing nothing, letting the pedestrians moving by themselves in the corridor. \n\n\nCode of the model : \n\n```\n\nmodel pedestrian_corridor_Hybrid_vs_ABM\n\nglobal \n{\n\t\n\t//Parameters of the environment\n\tint environment_width  tobe_captured_pedestrians = (captured_pedestrian (each)).released_time);\n\t\t\n\t\tif !(empty (tobe_released_pedestrians)) \n\t\t{\n\t\t\t\n\t\t\trelease tobe_released_pedestrians as: pedestrian in: world returns: released_pedestrians;\n\t\t\t\n\t\t\tloop rp over: released_pedestrians \n\t\t\t{\n\t\t\t\trp.speed ","url":"wiki/Multi-Level-Usage-Corridor-(Hybrid-vs-ABM).md"},{"id":"wiki/Multi-Level-Usage-Corridor.md","title":" Corridor Multi-Level Architecture","content":"[//]: # (keyword|operator_at_location)\n[//]: # (keyword|operator_towards)\n[//]: # (keyword|statement_capture)\n[//]: # (keyword|statement_release)\n[//]: # (keyword|constant_#pixels)\n[//]: # (keyword|type_topology)\n[//]: # (keyword|concept_multi_level)\n[//]: # (keyword|concept_agent_movement)\n# Corridor Multi-Level Architecture\n\n\n_Author : _\n\nThis model shows how to use multi-level architecture. A corridor can capture pedestrians going from left to right side if they are inside the corridor. This will result in changing their species from pedestrian to captured_pedestrian which will not be displayed. Once they pass enought time to consider they reach the exit of the corridor, they will be released by the corridor agent as pedestrians, letting them been displayed and going to their target. \n\n\nCode of the model : \n\n```\n\nmodel corridor\n\nglobal {\t\n\t//Capture pedestrians parameter to define if wall will capture pedestrians\n\tbool capture_pedestrians  pedestrians  update: list(pedestrian); \n\tfloat start_time = environment_size - corridor_wall_height) ) {\n\t\t\t\tdo move heading: self towards {(environment_size / 2) - (corridor_width / 2), environment_size / 2}; \n\t\t\t} else {\n\t\t\t\tdo move heading: self towards {environment_size / 2, environment_size / 2}; \n\t\t\t}\n\t\t}\n\t\t\n\t\tif( (target_location.x - location.x) <= speed ) { \n\t\t\tdo die;\n\t\t}\n\t}\n\t \n\taspect my_aspect {\n\t\tdraw shape color: pedestrian_color;\n\t}\n}\n\n//Species which represents the corridor\nspecies corridor  {\n\tgeometry shape  tobe_captured_pedestrians = (captured_pedestrian (each)).released_time);\n\t\tif !(empty (tobe_released_pedestrians)) {\n\t\t\trelease tobe_released_pedestrians as: pedestrian in: world {\n\t\t\t\tlocation ","url":"wiki/Multi-Level-Usage-Corridor.md"},{"id":"wiki/Multi-Level-Usage-Predators,-Preys-and-Shelters.md","title":" Multi-Level Architecture with Preys and Predators","content":"[//]: # (keyword|operator_of_species)\n[//]: # (keyword|operator_agents_overlapping)\n[//]: # (keyword|operator_sort_by)\n[//]: # (keyword|operator_towards)\n[//]: # (keyword|operator_dead)\n[//]: # (keyword|operator_at_location)\n[//]: # (keyword|operator_intersects)\n[//]: # (keyword|operator_among)\n[//]: # (keyword|skill_fsm)\n[//]: # (keyword|statement_state)\n[//]: # (keyword|statement_enter)\n[//]: # (keyword|statement_transition)\n[//]: # (keyword|statement_capture)\n[//]: # (keyword|statement_release)\n[//]: # (keyword|architecture_fsm)\n[//]: # (keyword|concept_multi_level)\n[//]: # (keyword|concept_agent_movement)\n# Multi-Level Architecture with Preys and Predators\n\n\n_Author : _\n\nThis model shows how to use multi-level architecture. In this model, prey and predators agents move randomly in the environment. When a prey agent perceive a predator, it flees trying to go to the closest shelters while the predator agent chases it. The shelters capture the prey agents fleeing, changing them into prey_in_shelter species, that predator can't chase during a certain time. They are released after that time in an invisible state so that they can wander in the  environment without being chase by the predator, but also, for a certain time.\n\n\nCode of the model : \n\n```\n\nmodel preys_predators_shelters\n\nglobal { \n\t//Parameters for the prey species\n\trgb prey_color  prey_invisible_max_time );\n\t}\n\t\n\taspect default {\n\t\tdraw  shape color: color;\n\t}\n}\n\n//Species predator which can move using the skill moving\nspecies predator skills: [moving] schedules: shuffle (list (predator)) {\n\tgeometry shape  chased_preys update: (prey) where ( (each.shape intersects shape) and (each.state = 'flee_predator') );\n\t\n\treflex move_around {\n\t\t//do wander speed: shelter_speed; \n\t}\n\t \n\t//Capture all the chased preys inside the shelter and change their species to prey_in_shelter\n\treflex capture_chased_preys when: !(empty (chased_preys)) { \n\t\tcapture chased_preys as: prey_in_shelter {\n\t\t\tstate  to_be_released  prey_in_shelter_max_time );\n\t\t \n\t\trelease to_be_released in: world as: prey { \n\t\t\tstate ","url":"wiki/Multi-Level-Usage-Predators,-Preys-and-Shelters.md"},{"id":"wiki/Multi-simulation-Multi-simulation.md","title":" Multi Simulation","content":"[//]: # (keyword|operator_font)\n[//]: # (keyword|statement_overlay)\n[//]: # (keyword|constant_#pixels)\n[//]: # (keyword|constant_#bold)\n[//]: # (keyword|concept_multi_simulation)\n# Multi Simulation\n\n\n_Author : Patrick Taillandier_\n\nModel to show how to use multi-simulation, i.e. to run several times the same GUI experiment with potentially different parameter sets \n\n\nCode of the model : \n\n```\n\nmodel multi_simulation\n\nglobal {\n\t//definition of three global variables of which the initial values will be used by the first simulation \n\tint nb_agents ","url":"wiki/Multi-simulation-Multi-simulation.md"},{"id":"wiki/Multicriteria-decision-Multicriteria.md","title":" Multicriteria","content":"[//]: # (keyword|operator_^)\n[//]: # (keyword|operator_weighted_means_DM)\n[//]: # (keyword|operator_promethee_DM)\n[//]: # (keyword|operator_electre_DM)\n[//]: # (keyword|operator_evidence_theory_DM)\n[//]: # (keyword|operator_copy)\n[//]: # (keyword|concept_multi_criteria)\n# Multicriteria\n\n\n_Author : Patrick Taillandier_\n\nThis model show how to use different methods of multicriteria analysis to look for the best house. Four methods are used : the Weighted_Means method , the Electre method , the Promethee method  an the Evidence Theory method. Each method uses different criteria with different weights according to the methods used. \n\n\nCode of the model : \n\n```\n\nmodel multicriteria\n\nglobal {\n\tfloat weight_standing  cands = 0) {\n\t\t\task (house at choice) {is_selected_WM  cands = 0) {\n\t\t\task (house at choice) {is_selected_promethee  cands = 0) {\n\t\t\task (house at choice) {is_selected_electre  cands = 0) {\n\t\t\task (house at choice) {is_selected_ET  houses_eval {\n\t\tlist candidates;\n\t\tloop bat over: house {\n\t\t\tlist cand;\n\t\t\tadd bat.standing / 5 to: cand;\n\t\t\tadd ((500000 - bat.price) / 500000) to: cand;\n\t\t\tadd ((100 - (self distance_to bat)) / 100) to: cand;\n\t\t\tadd (bat.shape.area / 15^2) to: cand;\n\t\t\tadd cand to: candidates;\n\t\t}\n\t\treturn candidates;\n\t}\n\t\n}\n\nspecies house {\n\tbool is_selected_WM ","url":"wiki/Multicriteria-decision-Multicriteria.md"},{"id":"wiki/Overlay-Overlay.md","title":" Overlay","content":"[//]: # (keyword|operator_font)\n[//]: # (keyword|statement_overlay)\n[//]: # (keyword|constant_#pixels)\n[//]: # (keyword|constant_#bold)\n[//]: # (keyword|concept_overlay)\n[//]: # (keyword|concept_display)\n[//]: # (keyword|concept_graphic)\n# Overlay\n\n\n_Author : Alexis Drogoul and Patrick Taillandier_\n\nModel to show how to use overlay layers in a display\n\n\nCode of the model : \n\n```\n\nmodel Overlay\n\nglobal\n{\n\t//define the color for each possible type (among \"water\", \"vegetation\" and \"building\")\n\tmap color_per_type ","url":"wiki/Overlay-Overlay.md"},{"id":"wiki/Save-statement-Save_to_CSV.md","title":" Save to CSV","content":"[//]: # (keyword|statement_save)\n[//]: # (keyword|concept_save_file)\n[//]: # (keyword|concept_csv)\n# Save to CSV\n\n\n_Author : Patrick Taillandier_\n\nThis is a model that shows how to save agents inside a CSV File to reuse it later or to keep it.\n\n\nCode of the model : \n\n```\nmodel SavetoCSV\n\nglobal {\n\tinit {\n\t\t//Create all the agents\n\t\tcreate bug number: 50;\n\t}\n\t//Save the agents bug when the cycle is equals to 100\n\treflex save_bug_attribute when: cycle = 100{\n\t\task bug {\n\t\t\t// save the values of the variables name, speed and size to the csv file\n\t\t\tsave [name,speed, size] to: \"../results/bug.csv\" type:\"csv\";\n\t\t}\n\t\t//Pause the model as the data are saved\n\t\tdo pause;\n\t}\n}\n\n//Species that will be saved\nspecies bug skills:[moving]{\n\tfloat size  5) {\n\t\t\tsize ","url":"wiki/Save-statement-Save_to_CSV.md"},{"id":"wiki/Save-statement-Save_to_asc.md","title":" Save to Ascii","content":"[//]: # (keyword|statement_save)\n[//]: # (keyword|concept_save_file)\n[//]: # (keyword|concept_asc)\n# Save to Ascii\n\n\n_Author : Patrick Taillandier_\n\nThis is a model that shows how to save a grid inside a ASCII File to reuse it later or to keep it.\n\n\nCode of the model : \n\n```\n\nmodel SavetoAsc\n\nglobal {\n\tinit {\t\n\t\t//save grid \"grid_value\" attribute into the asc file.\n\t\tsave cell to:\"../results/grid.asc\" type:\"asc\";\n\t}\n}\n\n//Grid that will be saved in the ASC File\ngrid cell width: 50 height: 50 {\n\tfloat grid_value ","url":"wiki/Save-statement-Save_to_asc.md"},{"id":"wiki/Save-statement-Save_to_shapefile.md","title":" Save to Shapefile","content":"[//]: # (keyword|operator_copy)\n[//]: # (keyword|statement_save)\n[//]: # (keyword|concept_save_file)\n[//]: # (keyword|concept_shapefile)\n# Save to Shapefile\n\n\n_Author : Patrick Taillandier_\n\nThis is a model that shows how to save agents inside a Shapefile to reuse it later or to keep it.\n\n\nCode of the model : \n\n```\n\nmodel Savetoshapefile\n\nglobal {\n\tinit {\n\t\tgeometry free_space ","url":"wiki/Save-statement-Save_to_shapefile.md"},{"id":"wiki/Save-statement-Save_to_text.md","title":" Save to Text","content":"[//]: # (keyword|statement_save)\n[//]: # (keyword|concept_save_file)\n[//]: # (keyword|concept_txt)\n# Save to Text\n\n\n_Author : Patrick Taillandier_\n\nThis is a model that shows how to save agents inside a text file to reuse it later or to keep it.\n\n\nCode of the model : \n\n```\n\n\nmodel SavetoText\n\nglobal {\n\tinit {\n\t\t//Create the agents that will be saved in the text file.\n\t\tcreate bug number: 50;\n\t}\n\t\n\t//Reflex saving the agents every 10 steps. \n\treflex save_data when: every(10){\n\t\t//save the following text into the given text file. Note that each time the save statement is used, a new line is added at the end of the file.\n\t\tsave (\"cycle:\" + cycle + \", mean size: \" + mean(bug collect each.size)) to: \"../results/data.txt\";\n\t}\n\t//Reflex that will pause the simulation when the number of cycles reach 100.\n\treflex end_simulation when: cycle = 100 {\n\t\tdo pause;\n\t}\n}\n\n//Species bug that will be saved using the skill moving\nspecies bug skills:[moving]{\n\tfloat size  5) {\n\t\t\tsize ","url":"wiki/Save-statement-Save_to_text.md"},{"id":"wiki/Spatial-Operators-Geometry-discretization.md","title":" Discretization of Topology","content":"[//]: # (keyword|operator_to_squares)\n[//]: # (keyword|operator_to_rectangles)\n[//]: # (keyword|operator_triangulate)\n[//]: # (keyword|operator_points_on)\n[//]: # (keyword|operator_voronoi)\n[//]: # (keyword|concept_topology)\n[//]: # (keyword|concept_spatial_computation)\n[//]: # (keyword|concept_spatial_transformation)\n# Discretization of Topology\n\n\n_Author : Patrick Taillandier_\n\nA model which shows how to use the different convert topologies operators : to_square, to_rectangle, points_on, triangulate, voronoi.\n\n\nCode of the model : \n\n```\n\nmodel discretization\n\nglobal \n{\n\t//Geometry that will be used for each display : a circle\n\tgeometry init_geom ","url":"wiki/Spatial-Operators-Geometry-discretization.md"},{"id":"wiki/Spatial-Operators-Spatial-Operators-(Examples).md","title":" Spatial Operators","content":"[//]: # (keyword|operator_scaled_by)\n[//]: # (keyword|operator_rotated_by)\n[//]: # (keyword|operator_intersects)\n[//]: # (keyword|operator_inter)\n[//]: # (keyword|operator_convex_hull)\n[//]: # (keyword|type_topology)\n[//]: # (keyword|concept_topology)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_spatial_computation)\n[//]: # (keyword|concept_spatial_transformation)\n# Spatial Operators\n\n\n_Author : Patrick Taillandier_\n\nA model which shows how to use spatial operators like rotated_by, scaled_by and convex_hull\n\n\nCode of the model : \n\n```\nmodel example_spatial_operators\n\nglobal {\n\t// Parameters for the shapefiles\n\tfile shape_file_name_init   dying_size) or (shape intersects world.shape.contour)) {\n\t\t\tdo die; \n\t\t}\n\t\t\t\n\t}\n\t\n\t\n\t//Reflex to change the shape of the agent intersects an other agent and create a convex hull of the shape of the new agent resulting in the intersection of the shapes of the agent and an other one\n\treflex crossover when: ( shape.area > crossover_size ) and ( nb_last_rep > time_wthout_co ) { \n\t\tint nb_partners   list_people  crossover_size ) and ( p . nb_last_rep > time_wthout_co ) and (shape intersects p.shape) {\n\t\t\t\tnb_partners  minimum_size ) {\n\t\t\t\t\tnb_last_rep ","url":"wiki/Spatial-Operators-Spatial-Operators-(Examples).md"},{"id":"wiki/Spatial-Operators-Topologies.md","title":" Spatial Operators","content":"[//]: # (keyword|operator_closest_to)\n[//]: # (keyword|operator_of_species)\n[//]: # (keyword|operator_agents_at_distance)\n[//]: # (keyword|operator_simple_clustering_by_distance)\n[//]: # (keyword|operator_\\:\\:)\n[//]: # (keyword|operator_hierarchical_clustering)\n[//]: # (keyword|operator_path_to)\n[//]: # (keyword|constant_#silver)\n[//]: # (keyword|constant_#grey)\n[//]: # (keyword|type_path)\n[//]: # (keyword|concept_topology)\n[//]: # (keyword|concept_grid)\n# Spatial Operators\n\n\n_Author : Patrick Taillandier_\n\nA model which shows how to use spatial operator, allowing the user to change the parameter operator in the experiment to test the different operators and see the results\n\n\nCode of the model : \n\n```\n\nmodel gridfilter\n\nglobal {\n\tmap> theDummies;\n\tmap> theCells;\n \tstring parameter_operator > clusteredDummies >(dummy simple_clustering_by_distance 30);\n\t\tloop a_list over: clusteredDummies\n\t\t{\n\t\t\trgb colorList ([a_dummy::colorList]) at:\"cluster_distance\" to:theDummies;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tadd colorList at:a_dummy to:theDummies[\"cluster_distance\"];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\taction test_hierarchical_clustering {\n\t\t//Can be used for other topologies by adding using(topology(cell)) for example\n\t\tlist> clusteredDummies >(dummy hierarchical_clustering 10);\n\t\t\n\t\tloop a_list over: clusteredDummies\n\t\t{\n\t\t\trgb colorList ([a_dummy::colorList]) at:\"cluster_hierarchical\" to:theDummies;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tadd colorList at:a_dummy to:theDummies[\"cluster_hierarchical\"];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\taction create_dummy_agents {\n\t\tcreate dummy with: [location :: {5,5}];\n\t\tcreate dummy with: [location :: {8,9}];\n\t\tcreate dummy with: [location :: {14,6}];\n\t\tcreate dummy with: [location :: {35,55}];\n\t\tcreate dummy with: [location :: {25,75}];\n\t\tcreate dummy with: [location :: {56,80}];\n\t\tcreate dummy with: [location :: {10,70}];\n\t\tcreate dummy with: [location :: {80,8}];\n\t\tcreate dummy with: [location :: {34,78}];\n\t\tcreate dummy with: [location :: {67,32}];\n\t\tloop i from: 0 to: length(dummy) - 1 {\n\t\t\task dummy[i] {id ","url":"wiki/Spatial-Operators-Topologies.md"},{"id":"wiki/Spatial-Operators-spatialinterpolation.md","title":" Spatial Interpolation","content":"[//]: # (keyword|operator_^)\n[//]: # (keyword|operator_IDW)\n[//]: # (keyword|statement_put)\n[//]: # (keyword|concept_topology)\n[//]: # (keyword|concept_grid)\n[//]: # (keyword|concept_spatial_computation)\n# Spatial Interpolation\n\n\n_Author : Patrick Taillandier_\n\nA model which shows how to use spatial interpolation\n\n\nCode of the model : \n\n```\n\nmodel spatialinterpolation\n\nglobal {\n\tmap pts;\n\tfloat max_val; \n\tfloat min_val ; \n\t\n\t//power parameter\n\tint power  results_shape (IDW(cell_shape, pts, power));\n\t\t\n\t\t//setting of the value and color of each cell\n\t\task cell_shape {\n\t\t\tval  results_location (IDW(cell_location collect each.location, pts, power));\n\t\t\t\n\t\task cell_location {\n\t\t\tval ","url":"wiki/Spatial-Operators-spatialinterpolation.md"},{"id":"wiki/Statistics-Regression.md","title":" Regression","content":"[//]: # (keyword|operator_as_matrix)\n[//]: # (keyword|operator_build)\n[//]: # (keyword|operator_predict)\n[//]: # (keyword|statement_put)\n[//]: # (keyword|type_regression)\n[//]: # (keyword|type_matrix)\n[//]: # (keyword|concept_regression)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_statistic)\n# Regression\n\n\n_Author : Patrick Taillandier_\n\nA model which shows how to use the regression \n\n\nCode of the model : \n\n```\n\nmodel example_regression\n\nglobal {\n\t//Regression variable that will store the function\n\tregression location_fct;\n\tfloat x_val  instances ","url":"wiki/Statistics-Regression.md"},{"id":"wiki/Unit-Test-Basic-Example.md","title":" Example of Unit Test","content":"[//]: # (keyword|operator_any)\n[//]: # (keyword|operator_is)\n[//]: # (keyword|statement_setup)\n[//]: # (keyword|statement_test)\n[//]: # (keyword|statement_assert)\n[//]: # (keyword|concept_test)\n# Example of Unit Test\n\n\n_Author : Benoit Gaudou_\n\nA model which shows how to use the unit test to show the possible errors you have to go in the Views, Preferences, Simulation, in \"Errors\" Uncheck \"stop at the first error\", to show all the errors.\n\n\nCode of the model : \n\n```\n\nmodel test_unitTest_framework\n\nglobal {\n\tinit {\n\t\tcreate test_species number: 1;\n\t}\n}\n\n//Species to do the different unit tests\nspecies test_species {\n\tint a  aa;\n\t \tassert aa[0] raises: \"error\";\n\t \tassert aa[0] raises: \"\";\n\t \tassert a raises: \"error\";\n\t}\n}\n\n\nexperiment new type: gui {}\n```\n","url":"wiki/Unit-Test-Basic-Example.md"},{"id":"wiki/Unit-Test-Two-Species-(Example).md","title":" Example of Unit Test","content":"[//]: # (keyword|statement_test)\n[//]: # (keyword|statement_assert)\n[//]: # (keyword|concept_test)\n# Example of Unit Test\n\n\n_Author : Benoit Gaudou_\n\nThe model creates 10 agents at initialization, kills one agent at each step. \n * With the assert we want to ensure that the test_species1 population always contains more than 5 agents. \n * After four steps the population is below 6 so Errors are raisen. You have to go in the Views, Preferences, Simulation, in \"Errors\" Uncheck \"stop at the first error\", to show all the errors.\n\n\nCode of the model : \n\n```\n\n\nmodel test_unitTest_framework\n\nglobal {\n\tinit {\n\t\t//Create agents : one to test the population of test_species1 and the test_species1 agents\n\t\tcreate test_species2 number: 1;\n\t\tcreate test_species1 number: 10;\n\t}\n\t//At each step, one of the agents of test_species1 dies\n\treflex one_should_die {\n\t\task one_of(test_species1){\n\t\t\tdo die;\n\t\t}\n\t}\n}\n\n\nspecies test_species2 {\n\t//The step is computed each step to test if there is still at least 5 agents of test_species1\n\ttest t1 {\n     \tassert (length(test_species1) > 5) equals: true;\n\t}\n}\n\nspecies test_species1 {\n}\n\n\nexperiment new type: gui {}\n```\n","url":"wiki/Unit-Test-Two-Species-(Example).md"},{"id":"wiki/User-Interaction-Event-Layer.md","title":" Event Feature","content":"[//]: # (keyword|statement_event)\n[//]: # (keyword|concept_gui)\n# Event Feature\n\n\n_Author : Arnaud Grignard & Patrick Taillandier_\n\nModel which shows how to use the event layer to trigger an action according to an event occuring in the display. The experiment has two displays : one for the changing color event, one for the changing shape event.\n\n\nCode of the model : \n\n```\nmodel event_layer_model\n\n\nglobal\n{\n\n//number of agents to create\n\tint nbAgent  selected_agents)\n\t{\n\n\t//change the color of the agents\n\t\task selected_agents\n\t\t{\n\t\t\tcolor  selected_agents)\n\t{\n\t\task selected_agents\n\t\t{\n\n\t\t//change the bool attribute is_square to change the shape in the display\n\t\t\tis_square ","url":"wiki/User-Interaction-Event-Layer.md"},{"id":"wiki/User-Interaction-Moving-Agents.md","title":" MovingAgents","content":"[//]: # (keyword|operator_at_location)\n[//]: # (keyword|operator_union)\n[//]: # (keyword|operator_inside)\n[//]: # (keyword|operator_intersects)\n[//]: # (keyword|operator_contains)\n[//]: # (keyword|operator_font)\n[//]: # (keyword|statement_event)\n[//]: # (keyword|constant_#burlywood)\n[//]: # (keyword|constant_#olive)\n[//]: # (keyword|constant_#bold)\n[//]: # (keyword|constant_#wheat)\n[//]: # (keyword|constant_#darkseagreen)\n[//]: # (keyword|constant_#firebrick)\n[//]: # (keyword|type_font)\n[//]: # (keyword|concept_gui)\n# MovingAgents\n\n\n_Author : drogoul_\n\nShows how to move agents using two event layers : \nClick to grab an group of agents, click again to drop them. Press the keys \"k\" to kill the agents in the selection, and \"d\" to duplicate them.\n\n\nCode of the model : \n\n```\nmodel MovingAgents\n\nglobal\n{\n\tlist moved_agents ;\n\tgeometry shape  selectedAgent, point mousePosition)\n\t{\n\t\task moved_agents\n\t\t{\n\t\t\tdo die;\n\t\t}\n\n\t\tmoved_agents ([]);\n\t}\n\n\taction duplicate (list selectedAgent, point mousePosition)\n\t{\n\t\tgeometry available_space  selectedAgent, point mousePosition)\n\t{\n\t\tif (empty(moved_agents))\n\t\t{\n\t\t\tlist selected_agents ([]);\n\t\t}\n\n\t}\n\n\taction move (list selectedAgent, point mousePosition)\n\t{\n\t\tcan_drop  other_agents  0)\n\t\t\t\t{\n\t\t\t\t\trgb c1  0)\n\t\t\t\t{\n\t\t\t\t\trgb c1 ","url":"wiki/User-Interaction-Moving-Agents.md"},{"id":"wiki/User-Interaction-User-Command.md","title":" User Command","content":"[//]: # (keyword|operator_user_input)\n[//]: # (keyword|statement_user_command)\n[//]: # (keyword|concept_gui)\n# User Command\n\n\n_Author : Patrick Taillandier_\n\nModel which shows how to use the user commands in order to create agents in the display. The user has two possibilities : create one agent, or create a number of agents, with the possibility to change their shape and a pink color. The user also has the possibility to change the color and the shapes of the agents.\n\n\nCode of the model : \n\n```\n\nmodel usercommand\n\nglobal {\n\t//Number of agent to initialise\n\tint nbAgent ","url":"wiki/User-Interaction-User-Command.md"},{"id":"wiki/User-Interaction-User-Control-Architecture.md","title":" User Command","content":"[//]: # (keyword|architecture_user_only)\n[//]: # (keyword|operator_among)\n[//]: # (keyword|statement_user_panel)\n[//]: # (keyword|statement_transition)\n[//]: # (keyword|statement_user_command)\n[//]: # (keyword|statement_user_input)\n[//]: # (keyword|skill_user_only)\n[//]: # (keyword|concept_gui)\n[//]: # (keyword|concept_architecture)\n# User Command\n\n\n_Author : Patrick Taillandier_\n\nModel which shows how to use the advanced user control, to create and kill agents. \n\n\nCode of the model : \n\n```\n\n\nmodel user_control\n\nglobal {\n\n\tint nbAgent ","url":"wiki/User-Interaction-User-Control-Architecture.md"},{"id":"wiki/Agent-movement.md","title":" Agent movement","content":"# Agent movement\n\nThis sub-section is composed of the following models :\n\n* [ Movement of an agent on different paths](references#AgentmovementFollowPath)\n\n* [ Follow Weighted Network](references#AgentmovementFollowWeightedNetwork(Agents))\n\n* [ Directed Graph Model](references#AgentmovementGotoDirectedGraph)\n\n* [ Movement on a Grid of Cells](references#AgentmovementGotoGrid)\n\n* [ Shortest Path Computation on a Graph](references#AgentmovementGotoNetwork)\n\n* [ Movement on a Graph created by Polygons](references#AgentmovementGotoPolygon)\n\n* [ Movement in 3D](references#AgentmovementMoving3D)\n\n","url":"wiki/Agent-movement.md"},{"id":"wiki/Batch.md","title":" Batch","content":"# Batch\n\nThis sub-section is composed of the following models :\n\n* [ Model using Batch mode](references#BatchBatch)\n\n","url":"wiki/Batch.md"},{"id":"wiki/Charts.md","title":" Charts","content":"# Charts\n\nThis sub-section is composed of the following models :\n\n* [Ant Foraging (Charts examples)](references#ChartsAntForaging(Chartsexamples))\n\n","url":"wiki/Charts.md"},{"id":"wiki/Clustering.md","title":" Clustering","content":"# Clustering\n\nThis sub-section is composed of the following models :\n\n* [ Clustering of agents by K Means and DBScan](references#ClusteringClustering)\n\n* [ Clustering of agents by their distance ](references#ClusteringSpatialClustering)\n\n","url":"wiki/Clustering.md"},{"id":"wiki/Co-model-Usage.md","title":" Co-model Usage","content":"# Co-model Usage\n\nThis sub-section is composed of the following models :\n\n* [comodel with mixed behaviors ](references#Co-modelUsagecomodel_mix_behaviors)\n\n* [comodel_with_the_coupling](references#Co-modelUsagecomodel_mutate_population)\n\n* [Simple syntax demonstration of Comodeling ](references#Co-modelUsagecomodel_simple)\n\n* [comodel_with_the_coupling](references#Co-modelUsagecomodel_with_the_coupling)\n\n","url":"wiki/Co-model-Usage.md"},{"id":"wiki/Color.md","title":" Color","content":"# Color\n\nThis sub-section is composed of the following models :\n\n* [Creating color and sort cubes by color](references#ColorBubbleSort3D)\n\n* [Color defined by choosing a Color Brewer](references#ColorColorBrewer)\n\n* [RGB color to XYZ position](references#ColorRGBtoXYZ)\n\n","url":"wiki/Color.md"},{"id":"wiki/Data-Importation.md","title":" Data Importation","content":"# Data Importation\n\nThis sub-section is composed of the following models :\n\n* [3D shapefile loading](references#DataImportation3DshapefileLoading)\n\n* [ESRI ASCII to grid model](references#DataImportationASCfileImport)\n\n* [Contour Lines Import](references#DataImportationContourLines)\n\n* [CSV to Agents Model](references#DataImportationCSVAgents)\n\n* [Convertion of CSV data to Matrix](references#DataImportationCSVFileLoading)\n\n* [DXF to Agents Model](references#DataImportationDXFAgents)\n\n* [GeoTIFF file to Grid of Cells ](references#DataImportationGEOTIFFfileImport)\n\n* [Shapefiles Import and Save](references#DataImportationGISExport)\n\n* [ASCII File to DEM Representation](references#DataImportationGridDEM)\n\n* [OBJ File to Geometry](references#DataImportationOBJfiledrawing)\n\n* [Complex Object Loading](references#DataImportationOBJfileloading)\n\n* [OSM file to Agents](references#DataImportationOSMLoading)\n\n* [Raster File in a Grid of cells](references#DataImportationRasterImageImport)\n\n* [Raster File and Shapefiles Import](references#DataImportationRasterImagesandshapefileImport)\n\n","url":"wiki/Data-Importation.md"},{"id":"wiki/Database-Usage.md","title":" Database Usage","content":"# Database Usage\n\nThis sub-section is composed of the following models :\n\n* [SQLConnection](references#DatabaseUsageConnectionTest)\n\n* [ create_agents_Insert_result_MySQL](references#DatabaseUsageCreateAgentsandInsertinMySQL)\n\n* [ Simple Species MySql](references#DatabaseUsageSimpleSpeciesMySQL)\n\n* [ Simple SQL Command in SQLIte](references#DatabaseUsageSimpleSQLCommandinSQLite)\n\n* [ Agents from Database in MSSQL](references#DatabaseUsageAgentsfromDatabaseinMSSQL)\n\n* [ Agents from Database in MySQL](references#DatabaseUsageAgentsfromDatabaseinMySQL)\n\n* [ Agents from Database in PostGIS](references#DatabaseUsageAgentsfromDatabaseinPostGIS)\n\n* [ Agents from Database in SQLite ](references#DatabaseUsageAgentsfromDatabaseinSQLite)\n\n* [ Agents from Database in SQLite QGIS](references#DatabaseUsageAgentsfromDatabaseinSQLite_QGis)\n\n* [ Agents to Database in MSSQL](references#DatabaseUsageAgentstoDatabaseinMSSQL)\n\n* [ Agents to Database in MySQL](references#DatabaseUsageAgentstoDatabaseinMySQL)\n\n* [ Agents to Database in PostGIS](references#DatabaseUsageAgentstoDatabaseinPostGIS)\n\n* [ Agents to Database in SQLite](references#DatabaseUsageAgentstoDatabaseinSQLite)\n\n* [ CreateBuildingTableMSSQL](references#DatabaseUsageCreateSpatialTableinMSSQL)\n\n* [ CreateBuildingTableMySQL](references#DatabaseUsageCreateSpatialTableinMySQL)\n\n* [ CreateBuildingTablePostGIS](references#DatabaseUsageCreateSpatialTableinPostGIS)\n\n* [ CreateBuildingTableSQLite](references#DatabaseUsageCreateSpatialTableinSQLite)\n\n","url":"wiki/Database-Usage.md"},{"id":"wiki/Date-and-Time.md","title":" Date and Time","content":"# Date and Time\n\nThis sub-section is composed of the following models :\n\n* [Use of the Date variables](references#DateandTimeDatetypeandrealdates)\n\n* [Simple definition of time property in a model](references#DateandTimeSimpleTimedefinition)\n\n","url":"wiki/Date-and-Time.md"},{"id":"wiki/Driving-Skill.md","title":" Driving Skill","content":"# Driving Skill\n\nThis sub-section is composed of the following models :\n\n* [OSM Loading Driving](references#DrivingSkillOSMLoadingDriving)\n\n* [Complex Road Network ](references#DrivingSkillRoadTrafficadvanced)\n\n* [Simple Road Network ](references#DrivingSkillRoadTrafficsimple(City))\n\n* [Easy Road Network ](references#DrivingSkillRoadTrafficsimple(Simpletrack))\n\n","url":"wiki/Driving-Skill.md"},{"id":"wiki/Graphs.md","title":" Graphs","content":"# Graphs\n\nThis sub-section is composed of the following models :\n\n* [3D Graph](references#Graphs3DGraph)\n\n* [Graph Generation](references#GraphsClassicGraphGeneration)\n\n* [Graph Generation using Agents](references#GraphsGraphBuildingFromAgents)\n\n* [Graph from DGS File and Layout Changed](references#GraphsGraphLoadingLayout)\n\n* [Graph Operators](references#GraphsGraphOperators)\n\n* [Hand Made Graph](references#GraphsHandMadeGraph)\n\n* [Multigraph](references#GraphsMultigraph)\n\n* [ShortestPath](references#GraphsShortestpaths)\n\n","url":"wiki/Graphs.md"},{"id":"wiki/Init-Action.md","title":" Init Action","content":"# Init Action\n\nThis sub-section is composed of the following models :\n\n* [InitAction](references#InitActionInitAction)\n\n","url":"wiki/Init-Action.md"},{"id":"wiki/Map-comparison.md","title":" Map comparison","content":"# Map comparison\n\nThis sub-section is composed of the following models :\n\n* [Raster Map Comparison](references#MapcomparisonRasterMapComparison)\n\n* [Vector Map Comparison](references#MapcomparisonVectorMapComparison)\n\n","url":"wiki/Map-comparison.md"},{"id":"wiki/Multi-Level-Usage.md","title":" Multi-Level Usage","content":"# Multi-Level Usage\n\nThis sub-section is composed of the following models :\n\n* [Balls, Groups and Clouds Multilevel Architecture](references#Multi-LevelUsageBalls,GroupsandClouds)\n\n* [Corridor Multi-Level Architecture with Mathematics Model and Agent Based Model](references#Multi-LevelUsageCorridor(HybridvsABM))\n\n* [Corridor Multi-Level Architecture](references#Multi-LevelUsageCorridor)\n\n* [Multi-Level Architecture with Preys and Predators](references#Multi-LevelUsagePredators,PreysandShelters)\n\n","url":"wiki/Multi-Level-Usage.md"},{"id":"wiki/Multi-simulation.md","title":" Multi-simulation","content":"# Multi-simulation\n\nThis sub-section is composed of the following models :\n\n* [Multi Simulation](references#Multi-simulationMulti-simulation)\n\n","url":"wiki/Multi-simulation.md"},{"id":"wiki/Multicriteria-decision.md","title":" Multicriteria decision","content":"# Multicriteria decision\n\nThis sub-section is composed of the following models :\n\n* [Multicriteria](references#MulticriteriadecisionMulticriteria)\n\n","url":"wiki/Multicriteria-decision.md"},{"id":"wiki/Overlay.md","title":" Overlay","content":"# Overlay\n\nThis sub-section is composed of the following models :\n\n* [Overlay](references#OverlayOverlay)\n\n","url":"wiki/Overlay.md"},{"id":"wiki/Save-statement.md","title":" Save statement","content":"# Save statement\n\nThis sub-section is composed of the following models :\n\n* [Save to Ascii](references#SavestatementSave_to_asc)\n\n* [Save to CSV](references#SavestatementSave_to_CSV)\n\n* [Save to Shapefile](references#SavestatementSave_to_shapefile)\n\n* [Save to Text](references#SavestatementSave_to_text)\n\n","url":"wiki/Save-statement.md"},{"id":"wiki/Spatial-Operators.md","title":" Spatial Operators","content":"# Spatial Operators\n\nThis sub-section is composed of the following models :\n\n* [Discretization of Topology](references#SpatialOperatorsGeometrydiscretization)\n\n* [Spatial Operators](references#SpatialOperatorsSpatialOperators(Examples))\n\n* [Spatial Interpolation](references#SpatialOperatorsspatialinterpolation)\n\n* [Spatial Operators](references#SpatialOperatorsTopologies)\n\n","url":"wiki/Spatial-Operators.md"},{"id":"wiki/Statistics.md","title":" Statistics","content":"# Statistics\n\nThis sub-section is composed of the following models :\n\n* [Regression](references#StatisticsRegression)\n\n","url":"wiki/Statistics.md"},{"id":"wiki/Unit-Test.md","title":" Unit Test","content":"# Unit Test\n\nThis sub-section is composed of the following models :\n\n* [Example of Unit Test](references#UnitTestBasicExample)\n\n* [Example of Unit Test](references#UnitTestTwoSpecies(Example))\n\n","url":"wiki/Unit-Test.md"},{"id":"wiki/User-Interaction.md","title":" User Interaction","content":"# User Interaction\n\nThis sub-section is composed of the following models :\n\n* [Event Feature](references#UserInteractionEventLayer)\n\n* [MovingAgents](references#UserInteractionMovingAgents)\n\n* [User Command](references#UserInteractionUserCommand)\n\n* [User Command](references#UserInteractionUserControlArchitecture)\n\n","url":"wiki/User-Interaction.md"},{"id":"wiki/Syntax-models-Casting.md","title":" Casting Syntax","content":"[//]: # (keyword|operator_sample)\n[//]: # (keyword|operator_\\:\\:)\n[//]: # (keyword|statement_user_command)\n[//]: # (keyword|constant_#m)\n[//]: # (keyword|type_pair)\n[//]: # (keyword|concept_cast)\n# Casting Syntax\n\n\n_Author : A. Drogoul & P. Taillandier_\n\ndifferent ways of transforming objects and agents in GAML.\n\n\nCode of the model : \n\n```\n\nmodel Casting\n\nspecies to_int {\n\tinit {\n\t\twrite sample(int(1));\n\t\twrite sample(int(1.0));\n\t\twrite sample(int(\"1\"));\n\t\twrite sample(int(\"1.0\"));\n\t\twrite sample(int(°pink));\n\t\twrite sample(int(true));\n\t\twrite sample(int(self));\n\t\twrite sample(int([]));\n\t\twrite sample(int([0]));\n\t\twrite sample(int({0,0,0}));\n\t\twrite sample(int(0::0));\n\t\twrite sample(int([0::0]));\n\t\twrite sample(int(#AABBCC));\n\t\twrite sample(int(°meter));\t\t\t\t\n\t}\n}\n\n\nspecies to_float{\n\tinit {\n\t\twrite sample(float(1));\n\t\twrite sample(float(1.0));\n\t\twrite sample(float(\"1\"));\n\t\twrite sample(float(\"1.0\"));\n\t\twrite sample(float(°pink));\n\t\twrite sample(float(true));\n\t\twrite sample(float(self));\n\t\twrite sample(float([]));\n\t\twrite sample(float([0]));\n\t\twrite sample(float(0::0));\n\t\twrite sample(float([0::0]));\n\t\twrite sample(float({0,0,0}));\n\t\twrite sample(float(#AABBCC));\n\t\twrite sample(float(°meter));\t\t\t\t\n\t}\n}\n\n\nspecies to_string{\n\tinit {\n\t\twrite sample(string(1));\n\t\twrite sample(string(1.0));\n\t\twrite sample(string(\"1\"));\n\t\twrite sample(string(\"1.0\"));\n\t\twrite sample(string(°pink));\n\t\twrite sample(string(true));\n\t\twrite sample(string(self));\n\t\twrite sample(string([]));\n\t\twrite sample(string([0]));\n\t\twrite sample(string({0,0,0}));\n\t\twrite sample(string(#AABBCC));\n\t\twrite sample(string(°meter));\t\t\t\t\n\t}\n}\n\nspecies to_point{\n\tinit {\n\t\twrite sample(point(1));\n\t\twrite sample(point(1.0));\n\t\twrite sample(point(\"1\"));\n\t\twrite sample(point(\"1.0\"));\n\t\twrite sample(point(°pink));\n\t\twrite sample(point(true));\n\t\twrite sample(point(self));\n\t\twrite sample(point([]));\n\t\twrite sample(point([0]));\n\t\twrite sample(point(0::0));\n\t\twrite sample(point([0::0]));\n\t\twrite sample(point({0,0,0}));\n\t\twrite sample(point(#AABBCC));\n\t\twrite sample(point(°meter));\t\t\t\t\n\t}\n}\nspecies to_list{\n\tinit {\n\t\twrite sample(list(1));\n\t\twrite sample(list(1.0));\n\t\twrite sample(list(\"1\"));\n\t\twrite sample(list(\"1.0\"));\n\t\twrite sample(list(°pink));\n\t\twrite sample(list(true));\n\t\twrite sample(list(self));\n\t\twrite sample(list([]));\n\t\twrite sample(list([0]));\n\t\twrite sample(list(0::0));\n\t\twrite sample(list([0::0]));\t\n\t\twrite sample(list({0,0,0}));\n\t\twrite sample(list(#AABBCC));\n\t\twrite sample(list(°meter));\t\t\t\t\n\t}\n}\nspecies to_pair{\n\tinit {\n\t\twrite sample(pair(1));\n\t\twrite sample(pair(1.0));\n\t\twrite sample(pair(\"1\"));\n\t\twrite sample(pair(\"1.0\"));\n\t\twrite sample(pair(°pink));\n\t\twrite sample(pair(true));\n\t\twrite sample(pair(self));\n\t\twrite sample(pair([]));\n\t\twrite sample(pair([0]));\n\t\twrite sample(pair(0::0));\n\t\twrite sample(pair([0::0]));\n\t\twrite sample(pair({0,0,0}));\n\t\twrite sample(pair(#AABBCC));\n\t\twrite sample(pair(°meter));\t\t\t\t\n\t}\n}\nspecies to_map{\n\tinit {\n\t\twrite sample(map(°meter));\n\t\twrite sample(map(1));\n\t\twrite sample(map(1.0));\n\t\twrite sample(map(\"1\"));\n\t\twrite sample(map(\"1.0\"));\n\t\twrite sample(map(°pink));\n\t\twrite sample(map(true));\n\t\twrite sample(map(self));\n\t\twrite sample(map([]));\n\t\twrite sample(map([0]));\n\t\twrite sample(map(0::0));\n\t\twrite sample(map([0::0]));\n\t\twrite sample(map({0,0,0}));\n\t\twrite sample(map(#AABBCC));\n\t\twrite sample(map(1));\t\t\t\t\n\t}\n}\nexperiment Casting type: gui{\n\tuser_command \"to int\" {create to_int;}\n\tuser_command \"to float\" {create to_float;}\n\tuser_command \"to string\" {create to_string;}\n\tuser_command \"to point\" {create to_point;}\n\tuser_command \"to list\" {create to_list;}\n\tuser_command \"to pair\" {create to_pair;}\n\tuser_command \"to map\" {create to_map;}\n}\n```\n","url":"wiki/Syntax-models-Casting.md"},{"id":"wiki/Syntax-models-Lists.md","title":" Lists","content":"[//]: # (keyword|operator_list_with)\n[//]: # (keyword|operator_sample)\n[//]: # (keyword|operator_any)\n[//]: # (keyword|operator_last)\n[//]: # (keyword|operator_among)\n[//]: # (keyword|operator_contains)\n[//]: # (keyword|operator_contains_all)\n[//]: # (keyword|operator_contains_any)\n[//]: # (keyword|operator_reverse)\n[//]: # (keyword|operator_norm)\n[//]: # (keyword|operator_group_by)\n[//]: # (keyword|operator_even)\n[//]: # (keyword|operator_index_by)\n[//]: # (keyword|operator_index_of)\n[//]: # (keyword|operator_last_index_of)\n[//]: # (keyword|operator_sort_by)\n[//]: # (keyword|operator_with_min_of)\n[//]: # (keyword|operator_with_max_of)\n[//]: # (keyword|operator_min_of)\n[//]: # (keyword|operator_max_of)\n[//]: # (keyword|operator_copy_between)\n[//]: # (keyword|operator_inter)\n[//]: # (keyword|operator_union)\n[//]: # (keyword|operator_interleave)\n[//]: # (keyword|operator_select)\n[//]: # (keyword|operator_remove_duplicates)\n[//]: # (keyword|statement_trace)\n[//]: # (keyword|statement_put)\n[//]: # (keyword|statement_remove)\n[//]: # (keyword|statement_user_command)\n[//]: # (keyword|concept_list)\n[//]: # (keyword|concept_loop)\n# Lists\n\n\n_Author : Alexis Drogoul_\n\nExamples of the syntax and various operators used to manipulate the 'list' data type. Read the comments and run the model to get a better idea on how to use lists in GAML. \n\n\nCode of the model : \n\n```\n\nmodel Lists\n\n/* Insert your model definition here */\n\nspecies declaring_list_attributes {\n\t\n\t/**\n\t * Declarations of list attributes\n\t */\n\t // The simplest declaration identifies empty_list as a list that can contain any type of objects. \n\t // Its default value will be [] (the empty list) if it is not initialized.\n\tlist empty_list;\n\t// To provide it with an initial value, use the ' [nil,nil,nil,nil,nil,nil,nil,nil,nil,nil]\n\t// to fill them with a given initial value, use the 'list_with' operator\n\tlist list_of_size_10_with_0  [0,0,0,0,0,0,0,0,0,0]\n\t\n\t// lists can be declared so that they only accept a given type of contents.\n\t// For instance, empty_list_of_int will only accept integer elements\n\tlist empty_list_of_int ;\n\t\n\t// the value passed to 'list_with' is verified and casted to the contents type of the list if necessary\n\tlist list_of_int_size_10_filled_with_string(list_with(10,'1')); // list_of_int_size_10_filled_with_string is filled with the casting of '1' to int, i.e. 1\n\tlist list_of_string_size_10_filled_with_string  list_of_int_with_init_of_string (['10', '20']); // => [10,20]\n\tlist list_of_float_with_init_of_string (list_of_string_size_10_filled_with_string); // => [1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0]\n\t// When the casting is not obvious, the default value is used\n\tlist list_of_float_with_impossible_casting (['A','B']); \n\t// lists can of course contain lists\n\tlist list_of_lists  recasted_list_with_int (untyped_list); //=> [5,5,0]\n\n\t\n\tinit {\n\t\twrite \"\";\n\t\twrite \"== DECLARING LISTS ==\";\n\t\twrite \"\";\n\t\twrite sample(empty_list);\n\t\twrite sample(explicit_empty_list);\n\t\twrite sample(list_of_size_10);\n\t\twrite sample(list_of_size_10_with_0);\n\t\twrite sample(empty_list_of_int);\n\t\twrite sample(list_of_int_size_10_filled_with_string);\n\t\twrite sample(list_of_string_size_10_filled_with_string);\n\t\twrite sample(list_of_int_with_init_of_string);\n\t\twrite sample(list_of_float_with_init_of_string);\n\t\twrite sample(list_of_float_with_impossible_casting);\n\t\twrite sample(list_of_lists);\n\t\twrite sample(untyped_list);\n\t\twrite sample(recasted_list_with_int);\n\t\twrite \"\";\n\t\t// Declaring temporary variables of type list follows the same pattern\n\t\t// but there are fewer facets available (notably, \"size:\" or \"fill_with:\").\n\t\tlist list_of_string  my_agents  my_names  l1  l2  5));\n\t\twrite sample(l1 count (each > 5));\n\t\twrite sample(l1 group_by (even(each)));\n\t\twrite sample(l2 index_by (each + \"_index\"));\n\t\twrite sample(l1 index_of 100);\n\t\twrite sample(l2 last_index_of 'is');\n\t\twrite sample(l2 sort_by each);\n\t\twrite sample(l2 sort_by length(each));\n\t\twrite sample(l2 first_with (first(each)  = 'o'));\n\t\twrite sample(l2 where (length(each) = 2) );\n\t\twrite sample(l2 with_min_of (length(each)));\n\t\twrite sample(l2 with_max_of (length(each)));\n\t\twrite sample(l2 min_of (length(each)));\n\t\twrite sample(l2 max_of (length(each))); \n\t\twrite sample(copy_between(l2,1,3));\n\t\twrite sample(copy_between(l2, 1, length(l2) - 1));\n\t}\n}\n\nspecies combining_lists {\n\tlist l1  l2 >([[1,2,3]]));\n\t\twrite sample(l1);\n\t\twrite sample(l2);\n\t\twrite sample(l1 + l2);\n\t\twrite sample(l1 - l2);\n\t\twrite sample(l1 inter l2);\n\t\twrite sample(l1 union l2);\n\t\twrite sample(interleave ([l1,l2]));\n\t\tlist l3 (l1 + l2);\n\t\twrite \"list l3 );\n\t}\n}\n\nspecies modifying_lists {\n\tinit {\n\t\twrite \"\";\n\t\twrite \"== MODIFYING LISTS ==\";\n\t\twrite \"\";\n\t\ttrace {\n\t\t// Besides assigning a new value to a list, lists can be manipulated using\n\t\t// the \"add\", \"remove\" and \"put\" statements. \n\t\t// Let's define an empty list supposed to contain integer elements\n\t\tlist l1;\n\t\t// and add some stuff to it using \"add\"\n\t\tadd 1 to: l1;\n\t\tadd 2 to: l1;\n\t\tadd 3 to: l1;\n\t\twrite sample(l1);\n\t\t// the same can be done with the compact syntax introduced in GAMA 1.6 for \"add\"\n\t\tl1 ([\"15\", 16.0]));\n\t\twrite sample(l1);\n\t\t// elements are by default added to the end of the list\n\t\t// but they can be introduced at specific positions using the \"at:\" facet\n\t\tadd 0 to: l1 at: 0;\n\t\t// or\n\t\tl1[0] +- first(l1);\n\t\twrite(sample(l1));\n\t\t// To remove all occurrences of a specific element, \"all:\" (or \">>-\") can be used\n\t\t// For instance:\n\t\tl1 >>- 2;\n\t\tl1 >>- 1;\n\t\t// or, written using the long syntactic form\n\t\tremove all: 1 from: l1;\n\t\twrite sample(l1);\n\t\t// To remove all the elements present in a given container, the same syntax can be used\n\t\tl1 >>- [0,3];\n\t\twrite (\"After l1 >>- [0,3] : \" + sample( l1));\n\t\t// By all means, l1 should now be empty! Let's fill it again\n\t\tloop times: 20 {\n\t\t\tl1 - 2;\n\t\twrite(\"After l1[] >- 2 : \" + sample(l1));\n\t\t// Removing several indexes can be written using a syntax similar to the one used\n\t\t// for removing values\n\t\tl1[] >>- [1,2,4];\n\t\twrite(\"After l1[] >>- [1,2,4] : \" + sample(l1));\n\t\t// Random things to try out\n\t\t// Using casting back and forth: all number now vary from 1000 to 31000\n\t\tl1 (l1 collect (string(each) + \"1000\"));\n\t\twrite sample(l1);\n\t\t// Removing elements based on a criteria\n\t\tl1 >>- l1 select (each > 20000);\n\t\t// Removing duplicates\n\t\tl1  l1  l3 (my_agents);\n\t\twrite sample(l3);\n\t\t// Powerful filter expressions can be built by combining the various 'iterator' operators\n\t\tl3 (my_agents where even(int(each))) collect (\"Agent \" + each + \" has an even id\");\n\t\twrite sample(l3);\n\t}\n}\n\nexperiment Lists type: gui {\n\tuser_command \"Declaring lists\" {create declaring_list_attributes;}\n\tuser_command \"Accessing lists\" {create accessing_list_elements;}\n\tuser_command \"Combining lists\" {create combining_lists;}\n\tuser_command \"Modifying lists\" {create modifying_lists;}\n\tuser_command \"Looping on lists\" {create looping_on_lists;}\t\n}\n```\n","url":"wiki/Syntax-models-Lists.md"},{"id":"wiki/Syntax-models-Maps.md","title":" Maps","content":"[//]: # (keyword|operator_sample)\n[//]: # (keyword|operator_any)\n[//]: # (keyword|operator_as_map)\n[//]: # (keyword|operator_\\:\\:)\n[//]: # (keyword|operator_index_by)\n[//]: # (keyword|operator_group_by)\n[//]: # (keyword|operator_last)\n[//]: # (keyword|operator_among)\n[//]: # (keyword|operator_contains)\n[//]: # (keyword|operator_contains_all)\n[//]: # (keyword|operator_contains_any)\n[//]: # (keyword|operator_reverse)\n[//]: # (keyword|operator_norm)\n[//]: # (keyword|operator_even)\n[//]: # (keyword|operator_index_of)\n[//]: # (keyword|operator_last_index_of)\n[//]: # (keyword|operator_sort_by)\n[//]: # (keyword|operator_with_min_of)\n[//]: # (keyword|operator_with_max_of)\n[//]: # (keyword|operator_min_of)\n[//]: # (keyword|operator_max_of)\n[//]: # (keyword|operator_inter)\n[//]: # (keyword|operator_union)\n[//]: # (keyword|operator_select)\n[//]: # (keyword|statement_trace)\n[//]: # (keyword|statement_put)\n[//]: # (keyword|statement_remove)\n[//]: # (keyword|statement_user_command)\n[//]: # (keyword|concept_map)\n[//]: # (keyword|concept_loop)\n# Maps\n\n\n_Author : Alexis Drogoul_\n\nExamples of the syntax and various operators used to manipulate the 'map' data type. Read the comments and run the model to get a better idea on how to use maps in GAML. \n\n\nCode of the model : \n\n```\n\nmodel Maps\n\n/* Maps is a data structure consisting of a list of pair where each key is unique */\n\nspecies declaring_map_attributes {\n\t\n\t/**\n\t * Declarations of map attributes\n\t */\n\t // The simplest declaration identifies empty_map as a map that can contain any type of objects. \n\t // Its default value will be [] (the empty list/map) if it is not initialized.\n\tmap empty_map;\n\t// To provide it with a literal initial value, use the '([1,2,3,4]);\n\t// maps can be declared so that they only accept a given type of keys and values\n\t// For instance, empty_map_of_int will accept string keys and integer values\n\tmap empty_map_of_int;\n\t// The appropriate casting is realized if the map is initialized with a list of values\n\tmap map_of_int_with_init_of_string (['10', '20']); // => ['10'::10,'20'::20]\n\t// or with another map\n\tmap map_of_float_with_init_of_map (map_initialized_with_list); \n\t// When the casting is not obvious, the default values are used\n\t// Here, the list is first casted to return pairs, and they are casted to pair\n\tmap map_of_float_with_impossible_casting (['A','B']); \n\t// maps can of course contain maps\n\tmap map_of_maps (['A'::[], 'B'::[]]);\n\t// untyped maps can contain heterogeneous objects\n\tmap untyped_map  recasted_map_with_int_and_string (untyped_map); //=> [5,5,0]\n\n\t\n\tinit {\n\t\twrite \"\";\n\t\twrite \"== DECLARING MAPS ==\";\n\t\twrite \"\";\n\t\twrite sample(empty_map);\n\t\twrite sample(explicit_empty_map);\n\t\twrite sample(empty_map_of_int);\n\t\twrite sample(explicit_filled_map);\n\t\twrite sample(map_initialized_with_list);\n\t\twrite sample(map_of_int_with_init_of_string);\n\t\twrite sample(map_of_float_with_init_of_map);\n\t\twrite sample(map_of_float_with_impossible_casting);\n\t\twrite sample(map_of_maps);\n\t\twrite sample(untyped_map);\n\t\twrite sample(recasted_map_with_int_and_string);\n\t\twrite \"\";\n\t\t// Declaring temporary variables of type map follows the same pattern\n\t\tmap map_of_string  my_agents (test_species);\n\t\twrite sample(my_agents);\n\t\t// Some special casting operations are applied to specific types, like agents (returns a copy of their attributes)\n\t\twrite sample(map(any(my_agents)));\n\t\t// The 'as_map(pair)' iterator operator also provides a way to build more complex maps\n\t\twrite sample(list(\"This is a string\") as_map (length(each)::each));\n\t\t// As well as \"group_by\" or \"index_by\"\n\t\twrite sample(my_agents index_by (each distance_to {0,0}));\n\t\twrite sample([1,2,3,4,5,6,7] group_by ((each mod 3) = 0));\n \t}\n}\n\nspecies test_species{}\n\nspecies accessing_map_elements {\n\tmap l1 ([1,2,3,4,5,6,7,8,9,10]);\n\tmap l2  5));\n\t\twrite sample(l1 count (each > 5));\n\t\twrite sample(l1 group_by (even(each)));\n\t\twrite sample(l2 index_by (each + \"_index\"));\n\t\twrite sample(l1 index_of 100);\n\t\twrite sample(l2 last_index_of 'is');\n\t\twrite sample(l2 sort_by each);\n\t\twrite sample(l2 sort_by length(each));\n\t\twrite sample(l2 first_with (first(each)  = 'o'));\n\t\twrite sample(l2 where (length(each) = 2) );\n\t\twrite sample(l2 with_min_of (length(each)));\n\t\twrite sample(l2 with_max_of (length(each)));\n\t\twrite sample(l2 min_of (length(each)));\n\t\twrite sample(l2 max_of (length(each)));\n\t}\n}\n\nspecies combining_maps {\n\tmap l1 ([1,2,3,4,5,6,7,8,9,10]);\n\tmap l2 ([1,3,5,7,9]);\n\tinit {\n\n\t\twrite \"\";\n\t\twrite \"== COMBINING MAPS ==\";\n\t\twrite \"\";\n\t\twrite sample(l1);\n\t\twrite sample(l2);\n\t\twrite sample(l1 + l2);\n\t\twrite sample(l1 - l2);\n\t\twrite sample(l1 inter l2);\n\t\twrite sample(l1 union l2);\n\t\tmap l3 (l1 + l2);\n\t\twrite \"map l3  m1 ([15::\"15\", 16::16.0]);\n\t\twrite sample(m1);\n\t\t// elements are by default added to the map while their keys are unique\n\t\t// So, what about replacing some elements once they have been added ?\n\t\t// \"put\" can be used for that purpose\n\t\tput -2 at: 0 in: m1;\n\t\t// or, more simply:\n\t\tm1[0] -\" form) can be used\n\t\t// WARNING: this form operation on the *values* of the map (i.e. it will remove the first pair\n\t\t// whose value = 0\n\t\tremove 0 from: m1;\n\t\t// it can also be written\n\t\tm1 >- 0;\n\t\twrite(sample(m1));\n\t\t// To remove all occurrences of pairs with a specific value, \"all:\" (or \">>-\") can be used\n\t\t// For instance:\n\t\tm1 >>- 2;\n\t\t// or, written using the long syntactic form\n\t\tremove 1 from: m1 all: true;\n\t\twrite sample(m1);\n\t\t// To remove keys instead, the same syntax can be used, but on the keys of the map (i.e. map[])\n\t\tm1[] >- 1; // This will remove the (unique) pair whose key = 1\n\t\t// The equivalent long syntax is\n\t\tremove key: 1 from: m1;\n\t\t// To remove a set of keys, the following syntax can be used\n\t\tm1[] >>- [2,3,4];\n \t\t// And to remove all the keys present in a given map (using the 'keys' attribute)\n\t\tm1[] >>- m1.keys;\n\t\twrite sample(m1);\n\t\t// By all means, m1 should now be empty! Let's fill it again\n\t\tint i >- m1 select (each > 1001);\n\t\twrite(sample(m1));\n\t}\n\n\t}\n\t\n}\n\nspecies looping_on_maps {\n\tinit {\n\t\twrite \"\";\n\t\twrite \"== LOOPING ON MAPS ==\";\n\t\twrite \"\";\n\t\t// Besides iterator operators (like \"collect\", \"where\", etc.), which provide \n\t\t// functional iterations (i.e. filters), one can loop over maps using the imperative\n\t\t// statement 'loop'\n\t\tlist strings  l1  map_of_agents (my_agents);\n\t\twrite(sample(map_of_agents));\n\t\tl2 ","url":"wiki/Syntax-models-Maps.md"},{"id":"wiki/Syntax-models-Syntax-(1.6).md","title":" Syntax","content":"[//]: # (keyword|operator_list_with)\n[//]: # (keyword|operator_diff)\n[//]: # (keyword|operator_select)\n[//]: # (keyword|operator_any)\n[//]: # (keyword|operator_union)\n[//]: # (keyword|skill_fsm)\n[//]: # (keyword|type_path)\n[//]: # (keyword|statement_equation)\n[//]: # (keyword|statement_\\=)\n[//]: # (keyword|statement_solve)\n[//]: # (keyword|statement_state)\n[//]: # (keyword|statement_put)\n[//]: # (keyword|statement_remove)\n[//]: # (keyword|architecture_fsm)\n[//]: # (keyword|constant_#m)\n[//]: # (keyword|constant_#sec)\n[//]: # (keyword|constant_#pixels)\n[//]: # (keyword|concept_attribute)\n[//]: # (keyword|concept_ternary)\n[//]: # (keyword|concept_equation)\n[//]: # (keyword|concept_action)\n[//]: # (keyword|concept_container)\n[//]: # (keyword|concept_list)\n# Syntax\n\n\n_Author : Alexis Drogoul_\n\nAn overview of the new syntactic constructs that have been introduced in GAMA 1.6\n\n\nCode of the model : \n\n```\n\n@no_warning\nmodel syntax\n\n/**\n * The global section can now sport skills and control, just like other agents. \n * The example below shows a potentially moving world that can be controlled by a finite state machine.\n */\nglobal skills: [moving] control: fsm {\n\n/**\n * EQUATIONS\n */ \n\tfloat x;\n\tfloat y;\n\tfloat t;\n\tequation eq {\n\t\tdiff(x, t) = x / 2;\n\t\tdiff(y, t) = x + y * 2;\n\t}\n\n\treflex solving {solve eq step: 1 method: rk4;}\n\n\t/** \n * ATTRIBUTES\n */\n\n// Attributes can be declared in different ways, ranging from \"classic\"...\n\tlist a1 const: true  a3  f \" / \"function:\" \n\tint b1 -> { 100 + length(a1) };\n\tint b2 function: { 100 + length(a1) };\n\t// ... or using a block (like a statement -- note the absence of semi-column at the end)\n\tint b3 {\n\t\t100 + length(a1)\n\t}\n\tstate first_state initial: true {\n\t//...\n\n\t}\n\tinit {\n\t\tcreate species0 number: 20;\n\t}\n\t\n\n\t/**\n\t * UNITS\n\t */\n// The usage of units is improved ( \"#\" being replaced by \"°\"), and they can be combined\n\tfloat c  dummy1 (int a  spec_with_location  shapes (file(\"something.shp\"));\n\n\t\t// If we suppose val1, val2, etc. are defined in the shape file\n\t\tfloat max  l - 1;\n\t\tgeom >- \"type\";\n\t\tany(species0)[] >- \"name\"; // removes the \"name\" attribute from a random agent. Can be dangerous in some cases... \n\n\t\t// Setting/putting a value\n\t\tput \"a\" at: 'key' in: m;\n\t\tput 1 at: 0 in: l;\n\t\t// ... can now be written\n\t\tm['key']  ll  j ? i : j;\n\t}\n\n\tlist filter (container my_agents) {\n\t\treturn my_agents where (each.location = nil);\n\t}\n\n\t/**\n\t  * USE OF OPERATORS \n\t  */\n\treflex operators {\n\n\t// All the operators can now be written using a function-like form\n\t// It is true for unary operators (as before)\n\t\tbool a  sup ) { return false; }\n\t\t//\t\treturn a >= sup ? false : a > inf; \n\t\t// }\n\t\tbool e1 ","url":"wiki/Syntax-models-Syntax-(1.6).md"},{"id":"wiki/Syntax-models.md","title":" Syntax models","content":"# Syntax models\n\nThis sub-section is composed of the following models :\n\n* [Casting Syntax](references#SyntaxmodelsCasting)\n\n* [Lists](references#SyntaxmodelsLists)\n\n* [Maps](references#SyntaxmodelsMaps)\n\n* [Syntax](references#SyntaxmodelsSyntax(1.6))\n\n","url":"wiki/Syntax-models.md"},{"id":"wiki/Ants-(Foraging-and-Sorting)-Ant-Foraging-(Charts-examples).md","title":" Ant Foraging (Charts examples)","content":"[//]: # (keyword|architecture_fsm)\n[//]: # (keyword|operator_min_of)\n[//]: # (keyword|operator_sort)\n[//]: # (keyword|operator_last)\n[//]: # (keyword|operator_contains)\n[//]: # (keyword|statement_state)\n[//]: # (keyword|statement_transition)\n[//]: # (keyword|statement_diffuse)\n[//]: # (keyword|statement_datalist)\n[//]: # (keyword|skill_fsm)\n[//]: # (keyword|constant_#violet)\n[//]: # (keyword|constant_#purple)\n[//]: # (keyword|concept_gui)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_chart)\n[//]: # (keyword|concept_grid)\n[//]: # (keyword|concept_diffusion)\n# Ant Foraging (Charts examples)\n\n\n_Author : _\n\nToy Model ant using the question of how ants search food and use pheromons to return to their nest once they did find food. In this model, the charts are particularly used.\n\n\n![F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\Ants-10.png](F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\Ants-10.png)\n\n![F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\ChartHisto-10.png](F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\ChartHisto-10.png)\n\n![F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\ChartHistoList-10.png](F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\ChartHistoList-10.png)\n\n![F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\ChartHistoListList-10.png](F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\ChartHistoListList-10.png)\n\n![F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\ChartPie-10.png](F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\ChartPie-10.png)\n\n![F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\ChartPieList-10.png](F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\ChartPieList-10.png)\n\n![F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\ChartScatter-10.png](F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\ChartScatter-10.png)\n\n![F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\ChartScatterHistory-10.png](F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\ChartScatterHistory-10.png)\n\n![F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\ChartScatterList-10.png](F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\ChartScatterList-10.png)\n\n![F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\ChartSerie-10.png](F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\ChartSerie-10.png)\n\n![F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\ChartSerieList-10.png](F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\ChartSerieList-10.png)\n\n![F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\ChartSeriesListList-10.png](F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\ChartSeriesListList-10.png)\n\n![F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\Cyclevalues-10.png](F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\Cyclevalues-10.png)\n\n![F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\Dispscaleoption-10.png](F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Ants (Foraging and Sorting)\\Ants (Foraging and Sorting) Ant Foraging (Charts examples)\\Dispscaleoption-10.png)\n\nCode of the model : \n\n```\nmodel ants\n\nglobal {\n\t//Number of ants\n\tint ants_number  0)? °blue : ((road < 0.001)? rgb ([100,100,100]) : ((road > 2)? °white : ((road > 0.5)? (C00CC00) : ((road > 0.2)? (C009900) : (C005500)))))) update: isNestLocation ? °violet:((food > 0)? °blue : ((road < 0.001)? rgb ([100,100,100]) : ((road > 2)? °white : ((road > 0.5)? (C00CC00) : ((road > 0.2)? (C009900) : (C005500)))))) ;\n\tint food  list_places  0)) > 0  {\n\t\t\treturn (list_places first_with (each.food > 0)) ;\n\t\t} else {\n\t\t\t\tint min_nest   0 {\n\t\t\tdo pick ;\n\t\t}\n\t\ttransition to: followingRoad when: place.road > 0.05 ;\n\t}\n\t//State to carry food to the nest once the food is found\n\tstate carryingFood {\n\t\tdo goto target: center ;\n\t\ttransition to: wandering when: place.isNestLocation { \n\t\t\tdo drop ;\n\t\t}\n\t}\n\t//State to follow a road \n\tstate followingRoad {\n\t\tlocation  0 {\n\t\t\tdo pick ;\n\t\t}\n\t\ttransition to: wandering when: (place.road < 0.05) ;\n\t}\n\taspect text {\n\t\tif use_icons {\n\t\t\tdraw  hasFood ? file(ant_shape_full) : file(ant_shape_empty) rotate: heading at: location size: {7,5} ;\n\t\t} else {\n\t\t\tdraw circle(1.0) empty: !hasFood color: rgb ('orange') ;\n\t\t}\n\t\tif display_state {\n\t\t\tdraw state at: location + {-3,1.5} color: °white size: 0.8 ;\n\t\t}\n\t}\n\taspect default {\n\t\tdraw circle(1.0) empty: !hasFood color: #orange ; \n\t}\n}\nexperiment Ant type: gui {\n\t//Parameters to play with  in the gui\n\tparameter 'Number of ants:' var: ants_number category: 'Model' ;\n\tparameter 'Evaporation of the signal (unit/cycle):' var: evaporation_per_cycle category: 'Model' ;\n\tparameter 'Rate of diffusion of the signal (%/cycle):' var: diffusion_rate category: 'Model' ;\n\tparameter 'Use icons for the agents:' var: use_icons category: 'Display' ;\n\tparameter 'Display state of agents:' var: display_state category: 'Display' ;\n\n\tlist> nbants statesnames categnames> nbantsbydist> xyval nlgridsize/20*d) and ((each distance_to center)> nbants statesnames categnames> nbantsbydist> xyval nlgridsize/20*d) and ((each distance_to center)","url":"wiki/Ants-(Foraging-and-Sorting)-Ant-Foraging-(Charts-examples).md"},{"id":"wiki/Ants-(Foraging-and-Sorting)-Ant-Foraging-(Classic).md","title":" Ant Foraging (Classic)","content":"[//]: # (keyword|architecture_fsm)\n[//]: # (keyword|operator_min_of)\n[//]: # (keyword|operator_sort)\n[//]: # (keyword|operator_last)\n[//]: # (keyword|operator_font)\n[//]: # (keyword|statement_state)\n[//]: # (keyword|statement_transition)\n[//]: # (keyword|statement_diffuse)\n[//]: # (keyword|skill_fsm)\n[//]: # (keyword|constant_#zoom)\n[//]: # (keyword|constant_#plain)\n[//]: # (keyword|constant_#sienna)\n[//]: # (keyword|constant_#brown)\n[//]: # (keyword|constant_#darkgoldenrod)\n[//]: # (keyword|concept_gui)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_grid)\n[//]: # (keyword|concept_diffusion)\n# Ant Foraging (Classic)\n\n\n_Author : _\n\nToy Model ant using the question of how ants search food and use pheromons to return to their nest once they did find food. This model is considered as the classic one.\n\n\nCode of the model : \n\n```\nmodel ants\n\nglobal {\n\t//Number of ants\n\tint ants_number  neighbours  0)? °brown : ((road < 0.001)? #darkgoldenrod: ((road > 2)? °white : ((road > 0.5)? (C00CC00) : ((road > 0.2)? (C009900) : (C005500)))))) update: isNestLocation ? °sienna:((food > 0)? °brown : ((road < 0.001)?#darkgoldenrod : ((road > 2)? °white : ((road > 0.5)? (C00CC00) : ((road > 0.2)? (C009900) : (C005500)))))) ;\n\tint food  list_places  0)) > 0  { \n\t\t\treturn (list_places first_with (each.food > 0)) ;\n\t\t} else {\n\t\t\t\tint min_nest   0 {\n\t\t\t\n\t\t\t \n\t\t\tdo pick ;\n\t\t}\n\t\ttransition to: followingRoad when: place.road > 0.05 ; \n\t}\n\t//State to carry food to the nest once it has been found\n\tstate carryingFood {\n\t\tdo goto target: center ;\n\t\ttransition to: wandering when: place.isNestLocation { \n\t\t\tdo drop ;\n\t\t}\n\t}\n\t//State to follow a pheromon road once it has been found\n\tstate followingRoad {\n\t\tlocation  0 {\n\t\t\tdo pick ;\n\t\t}\n\t\ttransition to: wandering when: (place.road < 0.05) ;\n\t}\n\taspect text {\n\t\tif use_icons {\n\t\t\tdraw  hasFood ? file(ant_shape_full) : file(ant_shape_empty) rotate: heading at: location size: {8,5} ;\n\t\t} else {\n\t\t\tdraw circle(1.0) empty: !hasFood color: rgb ('orange') ;\n\t\t}\n\t\tif display_state {\n\t\t\tdraw state at: location + {-3,1.5} color: °white font: font(\"Helvetica\", 14 * #zoom, #plain) perspective:true;\n\t\t}\n\t} \n\taspect default {\n\t\tdraw circle(1.0) empty: !hasFood color: #orange ; \n\t}           \n}\n\nexperiment Ant type: gui {\n\tparameter 'Number of ants:' var: ants_number category: 'Model' ;\n\tparameter 'Evaporation of the signal (unit/cycle):' var: evaporation_per_cycle category: 'Model' ;\n\tparameter 'Rate of diffusion of the signal (%/cycle):' var: diffusion_rate category: 'Model' ;\n\tparameter 'Use icons for the agents:' var: use_icons category: 'Display' ;\n\tparameter 'Display state of agents:' var: display_state category: 'Display' ;\n\toutput {\n\t\tdisplay Ants type: opengl  {\n\t\t\tgrid ant_grid ;\n\t\t\tspecies ant aspect: text ;\n\t\t}\n\t}\n}\n\n\n```\n","url":"wiki/Ants-(Foraging-and-Sorting)-Ant-Foraging-(Classic).md"},{"id":"wiki/Ants-(Foraging-and-Sorting)-Ant-Foraging-(Complex).md","title":" Ant Foraging (Complex)","content":"[//]: # (keyword|architecture_fsm)\n[//]: # (keyword|operator_round)\n[//]: # (keyword|operator_sort_by)\n[//]: # (keyword|operator_last)\n[//]: # (keyword|operator_font)\n[//]: # (keyword|operator_distance_between)\n[//]: # (keyword|operator_with_precision)\n[//]: # (keyword|statement_state)\n[//]: # (keyword|statement_transition)\n[//]: # (keyword|statement_diffuse)\n[//]: # (keyword|statement_agents)\n[//]: # (keyword|statement_overlay)\n[//]: # (keyword|statement_inspect)\n[//]: # (keyword|statement_exhaustive)\n[//]: # (keyword|statement_permanent)\n[//]: # (keyword|statement_genetic)\n[//]: # (keyword|skill_fsm)\n[//]: # (keyword|constant_#zoom)\n[//]: # (keyword|constant_#bold)\n[//]: # (keyword|constant_#plain)\n[//]: # (keyword|constant_#darkgray)\n[//]: # (keyword|constant_#pixels)\n[//]: # (keyword|constant_#darkgreen)\n[//]: # (keyword|type_topology)\n[//]: # (keyword|concept_gui)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_grid)\n[//]: # (keyword|concept_batch)\n[//]: # (keyword|concept_diffusion)\n# Ant Foraging (Complex)\n\n\n_Author : _\n\nToy Model ant using the question of how ants search food and use pheromons to return to their nest once they did find food. Two experiments are proposed to show how to use batch : Batch and Genetic.\n\n\nCode of the model : \n\n```\nmodel ants\n\nglobal {\n\t//Evaporation value per cycle\n\tfloat evaporation_per_cycle  food_places  0) ? food_color : ((road < 0.001) ? background : rgb(#009900) + int(road * 5))) update: is_nest ? nest_color : ((food > 0) ?\n\tfood_color : ((road < 0.001) ? background : rgb(#009900) + int(road * 5)));\n\tint food  0)) > 0 {\n\t\t\treturn point(list_places first_with (each.food > 0));\n\t\t} else {\n\t\t\tlist_places  0) and ((each distance_to center) > (self distance_to center)))) sort_by (each.road);\n\t\t\treturn point(last(list_places));\n\t\t}\n\n\t}\n\t//Reflex to drop food once the ant is in the nest\n\treflex drop when: has_food and (ant_grid(location)).is_nest {\n\t\tdo drop();\n\t}\n\t//Reflex to pick food when there is one at the same location\n\treflex pick when: !has_food and (ant_grid(location)).food > 0 {\n\t\tdo pick(1);\n\t}\n\t//Initial state to make the ant wander \n\tstate wandering initial: true {\n\t\tdo wander(amplitude: 90);\n\t\tfloat pr  0.05) and (pr < 4);\n\t}\n\t//State to carry food once it has been found\n\tstate carryingFood {\n\t\tdo goto(target: center);\n\t\ttransition to: wandering when: !has_food;\n\t}\n\t//State to follow a pheromon road if once has been found\n\tstate followingRoad {\n\t\tpoint next_place  0.5 or pos <= 0) {\n\t\t\tinc  0) or (each.road > 0) or (each.is_nest));\n\t\t\tspecies ant position: { pos, pos } size: quadrant_size aspect: icon;\n\t\t\tgrid ant_grid lines: #darkgray position: { 0.5, 0 } size: quadrant_size;\n\t\t\tspecies ant position: { 0.5, 0 } size: quadrant_size aspect: info;\n\t\t}\n\t}\n}\n//Complete experiment that will inspect all ants in a table\nexperiment Complete type: gui {\n\tparameter 'Number:' var: ants_number init: 100 unit: 'ants' category: 'Environment and Population';\n\tparameter 'Grid dimension:' var: gridsize init: 100 unit: '(number of rows and columns)' category: 'Environment and Population';\n\tparameter 'Number of food depots:' var: number_of_food_places init: 5 min: 1 category: 'Environment and Population';\n\n\t// Experimentator\n\n\tinit {\n\t\twrite \"Experimentator agent running \" + self;\n\t   ants_number  0) or (each.road > 0) or (each.is_nest)) ;\n\t\t\tspecies ant position: { 0.05, 0.05 } size: { 0.9, 0.9 } aspect: icon;\n\t\t\toverlay \"Texts\" transparency: 0.3 background: rgb (99, 85, 66,255)  position: {10°px, 10°px} size: {250°px, 150°px} border: rgb (99, 85, 66,255) rounded: true{\n\t\t\t\tdraw ant_shape_full at: {60°px, 70°px} size: {140°px, 100°px} rotate: -60;\n\t\t\t\tdraw ('Food foraged: ' + (((food_placed = 0 ? 0 : food_gathered / food_placed) * 100) with_precision 2) + '%') at: {40°px,70°px} font:font(\"Arial\", 18, #bold) color: #white;\n\t\t\t\tdraw ('Carrying ants: ' + (((100 * ant count (each.has_food or each.state = \"followingRoad\")) / length(ant)) with_precision 2) + '%') at: {40°px, 100°px} font:font(\"Arial\", 18 , #bold) color: #white;\n\t\t\t}\n\t\t\t\t\t\n\t\t}\n\t\tinspect \"All ants\" type: table value: ant attributes: ['name', 'location', 'heading','state'];\n\t}\n}\n//Batch experiment to find the best way to maximize the food gathered using exhaustive method\nexperiment Batch type: batch repeat: 4 keep_seed: true until: (food_gathered = food_placed) or (time > 1000) {\n\tparameter 'Size of the grid:' var: gridsize init: 75 unit: 'width and height';\n\tparameter 'Number:' var: ants_number among:[10,20,50] unit: 'ants';\n\tparameter  'Evaporation:' var: evaporation_per_cycle among: [0.1, 0.5, 2.0, 10.0] unit: 'units every cycle';\n\tparameter  'Diffusion:' var: diffusion_rate min: 0.1 max: 1.0 unit: 'rate every cycle (1.0 means 100%)' step: 0.2;\n\tmethod exhaustive maximize: food_gathered;\n\n\t\n\tpermanent {\n\t\tdisplay Comparison background: #white {\n\t\t\tchart \"Food Gathered\" type: series {\n\t\t\t\t\tdata \"Min\" value:  min(ants_model collect each.food_gathered ) style: spline color: #darkgreen ;\n\t\t\t\t\tdata \"Max\" value:  max(ants_model collect each.food_gathered ) style: spline color: #red ;\n\t\t\t}\n\t\t}\n\t}\n}\n\n//Batch experiment to find the best way to maximize the food gathered using genetic method\nexperiment Genetic type: batch repeat: 2 keep_seed: true until: (food_gathered = food_placed) or (time > 1000) {\n\tparameter 'Size of the grid:' var: gridsize init: 75 unit: '(width and height)';\n\tparameter 'Number:' var: ants_number among:[10,20,50] unit: 'ants';\n\tparameter  'Evaporation:' var: evaporation_per_cycle among: [0.1, 0.5, 2.0, 10.0] unit: 'units every cycle';\n\tparameter 'Diffusion:' var: diffusion_rate min: 0.1 max: 1.0 unit: 'rate every cycle (1.0 means 100%)' step: 0.2;\n\tmethod genetic maximize: food_gathered pop_dim: 5 crossover_prob: 0.7 mutation_prob: 0.1 nb_prelim_gen: 1 max_gen: 20;\n\t\n\t\tpermanent {\n\t\tdisplay Comparison background: #white {\n\t\t\tchart \"Food Gathered\" type: series {\n\t\t\t\t\tdata \"Min\" value:  min(ants_model collect each.food_gathered ) style: spline color: #darkgreen ;\n\t\t\t\t\tdata \"Max\" value:  max(ants_model collect each.food_gathered ) style: spline color: #red ;\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n","url":"wiki/Ants-(Foraging-and-Sorting)-Ant-Foraging-(Complex).md"},{"id":"wiki/Ants-(Foraging-and-Sorting)-Ant-Foraging-(Multi-Simulation).md","title":" Ant Foraging (Multi-Simulation)","content":"[//]: # (keyword|architecture_fsm)\n[//]: # (keyword|operator_round)\n[//]: # (keyword|operator_sort_by)\n[//]: # (keyword|operator_last)\n[//]: # (keyword|operator_distance_between)\n[//]: # (keyword|statement_state)\n[//]: # (keyword|statement_transition)\n[//]: # (keyword|statement_diffuse)\n[//]: # (keyword|statement_permanent)\n[//]: # (keyword|statement_agents)\n[//]: # (keyword|skill_fsm)\n[//]: # (keyword|type_topology)\n[//]: # (keyword|concept_gui)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_grid)\n[//]: # (keyword|concept_multi_simulation)\n[//]: # (keyword|concept_diffusion)\n# Ant Foraging (Multi-Simulation)\n\n\n_Author : _\n\nToy Model ant using the question of how ants search food and use pheromons to return to their nest once they did find food. \n\n\nCode of the model : \n\n```\nmodel ants\n\nglobal {\n\t//Evaporation value per cycle of the pheromons\n\tfloat evaporation_per_cycle  food_places  0) ? food_color : ((road < 0.001) ? background : rgb(#009900) + int(road * 5))) update: is_nest ? nest_color : ((food > 0) ?\n\tfood_color : ((road < 0.001) ? background : rgb(#009900) + int(road * 5)));\n\tint food  list_places  0)) > 0 {\n\t\t\treturn point(list_places first_with (each.food > 0));\n\t\t} else {\n\t\t\tlist_places  0) and ((each distance_to center) > (self distance_to center)))) sort_by (each.road);\n\t\t\treturn point(last(list_places));\n\t\t}\n\t}\n\t//Reflex to drop food once the ant is in the nest\t\n\treflex drop when: has_food and (ant_grid(location)).is_nest {\n\t\tdo drop();\n\t}\n\t//Reflex to pick food when there is one at the same location\n\treflex pick when: !has_food and (ant_grid(location)).food > 0 {\n\t\tdo pick(1);\n\t}\n\t//Initial state to make the ant wander \n\tstate wandering initial: true {\n\t\tdo wander(amplitude: 90);\n\t\tfloat pr  0.05) and (pr < 4);\n\t}\n\t//State to carry food once it has been found\n\tstate carryingFood {\n\t\tdo goto(target: center);\n\t\ttransition to: wandering when: !has_food;\n\t}\n\t//State to follow a pheromon road if once has been found\n\tstate followingRoad {\n\t\tpoint next_place  0) or (each.road > 0) or (each.is_nest));\n\t\t\tspecies ant position: { 0.05, 0.05 } size: { 0.9, 0.9 } aspect: icon;\n\t\t}\n\t\n\t}\n}\n\n\n```\n","url":"wiki/Ants-(Foraging-and-Sorting)-Ant-Foraging-(Multi-Simulation).md"},{"id":"wiki/Ants-(Foraging-and-Sorting)-Ant-Foraging-(Simple).md","title":" Ant Foraging (Simple)","content":"[//]: # (keyword|operator_round)\n[//]: # (keyword|operator_min_of)\n[//]: # (keyword|operator_sort)\n[//]: # (keyword|operator_last)\n[//]: # (keyword|statement_diffuse)\n[//]: # (keyword|statement_event)\n[//]: # (keyword|statement_exhaustive)\n[//]: # (keyword|statement_genetic)\n[//]: # (keyword|type_matrix)\n[//]: # (keyword|concept_gui)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_grid)\n[//]: # (keyword|concept_batch)\n[//]: # (keyword|concept_diffusion)\n# Ant Foraging (Simple)\n\n\n_Author : _\n\nToy Model ant using the question of how ants search food and use pheromons to return to their nest once they did find food. This model is the simple one.\n\n\nCode of the model : \n\n```\nmodel ants\n\nglobal {\n\tint t  0)  types  (pgm_file ( '../images/environment75x75_scarce.pgm' )); \n\t\n\tgeometry shape  neighbours  15 ? 255 : ( isNestLocation ? 125 : 0 ) , self.road * 30 , self.road > 15 ? 255 : food * 50 ]) update: rgb([ self.road > 15 ? 255 : ( isNestLocation ? 125 : 0 ) ,self.road * 30 , self.road > 15 ? 255 : food * 50 ]); \n\tint food  0.05;\n\t\n\t//Reflex to diffuse pheromon on the cell once the agent has food\n\treflex diffuse_road when:hasFood=true{\n      ant_grid(location).road  list_places  0 );\n\t\tif goal != nil {\n\t\t\tlocation  0 ) { \n\t\thasFood  400 ) {\n\tparameter 'Evaporation' var: evaporation_per_cycle among: [ 0.1 , 1.0 , 2.0 , 5.0 ,  10.0 ];\n\tparameter 'Diffusion rate' var: diffusion_rate min: 0.1 max: 1.0 step:\n\t0.3;\n\tmethod exhaustive minimize: time;\n}\n\n// This experiment simply explores two parameters with an exhaustive strategy, \n// repeating each simulation two times\nexperiment Repeated type: batch repeat: 2 keep_seed: true until: (\nfood_remaining = 0 ) or ( time > 400 ) {\n\tparameter 'Evaporation' var: evaporation_per_cycle among: [ 0.1 , 1.0 , 2.0 , 5.0 ,  10.0 ];\n\tparameter 'Diffusion rate' var: diffusion_rate min: 0.1 max: 1.0 step:0.3;\n}\n\n// This experiment explores two parameters with a GA strategy, \n// repeating each simulation two times, in order to find the best combination \n// of parameters to minimize the time taken by ants to gather all the food \nexperiment Genetic type: batch keep_seed: true repeat: 3 until: ( food_remaining\n= 0 ) or ( time > 400 ) {\n\tparameter 'Evaporation' var: evaporation_per_cycle min: 0.05 max: 10.0\n\tstep: 0.1;\n\tparameter 'Diffusion rate' var: diffusion_rate min: 0.0 max: 1.0 step:\n\t0.01;\n\tmethod genetic pop_dim: 5 crossover_prob: 0.7 mutation_prob: 0.1\n\tnb_prelim_gen: 1 max_gen: 20 minimize: time;\n}\n```\n","url":"wiki/Ants-(Foraging-and-Sorting)-Ant-Foraging-(Simple).md"},{"id":"wiki/Ants-(Foraging-and-Sorting)-Ant-Sorting.md","title":" Ant Sorting","content":"[//]: # (keyword|architecture_fsm)\n[//]: # (keyword|statement_state)\n[//]: # (keyword|statement_transition)\n[//]: # (keyword|statement_enter)\n[//]: # (keyword|skill_fsm)\n[//]: # (keyword|constant_#cyan)\n[//]: # (keyword|constant_#magenta)\n[//]: # (keyword|concept_gui)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_grid)\n# Ant Sorting\n\n\n_Author : _\n\nThis model is loosely based on the behavior of ants sorting different elements in their nest. A of mobile agents - the ants - is placed on a grid. The grid itself contains cells of different colors. Each step, the agents move randomly. If they enter a colored cell, they pick this color if its density in the neighbourhood is less than *number_of_objects_around*. If they have picked a color, they drop it on a black cell if they have encountered at least *number_of_objects_in_history* cells with the same color.\\n After a while, colors begin to be aggregated.\n\n\nCode of the model : \n\n```\n\nmodel ant_sort\n\nglobal  {\n\t// Parameters \n\tint number_of_different_colors  colors const: true  {ant_grid (location)} ;\n\t\n\t//Reflex to make the ant wander\n\treflex wandering { \n\t\tdo wander amplitude: 120;\n\t}\n\t//Initial state that will change to full\n\tstate empty initial: true {\n\t\ttransition to: full when: (place.color != black) and ( (place.neighbors count (each.color = place.color)) < (rnd(number_of_objects_around))) {\n\t\t\tcolor  number_of_objects_in_history) {\n\t\t\tplace.color ","url":"wiki/Ants-(Foraging-and-Sorting)-Ant-Sorting.md"},{"id":"wiki/Articles-Prima_model1.md","title":" Prima 1","content":"[//]: # (keyword|concept_skill)\n# Prima 1\n\n\n_Author : _\n\nThis model shows how to create agent and make them move randomly in the world. Some agents are infected, and others can gain the infection if they are in a certain range.\n\n\nCode of the model : \n\n```\n\nmodel SI_city\n\nglobal{\n\tgeometry shape","url":"wiki/Articles-Prima_model1.md"},{"id":"wiki/Articles-Prima_model2.md","title":" Prima 2","content":"[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_shapefile)\n# Prima 2\n\n\n_Author : _\n\nThis model shows how to create agent and make them move randomly in the world. Some agents are infected, and others can gain the infection if they are in a certain range. The people are now placed in buildings at the initial state. Those buildings are created thanks to a shapefile. Roads are also created thanks to an other shapefile.\n\n\nCode of the model : \n\n```\nmodel model2 \n \nglobal {\n\t//Shapefile for the roads\n\tfile roads_shapefile ","url":"wiki/Articles-Prima_model2.md"},{"id":"wiki/Articles-Prima_model3.md","title":" Prima 3","content":"[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_graph)\n# Prima 3\n\n\n_Author : _\n\nThis model shows how to create agent and make them move randomly in the world.Some agents are infected, and others can gain the infection if they are in a certain range. The people are now placed in buildings at the initial state. Those buildings are created thanks toa shapefile. Roads are also created thanks to an other shapefile. A graph is now created fromthe road agents, and the people move from their location to a targent on the graph.\n\n\nCode of the model : \n\n```\nmodel model3 \n \nglobal {\n\t//Shapefile for the roads\n\tfile roads_shapefile ","url":"wiki/Articles-Prima_model3.md"},{"id":"wiki/Articles-Prima_model4.md","title":" Prima 4","content":"[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_3d)\n# Prima 4\n\n\n_Author : _\n\nThis model shows how to create agent and make them move randomly in the world.Some agents are infected, and others can gain the infection if they are in a certain range. The people are now placed in buildings at the initial state. Those buildings are created thanks toa shapefile. Roads are also created thanks to an other shapefile. A graph is now created fromthe road agents, and the people move from their location to a targent on the graph. The displayis now a 3D display.\n\n\nCode of the model : \n\n```\nmodel model4 \n\nglobal {\n\t//Shapefile for the roads\n\tfile roads_shapefile ","url":"wiki/Articles-Prima_model4.md"},{"id":"wiki/Articles-Prima_model5.md","title":" Prima 5","content":"[//]: # (keyword|operator_inside)\n[//]: # (keyword|operator_of_species)\n[//]: # (keyword|statement_capture)\n[//]: # (keyword|statement_release)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_multi_level)\n# Prima 5\n\n\n_Author : _\n\nThis model shows how to create agent and make them move randomly in the world.Some agents are infected, and others can gain the infection if they are in a certain range. The people are now placed in buildings at the initial state. Those buildings are created thanks toa shapefile. Roads are also created thanks to an other shapefile. A graph is now created fromthe road agents, and the people move from their location to a targent on the graph. The displayis now a 3D display. The model adds a new level as people going inside a building will be nowa new species belonging to the building and that will be manage by the building agent concerned\n\n\nCode of the model : \n\n```\nmodel model5 \n\nglobal {\n\t//Shapefile of the roads\n\tfile roads_shapefile  {members count (people_in_building(each).is_infected)};\n\t\n\taspect geom {\n\t\tdraw shape color: empty(members) ? #gray : (nb_I/length(members) > 0.5 ? #red : #green) depth: height;\n\t}\n\t//Species people in building that will be managed by the building agents\n\tspecies people_in_building parent: people schedules: [] {\n\t\tint leaving_time;\n\t\taspect circle{}\n\t}\n\t//Reflex to capture the people entering inside the building, changing them in people in building species and puting a leaving time to know when lettiing\n\t// them out\n\treflex let_people_enter {\n\t\tlist entering_people  leaving_people = each.leaving_time);\n\t\tif !(empty (leaving_people)) {\n\t\t\trelease leaving_people as: people in: world;\n\t\t}\n\t}\n}\n\nexperiment main_experiment type:gui{\n\toutput {\n\t\tdisplay map type: opengl {\n\t\t\tspecies roads aspect:geom;\n\t\t\tspecies buildings aspect:geom;\n\t\t\tspecies people aspect:circle;\t\t\t\n\t\t}\n\t}\n}\n```\n","url":"wiki/Articles-Prima_model5.md"},{"id":"wiki/Articles-Prima_model6.md","title":" Prima 5","content":"[//]: # (keyword|operator_inside)\n[//]: # (keyword|operator_diff)\n[//]: # (keyword|statement_capture)\n[//]: # (keyword|statement_release)\n[//]: # (keyword|statement_equation)\n[//]: # (keyword|statement_\\=)\n[//]: # (keyword|statement_solve)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_multi_level)\n[//]: # (keyword|concept_equation)\n# Prima 5\n\n\n_Author : _\n\nThis model shows how to create agent and make them move randomly in the world.Some agents are infected, and others can gain the infection if they are in a certain range. The people are now placed in buildings at the initial state. Those buildings are created thanks toa shapefile. Roads are also created thanks to an other shapefile. A graph is now created fromthe road agents, and the people move from their location to a targent on the graph. The displayis now a 3D display. The model adds a new level as people going inside a building will be nowa new species belonging to the building and that will be manage by the building agent concernedThe people_in_building agent will be infected inside a building respecting an ordinary differentialequation system.\n\n\nCode of the model : \n\n```\nmodel model6 \n\nglobal {\n\t//Shapefile of roads\n\tfile roads_shapefile  {members count (people_in_building(each).is_infected)};\n\t//Variable to know the number of people inside the building\n\tint nbInhabitants update: length(members);\n\t//List of all the people_in_building agents not infected\t\t\t\t\n\tlist membersS update: list(members) where (!each.is_infected);\n\t//List of all the people_in_building agents infected\t\t\t\t\n\tlist membersI update: list(members) where (each.is_infected);\n\tfloat t;\n\t//Float used in the ODE system representing the number of non infected agents    \n\tfloat S update: length(membersS) as float; \n\t//Float used in the ODE system representing the number of infected agents \n   \tfloat I update: length(membersI) as float;\n   \tfloat I_to_1  0.5 ? #red : #green) depth: height;\n\t}\n\t//Species people in building that will be managed by the building agents\n\tspecies people_in_building parent: people schedules: [] {\n\t\tint leaving_time;\n\t\taspect circle{}\n\t}\n\t//Reflex to capture the people entering inside the building, changing them in people in building species and puting a leaving time to know when lettiing\n\t// them out\n\treflex let_people_enter {\n\t\tlist entering_people  leaving_people (members) where (time >= each.leaving_time);\n\t\tif !(empty (leaving_people)) {\n\t\t\trelease leaving_people as: people in: world;\n\t\t}\n\t}\n\t//ODE system to represent the infection among the building\n\tequation SIR{ \n\t\tdiff(S,t) = (- beta * S * I / nbInhabitants) ;\n\t\tdiff(I,t) = (  beta * S * I / nbInhabitants) ;\n\t}\n\t//Make the computation of the ODE System only when they are people inside\n\treflex epidemic when:(S>0 and I>0){ \t\n\t\tfloat I0  1) {\n    \t\task(membersS){\n    \t\t\tis_infected ","url":"wiki/Articles-Prima_model6.md"},{"id":"wiki/Articles-ville_1.md","title":" Ville 1","content":"[//]: # (keyword|operator_gauss)\n[//]: # (keyword|concept_gui)\n# Ville 1\n\n\n_Author : _\n\nThis is a simple model showing different circle with a color according to the income of the house.\n\n\nCode of the model : \n\n```\nmodel ville\n\nglobal {\n\tinit {\n\t\tcreate foyer number: 500;\n\t}\n}\n\nspecies batiment {\n\tstring type;\n\tint capacite;\n}\n\nspecies route {\n}\n\nspecies foyer {\n\tfloat revenu ","url":"wiki/Articles-ville_1.md"},{"id":"wiki/Articles-ville_2.md","title":" Ville 2","content":"[//]: # (keyword|operator_gauss)\n[//]: # (keyword|concept_gui)\n[//]: # (keyword|concept_shapefile)\n# Ville 2\n\n\n_Author : _\n\nCreation of buildings and roads thanks to a shape file. The color of the building depends on the type of the building, while the color of a house depend on its income. \n\n\nCode of the model : \n\n```\n\nmodel ville\n\nglobal {\n\tfile shape_file_batiments ","url":"wiki/Articles-ville_2.md"},{"id":"wiki/Articles-ville_3.md","title":" Ville 3","content":"[//]: # (keyword|operator_gauss)\n[//]: # (keyword|concept_gui)\n[//]: # (keyword|concept_shapefile)\n# Ville 3\n\n\n_Author : _\n\nCreation of buildings and roads thanks to a shape file. The color of the building depends on the type of the building, while the color of a house depend on its income. People among the world will try to find the best building according to the mean income of their neighbors and their own income.\n\n\nCode of the model : \n\n```\nmodel ville\n\nglobal {\n\tfile shape_file_batiments  voisins  (revenu * 0.7) and revenu_moyen < (revenu / 0.7));\n\t}\n\taction emmenager {\n\t\thabitation.capacite 0));\n\t}\n\treflex demenagement when: !est_satisfait {\n\t\tdo demenager;\n\t\thabitation ","url":"wiki/Articles-ville_3.md"},{"id":"wiki/Articles-ville_4.md","title":" Ville 4","content":"[//]: # (keyword|operator_gauss)\n[//]: # (keyword|operator_distance_between)\n[//]: # (keyword|statement_put)\n[//]: # (keyword|type_topology)\n[//]: # (keyword|concept_gui)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_graph)\n# Ville 4\n\n\n_Author : _\n\nCreation of buildings and roads thanks to a shape file. The color of the building depends on the type of the building, while the color of a house depend on its income. People among the world will try to find the best building according to the mean income of their neighbors and their own income, but also to their working place.\n\n\nCode of the model : \n\n```\nmodel ville\n\nglobal {\n\tfile shape_file_batiments  reseau_route;\n\tinit {\n\t\tcreate route from: shape_file_routes;\n\t\treseau_route  voisins  (revenu * 0.7) and revenu_moyen < (revenu / 0.7));\n\t}\n\taction emmenager {\n\t\thabitation.capacite 0) and ( each.distances[lieu_travail]< 1000.0)));\n\t}\n\treflex demenagement when: !est_satisfait {\n\t\tdo demenager;\n\t\thabitation  distances;\n\tinit {\n\t\tloop bat over: batiment where (each.type = \"Industrial\") {\n\t\t\tput (topology(reseau_route) distance_between [self,bat]) at: bat in: distances;\n\t\t}\n\t}\n\taspect geometrie {\n\t\tdraw shape color: type = \"Industrial\" ? #pink : #gray;\n\t}\n}\nspecies route {\n\taspect geometrie {\n\t\tdraw shape color: #black;\n\t}\n}\nexperiment ville type: gui {\n\toutput {\n\t\tdisplay carte_principale {\n\t\t\tspecies batiment aspect: geometrie;\n\t\t\tspecies route aspect: geometrie;\n\t\t\tspecies foyer aspect: revenu;\n\t\t}\n\t}\n}\n```\n","url":"wiki/Articles-ville_4.md"},{"id":"wiki/Articles-ville_5.md","title":" Ville 5","content":"[//]: # (keyword|operator_gauss)\n[//]: # (keyword|operator_distance_between)\n[//]: # (keyword|statement_remove)\n[//]: # (keyword|statement_put)\n[//]: # (keyword|type_topology)\n[//]: # (keyword|concept_gui)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_graph)\n# Ville 5\n\n\n_Author : _\n\nCreation of buildings and roads thanks to a shape file. The color of the building depends on the type of the building, while the color of a house depend on its income. People among the world will try to find the best building according to the mean income of their neighbors and their own income, but also to their working place. This model add a new display showing the \"color\" of each building according to the mean income of its residents\n\n\nCode of the model : \n\n```\nmodel ville\n\nglobal {\n\tfile shape_file_batiments  reseau_route;\n\t\n\tinit {\n\t\tcreate route from: shape_file_routes;\n\t\treseau_route  voisins  (revenu * 0.7) and revenu_moyen < (revenu / 0.7));\n\t}\n\taction emmenager {\n\t\thabitation.capacite 0) and ( each.distances[lieu_travail]< 1000.0)));\n\t}\n\treflex demenagement when: !est_satisfait {\n\t\tdo demenager;\n\t\thabitation  distances;\n\tint hauteur  foyers ;\n\tfloat revenu_moyen update: empty(foyer) ? 0.0 : mean (foyers collect each.revenu);\n\tinit {\n\t\tloop bat over: batiment where (each.type = \"Industrial\") {\n\t\t\tput (topology(reseau_route) distance_between [self,bat]) at: bat in: distances;\n\t\t}\n\t}\n\taspect geometrie {\n\t\tdraw shape color: type = \"Industrial\" ? #pink : #gray depth: hauteur;\n\t}\n\taspect information_foyer {\n\t\tdraw shape color: type = \"Industrial\" ? #pink : (empty(foyers) ? #gray : rgb(int(255 * (1 - (revenu_moyen / 3000))), int(255 * (revenu_moyen / 3000)), 0)) depth: length(foyers);\n\t}\n}\nspecies route {\n\taspect geometrie {\n\t\tdraw shape color: #black;\n\t}\n}\nexperiment ville type: gui {\n\toutput {\n\t\tdisplay carte_principale type: java2D {\n\t\t\tspecies batiment aspect: geometrie;\n\t\t\tspecies route aspect: geometrie;\n\t\t\tspecies foyer aspect: revenu;\n\t\t}\n\t\tdisplay carte_batiment type: opengl {\n\t\t\tspecies batiment aspect: information_foyer;\n\t\t}\n\t}\n}\n```\n","url":"wiki/Articles-ville_5.md"},{"id":"wiki/Articles-ville_6.md","title":" Ville 6","content":"[//]: # (keyword|operator_gauss)\n[//]: # (keyword|operator_distance_between)\n[//]: # (keyword|operator_select)\n[//]: # (keyword|statement_remove)\n[//]: # (keyword|statement_put)\n[//]: # (keyword|type_topology)\n[//]: # (keyword|concept_gui)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_3d)\n# Ville 6\n\n\n_Author : _\n\nCreation of buildings and roads thanks to a shape file. The color of the building depends on the type of the building, while the color of a house depend on its income. People among the world will try to find the best building according to the mean income of their neighbors and their own income, but also to their working place. This model add a new display showing the \"color\" of each building according to the mean income of its residents. The buildings also have a z location given thanks to a mnt file.\n\n\nCode of the model : \n\n```\nmodel ville\n\nglobal {\n\tfile shape_file_batiments  reseau_route;\n\tlist industries;\n\t\n\tinit {\n\t\tcreate route from: shape_file_routes;\n\t\treseau_route  voisins  (revenu * 0.7) and revenu_moyen < (revenu / 0.7));\n\t}\n\taction emmenager {\n\t\thabitation.capacite 0) and ( each.distances[lieu_travail]< 1000.0)));\n\t\treturn b;\n\t}\n\treflex demenagement when: !est_satisfait {\n\t\tdo demenager;\n\t\thabitation  distances;\n\tint hauteur  foyers ;\n\tfloat revenu_moyen update: empty(foyer) ? 0.0 : mean (foyers collect each.revenu);\n\tinit {\n\t\tloop bat over: batiment where (each.type = \"Industrial\") {\n\t\t\tput (topology(reseau_route) distance_between [self,bat]) at: bat in: distances;\n\t\t}\n\t}\n\taspect geometrie {\n\t\tdraw shape color: type = \"Industrial\" ? #pink : #gray depth: hauteur;\n\t}\n\taspect information_foyer {\n\t\tdraw shape color: type = \"Industrial\" ? #pink : (empty(foyers) ? #gray : rgb(int(255 * (1 - (revenu_moyen / 3000))), int(255 * (revenu_moyen / 3000)), 0)) depth: length(foyers);\n\t}\n}\nspecies route {\n\taspect geometrie {\n\t\tdraw shape color: #black at:{location.x,location.y,(mnt_cell(location)).grid_value};\n\t}\n}\nexperiment ville type: gui {\n\toutput {\n\t\tdisplay carte_principale type: opengl {\n\t\t\tgrid mnt_cell triangulation: true texture:texture elevation:true transparency: 0.3;\n\t\t\tspecies batiment aspect: geometrie;\n\t\t\tspecies route aspect: geometrie;\n\t\t\tspecies foyer aspect: revenu;\n\t\t}\n\t\tdisplay carte_batiment type: opengl {\n\t\t\tspecies batiment aspect: information_foyer;\n\t\t}\n\t}\n}\n```\n","url":"wiki/Articles-ville_6.md"},{"id":"wiki/Boids-Boids-3D-Analysis.md","title":" Boids 3D Analysis","content":"[//]: # (keyword|operator_sin)\n[//]: # (keyword|operator_polygon)\n[//]: # (keyword|operator_dead)\n[//]: # (keyword|operator_triangle)\n[//]: # (keyword|operator_hsb)\n[//]: # (keyword|operator_sort_by)\n[//]: # (keyword|operator_\\:\\:)\n[//]: # (keyword|operator_remove_duplicates)\n[//]: # (keyword|statement_release)\n[//]: # (keyword|statement_capture)\n[//]: # (keyword|statement_remove)\n[//]: # (keyword|statement_put)\n[//]: # (keyword|type_topology)\n[//]: # (keyword|concept_gui)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_camera)\n[//]: # (keyword|concept_multi_level)\n# Boids 3D Analysis\n\n\n_Author : _\n\n This model shows the movement of boids following a goal, and creating without their own volonty, a flock . Four experiments are proposed : start is the 3D display of the boids like a real world, trajectory_analysis like the name means is about the analysis of the trajectory of the boids, Space Time Cube adds two display to see the movement of the boids using the time as the z-axis, and the last one represents the differents camera available in GAMA.\n\n\nCode of the model : \n\n```\nmodel boids \n\nglobal torus: torus_environment{ \n\t//Number of boids to represent\n\tint number_of_agents parameter: 'Number of agents' > potentialBoidsNeighboursMap;\n\t \t\t\n\t \t\t//Search all the boids within the two boids distance from a boid agent and put them in the map\n\t \t\tloop one_boids over: boids {\n\t \t\t\tlist free_neighbours  sorted_free_boids  one_boids_neighbours  boids_neighbours  micro_agents  1 ) {\n\t\t \t\t\tcreate flock number: 1 with: [ color::rgb([rnd (255), rnd (255), rnd (255)]) ] { \n\t\t \t\t\t\tcapture micro_agents as: boids_delegation;\n\t\t \t\t\t}\n\t\t \t\t}\n\t\t \t} \n\t\t}\n\t}  \n}\n//Species boids_goal which represents the goal followed by the boids agent, using the skill moving\nspecies boids_goal skills: [moving] {\n\tfloat range const: true init: 20.0;\n\tint radius  others -> {( (boids_delegation overlapping (shape + range))) - self};\n \n \t\t//Action to compute the mass center of the flock\n\t\taction compute_mass_center type: point \n\t\t{\n\t\t\tloop o over: others \n\t\t\t{\n\t\t\t\tif  dead(o) \n\t\t\t\t{\n\t\t\t\t\tdo write message: 'in ' + name + ' agent with others contains death agents'; \n\t\t\t\t} \n\t\t\t}\n\t\t \n\t\t\treturn (length(others) > 0) ? (mean (others collect (each.location)) ) : location;\n\t\t}\n\n\t\treflex separation when: apply_separation {\n\t\t}\n\t\t\n\t\treflex alignment when: apply_alignment {\n\t\t}\n\t\t//Reflex to apply the cohesion on the boids agents\n\t\treflex cohesion when: apply_cohesion {\n\t\t\tpoint acc  removed_components  cohesionIndex );\n\t\t if !(empty (removed_components)) {\n\t\t \trelease removed_components;\n\t\t }\n\t\t \n\t\t list added_components  nearby_flocks added_components ;\n\t\t \tloop one_flock over: nearby_flocks {\n\t\t \t\trelease one_flock.members returns: released_boids; \n\t\t \t\t\n\t\t \t\tloop rb over: released_boids {\n\t\t \t\t\tadd boids(rb) to: added_components;\n\t\t \t\t}\n\t\t \t}\n\t\t \t\n\t\t \tif !(empty (added_components)) { \n\t\t \t\task largest_flock {\n\t\t \t\t\tcapture added_components as: boids_delegation;\n\t\t \t\t}\n\t\t \t} \n\t\t }\n\t}\n\t\n\taspect default {\n\t\tdraw shape color: color;\n\t}\n}\n\t\n//Species to represent the boids aggregated\nspecies aggregatedboids{\n\treflex updateLocation{\n\t  location  others update: ((boids overlapping (circle (range)))  - self);\n\t\n\t//Point of the mass center of the \"flock\" considered as the neighbours agents\n\tpoint mass_center update:  (length(others) > 0) ? (mean (others collect (each.location)) )  : location;\n\t\n\t//Reflex to do the separation of the agents with the other boids in the minimal distance\n\treflex separation when: apply_separation {\n\t\tpoint acc  nearby_obstacles  xmax {\n\t\t\t\tvelocity  ymax {\n\t\t\t\tvelocity ","url":"wiki/Boids-Boids-3D-Analysis.md"},{"id":"wiki/Boids-Boids-3D-Motion.md","title":" Boids 3D Motion","content":"[//]: # (keyword|operator_cube)\n[//]: # (keyword|skill_moving3D)\n[//]: # (keyword|concept_gui)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_3d)\n# Boids 3D Motion\n\n\n_Author : _\n\nThis model shows the movement of boids following a goal, and creating without their own volonty, a flock .  The goal agent and the boids will move within the 3D space.\n\n\nCode of the model : \n\n```\nmodel boids_3D \nglobal torus: torus_environment{ \n\t//Number of boids to create\n\tint number_of_agents parameter: 'Number of agents'  z_max {\n\t\t\tlocation  0) ? (mean (others collect (each.location)) )  : location;\n\t\n\t//Reflex to apply separation\n\treflex separation when: apply_separation {\n\t\tpoint acc  0) ? (mean (others collect (each.velocity))) : {0.0,0.0,0.0};\n\t\tacc  z_max {\n\t\t\tlocation ","url":"wiki/Boids-Boids-3D-Motion.md"},{"id":"wiki/Boids-Boids-With-Flocks.md","title":" Boids With Flocks","content":"[//]: # (keyword|operator_copy)\n[//]: # (keyword|operator_triangle)\n[//]: # (keyword|operator_buffer)\n[//]: # (keyword|operator_polygon)\n[//]: # (keyword|operator_convex_hull)\n[//]: # (keyword|operator_solid)\n[//]: # (keyword|operator_intersects)\n[//]: # (keyword|operator_towards)\n[//]: # (keyword|operator_sin)\n[//]: # (keyword|operator_simple_clustering_by_distance)\n[//]: # (keyword|statement_release)\n[//]: # (keyword|statement_capture)\n[//]: # (keyword|statement_event)\n[//]: # (keyword|constant_#lightblue)\n[//]: # (keyword|concept_gui)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_multi_level)\n[//]: # (keyword|concept_clustering)\n# Boids With Flocks\n\n\n_Author : _\n\nThis model shows the movement of boids following a goal, and creating without their own volonty, a flock . \n\n\nImported model : \n\n```\n\nmodel boids \nglobal torus: torus_environment{ \n\t//Number of boids that will be created\n\tint number_of_agents  0) ? mean (others collect (each.location)) : location;\n\n\t\tpoint acc  nearby_obstacles  xmax {\n\t\t\t\tvelocity  ymax {\n\t\t\t\tvelocity  1) {\n\t\t\t//Clustering by distance of the boids to determine the satisfying boids groups\n\t\t\tlist> satisfying_boids_groups  min_group_member);\n\t\t\tloop one_group over: satisfying_boids_groups {\n\t\t\t\t\n\t\t\t\tgeometry potential_flock_polygon  nearby_boids  released_boids;\n\t\t\t\t\task f {\n\t\t\t\t\t\trelease members as: boids in: world returns: released_coms;\n\t\t\t\t\t\treleased_boids  xmin) or (((dx + max_x) > xmax) and max_x < xmax) {\n\t\t\tdx  ymin) or (((dy + max_y) > ymax) and max_y < ymax) {\n\t\t\tdy ","url":"wiki/Boids-Boids-With-Flocks.md"},{"id":"wiki/Boids-Boids.md","title":" Boids","content":"[//]: # (keyword|operator_copy)\n[//]: # (keyword|operator_triangle)\n[//]: # (keyword|statement_event)\n[//]: # (keyword|constant_#lightblue)\n[//]: # (keyword|concept_gui)\n[//]: # (keyword|concept_skill)\n# Boids\n\n\n_Author : _\n\nThis model shows the movement of boids following a goal, and creating without their own volonty, a flock. The experiment proposes to display in a 3D view the different boids and allows the user to move the goal to see the behaviour of boids.\n\n\nCode of the model : \n\n```\n\nmodel boids \nglobal torus: torus_environment{ \n\t//Number of boids that will be created\n\tint number_of_agents  0) ? mean (others collect (each.location)) : location;\n\n\t\tpoint acc  nearby_obstacles  xmax {\n\t\t\t\tvelocity  ymax {\n\t\t\t\tvelocity ","url":"wiki/Boids-Boids.md"},{"id":"wiki/Circle-Circle.md","title":" Circle","content":"[//]: # (keyword|operator_towards)\n[//]: # (keyword|operator_sort_by)\n[//]: # (keyword|operator_of_species)\n[//]: # (keyword|concept_skill)\n# Circle\n\n\n_Author : _\n\nThis model shows the movement of cells trying to do a circle shape with themselves considering the other cells. The second experiment shows a bigger circle using more cell agents.\n\n\nCode of the model : \n\n```\nmodel circle_model\n\nglobal { \n\t//Number of agents to create\n\tint number_of_agents min: 1  radius_of_circle) ? self towards center : (self towards center) - 180);\n\t\tdo move speed: speed; \n\t}\n\t//Reflex to flee of the other cells agents, which will help to design the circle shape\n\treflex flee_others {\n\t\tcell close ","url":"wiki/Circle-Circle.md"},{"id":"wiki/Clock-Clock.md","title":" Clock","content":"[//]: # (keyword|constant_#msec)\n[//]: # (keyword|constant_#sec)\n# Clock\n\n\n_Author : JD _\n\nCode of the model : \n\n```\nmodel Clock\n\nglobal {\n\t//Background of the clock\n\tfile clock_normal     const: true  Install New Software...\" to install the \"Audio\" feature (which is still in the experimental stage). \n\t\t\t\t//start_sound source:\"../includes/Alarm.mp3\" ;\n\t\t\t}\n\t\t}\n\t\taspect default {\n\t\t\tdraw string(\"#cycles: \" + cycle + \" cycles\")  size:zoom/2 font:\"times\" color:°black at:{world.shape.width/3,0};\n\t\t\tdraw clock_big_hand rotate: nb_minutes*(360/60)  + 90  size: {7 * zoom, 2}; //Modulo with the representation of a minute in ms and divided by 10000 to get the degree of rotation\n\t\t\tdraw clock_small_hand rotate: nb_hours*(360/12)  + 90  size:{5*zoom, 2} ;\t\t\t\n\t\t\tdraw clock_alarm rotate:      (alarmCycle/12000)  size: zoom/3 ; // Alarm time\n\t\t}\n \n}\n\nexperiment Display type: gui {\n\tfloat minimum_cycle_duration ","url":"wiki/Clock-Clock.md"},{"id":"wiki/Co-model-Example-Comodel_SIR_Switch.md","title":" Comodel SIR Switch","content":"[//]: # (keyword|operator_diff)\n[//]: # (keyword|statement_equation)\n[//]: # (keyword|statement_\\=)\n[//]: # (keyword|statement_solve)\n[//]: # (keyword|concept_comodel)\n[//]: # (keyword|concept_math)\n[//]: # (keyword|concept_equation)\n# Comodel SIR Switch\n\n\n_Author : HUYNH Quang Nghi_\n\nThis is a comodel that implement the dynamic of SIR_switch: it will use the EBM when the density of population is big and ABM when the density of population is low. It demonstrate the capability of using dynamically the legacy models.\nSIR_ABM_coupling is the coupling that manipulates the elements inside SIR_ABM model and proposes the function would be used from outside. SIR_ABM is a simple example of SIR that use the agents to represent the spreading of disease..\nSIR_EBM_coupling is the coupling that manipulates the elements inside SIR_EBM model and proposes the function would be used from outside. SIR_EBM is a simple example of ODE use into agents with the example of the SIR equation system.\n\n\nImported models : \n\n```\nmodel SIR_ABM \n\nglobal{\n\tgeometry shape color threshold_to_Maths and I > threshold_to_Maths)\n\t\t{\n\t\t\task world\n\t\t\t{\n\t\t\t\tunknown call;\n\t\t\t\tcall ","url":"wiki/Co-model-Example-Comodel_SIR_Switch.md"},{"id":"wiki/Co-model-Example-comodelBoidsVoronoi.md","title":" Comodel of Boids and Voronoi","content":"[//]: # (keyword|operator_copy)\n[//]: # (keyword|operator_triangle)\n[//]: # (keyword|operator_using)\n[//]: # (keyword|operator_closest_to)\n[//]: # (keyword|operator_accumulate)\n[//]: # (keyword|statement_event)\n[//]: # (keyword|statement_agents)\n[//]: # (keyword|constant_#lightblue)\n[//]: # (keyword|type_topology)\n[//]: # (keyword|concept_comodel)\n# Comodel of Boids and Voronoi\n\n\n_Author : HUYNH Quang Nghi_\n\nCo-model example : Voronoi applied on Boids.\n\n\nImported models : \n\n```\n\nmodel voronoi\n \nglobal {\n\t// Parameters \n\t//Number of points\n\tint num_points  getCenter{\n\t\treturn list(center);\n\t}\n\tlist getCell{\n\t\treturn list(cell);\n\t}\n\t\n\t\n\toutput{\n\t}\n}\n```\n\n\n```\n\nmodel boids \nglobal torus: torus_environment{ \n\t//Number of boids that will be created\n\tint number_of_agents  0) ? mean (others collect (each.location)) : location;\n\n\t\tpoint acc  nearby_obstacles  xmax {\n\t\t\t\tvelocity  ymax {\n\t\t\t\tvelocity  getBoids_goal{\n\t\treturn list(boids_goal);\n\t}\n\t\n\tlist getBoids{\n\t\treturn list(boids);\n\t}\n\t\n\t\n\toutput{\n\t}\n}\n```\n\n\nCode of the model : \n\n```\nmodel comodelBoidsVoronoi\nimport \"Boids_coupling.gaml\" as myBoids\nimport \"Voronoi_coupling.gaml\" as myVoronoi\n\n\nglobal\n{\n\t// set the bound of the environment\n\tgeometry shape  theLocations","url":"wiki/Co-model-Example-comodelBoidsVoronoi.md"},{"id":"wiki/Co-model-Example-comodel_Flood_Evacuation.md","title":" Comodel of Flood and Evacuation model","content":"[//]: # (keyword|operator_max_of)\n[//]: # (keyword|operator_accumulate)\n[//]: # (keyword|operator_sort_by)\n[//]: # (keyword|operator_closest_to)\n[//]: # (keyword|operator_copy)\n[//]: # (keyword|operator_closest_points_with)\n[//]: # (keyword|operator_pyramid)\n[//]: # (keyword|operator_simplification)\n[//]: # (keyword|operator_translated_by)\n[//]: # (keyword|operator_overlaps)\n[//]: # (keyword|operator_font)\n[//]: # (keyword|statement_user_command)\n[//]: # (keyword|statement_remove)\n[//]: # (keyword|statement_agents)\n[//]: # (keyword|constant_#magenta)\n[//]: # (keyword|constant_#bold)\n[//]: # (keyword|concept_comodel)\n# Comodel of Flood and Evacuation model\n\n\n_Author : HUYNH Quang Nghi_\n\nCo-model example : couple the evacuation model with the flood model. Water win or human win?\n\n\nImported models : \n\n```\nmodel continuous_move \nglobal { \n\t//Shapefile of the buildings\n\tfile building_shapefile  nearby_obstacles  getBuilding\n\t{\n\t\treturn list(building);\n\t}\n\n\taction transform_environement\n\t{\n\t\tloop t over: list(building)\n\t\t{\n\t\t\tt.shape  getPeople\n\t{\n\t\treturn list(people);\n\t}\n\n\toutput\n\t{\n\t}\n\n}\n```\n\n\n```\n\nmodel hydro\n\nglobal {\n   //Shapefile for the river\n   file river_shapefile  drain_cells;\n   list river_cells;\n   \n   \n  \n   float step  cells_concerned ;\n      //List of cells in the neighbourhood \n      list cells_neighbours;\n      \n      //Action to compute the water pressure\n      float compute_water_pressure {\n      \t//If the obstacle doesn't have height, then there will be no pressure\n         if (height = 0.0) {\n            return 0.0;\n         } else {\n         \t//The leve of the water is equals to the maximul level of water in the neighbours cells\n            float water_level  0.0) {   \n         \t//We compute the water pressure again\n            water_pressure  breaking_threshold) {\n      \t\t\tdo break;\n      \t\t}\n      \t} else {\n      \t\tcounter_wp  neighbour_cells ;\n      //Boolean to know if it is a drain cell\n      bool is_drain  obstacles;\n      //Height of the obstacles\n      float obstacle_height  0) {\n         \t//We get all the cells already done\n            list neighbour_cells_al  flow_cells  each.height)) ;\n               //If there are cells, we compute the water flowing\n               if (!empty(flow_cells)) {\n                  loop flow_cell over: shuffle(flow_cells) sort_by (each.height){\n                     float water_flowing  0.5))/ length(dyke) style: line color: #orange ;\n            data \"Rate of dykes with low pressure\" value: (dyke count (each.water_pressure < 0.25))/ length(dyke) style: line color: #green ;\n         }\n      }\n   }\n}\n```\n\n\n```\nmodel Flood_coupling\n\nimport \"../../../Toy Models/Flood Simulation/models/Hydrological Model.gaml\"\nexperiment Flood_coupling_exp type: gui parent: main_gui\n{\n\tpoint newSize  getCell\n\t{\n\t\treturn list(cell) where (each.grid_value > 8.0);\n\t}\n\n\tlist getBuildings\n\t{\n\t\treturn list(buildings);\n\t}\n\n\tlist getDyke\n\t{\n\t\treturn list(dyke);\n\t}\n\n\toutput\n\t{\n\t}\n\n}\n```\n\n\nCode of the model : \n\n```\nmodel comodel_Flood_Evacuation\n\nimport \"Flood_coupling.gaml\" as myFlood\nimport \"Evacuation_coupling.gaml\" as myEvacuation\n\n\nglobal\n{\n\t//set the bound of environment\n\tgeometry shape  8.0 and theWater overlaps thePeople)\n\t\t\t{\n\t\t\t\task thePeople\n\t\t\t\t{\n\t\t\t\t\tdo die;\n\t\t\t\t}\n\t\t\t\t//increase the counting variable\n\t\t\t\tcasualty ","url":"wiki/Co-model-Example-comodel_Flood_Evacuation.md"},{"id":"wiki/Co-model-Example-comodel_Urban_Traffic.md","title":" comodel Urban and Traffic model","content":"[//]: # (keyword|operator_rnd_color)\n[//]: # (keyword|operator_exp)\n[//]: # (keyword|operator_as_map)\n[//]: # (keyword|operator_\\:\\:)\n[//]: # (keyword|operator_with_weights)\n[//]: # (keyword|operator_max_of)\n[//]: # (keyword|operator_closest_to)\n[//]: # (keyword|operator_using)\n[//]: # (keyword|operator_sort_by)\n[//]: # (keyword|operator_last)\n[//]: # (keyword|statement_using)\n[//]: # (keyword|statement_agents)\n[//]: # (keyword|constant_#sec)\n[//]: # (keyword|constant_#km)\n[//]: # (keyword|constant_#lightgray)\n[//]: # (keyword|constant_#cyan)\n[//]: # (keyword|type_topology)\n[//]: # (keyword|concept_comodel)\n# comodel Urban and Traffic model\n\n\n_Author : HUYNH Quang Nghi_\n\nCo-model example : coupling urban growth model with the traffic model.\n\n\nImported models : \n\n```\n\nmodel raster3\n\n\nglobal\n{ \n\t//File for the ascii grid\n\tfile asc_grid  empty_plots  plot_colors  ordered_plots  voisins  getPlot\n\t{\n\t\treturn list(plot);\n\t}\n\n}\n```\n\n\n```\n\nmodel traffic\n\nglobal {\n\t//Shapefile of the buildings\n\tfile building_shapefile  road_weights;\n\t\n\tinit {\n\t\t//Initialization of the building using the shapefile of buildings\n\t\tcreate building from: building_shapefile;\n\t\t//Initialization of the road using the shapefile of roads\n\t\tcreate road from: road_shapefile;\n\t\t\n\t\t//Creation of the people agents\n\t\tcreate people number: 1000{\n\t\t\t//People agents are located anywhere in one of the building\n\t\t\tlocation  getBuilding\n\t{\n\t\treturn list(building);\n\t}\n\n\tlist getPeople\n\t{\n\t\treturn list(people);\n\t}\n\n\tlist getRoad\n\t{\n\t\treturn list(road);\n\t}\n\n}\n```\n\n\nCode of the model : \n\n```\nmodel comodel_Urban_Traffic\n\nimport \"Traffic_coupling.gaml\" as myTraffic\nimport \"Urban_coupling.gaml\" as myUrban\n\n\nglobal\n{\n\t//set the bound of the world\n\tgeometry shape ","url":"wiki/Co-model-Example-comodel_Urban_Traffic.md"},{"id":"wiki/Epidemiology-SIR-(ABM-vs-EBM).md","title":" comparison_ABM_EBM_SIR","content":"[//]: # (keyword|operator_^)\n[//]: # (keyword|operator_of_species)\n[//]: # (keyword|statement_equation)\n[//]: # (keyword|statement_solve)\n[//]: # (keyword|constant_#lightgray)\n[//]: # (keyword|concept_equation)\n[//]: # (keyword|concept_math)\n[//]: # (keyword|concept_grid)\n# comparison_ABM_EBM_SIR\n\n\n_Author : Benoit Gaudou _\n\nComparison between an agent-based and an equation-based model of the SIR model. The ABM use a grid to place the agents, and each cell will be the location of an agent, while the EBM is only using a ODE System and no geographical representation.\n\n\nCode of the model : \n\n```\nmodel comparison_ABM_EBM_SIR\n\nglobal {\n\t//Number of susceptible individuals\n\tint number_S  neighbours I)' type: float var: beta R)' type: float var: gamma ","url":"wiki/Epidemiology-SIR-(ABM-vs-EBM).md"},{"id":"wiki/Epidemiology-SIR-(Built-In).md","title":" simple_ODE_SIR_Predefined","content":"[//]: # (keyword|statement_equation)\n[//]: # (keyword|statement_solve)\n[//]: # (keyword|constant_#lightgray)\n[//]: # (keyword|concept_math)\n[//]: # (keyword|concept_equation)\n# simple_ODE_SIR_Predefined\n\n\n_Author : hqnghi _\n\nA simple example of ODE use into agents with the example of the SIR equation system.\n\n\nCode of the model : \n\n```\n \nmodel simple_ODE_SIR_Predefined\n\nglobal {\n\tinit {\n\t\tcreate predefined_ODE_SIR_agent number: 1;\n\t}\n}\n\n//Species which represent the Ordinary Differential Equations System \nspecies predefined_ODE_SIR_agent {\n\t//Variable to represent the discrete time for integration\n\tfloat t;\n \t//Total Population \n   \tint N ","url":"wiki/Epidemiology-SIR-(Built-In).md"},{"id":"wiki/Epidemiology-SIR-(Split-in-Agents).md","title":" SIR_split_in_agents","content":"[//]: # (keyword|operator_diff)\n[//]: # (keyword|statement_equation)\n[//]: # (keyword|statement_\\=)\n[//]: # (keyword|statement_solve)\n[//]: # (keyword|concept_equation)\n[//]: # (keyword|concept_math)\n# SIR_split_in_agents\n\n\n_Author : hqnghi _\n\nThis model illustrates the possibility to split an equation system into several agents. All the equations are solve together thanks to the `simultaneously` facet of the equation statement. We also compare the split model with the simple SIR one. \n\n\nCode of the model : \n\n```\n\nmodel SIR_split_in_agents\n\nglobal {\n\tint number_S I)'  type: float var: beta R)' type: float var: delta ","url":"wiki/Epidemiology-SIR-(Split-in-Agents).md"},{"id":"wiki/Epidemiology-SIR-(Switch).md","title":" SIR_switch","content":"[//]: # (keyword|operator_round)\n[//]: # (keyword|operator_diff)\n[//]: # (keyword|operator_of_species)\n[//]: # (keyword|operator_any)\n[//]: # (keyword|operator_^)\n[//]: # (keyword|statement_equation)\n[//]: # (keyword|statement_\\=)\n[//]: # (keyword|statement_solve)\n[//]: # (keyword|constant_#lightgray)\n[//]: # (keyword|concept_equation)\n[//]: # (keyword|concept_math)\n[//]: # (keyword|concept_grid)\n# SIR_switch\n\n\n_Author : tri and hqnghi _\n\nA model which show how to implement ODE system, IBM model, and to switch from one to another using a threshold. Another interesting point seen in this model is the the minimization of the execution time by reducing the number of agents to compute infections.\n\n\nCode of the model : \n\n```\nmodel SIR_switch\n\nglobal {\n\t// Parameters\n\tint initial_S  neighbours  threshold_to_Maths and current_model.I > threshold_to_Maths) {\n\t\t\twrite 'Switch to Maths model at cycle ' + cycle;\n\t\t\tcreate Math_model {\n\t\t\t\tself.S I)'  type: float var: beta R)' type: float var: delta ","url":"wiki/Epidemiology-SIR-(Switch).md"},{"id":"wiki/Epidemiology-Susceptible-Infected-(SI).md","title":" SI without ODE","content":"[//]: # (keyword|operator_accumulate)\n[//]: # (keyword|constant_#lightgray)\n[//]: # (keyword|type_species)\n[//]: # (keyword|concept_grid)\n# SI without ODE\n\n\n_Author : _\n\nA simple SI model without Ordinary Differential Equations showing agents moving randomly among a grid and becoming infected\n\n\nCode of the model : \n\n```\n\nmodel si\n\nglobal { \n\t\n    int number_S  neighbours I)\" var:beta; \t// The parameter Beta\n\tparameter \"Mortality\" var:nu ;\t// The parameter Nu\n\tparameter \"Is the infection is computed locally?\" var:local_infection ;\n\tparameter \"Size of the neighbours\" var:neighbours_size ;\n\t\n \toutput { \n\t    display si_display {\n\t        grid si_grid lines: #black;\n\t        species Host aspect: basic;\n\t    }\n\t        \n\t    display chart refresh: every(10) {\n\t\t\tchart \"Susceptible\" type: series background: #lightgray style: exploded {\n\t\t\t\tdata \"susceptible\" value: Host count (each.is_susceptible) color: #green;\n\t\t\t\tdata \"infected\" value: Host count (each.is_infected) color: #red;\n\t\t\t}\n\t\t}\n\t\t\t\n\t}\n}\n```\n","url":"wiki/Epidemiology-Susceptible-Infected-(SI).md"},{"id":"wiki/Epidemiology-Susceptible-Infected-Recovered-(SIR).md","title":" SIR without ODE","content":"[//]: # (keyword|operator_accumulate)\n[//]: # (keyword|constant_#lightgray)\n[//]: # (keyword|type_species)\n[//]: # (keyword|concept_grid)\n# SIR without ODE\n\n\n_Author : _\n\nA simple SIR model without Ordinary Differential Equations showing agents moving randomly among a grid and becoming infected then resistant to a disease\n\n\nCode of the model : \n\n```\n\nmodel si\n\nglobal { \n\t//Number of susceptible host at init\n    int number_S  neighbours I)\" var:beta; \t// The parameter Beta\n\tparameter \"Mortality\" var:nu ;\t// The parameter Nu\n\tparameter \"Delta (I->R)\" var: delta; // The parameter Delta\n\tparameter \"Is the infection is computed locally?\" var:local_infection ;\n\tparameter \"Size of the neighbours\" var:neighbours_size ;\n \toutput { \n\t    display sir_display {\n\t        grid sir_grid lines: #black;\n\t        species Host aspect: basic;\n\t    }\n\t        \n\t    display chart refresh: every(10) {\n\t\t\tchart \"Susceptible\" type: series background: #lightgray style: exploded {\n\t\t\t\tdata \"susceptible\" value: Host count (each.is_susceptible) color: #green;\n\t\t\t\tdata \"infected\" value: Host count (each.is_infected) color: #red;\n\t\t\t\tdata \"immune\" value: Host count (each.is_immune) color: #blue;\n\t\t\t}\n\t\t}\n\t\t\t\n\t}\n}\n```\n","url":"wiki/Epidemiology-Susceptible-Infected-Recovered-(SIR).md"},{"id":"wiki/Evacuation-Continuous-Move.md","title":" continuous_move","content":"[//]: # (keyword|operator_copy)\n[//]: # (keyword|operator_closest_points_with)\n[//]: # (keyword|operator_pyramid)\n[//]: # (keyword|operator_simplification)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_gis)\n[//]: # (keyword|concept_agent_movement)\n[//]: # (keyword|concept_skill)\n# continuous_move\n\n\n_Author : Patrick Taillandier_\n\nA 3D model which show how to represent an evacuation system with obstacles, cohesion factor and velocity. The people are placed randomly and have to escape by going to a target point\n\n\nCode of the model : \n\n```\nmodel continuous_move \nglobal { \n\t//Shapefile of the buildings\n\tfile building_shapefile  nearby_obstacles ","url":"wiki/Evacuation-Continuous-Move.md"},{"id":"wiki/Evacuation-Goto-on-Grid.md","title":" evacuationgoto","content":"[//]: # (keyword|operator_rnd_color)\n[//]: # (keyword|operator_pyramid)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_gis)\n[//]: # (keyword|concept_agent_movement)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_grid)\n# evacuationgoto\n\n\n_Author : Patrick Taillandier_\n\nA 3D model with walls and exit, and people agents trying to evacuate from the area to a exit location, avoiding the walls with a discretized space by a grid\n\n\nCode of the model : \n\n```\n\nmodel evacuationgoto\n\nglobal {\n\t//Shapefile of the walls\n\tfile wall_shapefile ","url":"wiki/Evacuation-Goto-on-Grid.md"},{"id":"wiki/Evacuation-Move-on-Grid.md","title":" grid_move","content":"[//]: # (keyword|operator_in)\n[//]: # (keyword|operator_with_min_of)\n[//]: # (keyword|operator_pyramid)\n[//]: # (keyword|operator_closest_to)\n[//]: # (keyword|statement_remove)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_gis)\n[//]: # (keyword|concept_agent_movement)\n[//]: # (keyword|concept_grid)\n# grid_move\n\n\n_Author : _\n\nA 3D model which show how to represent an evacuation system with obstacles, cohesion factor and velocity. The people are placed randomly and have to escape by going to a target point, within a discretized space by a grid. The agents don't use the skill moving to move.\n\n\nCode of the model : \n\n```\nmodel grid_move\n\nglobal {\n\t//Shapefile of the buildings\n\tfile building_shapefile  free_cell  memory;\n\t//Size of the agent\n\tfloat size  possible_cells  max_memory) {\n\t\t\t\tremove memory[0] from: memory;\n\t\t\t}\n\t\t}\n\t}\n\t\n\taspect default {\n\t\tdraw pyramid(size) color: color;\n\t\tdraw sphere(size/3) at: {location.x,location.y,size} color: color;\n\t}\n}\n//Grid species to discretize space\ngrid cell width: 150 height: 150  neighbors: 8 frequency: 0 {\n\tbool is_obstacle ","url":"wiki/Evacuation-Move-on-Grid.md"},{"id":"wiki/Evacuation-continuous_move.md","title":" continuous_move","content":"[//]: # (keyword|operator_copy)\n[//]: # (keyword|operator_not)\n[//]: # (keyword|operator_closest_points_with)\n[//]: # (keyword|operator_pyramid)\n[//]: # (keyword|operator_simplification)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_gis)\n[//]: # (keyword|concept_agent_movement)\n[//]: # (keyword|concept_skill)\n# continuous_move\n\n\n_Author : Patrick Taillandier_\n\nA 3D model which show how to represent an evacuation system with obstacles, cohesion factor and velocity. The people are placed randomly and have to escape by going to a target point\n\n\n![F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Evacuation\\Evacuation continuous_move\\map-10.png](F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Evacuation\\Evacuation continuous_move\\map-10.png)\n\nCode of the model : \n\n```\nmodel continuous_move \nglobal { \n\t//Shapefile of the buildings\n\tfile building_shapefile  nearby_obstacles ","url":"wiki/Evacuation-continuous_move.md"},{"id":"wiki/Evacuation-grid_goto.md","title":" evacuationgoto","content":"[//]: # (keyword|operator_rnd_color)\n[//]: # (keyword|operator_not)\n[//]: # (keyword|operator_pyramid)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_gis)\n[//]: # (keyword|concept_agent_movement)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_grid)\n# evacuationgoto\n\n\n_Author : Patrick Taillandier_\n\nA 3D model with walls and exit, and people agents trying to evacuate from the area to a exit location, avoiding the walls with a discretized space by a grid\n\n\n![F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Evacuation\\Evacuation grid_goto\\map-10.png](F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Evacuation\\Evacuation grid_goto\\map-10.png)\n\nCode of the model : \n\n```\n\nmodel evacuationgoto\n\nglobal {\n\t//Shapefile of the walls\n\tfile wall_shapefile ","url":"wiki/Evacuation-grid_goto.md"},{"id":"wiki/Evacuation-grid_move.md","title":" grid_move","content":"[//]: # (keyword|operator_not)\n[//]: # (keyword|operator_in)\n[//]: # (keyword|operator_with_min_of)\n[//]: # (keyword|operator_pyramid)\n[//]: # (keyword|operator_closest_to)\n[//]: # (keyword|statement_remove)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_gis)\n[//]: # (keyword|concept_agent_movement)\n[//]: # (keyword|concept_grid)\n# grid_move\n\n\n_Author : _\n\nA 3D model which show how to represent an evacuation system with obstacles, cohesion factor and velocity. The people are placed randomly and have to escape by going to a target point, within a discretized space by a grid. The agents don't use the skill moving to move.\n\n\n![F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Evacuation\\Evacuation grid_move\\map-10.png](F:\\Gama\\GamaWiki\\resources\\images\\modelLibraryScreenshots\\Toy Models\\Evacuation\\Evacuation grid_move\\map-10.png)\n\nCode of the model : \n\n```\nmodel grid_move\n\nglobal {\n\t//Shapefile of the buildings\n\tfile building_shapefile  free_cell  memory;\n\t//Size of the agent\n\tfloat size  possible_cells  max_memory) {\n\t\t\t\tremove memory[0] from: memory;\n\t\t\t}\n\t\t}\n\t}\n\t\n\taspect default {\n\t\tdraw pyramid(size) color: color;\n\t\tdraw sphere(size/3) at: {location.x,location.y,size} color: color;\n\t}\n}\n//Grid species to discretize space\ngrid cell width: 150 height: 150  neighbors: 8 frequency: 0 {\n\tbool is_obstacle ","url":"wiki/Evacuation-grid_move.md"},{"id":"wiki/Flood-Simulation-Hydrological-Model.md","title":" Hydrological Model","content":"[//]: # (keyword|operator_max_of)\n[//]: # (keyword|operator_accumulate)\n[//]: # (keyword|operator_sort_by)\n[//]: # (keyword|statement_user_command)\n[//]: # (keyword|statement_remove)\n[//]: # (keyword|constant_#magenta)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_gis)\n[//]: # (keyword|concept_grid)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_gui)\n[//]: # (keyword|concept_hydrology)\n# Hydrological Model\n\n\n_Author : Patrick Taillandier_\n\nA model showing how to represent a flooding system with dykes and buildings. It uses a grid to discretize space, and has a 3D display. The water can flow from one cell to another considering the height of the cells, and the water pressure. It is also possible to delete dyke by clicking on one of them in the display.\n\n\nCode of the model : \n\n```\n\nmodel hydro\n\nglobal {\n   //Shapefile for the river\n   file river_shapefile  drain_cells;\n   list river_cells;\n   \n   \n  \n   float step  cells_concerned ;\n      //List of cells in the neighbourhood \n      list cells_neighbours;\n      \n      //Action to compute the water pressure\n      float compute_water_pressure {\n      \t//If the obstacle doesn't have height, then there will be no pressure\n         if (height = 0.0) {\n            return 0.0;\n         } else {\n         \t//The leve of the water is equals to the maximul level of water in the neighbours cells\n            float water_level  0.0) {   \n         \t//We compute the water pressure again\n            water_pressure  breaking_threshold) {\n      \t\t\tdo break;\n      \t\t}\n      \t} else {\n      \t\tcounter_wp  neighbour_cells ;\n      //Boolean to know if it is a drain cell\n      bool is_drain  obstacles;\n      //Height of the obstacles\n      float obstacle_height  0) {\n         \t//We get all the cells already done\n            list neighbour_cells_al  flow_cells  each.height)) ;\n               //If there are cells, we compute the water flowing\n               if (!empty(flow_cells)) {\n                  loop flow_cell over: shuffle(flow_cells) sort_by (each.height){\n                     float water_flowing  0.5))/ length(dyke) style: line color: #orange ;\n            data \"Rate of dykes with low pressure\" value: (dyke count (each.water_pressure < 0.25))/ length(dyke) style: line color: #green ;\n         }\n      }\n   }\n}\n```\n","url":"wiki/Flood-Simulation-Hydrological-Model.md"},{"id":"wiki/Learning-MAS_KMEANS.md","title":" Agent Based Clustering","content":"[//]: # (keyword|operator_cross)\n[//]: # (keyword|operator_cube)\n[//]: # (keyword|operator_rnd_color)\n[//]: # (keyword|operator_even)\n[//]: # (keyword|operator_closest_to)\n[//]: # (keyword|operator_font)\n[//]: # (keyword|constant_#grey)\n[//]: # (keyword|constant_#bold)\n[//]: # (keyword|type_font)\n# Agent Based Clustering\n\n\n_Author : Jean-Danie Zucker with Patrick Taillandier's and Arnaud Grignard's Help_\n\nCode of the model : \n\n```\nmodel MASKMEANS\n\n\nglobal\n{\n// the number of classes to create (kmeans)\n// It corresponds to the centroids\n\tint k  ([]);\n\t\t}\n\n\t\tloop pt over: datapoints\n\t\t{\n\t\t\task pt\n\t\t\t{\n\t\t\t\tmycenter  mypoints;\n\taspect kmeans_aspect2D\n\t{\n\t\tdraw cross(3, 0.5) color: color_kmeans border: # black;\n\t\tloop pt over: mypoints\n\t\t{\n\t\t\tdraw line([location, pt]) + 0.1 color: color_kmeans;\n\t\t}\n\t}\n\n\taspect kmeans_aspect3D\n\t{\n\t\tdraw cube(5) color: color_kmeans border: # black;\n\t\tloop pt over: mypoints\n\t\t{\n\t\t\tdraw line([location, pt], 0.2) color: color_kmeans;\n\t\t}\n\t}\n\n}\n\nexperiment clustering2D type: gui\n{\n\tparameter \"Number of clusters to split the data into\" var: k category: \"KMEANS\";\n\tparameter \"Number of points to be clustered\" var: N init: 100;\n\tparameter \"Number of dimensions\" var: dimensions init: 2 min: 2 max: 2;\n\tfont regular ","url":"wiki/Learning-MAS_KMEANS.md"},{"id":"wiki/Life-Life.md","title":" Life","content":"[//]: # (keyword|operator_in)\n[//]: # (keyword|concept_grid)\n# Life\n\n\n_Author : _\n\nA model using a cellular automata to represent the Game of Life, the most famous example of cellular automata. Each cell will see if the number of living neighbours meets the condition to emerge or to live.\n\n\nCode of the model : \n\n```\nmodel life\n\n//Declare the world as a torus or not torus environment\nglobal torus: torus_environment {\n\t//Size of the environment\n\tint environment_width  living_conditions  birth_conditions  neighbours ","url":"wiki/Life-Life.md"},{"id":"wiki/Multi-level-data-analysis-Graph-From-Bug-(Distance-Graph).md","title":" SpatialGraph","content":"[//]: # (keyword|operator_hsb)\n[//]: # (keyword|operator_as_distance_graph)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_mirror)\n[//]: # (keyword|concept_3d)\n# SpatialGraph\n\n\n_Author : Arnaud Grignard_\n\nFrom the reference model \"bug.gaml\" a spatial graph is created. We create a species node that mirrors the species bug and then a spatial graph is creating using as_distance_graph operator.\n\n\nCode of the model : \n\n```\n\nmodel SpatialGraph\n//Import the model Common Bug Species model\nimport '../includes/Common Bug Species.gaml'\n\n\nglobal { \n\t//Graph that will be computed at each step linking the bug agents according to their distance\n\tgraph myGraph;\n\t//Minimal distance to consider two nodes agents (ie the bug) as connected\n\tfloat distance parameter: 'Distance' min: 1.0 0){\n\t\t//Kill all the edge agent to create a new graph\n\t\task edge_agent {\n\t\t\tdo die;\n\t\t}\n\t\t//Create a new graph using the distance to compute the edges\n\t\tmyGraph ","url":"wiki/Multi-level-data-analysis-Graph-From-Bug-(Distance-Graph).md"},{"id":"wiki/Multi-level-data-analysis-Graph-From-Bug-(Mirror-Graph).md","title":" SpatialGraph3d","content":"[//]: # (keyword|operator_hsb)\n[//]: # (keyword|operator_degree_of)\n[//]: # (keyword|type_topology)\n[//]: # (keyword|statement_using)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_mirror)\n[//]: # (keyword|concept_3d)\n# SpatialGraph3d\n\n\n_Author : Arnaud Grignard_\n\nFrom the reference model \"bug.gaml\" a spatial graph is created. We create a species node that mirrors the species bug and then a spatial graph is creating using as_distance_graph operator. The species node should then define its own related_to method to decide wether or not a node is related to another one.\n\n\nCode of the model : \n\n```\n\n\nmodel Graph\n\n//Import the model Common Bug Species model\nimport '../includes/Common Bug Species.gaml'\n\nglobal {\n\t//Distance to link two bugs\n\tint distance parameter: 'Distance' min: 1  startAnimation) \n\t\t{\n\t\t\ttimeAnim ","url":"wiki/Multi-level-data-analysis-Graph-From-Bug-(Mirror-Graph).md"},{"id":"wiki/Multi-level-data-analysis-MODAVI.md","title":" Modavi","content":"[//]: # (keyword|operator_list_with)\n[//]: # (keyword|operator_as_matrix)\n[//]: # (keyword|operator_hsb)\n[//]: # (keyword|operator_buffer)\n[//]: # (keyword|operator_source_of)\n[//]: # (keyword|operator_target_of)\n[//]: # (keyword|operator_generate_barabasi_albert)\n[//]: # (keyword|operator_as_distance_graph)\n[//]: # (keyword|operator_sin)\n[//]: # (keyword|statement_put)\n[//]: # (keyword|statement_user_command)\n[//]: # (keyword|type_matrix)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_gui)\n# Modavi\n\n\n_Author : Arnaud Grignard_\n\nFrom a reference model with node of a given class, a spatial graph is created (or a barabasi graph if spatialGraph is set to false) in the advanced view to represent the interaction in the reference model.An abstract view/controller is created to summarize the interaction in the advanced viewin a macro graph and control the reference model by defining an action (user_command) for each macroNode and macroEdge.\n\n\nCode of the model : \n\n```\n\nmodel modavi\n \nglobal {\n\t//Graph of the agents\n\tgraph my_graph ;\n\t\n\t//Number of agents to create\n\tint nbAgent parameter: 'Number of Agents' min: 1 > interactionMatrix  nbEdgeMax){\n\t\t\t\tnbEdgeMax (as_distance_graph(node_agent, ([\"distance\"::distance, \"species\"::edge_agent])));\n\t\t\t\n\t\t}\n        else{\n          my_graph (generate_barabasi_albert(node_agent,edge_agent,nbAgent,2,true));\t\n        }\n        \n\t\t//For each node agent, we compute its class value\n\t\task node_agent as list{\n\t\t\tloop i from:0 to:nbTypeOfClass-1{\n\t\t\t\tclassVector[i]  classVector  posVector  colorList  nbAggregatedNodes  posVector  nbAggregatedLinkList threshold){\n\t\t\t\tdraw (line([src.posVector[i],dest.posVector[i]]) buffer ((nbAggregatedLinkList[i])/((length(edge_agent)))*nbEdgeMax)) color: rgb(125,125,125) border:rgb(125,125,125); \t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Action to remove a micro edge\n\t\taction removeMicroEdge{\n\t\t\task edge_agent as list{\n\t\t\t\t  if\t((self.src.classVector[0] =  myself.src.class) and (self.dest.classVector[0] =  myself.dest.class)) {\n\t\t\t\t      do die;\n\t\t\t\t  }\t \n\t         }\n\t\t}\n\t\t\n\t\tuser_command \"Remove all micro edge\" action: removeMicroEdge;\t\n\t}\n\t\n\t//Species macroGraph representing the macro graph composed of macroNode and macroEdge\n\tspecies macroGraph {\n\t\t\n\n  \t//Reflex to update the graph by killing all the previous edges first \n   reflex updateAllMacroEdge {\t\n\t \task macroEdge as list{\n\t \t\tdo die;\n\t \t}\n\t \t\n\t \tloop h from:0 to: nbTypeOfClass-1{\n\t\t \tloop i from: 0 to: nbValuePerClass-1{\n\t\t      loop j from: 0 to: nbValuePerClass-1{\n\t\t        int tmp ","url":"wiki/Multi-level-data-analysis-MODAVI.md"},{"id":"wiki/Predator-Prey-Lotka-Volterra-(Influence-of-Integration-Step).md","title":" ODE_LotkaVolterra","content":"[//]: # (keyword|operator_diff)\n[//]: # (keyword|statement_equation)\n[//]: # (keyword|statement_\\=)\n[//]: # (keyword|statement_solve)\n[//]: # (keyword|concept_equation)\n[//]: # (keyword|concept_math)\n# ODE_LotkaVolterra\n\n\n_Author : Huynh Quang Nghi & Nathalie Corson_\n\nCode of the model : \n\n```\n\nmodel ODE_LotkaVolterra_InfluenceTimeStep\n\nglobal {\n\n\tfloat prey_birth_rate ; \t\t// natural birth rate of preys\n\tfloat predation_rate ; \t\t\t// death rate of preys due to predators\n\tfloat predator_death_rate ; \t// natural death rate of predators\n\tfloat predation_efficiency ; \t// birth rate of predators due to prey consumption\n\t\n\tfloat nb_prey_init ; \t\t\t// initial number of preys\n\tfloat nb_predator_init  ; \t\t// initial number of predators\n\t\n\tfloat integration_step ; \t// integration time step of the Runge Kutta 4 method\n\tfloat t;   \t\t\t\t\t// simulation time : t = n * integration_time_step  where n is the number of already computed time step\n\t\n\t\n\tfloat integration_time_step1   LV_agents;\n\t\n\tinit{\n\t\tcreate LotkaVolterra_agent number: 1 with:[integration_time_step::integration_time_step1]; \t// creation of an agent containing the ODE model with an integration time step of value integration_time_step1\n\t\tcreate LotkaVolterra_agent number: 1 with:[integration_time_step::integration_time_step2]; \t// creation of an agent containing the ODE model with an integration time step of value integration_time_step2\n\t\tcreate LotkaVolterra_agent number: 1 with:[integration_time_step::integration_time_step3]; \t// creation of an agent containing the ODE model with an integration time step of value integration_time_step3\n\t\tLV_agents ","url":"wiki/Predator-Prey-Lotka-Volterra-(Influence-of-Integration-Step).md"},{"id":"wiki/Predator-Prey-Lotka-Volterra-(Simple).md","title":" ODE_LotkaVolterra","content":"[//]: # (keyword|operator_diff)\n[//]: # (keyword|statement_equation)\n[//]: # (keyword|statement_\\=)\n[//]: # (keyword|statement_solve)\n[//]: # (keyword|concept_equation)\n[//]: # (keyword|concept_math)\n# ODE_LotkaVolterra\n\n\n_Author : Huynh Quang Nghi & Nathalie Corson_\n\nCode of the model : \n\n```\n\nmodel ODE_LotkaVolterra\n\nglobal {\n\n\tfloat prey_birth_rate","url":"wiki/Predator-Prey-Lotka-Volterra-(Simple).md"},{"id":"wiki/Segregation-(Schelling)-Segregation-(Agents).md","title":" segregationAgents","content":"[//]: # (keyword|operator_sum)\n[//]: # (keyword|statement_remove)\n[//]: # (keyword|concept_grid)\n# segregationAgents\n\n\n_Author : _\n\nA model showing the segregation of the people just by putting a similarity wanted parameter using agents to represent the individuals\n\n\nImported model : \n\n```\nmodel segregation_base\n\nglobal {\n\t//Different colors for the group\n\trgb color_1  all_places;\n\t//List of all the people\n\tlist all_people;  \n\t\n\t//Action to write the description of the model in the console\n\taction description {\n\t\twrite\n\t\t\"\\\\n\\\\u25B6 Description. \\\\n\\\\u25B6 Thomas Schelling model of residential segregation is a classic study of the effects of local decisions on global dynamics. Agents with mild preferences for same-type neighbors, but without preferences for segregated neighborhoods, can wind up producing complete segregation.\\\\n\\\\u25B6 In this model, agents populate a grid with a given *density*. They are in two different states : happy when the percentage of same-color neighbours is above their *desired percentage of similarity*; unhappy otherwise. In the latter case, they change their location randomly until they find a neighbourhood that fits their desire. \\\\n\\\\u25B6 In addition to the previous parameter, one can adjust the *distance of perception* (i.e.  the distance at which they consider other agents as neighbours) of the agents to see how it affects the global process. \";\n\t}\n\t//Initialization of the model\n\tinit {\n\t\t//Write the description of the model \n\t\tdo description;\n\t\t//Initialization of the places\n\t\tdo initialize_places;\n\t\t//Computation of the number of people according to the density of people\n\t\tnumber_of_people  my_neighbours;\n\t//computation of the similar neighbours\n\tint similar_nearby -> {\n\t\t(my_neighbours count (each.color = color))\n\t};\n\t//Computation of the total neighbours nearby\n\tint total_nearby -> {\n\t\tlength (my_neighbours)\n\t};\n\t//Boolean to know if the agent is happy or not\n\tbool is_happy -> {similar_nearby >= (percent_similar_wanted * total_nearby )} ;\n}\n\n```\n\n\nCode of the model : \n\n```\n\nmodel segregation\n\n//import the Common Schelling Segregation model\nimport \"../include/Common Schelling Segregation.gaml\"\n\nglobal {\n\t//List of all the free places\n\tlist free_places ;\n\t//List of all the places\n\tlist all_places ;\n\t//Shape of the world\n\tgeometry shape  my_neighbours -> {people at_distance neighbours_distance} ;\n\t//Cell representing the place of the agent\n\tspace my_place;\n\tinit {\n\t\t//The agent will be located on one of the free places\n\t\tmy_place > my_place;\n\t} \n\t//Reflex to migrate the people agent when it is not happy \n\treflex migrate when: !is_happy {\n\t\t//Add the place to the free places as it will move to another place\n\t\tfree_places << my_place;\n\t\t//Change the place of the agent\n\t\tmy_place > my_place;\n\t}\n\t\n\taspect default{ \n\t\tdraw circle (0.5) color: color; \n\t}\n}\n\n\n\nexperiment schelling type: gui {\t\n\toutput {\n\t\tdisplay Segregation {\n\t\t\tspecies people;\n\t\t}\t\n\t\tdisplay Charts {\n\t\t\tchart \"Proportion of happiness\" type: pie background: #gray style: exploded position: {0,0} size: {1.0,0.5}{\n\t\t\t\tdata \"Unhappy\" value: number_of_people - sum_happy_people color: #green;\n\t\t\t\tdata \"Happy\" value: sum_happy_people color: #yellow;\n\t\t\t}\n\t\t\tchart \"Global happiness and similarity\" type: series background: #gray axes: #white position: {0,0.5} size: {1.0,0.5} {\n\t\t\t\tdata \"happy\" color: #blue value:  (sum_happy_people / number_of_people) * 100 style: spline ;\n\t\t\t\tdata \"similarity\" color: #red value:  (sum_similar_neighbours / sum_total_neighbours) * 100 style: step ;\n\t\t\t}\n\t\t}\n\t}\n}\n```\n","url":"wiki/Segregation-(Schelling)-Segregation-(Agents).md"},{"id":"wiki/Segregation-(Schelling)-Segregation-(Cellular-Automata).md","title":" segregationGrid","content":"[//]: # (keyword|operator_sum)\n[//]: # (keyword|operator_any)\n[//]: # (keyword|operator_copy)\n[//]: # (keyword|statement_remove)\n[//]: # (keyword|constant_#lightgray)\n[//]: # (keyword|concept_grid)\n# segregationGrid\n\n\n_Author : _\n\nImported model : \n\n```\nmodel segregation_base\n\nglobal {\n\t//Different colors for the group\n\trgb color_1  all_places;\n\t//List of all the people\n\tlist all_people;  \n\t\n\t//Action to write the description of the model in the console\n\taction description {\n\t\twrite\n\t\t\"\\\\n\\\\u25B6 Description. \\\\n\\\\u25B6 Thomas Schelling model of residential segregation is a classic study of the effects of local decisions on global dynamics. Agents with mild preferences for same-type neighbors, but without preferences for segregated neighborhoods, can wind up producing complete segregation.\\\\n\\\\u25B6 In this model, agents populate a grid with a given *density*. They are in two different states : happy when the percentage of same-color neighbours is above their *desired percentage of similarity*; unhappy otherwise. In the latter case, they change their location randomly until they find a neighbourhood that fits their desire. \\\\n\\\\u25B6 In addition to the previous parameter, one can adjust the *distance of perception* (i.e.  the distance at which they consider other agents as neighbours) of the agents to see how it affects the global process. \";\n\t}\n\t//Initialization of the model\n\tinit {\n\t\t//Write the description of the model \n\t\tdo description;\n\t\t//Initialization of the places\n\t\tdo initialize_places;\n\t\t//Computation of the number of people according to the density of people\n\t\tnumber_of_people  my_neighbours;\n\t//computation of the similar neighbours\n\tint similar_nearby -> {\n\t\t(my_neighbours count (each.color = color))\n\t};\n\t//Computation of the total neighbours nearby\n\tint total_nearby -> {\n\t\tlength (my_neighbours)\n\t};\n\t//Boolean to know if the agent is happy or not\n\tbool is_happy -> {similar_nearby >= (percent_similar_wanted * total_nearby )} ;\n}\n\n```\n\n\nCode of the model : \n\n```\nmodel segregation\n\n//Importation of the Common Schelling Segregation model\nimport \"../include/Common Schelling Segregation.gaml\"\n\n//Define the environment as torus\nglobal torus: true{\n\t//List of all the free places\n\tlist free_places ;\n\t//List of all the places\n\tlist all_places  ;\n\t//List of all the people\n\tlist all_people;\n\t//Shape of the environment\n\tgeometry shape  my_neighbours - pp;\n\t\t\t\tall_people >- self;\n\t\t\t\tall_people << pp;\n\t\t\t\tpp.color ","url":"wiki/Segregation-(Schelling)-Segregation-(Cellular-Automata).md"},{"id":"wiki/Segregation-(Schelling)-Segregation-(GIS).md","title":" segregationGIS","content":"[//]: # (keyword|operator_sum)\n[//]: # (keyword|statement_remove)\n[//]: # (keyword|constant_#lightgray)\n[//]: # (keyword|concept_gis)\n[//]: # (keyword|concept_shapefile)\n# segregationGIS\n\n\n_Author : _\n\nA model showing the segregation of the people just by putting a similarity wanted parameter using agents to represent the individuals and GIS file for the places\n\n\nImported model : \n\n```\nmodel segregation_base\n\nglobal {\n\t//Different colors for the group\n\trgb color_1  all_places;\n\t//List of all the people\n\tlist all_people;  \n\t\n\t//Action to write the description of the model in the console\n\taction description {\n\t\twrite\n\t\t\"\\\\n\\\\u25B6 Description. \\\\n\\\\u25B6 Thomas Schelling model of residential segregation is a classic study of the effects of local decisions on global dynamics. Agents with mild preferences for same-type neighbors, but without preferences for segregated neighborhoods, can wind up producing complete segregation.\\\\n\\\\u25B6 In this model, agents populate a grid with a given *density*. They are in two different states : happy when the percentage of same-color neighbours is above their *desired percentage of similarity*; unhappy otherwise. In the latter case, they change their location randomly until they find a neighbourhood that fits their desire. \\\\n\\\\u25B6 In addition to the previous parameter, one can adjust the *distance of perception* (i.e.  the distance at which they consider other agents as neighbours) of the agents to see how it affects the global process. \";\n\t}\n\t//Initialization of the model\n\tinit {\n\t\t//Write the description of the model \n\t\tdo description;\n\t\t//Initialization of the places\n\t\tdo initialize_places;\n\t\t//Computation of the number of people according to the density of people\n\t\tnumber_of_people  my_neighbours;\n\t//computation of the similar neighbours\n\tint similar_nearby -> {\n\t\t(my_neighbours count (each.color = color))\n\t};\n\t//Computation of the total neighbours nearby\n\tint total_nearby -> {\n\t\tlength (my_neighbours)\n\t};\n\t//Boolean to know if the agent is happy or not\n\tbool is_happy -> {similar_nearby >= (percent_similar_wanted * total_nearby )} ;\n}\n\n```\n\n\nCode of the model : \n\n```\nmodel segregation\n\n//Import the model Common Schelling Segregation\nimport \"../include/Common Schelling Segregation.gaml\" \nglobal {\n\t//List of all the free places\n\tlist free_places  ;  \n\t//List of all the places\n\tlist all_places ;\n\t//Neighbours distance for the perception of an agent\n\tint neighbours_distance  my_neighbours -> {people at_distance neighbours_distance}; \n\t\n\t//Action to move to a new place\n\taction move_to_new_place {  \n\t\tcurrent_building  0));\n\t\task current_building {\n\t\t\tdo accept one_people: myself;   \n\t\t}\n\t}\n\t//Reflex to migrate to another place if the agent isn't happy\n\treflex migrate when: !is_happy {\n\t\tif current_building != nil {\n\t\t\task current_building { \n\t\t\t\tdo remove_one one_people: myself;\n\t\t\t}\n\t\t} \n\t\tdo move_to_new_place;\n\t}\n\n\taspect simple {\n\t\tdraw circle(5) color: color;\n\t}\n}\n\n//Species space representing a space for a people agent to live in\nspecies space {\t\n\t//List of all the people agents living within\n\tlist insiders;\n\trgb color ","url":"wiki/Segregation-(Schelling)-Segregation-(GIS).md"},{"id":"wiki/Segregation-(Schelling)-Segregation-(Google-Map).md","title":" segregationGoogleMap","content":"[//]: # (keyword|operator_sum)\n[//]: # (keyword|operator_as_matrix)\n[//]: # (keyword|operator_in)\n[//]: # (keyword|operator_copy)\n[//]: # (keyword|operator_of_species)\n[//]: # (keyword|operator_any)\n[//]: # (keyword|statement_remove)\n[//]: # (keyword|constant_#lightgray)\n[//]: # (keyword|type_matrix)\n[//]: # (keyword|concept_grid)\n# segregationGoogleMap\n\n\n_Author : _\n\nA model showing the segregation of the people just by putting a similarity wanted parameter using agents to represent the individuals and a grid to discretize space. Use the colors of the image to know if it is a possible space or not\n\n\nImported model : \n\n```\nmodel segregation_base\n\nglobal {\n\t//Different colors for the group\n\trgb color_1  all_places;\n\t//List of all the people\n\tlist all_people;  \n\t\n\t//Action to write the description of the model in the console\n\taction description {\n\t\twrite\n\t\t\"\\\\n\\\\u25B6 Description. \\\\n\\\\u25B6 Thomas Schelling model of residential segregation is a classic study of the effects of local decisions on global dynamics. Agents with mild preferences for same-type neighbors, but without preferences for segregated neighborhoods, can wind up producing complete segregation.\\\\n\\\\u25B6 In this model, agents populate a grid with a given *density*. They are in two different states : happy when the percentage of same-color neighbours is above their *desired percentage of similarity*; unhappy otherwise. In the latter case, they change their location randomly until they find a neighbourhood that fits their desire. \\\\n\\\\u25B6 In addition to the previous parameter, one can adjust the *distance of perception* (i.e.  the distance at which they consider other agents as neighbours) of the agents to see how it affects the global process. \";\n\t}\n\t//Initialization of the model\n\tinit {\n\t\t//Write the description of the model \n\t\tdo description;\n\t\t//Initialization of the places\n\t\tdo initialize_places;\n\t\t//Computation of the number of people according to the density of people\n\t\tnumber_of_people  my_neighbours;\n\t//computation of the similar neighbours\n\tint similar_nearby -> {\n\t\t(my_neighbours count (each.color = color))\n\t};\n\t//Computation of the total neighbours nearby\n\tint total_nearby -> {\n\t\tlength (my_neighbours)\n\t};\n\t//Boolean to know if the agent is happy or not\n\tbool is_happy -> {similar_nearby >= (percent_similar_wanted * total_nearby )} ;\n}\n\n```\n\n\nCode of the model : \n\n```\nmodel segregation\n\n//Import the model Common Schelling Segregation\nimport \"../include/Common Schelling Segregation.gaml\"    \n\nglobal {\n\t//List of all the free places\n\tlist free_places ; \n\t//List of all the places\n\tlist all_places;\n\t//Shape of the environment\n\tgeometry shape  available_places ;\n\t//Image file to load\n\tfile bitmap_file_name (\"../images/hanoi.png\") parameter: \"Name of image file to load:\" category: \"Environment\" ;\n\tmatrix map_colors;\n \n \t//Action to initialize the people agents\n\taction initialize_people {\n\t\tcreate people number: number_of_people ;  \n\t\tall_people  my_neighbours -> {(self neighbors_at neighbours_distance) of_species people};\n\t\n\t//Launched at the initialization of the agent\n\tinit {\n\t\t//Set the place of the agent as one of the free place\n\t\tlocation ","url":"wiki/Segregation-(Schelling)-Segregation-(Google-Map).md"},{"id":"wiki/Soccer-soccer.md","title":" Soccer Game","content":"[//]: # (keyword|operator_norm)\n[//]: # (keyword|operator_sqrt)\n[//]: # (keyword|operator_abs)\n[//]: # (keyword|operator_intersects)\n[//]: # (keyword|operator_closest_points_with)\n[//]: # (keyword|operator_inter)\n[//]: # (keyword|operator_among)\n[//]: # (keyword|operator_polyline)\n[//]: # (keyword|operator_sin)\n[//]: # (keyword|operator_font)\n[//]: # (keyword|constant_#m)\n[//]: # (keyword|constant_#chartreuse)\n[//]: # (keyword|constant_#darkblue)\n[//]: # (keyword|constant_#darkred)\n[//]: # (keyword|constant_#zoom)\n[//]: # (keyword|constant_#bold)\n[//]: # (keyword|concept_sport)\n# Soccer Game\n\n\n_Author : Julien_\n\nThis model shows how can we make an easy simulation of collective games, such as soccer. \nEach player have an offensive and a defensive position, and a behavior associated. Each player of the defensive team can either search to catch the ball or mark an other player (offensive player) according to his defensive position.\nEach player of the offensive team can either run to its offensive place (when he does not have the ball), run with the balloon / pass the ball / try to score a goal (when he has the ball). By changing the different parameters, you can see the concequences in real time. \n\n\nCode of the model : \n\n```\n\nmodel soccer\n\nglobal {\n\tgeometry shape  bluePlayerPosition  redPlayerPosition  offside_pos) {\n\t\t\t\toffside_pos  max_inertia) {\n\t\t\tfloat inertia_x  90) {\n\t\t\ttarget_location  red_offside_pos and team = \"blue\") or (location.x < blue_offside_pos and team = \"red\")) {\n\t\t\ttarget_location  15)) {\n\t\t\tint number_of_ennemies_on_range  wisest_choice_mark) {\n\t\t\t\twisest_target  -100.0) {\n\t\t\t// a target has been found\n\t\t\tdo loose_ball;\n\t\t\task ball_agent {\n\t\t\t\tdo shooted target_position:wisest_target.location speed_atr:wisest_target.distance_to_ball/8;\n\t\t\t}\n\t\t\tcalled_player  nextPlace;\n\tgeometry ball_direction;\n\treflex update {\n\t\tfloat future_speed  120) {\n\t\t\tblue_score ","url":"wiki/Soccer-soccer.md"},{"id":"wiki/Soccer-soccer_base.md","title":" _soccerbase","content":"[//]: # (keyword|operator_intersects)\n[//]: # (keyword|operator_closest_points_with)\n[//]: # (keyword|operator_norm)\n[//]: # (keyword|operator_sqrt)\n[//]: # (keyword|operator_abs)\n[//]: # (keyword|operator_sin)\n# _soccerbase\n\n\n_Author : Julien_\n\nThis model contains the parent classes of the model\n\n\nCode of the model : \n\n```\n\nmodel soccerbase\n\nspecies soccer_game {\n\t// contains the global informations of the game\n\trgb back_color_team;\n\trgb front_color_team;\n\t\n\tball_sp ball; // the ball agent\n\tgoal_sp front_goal; // contains the goal at the front of the field (y = 120)\n\tgoal_sp back_goal; // contains the goal at the back of the field (y = 0)\n\tlist teams; // contains the 2 teams\n\tlist players; // contains all the players of the game\n\t\n\tbase_team team_possession; // the last team which possess the ball. This value is used to determine if the behavior of the team has to be defensive or offensive.\n\t\n\tinit {\n\t\t// create the entities ball and the 2 goals\n\t\tcreate ball_sp with:[location::world.location] returns:var_ball;\n\t\tball  max_inertia) {\n\t\t\tfloat inertia_x 1 {\n\t\tdo apply_inertia;\n\t\t// verify if it is a non-offside position\n\t\tif ( (((team.position = \"back\") and (location.y > team.offside_pos))\n\t\t\tor ((team.position = \"front\") and (location.y < team.offside_pos))) \n\t\t\tand (!possess_ball) and (self != team.called_player)\n\t\t) {\n\t\t\t// offside position, go back to a correct position\n\t\t\tpoint target_pos  players; // all the players of the team.\n\tsoccer_game game;\n\t\n\tbase_player closest_player_to_ball  player_init_position;\n}\n\nspecies ball_sp skills:[moving] {\n\t// The ball agent.\n\tfloat speed  120) {\n\t\t\twrite \"back team score a goal !!\";\n\t\t\task first(soccer_game) {\n\t\t\t\tdo reinit_phase;\n\t\t\t}\n\t\t}\n\t\tif ((location.y+sin(heading)*speed) < 0) {\n\t\t\twrite \"front team score a goal !!\";\n\t\t\task first(soccer_game) {\n\t\t\t\tdo reinit_phase;\n\t\t\t}\n\t\t}\n\t}\n\taction shooted (point target_position, float speed_atr) {\n\t\t// action called when a player shoots the ball\n\t\tspeed 0 {\n\t\tlocation ","url":"wiki/Soccer-soccer_base.md"},{"id":"wiki/Soccer-soccer_expe.md","title":" Soccer game (Various strategies)","content":"[//]: # (keyword|operator_intersects)\n[//]: # (keyword|operator_closest_points_with)\n[//]: # (keyword|operator_norm)\n[//]: # (keyword|operator_sqrt)\n[//]: # (keyword|operator_abs)\n[//]: # (keyword|operator_sin)\n[//]: # (keyword|operator_among)\n[//]: # (keyword|operator_^)\n[//]: # (keyword|constant_#m)\n[//]: # (keyword|concept_sport)\n# Soccer game (Various strategies)\n\n\n_Author : Julien_\n\nThis model shows a game between two teams, with the same of with different strategies :\n* The \"stupidTeam\" has a very basic strategy : when a player has the ball, he runs to the ennemy goal, he runs to the ball otherwise.\n* The \"intelligentTeam\" is composed of players that each one have a strategical place wich they are able to keep. They also do pass when they are in dangerous position, to the \"safer\" player.\nThis model is designed to show how, with the same set of rules and some predefined actions, we can build a strategy of a team. You are free to change the imported files \"team1_strategy.gaml\" and \"team2_strategy.gaml\", using the read-only and the read-write attributes of the mother species.\n\n\nImported models : \n\n```\n\nmodel soccerbase\n\nspecies soccer_game {\n\t// contains the global informations of the game\n\trgb back_color_team;\n\trgb front_color_team;\n\t\n\tball_sp ball; // the ball agent\n\tgoal_sp front_goal; // contains the goal at the front of the field (y = 120)\n\tgoal_sp back_goal; // contains the goal at the back of the field (y = 0)\n\tlist teams; // contains the 2 teams\n\tlist players; // contains all the players of the game\n\t\n\tbase_team team_possession; // the last team which possess the ball. This value is used to determine if the behavior of the team has to be defensive or offensive.\n\t\n\tinit {\n\t\t// create the entities ball and the 2 goals\n\t\tcreate ball_sp with:[location::world.location] returns:var_ball;\n\t\tball  max_inertia) {\n\t\t\tfloat inertia_x 1 {\n\t\tdo apply_inertia;\n\t\t// verify if it is a non-offside position\n\t\tif ( (((team.position = \"back\") and (location.y > team.offside_pos))\n\t\t\tor ((team.position = \"front\") and (location.y < team.offside_pos))) \n\t\t\tand (!possess_ball) and (self != team.called_player)\n\t\t) {\n\t\t\t// offside position, go back to a correct position\n\t\t\tpoint target_pos  players; // all the players of the team.\n\tsoccer_game game;\n\t\n\tbase_player closest_player_to_ball  player_init_position;\n}\n\nspecies ball_sp skills:[moving] {\n\t// The ball agent.\n\tfloat speed  120) {\n\t\t\twrite \"back team score a goal !!\";\n\t\t\task first(soccer_game) {\n\t\t\t\tdo reinit_phase;\n\t\t\t}\n\t\t}\n\t\tif ((location.y+sin(heading)*speed) < 0) {\n\t\t\twrite \"front team score a goal !!\";\n\t\t\task first(soccer_game) {\n\t\t\t\tdo reinit_phase;\n\t\t\t}\n\t\t}\n\t}\n\taction shooted (point target_position, float speed_atr) {\n\t\t// action called when a player shoots the ball\n\t\tspeed 0 {\n\t\tlocation  player_init_position  teams; // contains the 2 teams\n\tlist players; // contains all the players of the game\n\t\n\tbase_team team_possession; // the last team which possess the ball. This value is used to determine if the behavior of the team has to be defensive or offensive.\n\t\n\tinit {\n\t\t// create the entities ball and the 2 goals\n\t\tcreate ball_sp with:[location::world.location] returns:var_ball;\n\t\tball  max_inertia) {\n\t\t\tfloat inertia_x 1 {\n\t\tdo apply_inertia;\n\t\t// verify if it is a non-offside position\n\t\tif ( (((team.position = \"back\") and (location.y > team.offside_pos))\n\t\t\tor ((team.position = \"front\") and (location.y < team.offside_pos))) \n\t\t\tand (!possess_ball) and (self != team.called_player)\n\t\t) {\n\t\t\t// offside position, go back to a correct position\n\t\t\tpoint target_pos  players; // all the players of the team.\n\tsoccer_game game;\n\t\n\tbase_player closest_player_to_ball  player_init_position;\n}\n\nspecies ball_sp skills:[moving] {\n\t// The ball agent.\n\tfloat speed  120) {\n\t\t\twrite \"back team score a goal !!\";\n\t\t\task first(soccer_game) {\n\t\t\t\tdo reinit_phase;\n\t\t\t}\n\t\t}\n\t\tif ((location.y+sin(heading)*speed) < 0) {\n\t\t\twrite \"front team score a goal !!\";\n\t\t\task first(soccer_game) {\n\t\t\t\tdo reinit_phase;\n\t\t\t}\n\t\t}\n\t}\n\taction shooted (point target_position, float speed_atr) {\n\t\t// action called when a player shoots the ball\n\t\tspeed 0 {\n\t\tlocation  mid_attack_pos ) ) {\n\t\t\trole  60 ) {\n\t\t\twing  2) )\n\t\t\t{\n\t\t\t\tstatus  player_init_position  player_list1;\n\t\tloop pos over:first(intelligentTeam).player_init_position {\n\t\t\t// compute the \"real position\" of each player according to the percentage given in \"player_init_position\"\n\t\t\tpoint real_pos  player_list2;\n\t\tloop pos over:first(stupidTeam).player_init_position {\n\t\t\t// compute the \"real position\" of each player according to the percentage given in \"player_init_position\"\n\t\t\tpoint real_pos  player_list1;\n\t\tloop pos over:first(backTeam).player_init_position {\n\t\t\t// compute the \"real position\" of each player according to the percentage given in \"player_init_position\"\n\t\t\tpoint real_pos  player_list2;\n\t\tloop pos over:first(frontTeam).player_init_position {\n\t\t\t// compute the \"real position\" of each player according to the percentage given in \"player_init_position\"\n\t\t\tpoint real_pos ","url":"wiki/Soccer-soccer_expe.md"},{"id":"wiki/Soccer-team1_strategy.md","title":" _team1strategy","content":"[//]: # (keyword|operator_intersects)\n[//]: # (keyword|operator_closest_points_with)\n[//]: # (keyword|operator_norm)\n[//]: # (keyword|operator_sqrt)\n[//]: # (keyword|operator_abs)\n[//]: # (keyword|operator_sin)\n[//]: # (keyword|operator_among)\n[//]: # (keyword|operator_^)\n# _team1strategy\n\n\n_Author : Julien_\n\nThis model contains one of the 2 team strategy. This strategy is quite advanced, attributing role for each player, with a custom influence_area and a custom position_mark.\n\n\nImported model : \n\n```\n\nmodel soccerbase\n\nspecies soccer_game {\n\t// contains the global informations of the game\n\trgb back_color_team;\n\trgb front_color_team;\n\t\n\tball_sp ball; // the ball agent\n\tgoal_sp front_goal; // contains the goal at the front of the field (y = 120)\n\tgoal_sp back_goal; // contains the goal at the back of the field (y = 0)\n\tlist teams; // contains the 2 teams\n\tlist players; // contains all the players of the game\n\t\n\tbase_team team_possession; // the last team which possess the ball. This value is used to determine if the behavior of the team has to be defensive or offensive.\n\t\n\tinit {\n\t\t// create the entities ball and the 2 goals\n\t\tcreate ball_sp with:[location::world.location] returns:var_ball;\n\t\tball  max_inertia) {\n\t\t\tfloat inertia_x 1 {\n\t\tdo apply_inertia;\n\t\t// verify if it is a non-offside position\n\t\tif ( (((team.position = \"back\") and (location.y > team.offside_pos))\n\t\t\tor ((team.position = \"front\") and (location.y < team.offside_pos))) \n\t\t\tand (!possess_ball) and (self != team.called_player)\n\t\t) {\n\t\t\t// offside position, go back to a correct position\n\t\t\tpoint target_pos  players; // all the players of the team.\n\tsoccer_game game;\n\t\n\tbase_player closest_player_to_ball  player_init_position;\n}\n\nspecies ball_sp skills:[moving] {\n\t// The ball agent.\n\tfloat speed  120) {\n\t\t\twrite \"back team score a goal !!\";\n\t\t\task first(soccer_game) {\n\t\t\t\tdo reinit_phase;\n\t\t\t}\n\t\t}\n\t\tif ((location.y+sin(heading)*speed) < 0) {\n\t\t\twrite \"front team score a goal !!\";\n\t\t\task first(soccer_game) {\n\t\t\t\tdo reinit_phase;\n\t\t\t}\n\t\t}\n\t}\n\taction shooted (point target_position, float speed_atr) {\n\t\t// action called when a player shoots the ball\n\t\tspeed 0 {\n\t\tlocation  mid_attack_pos ) ) {\n\t\t\trole  60 ) {\n\t\t\twing  2) )\n\t\t\t{\n\t\t\t\tstatus  player_init_position ","url":"wiki/Soccer-team1_strategy.md"},{"id":"wiki/Soccer-team2_strategy.md","title":" _team2strategy","content":"[//]: # (keyword|operator_intersects)\n[//]: # (keyword|operator_closest_points_with)\n[//]: # (keyword|operator_norm)\n[//]: # (keyword|operator_sqrt)\n[//]: # (keyword|operator_abs)\n[//]: # (keyword|operator_sin)\n# _team2strategy\n\n\n_Author : Julien_\n\nThis model contains one of the 2 team strategy. This strategy is very stupid : when you have the ball, run to the ennemy goal, else run to the ball\n\n\nImported model : \n\n```\n\nmodel soccerbase\n\nspecies soccer_game {\n\t// contains the global informations of the game\n\trgb back_color_team;\n\trgb front_color_team;\n\t\n\tball_sp ball; // the ball agent\n\tgoal_sp front_goal; // contains the goal at the front of the field (y = 120)\n\tgoal_sp back_goal; // contains the goal at the back of the field (y = 0)\n\tlist teams; // contains the 2 teams\n\tlist players; // contains all the players of the game\n\t\n\tbase_team team_possession; // the last team which possess the ball. This value is used to determine if the behavior of the team has to be defensive or offensive.\n\t\n\tinit {\n\t\t// create the entities ball and the 2 goals\n\t\tcreate ball_sp with:[location::world.location] returns:var_ball;\n\t\tball  max_inertia) {\n\t\t\tfloat inertia_x 1 {\n\t\tdo apply_inertia;\n\t\t// verify if it is a non-offside position\n\t\tif ( (((team.position = \"back\") and (location.y > team.offside_pos))\n\t\t\tor ((team.position = \"front\") and (location.y < team.offside_pos))) \n\t\t\tand (!possess_ball) and (self != team.called_player)\n\t\t) {\n\t\t\t// offside position, go back to a correct position\n\t\t\tpoint target_pos  players; // all the players of the team.\n\tsoccer_game game;\n\t\n\tbase_player closest_player_to_ball  player_init_position;\n}\n\nspecies ball_sp skills:[moving] {\n\t// The ball agent.\n\tfloat speed  120) {\n\t\t\twrite \"back team score a goal !!\";\n\t\t\task first(soccer_game) {\n\t\t\t\tdo reinit_phase;\n\t\t\t}\n\t\t}\n\t\tif ((location.y+sin(heading)*speed) < 0) {\n\t\t\twrite \"front team score a goal !!\";\n\t\t\task first(soccer_game) {\n\t\t\t\tdo reinit_phase;\n\t\t\t}\n\t\t}\n\t}\n\taction shooted (point target_position, float speed_atr) {\n\t\t// action called when a player shoots the ball\n\t\tspeed 0 {\n\t\tlocation  player_init_position ","url":"wiki/Soccer-team2_strategy.md"},{"id":"wiki/Sugarscape-Sugarscape.md","title":" sugarscape","content":"[//]: # (keyword|statement_put)\n[//]: # (keyword|constant_#lightgray)\n[//]: # (keyword|concept_grid)\n# sugarscape\n\n\n_Author : _\n\nA model with animal moving on a grid to find sugar. The animal agents have a life duration and die if it is reached or if they don't have anymore sugar.\n\n\nCode of the model : \n\n```\nmodel sugarscape\n\n  \nglobal {\n\t// Parameters \n\t\n\t//Growth rate of the sugar\n\tint sugarGrowthRate  types  ('../images/sugarscape.pgm');\n\trgb FFFFAA const: true > neighbours;\n\t\t\n\t\t//Initialization of the neighbours\n\t\tinit {\n\t\t\tloop i from: 1 to: maxRange {\n\t\t\t\tneighbours[i]  neighbours  poss_targets  0);\n\t\t//If no sugar is found in the neighbours cells, move randomly\n\t\tplace  8) color: #green;\n\t\t\t\tdata \"weak\" value: (animal as list) count (each.sugar < 9) color: #red;\n\t\t\t}\n\t\t}\n\t\tdisplay chart2 refresh: every(5) {\n\t\t\tchart 'Energy' type: histogram background: #lightgray {\n\t\t\t\tdata \"strong\" value: (animal as list) count (each.sugar > 8)  color: #green;\n\t\t\t\tdata \"weak\" value: (animal as list) count (each.sugar < 9)  color: #red;\n\t\t\t}\n\t\t}\n\t}\n}\n```\n","url":"wiki/Sugarscape-Sugarscape.md"},{"id":"wiki/Traffic-LWR-Traffic-Flow-Model.md","title":" Trafic Group (R2D2) MAPS7 - LWR Model","content":"[//]: # (keyword|operator_ln)\n[//]: # (keyword|operator_last)\n[//]: # (keyword|operator_sum)\n[//]: # (keyword|constant_#km)\n[//]: # (keyword|constant_#m)\n[//]: # (keyword|concept_transport)\n# Trafic Group (R2D2) MAPS7 - LWR Model\n\n\n_Author : A. Banos, N. Corson, C. Pivano, L. Rajaonarivo, P. Taillandier_\n\nThe LWR model was proposed by Lighthill and Whitham (1955) and by Richards (1956). It describes the trafic at a global level considering the speed, concentration and flows without taking into account the individual behavior af vehicles. Speed, concentration and flow are the three components of the LWR model. This models reproduces flow of traffic and congestion in specific conditions (homogeneous traffic), going from one equilibrium state to another (see the fundamental diagramm of traffic, which gives flow according to concentration).\nIn this model, a road is divided into sections and we arbitrarily give to the middle section a lower speed and critical concentration.\n\n\nCode of the model : \n\n```\n\n\nmodel TraficGroup\n\nglobal {\n\t\t\n\tfloat road_size ","url":"wiki/Traffic-LWR-Traffic-Flow-Model.md"},{"id":"wiki/Traffic-Simple-traffic-model.md","title":" Traffic","content":"[//]: # (keyword|operator_rnd_color)\n[//]: # (keyword|operator_exp)\n[//]: # (keyword|operator_as_map)\n[//]: # (keyword|operator_\\:\\:)\n[//]: # (keyword|operator_with_weights)\n[//]: # (keyword|constant_#sec)\n[//]: # (keyword|constant_#km)\n[//]: # (keyword|concept_gis)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_transport)\n# Traffic\n\n\n_Author : Patrick Taillandier_\n\nA simple road network model: the speed on a road depends on the number of people on this road (the highest, the slowest)\n\n\nCode of the model : \n\n```\n\nmodel traffic\n\nglobal {\n\t//Shapefile of the buildings\n\tfile building_shapefile  road_weights;\n\t\n\tinit {\n\t\t//Initialization of the building using the shapefile of buildings\n\t\tcreate building from: building_shapefile;\n\t\t//Initialization of the road using the shapefile of roads\n\t\tcreate road from: road_shapefile;\n\t\t\n\t\t//Creation of the people agents\n\t\tcreate people number: 1000{\n\t\t\t//People agents are located anywhere in one of the building\n\t\t\tlocation ","url":"wiki/Traffic-Simple-traffic-model.md"},{"id":"wiki/Urban-Growth-raster-model.md","title":" Cellular Automaton Based Urban Growth","content":"[//]: # (keyword|operator_max_of)\n[//]: # (keyword|operator_closest_to)\n[//]: # (keyword|operator_using)\n[//]: # (keyword|operator_sort_by)\n[//]: # (keyword|operator_last)\n[//]: # (keyword|statement_using)\n[//]: # (keyword|constant_#lightgray)\n[//]: # (keyword|constant_#cyan)\n[//]: # (keyword|type_topology)\n[//]: # (keyword|concept_gis)\n[//]: # (keyword|concept_shapefile)\n[//]: # (keyword|concept_grid)\n[//]: # (keyword|concept_graph)\n# Cellular Automaton Based Urban Growth\n\n\n_Author : Truong Chi Quang, Patrick Taillandier, Benoit Gaudou & Alexis Drogoul_\n\nmodel based on the one proposed by (Raimbault et al., 2014): At each simulation step the nb_plots_to_build empty plots with the highest constructability are built The constructability is computed from 3 criteria: the density of construction in the neighborhood, the distance to a road, the distance to the city center (using the road network). \n\n\nCode of the model : \n\n```\n\nmodel raster3\n\n\nglobal\n{ \n\t//File for the ascii grid\n\tfile asc_grid  empty_plots  plot_colors  ordered_plots  voisins ","url":"wiki/Urban-Growth-raster-model.md"},{"id":"wiki/Voronoi-Voronoi.md","title":" Voronoi","content":"[//]: # (keyword|operator_using)\n[//]: # (keyword|operator_closest_to)\n[//]: # (keyword|type_topology)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|concept_agent_movement)\n[//]: # (keyword|concept_grid)\n# Voronoi\n\n\n_Author : _\n\nA model showing how to clusterize space using the closest center as the kernel of our cluster. The space is discretized using a grid, each cell computing its distance from a center to know in which cluster it is. \n\n\nCode of the model : \n\n```\n\nmodel voronoi\n \nglobal {\n\t// Parameters \n\t//Number of points\n\tint num_points ","url":"wiki/Voronoi-Voronoi.md"},{"id":"wiki/Vote-Vote.md","title":" vote","content":"[//]: # (keyword|operator_points_at)\n[//]: # (keyword|operator_copy)\n[//]: # (keyword|operator_with_min_of)\n[//]: # (keyword|operator_gauss)\n[//]: # (keyword|operator_triangle)\n[//]: # (keyword|operator_with_max_of)\n[//]: # (keyword|operator_with_precision)\n[//]: # (keyword|operator_in)\n[//]: # (keyword|operator_union)\n[//]: # (keyword|operator_buffer)\n[//]: # (keyword|operator_inside)\n[//]: # (keyword|operator_sum)\n[//]: # (keyword|operator_ln)\n[//]: # (keyword|statement_switch)\n[//]: # (keyword|statement_match)\n[//]: # (keyword|statement_remove)\n[//]: # (keyword|concept_gui)\n# vote\n\n\n_Author : MAPS TEAM (Frederic Amblard, Thomas Louail, Romain Reulier, Paul Salze et Patrick Taillandier) _\n\nModeling of an election\n\n\nCode of the model : \n\n```\n \nmodel vote\n\nglobal {\n\t//Shape of the environment\n\tgeometry shape  active_candidates ;\n\t\n\tinit {\n\t\t//Creation of the elector\n\t\tcreate elector number: nb_electors;\n\t\tdo creation_candidates;\n\t}\n\t//Action to create the candidates according to the distribution of candidates\n\taction creation_candidates {\n\t\tswitch distribution_candidates { \n\t\t\tmatch \"Polygon\" {\n\t\t\t\tlist liste_points ([]);\n\t\t}\n\t\t//For each elector, do its definition\n\t\task elector {\n\t\t\tdo definition_candidate;\n\t\t}\n\t\tint nb_electors_max  nb_electors_max) {\n\t\t\t\tnb_electors_max > Groups;\n\t\t\tgeometry geoms  els   0) {\n\t\t\tentropy  0) {\n\t\t\t\tentropy  electors_dans_Group ;\n\taspect default {\n\t\tdraw square(2) color: #orange;\n\t} \n\t\n}\n//Species representing the elector moving \nspecies elector skills: [moving]{\n\t\n\tinit {\n\t\t//At initialization, place the elector in a certain place according to the distribution of electors\n\t\tif (distribution_electors = \"Normal\") {\n\t\t\tfloat x_cord  (weight_candidates)) {\n\t\t\telector my_elector  threshold_repulsion_candidates {\n\t\t\t\t\tdo goto target: location + location - the_candidate.location speed: distance_traveled;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t} \n\t\n}\n//Species candidate using the skill moving\nspecies candidate skills:[moving]{\n\trgb color  cands ","url":"wiki/Vote-Vote.md"},{"id":"wiki/Ants-(Foraging-and-Sorting).md","title":" Ants (Foraging and Sorting)","content":"# Ants (Foraging and Sorting)\n\nThis sub-section is composed of the following models :\n\n* [Ant Foraging (Classic)](references#Ants(ForagingandSorting)AntForaging(Classic))\n\n* [Ant Foraging (Complex)](references#Ants(ForagingandSorting)AntForaging(Complex))\n\n* [Ant Foraging (Multi-Simulation)](references#Ants(ForagingandSorting)AntForaging(Multi-Simulation))\n\n* [Ant Foraging (Simple)](references#Ants(ForagingandSorting)AntForaging(Simple))\n\n* [Ant Sorting](references#Ants(ForagingandSorting)AntSorting)\n\n","url":"wiki/Ants-(Foraging-and-Sorting).md"},{"id":"wiki/Articles.md","title":" Articles","content":"# Articles\n\nThis sub-section is composed of the following models :\n\n* [Ville 1](references#Articlesville_1)\n\n* [Ville 2](references#Articlesville_2)\n\n* [Ville 3](references#Articlesville_3)\n\n* [Ville 4](references#Articlesville_4)\n\n* [Ville 5](references#Articlesville_5)\n\n* [Ville 6](references#Articlesville_6)\n\n* [Prima 1](references#ArticlesPrima_model1)\n\n* [Prima 2](references#ArticlesPrima_model2)\n\n* [Prima 3](references#ArticlesPrima_model3)\n\n* [Prima 4](references#ArticlesPrima_model4)\n\n* [Prima 5](references#ArticlesPrima_model5)\n\n* [Prima 5](references#ArticlesPrima_model6)\n\n","url":"wiki/Articles.md"},{"id":"wiki/Boids.md","title":" Boids","content":"# Boids\n\nThis sub-section is composed of the following models :\n\n* [Boids 3D Analysis](references#BoidsBoids3DAnalysis)\n\n* [Boids 3D Motion](references#BoidsBoids3DMotion)\n\n* [Boids With Flocks](references#BoidsBoidsWithFlocks)\n\n* [Boids](references#BoidsBoids)\n\n","url":"wiki/Boids.md"},{"id":"wiki/Circle.md","title":" Circle","content":"# Circle\n\nThis sub-section is composed of the following models :\n\n* [Circle](references#CircleCircle)\n\n","url":"wiki/Circle.md"},{"id":"wiki/Clock.md","title":" Clock","content":"# Clock\n\nThis sub-section is composed of the following models :\n\n* [Clock](references#ClockClock)\n\n","url":"wiki/Clock.md"},{"id":"wiki/Co-model-Example.md","title":" Co-model Example","content":"# Co-model Example\n\nThis sub-section is composed of the following models :\n\n* [Comodel of Boids and Voronoi](references#Co-modelExamplecomodelBoidsVoronoi)\n\n* [Comodel of Flood and Evacuation model](references#Co-modelExamplecomodel_Flood_Evacuation)\n\n* [Comodel SIR Switch](references#Co-modelExampleComodel_SIR_Switch)\n\n* [comodel Urban and Traffic model](references#Co-modelExamplecomodel_Urban_Traffic)\n\n","url":"wiki/Co-model-Example.md"},{"id":"wiki/Epidemiology.md","title":" Epidemiology","content":"# Epidemiology\n\nThis sub-section is composed of the following models :\n\n* [comparison_ABM_EBM_SIR](references#EpidemiologySIR(ABMvsEBM))\n\n* [simple_ODE_SIR_Predefined](references#EpidemiologySIR(Built-In))\n\n* [SIR_split_in_agents](references#EpidemiologySIR(SplitinAgents))\n\n* [SIR_switch](references#EpidemiologySIR(Switch))\n\n* [SI without ODE](references#EpidemiologySusceptibleInfected(SI))\n\n* [SIR without ODE](references#EpidemiologySusceptibleInfectedRecovered(SIR))\n\n","url":"wiki/Epidemiology.md"},{"id":"wiki/Evacuation.md","title":" Evacuation","content":"# Evacuation\n\nThis sub-section is composed of the following models :\n\n* [continuous_move](references#EvacuationContinuousMove)\n\n* [evacuationgoto](references#EvacuationGotoonGrid)\n\n* [grid_move](references#EvacuationMoveonGrid)\n\n","url":"wiki/Evacuation.md"},{"id":"wiki/Flood-Simulation.md","title":" Flood Simulation","content":"# Flood Simulation\n\nThis sub-section is composed of the following models :\n\n* [Hydrological Model](references#FloodSimulationHydrologicalModel)\n\n","url":"wiki/Flood-Simulation.md"},{"id":"wiki/Learning.md","title":" Learning","content":"# Learning\n\nThis sub-section is composed of the following models :\n\n* [Agent Based Clustering](references#LearningMAS_KMEANS)\n\n","url":"wiki/Learning.md"},{"id":"wiki/Life.md","title":" Life","content":"# Life\n\nThis sub-section is composed of the following models :\n\n* [Life](references#LifeLife)\n\n","url":"wiki/Life.md"},{"id":"wiki/Multi-level-data-analysis.md","title":" Multi-level data analysis","content":"# Multi-level data analysis\n\nThis sub-section is composed of the following models :\n\n* [SpatialGraph](references#Multi-leveldataanalysisGraphFromBug(DistanceGraph))\n\n* [SpatialGraph3d](references#Multi-leveldataanalysisGraphFromBug(MirrorGraph))\n\n* [Modavi](references#Multi-leveldataanalysisMODAVI)\n\n","url":"wiki/Multi-level-data-analysis.md"},{"id":"wiki/Predator-Prey.md","title":" Predator Prey","content":"# Predator Prey\n\nThis sub-section is composed of the following models :\n\n* [ODE_LotkaVolterra](references#PredatorPreyLotka-Volterra(InfluenceofIntegrationStep))\n\n* [ODE_LotkaVolterra](references#PredatorPreyLotka-Volterra(Simple))\n\n","url":"wiki/Predator-Prey.md"},{"id":"wiki/Segregation-(Schelling).md","title":" Segregation (Schelling)","content":"# Segregation (Schelling)\n\nThis sub-section is composed of the following models :\n\n* [segregationAgents](references#Segregation(Schelling)Segregation(Agents))\n\n* [segregationGrid](references#Segregation(Schelling)Segregation(CellularAutomata))\n\n* [segregationGIS](references#Segregation(Schelling)Segregation(GIS))\n\n* [segregationGoogleMap](references#Segregation(Schelling)Segregation(GoogleMap))\n\n","url":"wiki/Segregation-(Schelling).md"},{"id":"wiki/Soccer.md","title":" Soccer","content":"# Soccer\n\nThis sub-section is composed of the following models :\n\n* [Soccer Game](references#Soccersoccer)\n\n* [Soccer game (Various strategies)](references#Soccersoccer_expe)\n\n","url":"wiki/Soccer.md"},{"id":"wiki/Sugarscape.md","title":" Sugarscape","content":"# Sugarscape\n\nThis sub-section is composed of the following models :\n\n* [sugarscape](references#SugarscapeSugarscape)\n\n","url":"wiki/Sugarscape.md"},{"id":"wiki/Traffic.md","title":" Traffic","content":"# Traffic\n\nThis sub-section is composed of the following models :\n\n* [Trafic Group (R2D2) MAPS7 - LWR Model](references#TrafficLWRTrafficFlowModel)\n\n* [Traffic](references#TrafficSimpletrafficmodel)\n\n","url":"wiki/Traffic.md"},{"id":"wiki/Urban-Growth.md","title":" Urban Growth","content":"# Urban Growth\n\nThis sub-section is composed of the following models :\n\n* [Cellular Automaton Based Urban Growth](references#UrbanGrowthrastermodel)\n\n","url":"wiki/Urban-Growth.md"},{"id":"wiki/Voronoi.md","title":" Voronoi","content":"# Voronoi\n\nThis sub-section is composed of the following models :\n\n* [Voronoi](references#VoronoiVoronoi)\n\n","url":"wiki/Voronoi.md"},{"id":"wiki/Vote.md","title":" Vote","content":"# Vote\n\nThis sub-section is composed of the following models :\n\n* [vote](references#VoteVote)\n\n","url":"wiki/Vote.md"},{"id":"wiki/Incremental-Model-Incremental-Model-1.md","title":" Simple SI Model","content":"[//]: # (keyword|operator_among)\n[//]: # (keyword|constant_#m)\n[//]: # (keyword|constant_#minute)\n[//]: # (keyword|constant_#km)\n# Simple SI Model\n\n\nFirst part of the tutorial : Incremental Model\n\n\nCode of the model : \n\n```\n\nmodel SI_city\n\nglobal{ \n\tint nb_people ","url":"wiki/Incremental-Model-Incremental-Model-1.md"},{"id":"wiki/Incremental-Model-Incremental-Model-2.md","title":" Charts","content":"[//]: # (keyword|operator_among)\n[//]: # (keyword|constant_#m)\n[//]: # (keyword|constant_#minute)\n[//]: # (keyword|constant_#km)\n[//]: # (keyword|concept_chart)\n# Charts\n\n\nSecond part of the tutorial : Incremental Model\n\n\nCode of the model : \n\n```\n\nmodel SI_city\n\nglobal{\n\tint nb_people ","url":"wiki/Incremental-Model-Incremental-Model-2.md"},{"id":"wiki/Incremental-Model-Incremental-Model-3.md","title":" Integration of GIS Data","content":"[//]: # (keyword|operator_among)\n[//]: # (keyword|constant_#minute)\n[//]: # (keyword|constant_#m)\n[//]: # (keyword|constant_#km)\n[//]: # (keyword|concept_gis)\n# Integration of GIS Data\n\n\nthird part of the tutorial : Incremental Model\n\n\nCode of the model : \n\n```\n\nmodel model3 \n \nglobal {\n\tint nb_people ","url":"wiki/Incremental-Model-Incremental-Model-3.md"},{"id":"wiki/Incremental-Model-Incremental-Model-4.md","title":" Movement on Graph","content":"[//]: # (keyword|operator_^)\n[//]: # (keyword|operator_abs)\n[//]: # (keyword|operator_among)\n[//]: # (keyword|constant_#minute)\n[//]: # (keyword|constant_#m)\n[//]: # (keyword|constant_#km)\n[//]: # (keyword|concept_graph)\n# Movement on Graph\n\n\n4th part of the tutorial : Incremental Model\n\n\nCode of the model : \n\n```\n \nmodel model4 \n \nglobal {\n\tint nb_people ","url":"wiki/Incremental-Model-Incremental-Model-4.md"},{"id":"wiki/Incremental-Model-Incremental-Model-5.md","title":" 3D visualization","content":"[//]: # (keyword|operator_^)\n[//]: # (keyword|operator_abs)\n[//]: # (keyword|operator_among)\n[//]: # (keyword|statement_light)\n[//]: # (keyword|constant_#minute)\n[//]: # (keyword|constant_#m)\n[//]: # (keyword|constant_#km)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_light)\n# 3D visualization\n\n\n5th part of the tutorial : Incremental Model\n\n\nCode of the model : \n\n```\n\nmodel model5 \n \nglobal {\n\tint nb_people  20;\n\t\n\tfloat infected_rate update: nb_people_infected/length(people);\n\tinit {\n\t\tcreate road from: roads_shapefile;\n\t\troad_network ","url":"wiki/Incremental-Model-Incremental-Model-5.md"},{"id":"wiki/Incremental-Model-Incremental-Model-6.md","title":" Multi-level","content":"[//]: # (keyword|operator_^)\n[//]: # (keyword|operator_abs)\n[//]: # (keyword|operator_accumulate)\n[//]: # (keyword|operator_dead)\n[//]: # (keyword|operator_inside)\n[//]: # (keyword|operator_among)\n[//]: # (keyword|statement_release)\n[//]: # (keyword|statement_capture)\n[//]: # (keyword|statement_light)\n[//]: # (keyword|constant_#minute)\n[//]: # (keyword|constant_#m)\n[//]: # (keyword|constant_#km)\n[//]: # (keyword|concept_multi_level)\n# Multi-level\n\n\n6th part of the tutorial : Incremental Model\n\n\nCode of the model : \n\n```\n\nmodel model6 \n \nglobal  {\n\tint nb_people  list_people_in_buildings update: (building accumulate each.people_inside) where (not dead(each));\n\tint nb_people_infected  20;\n\t\n\tfloat infected_rate update: nb_people_infected/nb_people;\n\tinit {\n\t\tcreate road from: roads_shapefile;\n\t\troad_network  people_inside -> {members collect people_in_building(each)};\n\t\n\taspect geom {\n\t\tint nbI  0.5 ? #red : #green) depth: height;\n\t}\n\t\n\tspecies people_in_building parent: people schedules: [] {\n\t\taspect circle{}\n\t\taspect sphere3D{}\n\t}\n\t\n\treflex let_people_leave  {\n\t\task members as: people_in_building{\n\t\t\tstaying_counter  leaving_people (members where (flip(people_in_building(each).staying_counter / staying_coeff)));\n\t\tif not (empty (leaving_people)) {\n\t\t\trelease leaving_people as: people in: world returns: released_people;\n\t\t\task released_people {\n\t\t\t\ttarget  entering_people ","url":"wiki/Incremental-Model-Incremental-Model-6.md"},{"id":"wiki/Incremental-Model-Incremental-Model-7.md","title":" Differential Equation","content":"[//]: # (keyword|operator_^)\n[//]: # (keyword|operator_abs)\n[//]: # (keyword|operator_accumulate)\n[//]: # (keyword|operator_dead)\n[//]: # (keyword|operator_inside)\n[//]: # (keyword|operator_diff)\n[//]: # (keyword|operator_among)\n[//]: # (keyword|statement_release)\n[//]: # (keyword|statement_capture)\n[//]: # (keyword|statement_equation)\n[//]: # (keyword|statement_\\=)\n[//]: # (keyword|statement_solve)\n[//]: # (keyword|statement_light)\n[//]: # (keyword|constant_#minute)\n[//]: # (keyword|constant_#m)\n[//]: # (keyword|constant_#km)\n[//]: # (keyword|concept_equation)\n# Differential Equation\n\n\n7th part of the tutorial : Incremental Model\n\n\nCode of the model : \n\n```\n\nmodel model7 \nglobal  {\n\tint nb_people  list_people_in_buildings update: (building accumulate each.people_inside) where (not dead(each));\n\tint nb_people_infected  20;\n\t\n\tfloat infected_rate update: nb_people_infected/nb_people;\n\tinit {\n\t\tcreate road from: roads_shapefile;\n\t\troad_network  people_inside -> {members collect people_in_building(each)};\n\tfloat I;\n\tfloat S;\n\tfloat T;\n   \tfloat t;   \n   \tfloat I_to1; \n   \t\n\taspect geom {\n\t\tint nbI  0.5 ? #red : #green) depth: height;\n\t}\n\t\n\tspecies people_in_building parent: people schedules: [] {\n\t\taspect circle{}\n\t\taspect sphere3D{}\n\t}\n\t\n\treflex let_people_leave  {\n\t\task members as: people_in_building{\n\t\t\tstaying_counter  leaving_people (members where (flip(people_in_building(each).staying_counter / staying_coeff)));\n\t\tif not (empty (leaving_people)) {\n\t\t\trelease leaving_people as: people in: world returns: released_people;\n\t\t\task released_people {\n\t\t\t\ttarget  entering_people  S_members (members where not (people_in_building(each).is_infected));\n    \tS  0 and S > 0) {\n    \t\tsolve SIR method: \"rk4\" step: h;\n    \t\tI_to1 ","url":"wiki/Incremental-Model-Incremental-Model-7.md"},{"id":"wiki/Predator-Prey-Model-01.md","title":" Basic model (prey agents)","content":"# Basic model (prey agents)\n\n\nFirst part of the tutorial : Predator Prey\n\n\nCode of the model : \n\n```\n\nmodel prey_predator\n\nglobal {\n\tint nb_preys_init ","url":"wiki/Predator-Prey-Model-01.md"},{"id":"wiki/Predator-Prey-Model-02.md","title":" Dynamic of the vegetation (grid)","content":"[//]: # (keyword|concept_grid)\n# Dynamic of the vegetation (grid)\n\n\nSecond part of the tutorial : Predator Prey\n\n\nCode of the model : \n\n```\n\nmodel prey_predator\n\nglobal {\n\tint nb_preys_init ","url":"wiki/Predator-Prey-Model-02.md"},{"id":"wiki/Predator-Prey-Model-03.md","title":" Behavior of the prey agent","content":"# Behavior of the prey agent\n\n\nThird part of the tutorial : Predator Prey\n\n\nCode of the model : \n\n```\n\nmodel prey_predator\n\nglobal {\n\tint nb_preys_init  0 { \n\t\tfloat energy_transfert  neighbours  ","url":"wiki/Predator-Prey-Model-03.md"},{"id":"wiki/Predator-Prey-Model-04.md","title":" Use of Inspectors/monitors","content":"[//]: # (keyword|concept_inspector)\n[//]: # (keyword|concept_monitor)\n# Use of Inspectors/monitors\n\n\n4th part of the tutorial : Predator Prey\n\n\nCode of the model : \n\n```\n\nmodel prey_predator\n\nglobal {\n\tint nb_preys_init  {length (prey)};\n\t\n\tinit {\n\t\tcreate prey number: nb_preys_init ;\n\t}\n}\nspecies prey {\n\tfloat size  0 { \n\t\tfloat energy_transfert  neighbours  ","url":"wiki/Predator-Prey-Model-04.md"},{"id":"wiki/Predator-Prey-Model-05.md","title":" Predator agents (parent species)","content":"[//]: # (keyword|operator_inside)\n[//]: # (keyword|concept_inheritance)\n# Predator agents (parent species)\n\n\n5th part of the tutorial : Predator Prey\n\n\nCode of the model : \n\n```\n\nmodel prey_predator\n\nglobal {\n\tint nb_preys_init  {length (prey)};\n\tint nb_predators -> {length (predator)};\n\t\n\tinit {\n\t\tcreate prey number: nb_preys_init ; \n\t\tcreate predator number: nb_predators_init ;\n\t}\n}\n\nspecies generic_species {\n\tfloat size  0 {\n\t\tfloat energy_transfert  reachable_preys update: prey inside (myCell);\n\t\t\n\treflex eat when: ! empty(reachable_preys) {\n\t\task one_of (reachable_preys) {\n\t\t\tdo die ;\n\t\t}\n\t\tenergy  neighbours  ","url":"wiki/Predator-Prey-Model-05.md"},{"id":"wiki/Predator-Prey-Model-06.md","title":" Breeding of prey and predator agents","content":"[//]: # (keyword|operator_inside)\n[//]: # (keyword|type_species)\n# Breeding of prey and predator agents\n\n\n6th part of the tutorial : Predator Prey\n\n\nCode of the model : \n\n```\n\nmodel prey_predator\n\nglobal {\n\tint nb_preys_init  {length (prey)};\n\tint nb_predators -> {length (predator)};\n\t\n\tinit {\n\t\tcreate prey number: nb_preys_init ; \n\t\tcreate predator number: nb_predators_init ;\n\t}\n}\n\nspecies generic_species {\n\tfloat size = energy_reproduce) and (flip(proba_reproduce)) {\n\t\t\tint nb_offsprings  0 {\n\t\tfloat energy_transfert  reachable_preys update: prey inside (myCell);\n\tfloat proba_reproduce  neighbours  ","url":"wiki/Predator-Prey-Model-06.md"},{"id":"wiki/Predator-Prey-Model-07.md","title":" Agent display (aspect)","content":"[//]: # (keyword|operator_with_precision)\n[//]: # (keyword|operator_inside)\n[//]: # (keyword|type_species)\n[//]: # (keyword|concept_display)\n# Agent display (aspect)\n\n\n6th part of the tutorial: Predator Prey\n\n\nCode of the model : \n\n```\n\nmodel prey_predator\n\nglobal {\n\tint nb_preys_init  {length (prey)};\n\tint nb_predators -> {length (predator)};\n\t\n\tinit {\n\t\tcreate prey number: nb_preys_init ; \n\t\tcreate predator number: nb_predators_init ;\n\t}\n}\n\nspecies generic_species {\n\tfloat size = energy_reproduce) and (flip(proba_reproduce)) {\n\t\t\tint nb_offsprings  0 {\n\t\tfloat energy_transfert  reachable_preys update: prey inside (myCell);\n\tfloat proba_reproduce  neighbours  ","url":"wiki/Predator-Prey-Model-07.md"},{"id":"wiki/Predator-Prey-Model-08.md","title":" Complex behaviors for the preys and predators","content":"[//]: # (keyword|operator_with_precision)\n[//]: # (keyword|operator_with_max_of)\n[//]: # (keyword|operator_inside)\n[//]: # (keyword|type_species)\n# Complex behaviors for the preys and predators\n\n\n8th part of the tutorial: Predator Prey\n\n\nCode of the model : \n\n```\n\nmodel prey_predator\n\nglobal {\n\tint nb_preys_init  {length (prey)};\n\tint nb_predators -> {length (predator)};\n\t\n\tinit {\n\t\tcreate prey number: nb_preys_init ; \n\t\tcreate predator number: nb_predators_init ;\n\t}\n}\n\nspecies generic_species {\n\tfloat size = energy_reproduce) and (flip(proba_reproduce)) {\n\t\t\tint nb_offsprings  0 {\n\t\tfloat energy_transfert  reachable_preys update: prey inside (myCell);\n\tfloat proba_reproduce  neighbours  ","url":"wiki/Predator-Prey-Model-08.md"},{"id":"wiki/Predator-Prey-Model-09.md","title":" Adding of a stopping condition","content":"[//]: # (keyword|operator_with_precision)\n[//]: # (keyword|operator_with_max_of)\n[//]: # (keyword|operator_inside)\n[//]: # (keyword|type_species)\n# Adding of a stopping condition\n\n\n9th part of the tutorial: Predator Prey\n\n\nCode of the model : \n\n```\n\nmodel prey_predator\n\nglobal {\n\tint nb_preys_init  {length (prey)};\n\tint nb_predators -> {length (predator)};\n\t\n\tinit {\n\t\tcreate prey number: nb_preys_init ; \n\t\tcreate predator number: nb_predators_init ;\n\t}\n\t\n\treflex stop_simulation when: (nb_preys = 0) or (nb_predators = 0) {\n\t\tdo halt ;\n\t} \n}\n\nspecies generic_species {\n\tfloat size = energy_reproduce) and (flip(proba_reproduce)) {\n\t\t\tint nb_offsprings  0 {\n\t\tfloat energy_transfert  reachable_preys update: prey inside (myCell);\n\tfloat proba_reproduce  neighbours  ","url":"wiki/Predator-Prey-Model-09.md"},{"id":"wiki/Predator-Prey-Model-10.md","title":" Definition of charts","content":"[//]: # (keyword|operator_with_precision)\n[//]: # (keyword|operator_with_max_of)\n[//]: # (keyword|operator_inside)\n[//]: # (keyword|constant_#lightgray)\n[//]: # (keyword|type_species)\n[//]: # (keyword|concept_chart)\n# Definition of charts\n\n\n10th part of the tutorial: Predator Prey\n\n\nCode of the model : \n\n```\n\nmodel prey_predator\n\nglobal {\n\tint nb_preys_init  {length (prey)};\n\tint nb_predators -> {length (predator)};\n\t\n\tinit {\n\t\tcreate prey number: nb_preys_init ; \n\t\tcreate predator number: nb_predators_init ;\n\t}\n\t\n\treflex stop_simulation when: (nb_preys = 0) or (nb_predators = 0) {\n\t\tdo halt ;\n\t} \n}\n\nspecies generic_species {\n\tfloat size = energy_reproduce) and (flip(proba_reproduce)) {\n\t\t\tint nb_offsprings  0 {\n\t\tfloat energy_transfert  reachable_preys update: prey inside (myCell);\n\tfloat proba_reproduce  neighbours   0.25) and (each.energy <= 0.5)) color:#blue;\n\t\t\t\tdata \"]0.5;0.75]\" value: prey count ((each.energy > 0.5) and (each.energy <= 0.75)) color:#blue;\n\t\t\t\tdata \"]0.75;1]\" value: prey count (each.energy > 0.75) color:#blue;\n\t\t\t}\n\t\t\tchart \"Predator Energy Distribution\" type: histogram background: #lightgray size: {0.5,0.5} position: {0.5, 0.5} {\n\t\t\t\tdata \"]0;0.25]\" value: predator count (each.energy <= 0.25) color: #red ;\n\t\t\t\tdata \"]0.25;0.5]\" value: predator count ((each.energy > 0.25) and (each.energy <= 0.5)) color: #red ;\n\t\t\t\tdata \"]0.5;0.75]\" value: predator count ((each.energy > 0.5) and (each.energy <= 0.75)) color: #red ;\n\t\t\t\tdata \"]0.75;1]\" value: predator count (each.energy > 0.75) color: #red;\n\t\t\t}\n\t\t}\n\t\tmonitor \"Number of preys\" value: nb_preys;\n\t\tmonitor \"Number of predators\" value: nb_predators;\n\t}\n}\n```\n","url":"wiki/Predator-Prey-Model-10.md"},{"id":"wiki/Predator-Prey-Model-11.md","title":" Writing files","content":"[//]: # (keyword|operator_with_precision)\n[//]: # (keyword|operator_with_max_of)\n[//]: # (keyword|operator_inside)\n[//]: # (keyword|operator_min_of)\n[//]: # (keyword|operator_max_of)\n[//]: # (keyword|statement_save)\n[//]: # (keyword|constant_#lightgray)\n[//]: # (keyword|type_species)\n[//]: # (keyword|concept_file)\n# Writing files\n\n\n11th part of the tutorial: Predator Prey\n\n\nCode of the model : \n\n```\n\nmodel prey_predator\n\nglobal {\n\tint nb_preys_init  {length (prey)};\n\tint nb_predators -> {length (predator)};\n\t\n\tinit {\n\t\tcreate prey number: nb_preys_init ; \n\t\tcreate predator number: nb_predators_init ;\n\t}\n\t\n\treflex save_result when: (nb_preys > 0) and (nb_predators > 0){\n\t\tsave (\"cycle: \"+ cycle + \"; nbPreys: \" + nb_preys\n\t\t\t+ \"; minEnergyPreys: \" + ((prey as list) min_of each.energy)\n\t\t\t+ \"; maxSizePreys: \" + ((prey as list) max_of each.energy) \n\t   \t\t+ \"; nbPredators: \" + nb_predators           \n\t   \t\t+ \"; minEnergyPredators: \" + ((predator as list) min_of each.energy)          \n\t   \t\t+ \"; maxSizePredators: \" + ((predator as list) max_of each.energy)) \n\t   \t\tto: \"results.txt\" type: \"text\" ;\n\t}\n\t\n\treflex stop_simulation when: (nb_preys = 0) or (nb_predators = 0) {\n\t\tdo halt ;\n\t} \n}\n\nspecies generic_species {\n\tfloat size = energy_reproduce) and (flip(proba_reproduce)) {\n\t\t\tint nb_offsprings  0 {\n\t\tfloat energy_transfert  reachable_preys update: prey inside (myCell);\n\tfloat proba_reproduce  neighbours   0.25) and (each.energy <= 0.5)) color:#blue;\n\t\t\t\tdata \"]0.5;0.75]\" value: prey count ((each.energy > 0.5) and (each.energy <= 0.75)) color:#blue;\n\t\t\t\tdata \"]0.75;1]\" value: prey count (each.energy > 0.75) color:#blue;\n\t\t\t}\n\t\t\tchart \"Predator Energy Distribution\" type: histogram background: #lightgray size: {0.5,0.5} position: {0.5, 0.5} {\n\t\t\t\tdata \"]0;0.25]\" value: predator count (each.energy <= 0.25) color: #red ;\n\t\t\t\tdata \"]0.25;0.5]\" value: predator count ((each.energy > 0.25) and (each.energy <= 0.5)) color: #red ;\n\t\t\t\tdata \"]0.5;0.75]\" value: predator count ((each.energy > 0.5) and (each.energy <= 0.75)) color: #red ;\n\t\t\t\tdata \"]0.75;1]\" value: predator count (each.energy > 0.75) color: #red;\n\t\t\t}\n\t\t}\n\t\tmonitor \"Number of preys\" value: nb_preys;\n\t\tmonitor \"Number of predators\" value: nb_predators;\n\t}\n}\n```\n","url":"wiki/Predator-Prey-Model-11.md"},{"id":"wiki/Predator-Prey-Model-12.md","title":" Image loading (raster data)","content":"[//]: # (keyword|operator_with_precision)\n[//]: # (keyword|operator_with_max_of)\n[//]: # (keyword|operator_inside)\n[//]: # (keyword|operator_min_of)\n[//]: # (keyword|operator_max_of)\n[//]: # (keyword|statement_save)\n[//]: # (keyword|constant_#lightgray)\n[//]: # (keyword|type_species)\n[//]: # (keyword|concept_file)\n[//]: # (keyword|concept_raster)\n# Image loading (raster data)\n\n\n12th part of the tutorial: Predator Prey\n\n\nCode of the model : \n\n```\n\nmodel prey_predator\n\nglobal {\n\tint nb_preys_init  {length (prey)};\n\tint nb_predators -> {length (predator)};\n\t\n\tinit {\n\t\tcreate prey number: nb_preys_init ; \n\t\tcreate predator number: nb_predators_init ;\n\t\task vegetation_cell {\n\t\t\tcolor  0) and (nb_predators > 0){\n\t\tsave (\"cycle: \"+ cycle + \"; nbPreys: \" + nb_preys\n\t\t\t+ \"; minEnergyPreys: \" + ((prey as list) min_of each.energy)\n\t\t\t+ \"; maxSizePreys: \" + ((prey as list) max_of each.energy) \n\t   \t\t+ \"; nbPredators: \" + nb_predators           \n\t   \t\t+ \"; minEnergyPredators: \" + ((predator as list) min_of each.energy)          \n\t   \t\t+ \"; maxSizePredators: \" + ((predator as list) max_of each.energy)) \n\t   \t\tto: \"results.txt\" type: \"text\" ;\n\t}\n\t\n\treflex stop_simulation when: (nb_preys = 0) or (nb_predators = 0) {\n\t\tdo halt ;\n\t} \n}\n\nspecies generic_species {\n\tfloat size = energy_reproduce) and (flip(proba_reproduce)) {\n\t\t\tint nb_offsprings  0 {\n\t\tfloat energy_transfert  reachable_preys update: prey inside (myCell);\n\tfloat proba_reproduce  neighbours   0.25) and (each.energy <= 0.5)) color:#blue;\n\t\t\t\tdata \"]0.5;0.75]\" value: prey count ((each.energy > 0.5) and (each.energy <= 0.75)) color:#blue;\n\t\t\t\tdata \"]0.75;1]\" value: prey count (each.energy > 0.75) color:#blue;\n\t\t\t}\n\t\t\tchart \"Predator Energy Distribution\" type: histogram background: #lightgray size: {0.5,0.5} position: {0.5, 0.5} {\n\t\t\t\tdata \"]0;0.25]\" value: predator count (each.energy <= 0.25) color: #red ;\n\t\t\t\tdata \"]0.25;0.5]\" value: predator count ((each.energy > 0.25) and (each.energy <= 0.5)) color: #red ;\n\t\t\t\tdata \"]0.5;0.75]\" value: predator count ((each.energy > 0.5) and (each.energy <= 0.75)) color: #red ;\n\t\t\t\tdata \"]0.75;1]\" value: predator count (each.energy > 0.75) color: #red;\n\t\t\t}\n\t\t}\n\t\tmonitor \"Number of preys\" value: nb_preys;\n\t\tmonitor \"Number of predators\" value: nb_predators;\n\t}\n}\n```\n","url":"wiki/Predator-Prey-Model-12.md"},{"id":"wiki/Predator-Prey-Model-13.md","title":" Exploration (batch)","content":"[//]: # (keyword|operator_with_precision)\n[//]: # (keyword|operator_with_max_of)\n[//]: # (keyword|operator_inside)\n[//]: # (keyword|operator_min_of)\n[//]: # (keyword|operator_max_of)\n[//]: # (keyword|statement_save)\n[//]: # (keyword|statement_tabu)\n[//]: # (keyword|constant_#lightgray)\n[//]: # (keyword|type_species)\n[//]: # (keyword|concept_batch)\n# Exploration (batch)\n\n\n13th part of the tutorial: Predator Prey\n\n\nCode of the model : \n\n```\n\nmodel prey_predator\n\n\nglobal {\n\tint nb_preys_init  {length (prey)};\n\tint nb_predators -> {length (predator)};\n\t\n\tinit {\n\t\tcreate prey number: nb_preys_init ; \n\t\tcreate predator number: nb_predators_init ;\n\t\task vegetation_cell {\n\t\t\tcolor  0) and (nb_predators > 0){\n\t\tsave (\"cycle: \"+ cycle + \"; nbPreys: \" + nb_preys\n\t\t\t+ \"; minEnergyPreys: \" + ((prey as list) min_of each.energy)\n\t\t\t+ \"; maxSizePreys: \" + ((prey as list) max_of each.energy) \n\t   \t\t+ \"; nbPredators: \" + nb_predators           \n\t   \t\t+ \"; minEnergyPredators: \" + ((predator as list) min_of each.energy)          \n\t   \t\t+ \"; maxSizePredators: \" + ((predator as list) max_of each.energy)) \n\t   \t\tto: \"results.txt\" type: \"text\" ;\n\t}\n\t\n\treflex stop_simulation when: (nb_preys = 0) or (nb_predators = 0) {\n\t\tdo halt ;\n\t} \n}\n\nspecies generic_species {\n\tfloat size = energy_reproduce) and (flip(proba_reproduce)) {\n\t\t\tint nb_offsprings  0 {\n\t\tfloat energy_transfert  reachable_preys update: prey inside (myCell);\n\tfloat proba_reproduce  neighbours   0.25) and (each.energy <= 0.5)) color:#blue;\n\t\t\t\tdata \"]0.5;0.75]\" value: prey count ((each.energy > 0.5) and (each.energy <= 0.75)) color:#blue;\n\t\t\t\tdata \"]0.75;1]\" value: prey count (each.energy > 0.75) color:#blue;\n\t\t\t}\n\t\t\tchart \"Predator Energy Distribution\" type: histogram background: #lightgray size: {0.5,0.5} position: {0.5, 0.5} {\n\t\t\t\tdata \"]0;0.25]\" value: predator count (each.energy <= 0.25) color: #red ;\n\t\t\t\tdata \"]0.25;0.5]\" value: predator count ((each.energy > 0.25) and (each.energy <= 0.5)) color: #red ;\n\t\t\t\tdata \"]0.5;0.75]\" value: predator count ((each.energy > 0.5) and (each.energy <= 0.75)) color: #red ;\n\t\t\t\tdata \"]0.75;1]\" value: predator count (each.energy > 0.75) color: #red;\n\t\t\t}\n\t\t}\n\t\tmonitor \"Number of preys\" value: nb_preys;\n\t\tmonitor \"Number of predators\" value: nb_predators;\n\t}\n}\n\nexperiment Optimization type: batch repeat: 2 keep_seed: true until: ( time > 200 ) {\n\tparameter \"Prey max transfert:\" var: prey_max_transfert min: 0.05 max: 0.5 step: 0.05 ;\n\tparameter \"Prey energy reproduce:\" var: prey_energy_reproduce min: 0.05 max: 0.75 step: 0.05;\n\tparameter \"Predator energy transfert:\" var: predator_energy_transfert min: 0.1 max: 1.0 step: 0.1 ;\n\tparameter \"Predator energy reproduce:\" var: predator_energy_reproduce min: 0.1 max: 1.0 step: 0.1;\n\tmethod tabu maximize: nb_preys + nb_predators iter_max: 10 tabu_list_size: 3;\n}\n```\n","url":"wiki/Predator-Prey-Model-13.md"},{"id":"wiki/Road-Traffic-Model-01.md","title":" Loading of GIS data (buildings and roads)","content":"[//]: # (keyword|constant_#minute)\n[//]: # (keyword|concept_gis)\n# Loading of GIS data (buildings and roads)\n\n\nfirst part of the tutorial: Road Traffic\n\n\nCode of the model : \n\n```\n\nmodel tutorial_gis_city_traffic\n\nglobal {\n\tfile buildings_shapefile ","url":"wiki/Road-Traffic-Model-01.md"},{"id":"wiki/Road-Traffic-Model-02.md","title":" Definition of people agents","content":"[//]: # (keyword|constant_#minute)\n[//]: # (keyword|concept_gis)\n# Definition of people agents\n\n\nsecond part of the tutorial: Road Traffic\n\n\nCode of the model : \n\n```\n\nmodel tutorial_gis_city_traffic\n\nglobal {\n\tfile shape_file_buildings  residential_buildings ","url":"wiki/Road-Traffic-Model-02.md"},{"id":"wiki/Road-Traffic-Model-03.md","title":" Movement of the people agents","content":"[//]: # (keyword|constant_#minute)\n[//]: # (keyword|constant_#km)\n[//]: # (keyword|concept_agent_movement)\n# Movement of the people agents\n\n\nthird part of the tutorial: Road Traffic\n\n\nCode of the model : \n\n```\n\nmodel tutorial_gis_city_traffic\n\n\nglobal {\n\tfile shape_file_buildings  residential_buildings   industrial_buildings ","url":"wiki/Road-Traffic-Model-03.md"},{"id":"wiki/Road-Traffic-Model-04.md","title":" Definition of weight for the road network","content":"[//]: # (keyword|operator_as_map)\n[//]: # (keyword|operator_\\:\\:)\n[//]: # (keyword|operator_with_weights)\n[//]: # (keyword|constant_#minute)\n[//]: # (keyword|constant_#km)\n[//]: # (keyword|concept_graph)\n# Definition of weight for the road network\n\n\n4th part of the tutorial: Road Traffic\n\n\nCode of the model : \n\n```\n\nmodel tutorial_gis_city_traffic\n\nglobal {\n\tfile shape_file_buildings  weights_map  residential_buildings   industrial_buildings ","url":"wiki/Road-Traffic-Model-04.md"},{"id":"wiki/Road-Traffic-Model-05.md","title":" Dynamic update of the road network","content":"[//]: # (keyword|operator_agent_from_geometry)\n[//]: # (keyword|operator_as_map)\n[//]: # (keyword|operator_\\:\\:)\n[//]: # (keyword|operator_with_weights)\n[//]: # (keyword|constant_#minute)\n[//]: # (keyword|constant_#km)\n[//]: # (keyword|type_path)\n[//]: # (keyword|concept_graph)\n# Dynamic update of the road network\n\n\n5th part of the tutorial: Road Traffic\n\n\nCode of the model : \n\n```\n\nmodel tutorial_gis_city_traffic\n\nglobal {\n\tfile shape_file_buildings  weights_map  residential_buildings   industrial_buildings  weights_map  segments ","url":"wiki/Road-Traffic-Model-05.md"},{"id":"wiki/Road-Traffic-Model-06.md","title":" Definition of a chart display","content":"[//]: # (keyword|operator_agent_from_geometry)\n[//]: # (keyword|operator_as_map)\n[//]: # (keyword|operator_\\:\\:)\n[//]: # (keyword|operator_with_weights)\n[//]: # (keyword|operator_max_of)\n[//]: # (keyword|constant_#minute)\n[//]: # (keyword|constant_#km)\n[//]: # (keyword|constant_#magenta)\n[//]: # (keyword|type_path)\n[//]: # (keyword|concept_chart)\n# Definition of a chart display\n\n\n6th part of the tutorial: Road Traffic\n\n\nCode of the model : \n\n```\n\nmodel tutorial_gis_city_traffic\n\nglobal {\n\tfile shape_file_buildings  weights_map  residential_buildings   industrial_buildings  weights_map  segments ","url":"wiki/Road-Traffic-Model-06.md"},{"id":"wiki/Road-Traffic-Model-07.md","title":" Automatic repair of roads","content":"[//]: # (keyword|operator_agent_from_geometry)\n[//]: # (keyword|operator_as_map)\n[//]: # (keyword|operator_\\:\\:)\n[//]: # (keyword|operator_with_weights)\n[//]: # (keyword|operator_with_max_of)\n[//]: # (keyword|operator_max_of)\n[//]: # (keyword|constant_#minute)\n[//]: # (keyword|constant_#km)\n[//]: # (keyword|constant_#magenta)\n[//]: # (keyword|type_path)\n[//]: # (keyword|concept_transport)\n# Automatic repair of roads\n\n\n7th part of the tutorial: Road Traffic\n\n\nCode of the model : \n\n```\n\nmodel tutorial_gis_city_traffic\n\nglobal {\n\tfile shape_file_buildings  weights_map  residential_buildings   industrial_buildings  weights_map  segments ","url":"wiki/Road-Traffic-Model-07.md"},{"id":"wiki/Incremental-Model.md","title":" Incremental Model","content":"# Incremental Model\n\nThis sub-section is composed of the following models :\n\n* [Simple SI Model](references#IncrementalModelIncrementalModel1)\n\n* [Charts](references#IncrementalModelIncrementalModel2)\n\n* [Integration of GIS Data](references#IncrementalModelIncrementalModel3)\n\n* [Movement on Graph](references#IncrementalModelIncrementalModel4)\n\n* [3D visualization](references#IncrementalModelIncrementalModel5)\n\n* [Multi-level](references#IncrementalModelIncrementalModel6)\n\n* [Differential Equation](references#IncrementalModelIncrementalModel7)\n\n","url":"wiki/Incremental-Model.md"},{"id":"wiki/Predator-Prey.md","title":" Predator Prey","content":"# Predator Prey\n\nThis sub-section is composed of the following models :\n\n* [Basic model (prey agents)](references#PredatorPreyModel01)\n\n* [Dynamic of the vegetation (grid)](references#PredatorPreyModel02)\n\n* [Behavior of the prey agent](references#PredatorPreyModel03)\n\n* [Use of Inspectors/monitors](references#PredatorPreyModel04)\n\n* [Predator agents (parent species)](references#PredatorPreyModel05)\n\n* [Breeding of prey and predator agents](references#PredatorPreyModel06)\n\n* [Agent display (aspect)](references#PredatorPreyModel07)\n\n* [Complex behaviors for the preys and predators](references#PredatorPreyModel08)\n\n* [Adding of a stopping condition](references#PredatorPreyModel09)\n\n* [Definition of charts](references#PredatorPreyModel10)\n\n* [Writing files](references#PredatorPreyModel11)\n\n* [Image loading (raster data)](references#PredatorPreyModel12)\n\n* [Exploration (batch)](references#PredatorPreyModel13)\n\n","url":"wiki/Predator-Prey.md"},{"id":"wiki/Road-Traffic.md","title":" Road Traffic","content":"# Road Traffic\n\nThis sub-section is composed of the following models :\n\n* [Loading of GIS data (buildings and roads)](references#RoadTrafficModel01)\n\n* [Definition of people agents](references#RoadTrafficModel02)\n\n* [Movement of the people agents](references#RoadTrafficModel03)\n\n* [Definition of weight for the road network](references#RoadTrafficModel04)\n\n* [Dynamic update of the road network](references#RoadTrafficModel05)\n\n* [Definition of a chart display](references#RoadTrafficModel06)\n\n* [Automatic repair of roads](references#RoadTrafficModel07)\n\n","url":"wiki/Road-Traffic.md"},{"id":"wiki/Additionnal-Plugins.md","title":" Additionnal Plugins","content":"# Additionnal Plugins\n\nThis section is composed of the following sub-section :\n\n* [Diffusion Statement](references#DiffusionStatement)\n\n* [Ordinary Differential Equations](references#OrdinaryDifferentialEquations)\n\n","url":"wiki/Additionnal-Plugins.md"},{"id":"wiki/Features.md","title":" Features","content":"# Features\n\nThis section is composed of the following sub-section :\n\n* [3D Visualization](references#3DVisualization)\n\n* [Agent movement](references#Agentmovement)\n\n* [Batch](references#Batch)\n\n* [Charts](references#Charts)\n\n* [Clustering](references#Clustering)\n\n* [Co-model Usage](references#Co-modelUsage)\n\n* [Color](references#Color)\n\n* [Data Importation](references#DataImportation)\n\n* [Database Usage](references#DatabaseUsage)\n\n* [Date and Time](references#DateandTime)\n\n* [Driving Skill](references#DrivingSkill)\n\n* [Graphs](references#Graphs)\n\n* [Init Action](references#InitAction)\n\n* [Map comparison](references#Mapcomparison)\n\n* [Multi-Level Usage](references#Multi-LevelUsage)\n\n* [Multi-simulation](references#Multi-simulation)\n\n* [Multicriteria decision](references#Multicriteriadecision)\n\n* [Overlay](references#Overlay)\n\n* [Save statement](references#Savestatement)\n\n* [Spatial Operators](references#SpatialOperators)\n\n* [Statistics](references#Statistics)\n\n* [Unit Test](references#UnitTest)\n\n* [User Interaction](references#UserInteraction)\n\n","url":"wiki/Features.md"},{"id":"wiki/Syntax.md","title":" Syntax","content":"# Syntax\n\nThis section is composed of the following sub-section :\n\n* [Syntax models](references#Syntaxmodels)\n\n","url":"wiki/Syntax.md"},{"id":"wiki/Toy-Models.md","title":" Toy Models","content":"# Toy Models\n\nThis section is composed of the following sub-section :\n\n* [Ants (Foraging and Sorting)](references#Ants(ForagingandSorting))\n\n* [Articles](references#Articles)\n\n* [Boids](references#Boids)\n\n* [Circle](references#Circle)\n\n* [Clock](references#Clock)\n\n* [Co-model Example](references#Co-modelExample)\n\n* [Epidemiology](references#Epidemiology)\n\n* [Evacuation](references#Evacuation)\n\n* [Flood Simulation](references#FloodSimulation)\n\n* [Learning](references#Learning)\n\n* [Life](references#Life)\n\n* [Multi-level data analysis](references#Multi-leveldataanalysis)\n\n* [Predator Prey](references#PredatorPrey)\n\n* [Segregation (Schelling)](references#Segregation(Schelling))\n\n* [Soccer](references#Soccer)\n\n* [Sugarscape](references#Sugarscape)\n\n* [Traffic](references#Traffic)\n\n* [Urban Growth](references#UrbanGrowth)\n\n* [Voronoi](references#Voronoi)\n\n* [Vote](references#Vote)\n\n","url":"wiki/Toy-Models.md"},{"id":"wiki/Tutorials.md","title":" Tutorials","content":"# Tutorials\n\nThis section is composed of the following sub-section :\n\n* [3D](references#3D)\n\n* [Incremental Model](references#IncrementalModel)\n\n* [Predator Prey](PredatorPrey)\n\n* [Road Traffic](references#RoadTraffic)\n\n","url":"wiki/Tutorials.md"},{"id":"wiki/GamlEditorGeneralities.md","title":" The GAML Editor - Generalities","content":"# The GAML Editor - Generalities\n\nThe GAML Editor is a text editor that proposes several services to support the modeler in writing correct models: an integrated live validation system, a ribbon header that gives access to [experiments](LaunchingExperiments), information, warning and error markers.\n\n## Table of contents \n\n* [The GAML Editor - Generalities](#the-gaml-editor-generalities)\n\t* [Creating a first model](#creating-a-first-model)\n\t* [Status of models in editors](#status-of-models-in-editors)\n\t* [Editor Preferences](#editor-preferences)\n\t* [Multiple editors](#multiple-editors)\n\t* [Local history](#local-history)\n\n\n## Creating a first model\n\nEditing a model requires that at least one **project** is created in _User Models_. If there is none, right-click on _User Models_ and choose \"New... > Gama Project...\" (if you already have user projects and want to create a model in one of them, skip the next step).\n\n![images/1.new_project.png](resources/images/editingModels/1.new_project.png)\n\nA dialog is then displayed, offering you to enter the name of the project as well as its location on the filesystem. Unless you are absolutely sure of what you are doing, keep the \"Use default location\" option checked. An error will be displayed if the project name already exists in the workspace, in which case you will have to change it. Two projects with similar names can not coexist in the workspace (even if they belong to different categories).\n\n![images/2.new_project2.png](resources/images/editingModels/2.new_project2.png)\n\n\nOnce the project is created (or if you have an existing project), navigate to it and right-click on it. This time, choose \"New...>Model file...\" to create a new model.\n\n![images/3.new_model.png](resources/images/editingModels/3.new_model.png)\n\nA new dialog is displayed, which asks for several required or optional information. The _Container_ is normally the name of the project you have selected, but you can choose to place the file elsewhere. An error will be displayed if the container does not exist (yet) in the workspace. You can then choose whether you want to use a template or not for producing the initial file, and you are invited to give this file a name. An error is displayed if this name already exists in this project. The name of the model, which is by default computed with respect to the name of the file, can be actually completely different (but it may not contain white spaces or punctuation characters). The name of the author, as well as the textual description of the model and the creation of an HTML documentation, are optional.\n\n![images/4.new_model2.png](resources/images/editingModels/4.new_model2.png)\n\n\n## Status of models in editors\n\nOnce this dialog is filled and accepted, GAMA will display the new \"empty\" model.\n\n![images/5.view_model.png](resources/images/editingModels/5.view_model.png)\n\n\nAlthough GAML files are just plain text files, and can therefore be produced or modified in any text processor, using the dedicated GAML editor offers a number of advantages, among which the live display of errors and model statuses. A model can actually be in four different states, which are visually accessible above the editing area: _Functional_ (orange color), _Experimentable_ (green color), _InError_ (red color), InImportedError_(yellow color). See [the section on model compilation](ValidationOfModels) for more precise information about these statuses._\n\nIn its initial state, a model is always in the _Functional_ state, which means it compiles without problems, but cannot be used to launch experiments. The _InError_ state, depicted below, occurs when the file contains errors (syntactic or semantic ones).\n\n![images/6.view_model_with_error.png](resources/images/editingModels/6.view_model_with_error.png)\n\nWhile the file is not saved, these errors remain displayed in the editor and nowhere else. If you save the file, they are now considered as \"workspace errors\" and get displayed in the \"Problems\" view below the editor.\n\n![images/7.view_model_with_error_saved.png](resources/images/editingModels/7.view_model_with_error_saved.png)\n\nReaching the _Experimentable_ state requires that all errors are eliminated and that at least one experiment is defined in the model, which is the case now in our toy model. The experiment is immediately displayed as a button in the toolbar, and clicking on it will allow to launch this experiment on your model. See [the section about running experiments](RunningExperiments) for more information on this point.\n\n![images/8.view_model_with_experiment.png](resources/images/editingModels/8.view_model_with_experiment.png)\n\nExperiment buttons are updated in real-time to reflect what's in your code. If more than one experiment is defined, corresponding buttons will be displayed in addition to the first one.\n\n![images/9.view_model_with_3_experiments.png](resources/images/editingModels/9.view_model_with_3_experiments.png)\n\n\n\n\n## Editor Preferences\n\nText editing in general, and especially in Eclipse-based editors, sports a number of options and preferences. You might want to turn off/on the numbering of the lines, change the fonts used, change the colors used to highlight the code, etc. All of these preferences are accessible from the \"Preferences...\" item of the editor contextual menu.\n\n![images/10.view_model_with_preferences.png](resources/images/editingModels/10.view_model_with_preferences.png)\n\nExplore the different items present there, keeping in mind that these preferences will apply to all the editors of GAMA and will be stored in your workspace.\n\n![images/11.editor_preferences.png](resources/images/editingModels/11.editor_preferences.png)\n\n\n## Additional informations in the Editor\n\n![images/additional_informations_in_editor.png](resources/images/editingModels/additional_informations_in_editor.png)\n\nYou can choose to display or not some informations in your Editor\n\nOne particular option, shipped by default with GAMA, is the possibility to not only highlight the code of your model, but also its structure (complementing, in that sense, the _Outline_ view). It is a slightly modified version of a plugin called [EditBox](http://sourceforge.net/projects/editbox/), which can be activated by clicking on the \"green square\" icon in the toolbar.\n\n![images/12.view_model_with_editbox_default.png](resources/images/editingModels/12.view_model_with_editbox_default.png)\n\nThe Default theme of [EditBox](http://sourceforge.net/projects/editbox/) might not suit everyone's tastes, so the preferences allow to entirely customize how the \"boxes\" are displayed and how they can support the modeler in better understanding \"where\" it is in the code. The \"themes\" defined in this way are stored in the workspace, but can also be exported for reuse in other workspaces, or sharing them with other modelers.\n\n![images/13.editbox_preferences.png](resources/images/editingModels/13.editbox_preferences.png)\n\n\n\n\n## Multiple editors\nGAMA inherits from [Eclipse](http://www.eclipse.org) the possibility to entirely configure the placement of the views, editors, etc. This can be done by rearranging their position using the mouse (click and hold on an editor's title and move it around). In particular, you can have several editors side by side, which can be useful for viewing the documentation while coding a model.\n\n![images/14.view_model_side_by_side.png](resources/images/editingModels/14.view_model_side_by_side.png)\n\n\n\n\n## Local history\nAmong the various options present to work with models, which you are invited to try out and test at will, one, called _Local history_ is particularly interesting and worth a small explanation. When you edit models, GAMA keeps in the background all the successive versions you save (the history duration is configurable in the preferences), whether or not you are using a versioning system like SVN or Git. This local history is accessible from different places in GAMA (the _Navigator_, the _Views_ menu, etc.), including the contextual menu of the editor.\n\n![images/15.view_model_with_local_history_menu.png](resources/images/editingModels/15.view_model_with_local_history_menu.png)\n\nThis command invokes the opening of a new view, which you can see on the figure below, and which lists the different versions of your file so far. You can then choose one and, right-clicking on it, either open it in a new editor, or compare it to your current version.\n\n![images/16.view_model_with_local_history_compare_menu.png](resources/images/editingModels/16.view_model_with_local_history_compare_menu.png)\n\nThis allows you to precisely pinpoint the modifications brought to the file and, in case of problems, to revert them easily, or even revert the entire file to a previous version. Never lose your work again !\n\n![images/17.view_model_with_local_history_side_by_side.png](resources/images/editingModels/17.view_model_with_local_history_side_by_side.png)\n\nThis short introduction to GAML editors is now over. You might want to take a look, now, at [how the models you edit are parsed, validated and compiled](ValidationOfModels), and how this information is accessible to the modeler.","url":"wiki/GamlEditorGeneralities.md"},{"id":"wiki/GamlEditorToolbar.md","title":" The GAML Editor Toolbar","content":"# The GAML Editor Toolbar\n\nThe GAML Editor provide some tools to make the editing easier, covering a lot of functionalities, such as tools for changes of visualization, tools for navigation through your model, tools to format your code, or also tools to help you finding the correct keywords to use in a given context.\n\n![images/graphical_editor_toolbar.png](resources/images/editingModels/graphical_editor_toolbar.png)\n\n## Table of contents\n\n* [The GAML Editor Toolbar](#the-gaml-editor-toolbar)\n    \t* [Visualization tools in the editor](#visualization-tools-in-the-editor)\n    \t* [Navigation tools in the editor](#navigation-tools-in-the-editor)\n    \t* [Format tools in the editor](#format-tools-in-the-editor)\n    \t* [Vocabulary tools in the editor](#vocabulary-tools-in-the-editor)\n\n## Visualization tools in the editor\n\n![images/additional_informations_in_editor.png](resources/images/editingModels/additional_informations_in_editor.png)\n\nYou can choose to display or not some informations in your Editor. Here are the different features for this part:\n\n### Display the number of lines\n\nThe first toggle is used to show / hide the number of lines.\n\n### Expand / Collapse lines\n\nThe second toggle provides you the possibility to expand or collapse lines in your model depending on the indentation. This feature can be very useful for big models, to collapse the part you have already finished.\n\n### Mark the occurrences\n\nThis third toggle is used to show occurrences when your cursor is pointing on one word.\n\n### Display colorization of code section\n\nOne particular option, shipped by default with GAMA, is the possibility to not only highlight the code of your model, but also its structure (complementing, in that sense, the *Outline* view). It is a slightly modified version of a plugin called [EditBox](http://sourceforge.net/projects/editbox/), which can be activated by clicking on the \"green square\" icon in the toolbar.\n\n![images/12.view_model_with_editbox_default.png](resources/images/editingModels/12.view_model_with_editbox_default.png)\n\nThe Default theme of [EditBox](http://sourceforge.net/projects/editbox/) might not suit everyone's tastes, so the preferences allow to entirely customize how the \"boxes\" are displayed and how they can support the modeler in better understanding \"where\" it is in the code. The \"themes\" defined in this way are stored in the workspace, but can also be exported for reuse in other workspaces, or sharing them with other modelers.\n\n![images/13.editbox_preferences.png](resources/images/editingModels/13.editbox_preferences.png)\n\n### Change the font size\n\nThe two last tools of this section are used to increase / decrease the size of the displayed text.\n\n## Navigation tools in the editor\n\n![images/navigation_in_editor.png](resources/images/editingModels/navigation_in_editor.png)\n\nIn the Editor toolbar, you have some tools for search and navigation through the code. Here are the explanation for each functionalities:\n\n### The search engine\n\nIn order to search an occurrence of a word (or the part of a word), you can type your search in the field, and the result will be highlighted automatically in the text editor.\n\n![images/search_engine.png](resources/images/editingModels/search_engine.png)\n\nWith the left / right arrows, you can highlight the previous / next occurrence of the word. The two toggles just in the right side of the search field are used to constraint the results as \"case sensitive\" or \"whole word\". If you prefer the eclipse interface for the search engine, you can also access to the tool by taping Ctrl+F.\n\n### Previous / Next location\n\nThe two arrow shape buttons that are coming after are used to jump from the current location of your cursor to the last position, even if the last position was in an other file (and even if this file has been closed !).\n\n### Show outline\n\nThis last tool of this section is used to show the global architecture of your model, with explicit icons for each section. A search field is also available, if you want to search a specific section. By double clicking one line of the outline, you can jump directly to the chosen section. This feature can be useful if you have big model to manipulate.\n\n![images/show_outline.png](resources/images/editingModels/show_outline.png)\n\n## Format tools in the editor\n\n![images/format_the_text_in_editor.png](resources/images/editingModels/format_the_text_in_editor.png)\n\nSome other tools are available in the toolbar to help for the indentation of the model:\n\n### Shift left / shift right\n\nThose two first buttons are used to shift a line (or a group of lines) on the left or the right.\n\n### Format\n\nThis useful feature re-indent automatically all your model.\n\n### Re-serialize\n\nRe-serialize your model.\n\n### Comment\n\nThe two last buttons of this section are useful to comment a line (or a group of lines).\n\n## Vocabulary tools in the editor\n\n![images/vocabulary_help_in_editor.png](resources/images/editingModels/vocabulary_help_in_editor.png)\n\nThe last group of buttons are used to search the correct way to write a certain keyword.\n\n### Templates\n\nThe templates button is used to insert directly a code snippet in the current position of the cursor. Some snippets are already available, ordered by scope. You can custom the list of template as much as you want, it is very easy to add a new template.\n\n### Built-in attributes, built-in actions\n\nWith this feature, you can easily know the list of built-in attributes and built-in actions you can use in such or such context. With this feature, you can also insert some templates to help you, for example to insert a pre-made species using a particular skill, as it is shown it the following screenshot:\n\n![images/insert_species_with_moving_skill1.png](resources/images/editingModels/insert_species_with_moving_skill1.png)\n\n... will generate the following code:\n\n![images/insert_species_with_moving_skill2.png](resources/images/editingModels/insert_species_with_moving_skill2.png)\n\nAll the comments are generated automatically from the current documentation.\n\n### Operators\n\nOnce again, this powerful feature is used to generate example of structures for all the operators, ordered by categories.\n\n### Colors\n\nHere is the list of the name for the different pre-made colors you can use. You can also add some custom colors.\n\n![images/color.png](resources/images/editingModels/color.png)","url":"wiki/GamlEditorToolbar.md"},{"id":"wiki/GraphicalEditor.md","title":" The Graphical Editor","content":"# The Graphical Editor\n\n\nThe graphical editor that allow to build diagram (gadl files) is based on the [Graphiti](http://www.eclipse.org/graphiti/) Eclipse plugin. It allows to define a GAMA model through a graphical interface. It a allows as well to produce a graphical model (diagram) from a gaml model.\n\n![images/graphical_editor/gm_predator_prey.png](resources/images/graphical_editor/gm_predator_prey.png)\n\n## Table of contents \n\n* [The Graphical Editor](#the-graphical-editor)\n\t* [Installing the graphical editor](#installing-the-graphical-editor)\n\t* [Creating a first model](#creating-a-first-model)\n\t* [Status of models in editors](#status-of-models-in-editors)\n\t* [Diagram definition framework](#diagram-definition-framework)\n\t* [Features](#features)\n\t\t* [agents](#agents)\n\t\t\t* [species](#species)\n\t\t\t* [grid](#grid)\n\t\t\t* [Inheriting link](#inheriting-link)\n\t\t\t* [world](#world)\n\t\t* [agent features](#agent-features)\n\t\t\t* [action](#action)\n\t\t\t* [reflex](#reflex)\n\t\t\t* [aspect](#aspect)\n\t\t* [experiment](#experiment)\n\t\t\t* [GUI experiment](#gui-experiment)\n\t\t\t* [display](#display)\n\t\t\t* [batch experiment](#batch-experiment)\n\t* [Pictogram color modification](#pictogram-color-modification)\n\t* [GAML Model generation](#gaml-model-generation)\n\n\n## Installing the graphical editor\nUsing the graphical editor requires to install the graphical modeling plug-in. See [here](G__InstallingPlugins) for information about plug-ins and their installation.\n\nThe graphical editor plug-in is called **Graphical\\_modeling** and is directly available from GAMA update site **https://gama-platform.googlecode.com/svn/update_site/*.**\n\n\n![install](resources/images/graphical_editor/installing_graphical_editor.JPG)\n\n\nNote that the graphical editor is still under development. Updates of the plug-in will be add to the GAMA website. After installing the plug-in (and periodically), check for updates for this plug-in: in the \"Help\" menu, choose \"Check for Updates\" and install the proposed updates for the graphical modeling plug-in.\n\n\n\n\n## Creating a first model\n\nA new diagram can be created in a new GAMA project. First, right click on a project, then select \"New\" on the contextual menu.\nIn the New Wizard, select \"GAMA -> Model Diagram\", then \"Next>\"\n![images/graphical_editor/newDiagram.png](resources/images/graphical_editor/newDiagram.png)\n\nIn the next Wizard dialog, select the type of diagram (Empty, Skeleton or Example) then the name of the file and the author.\n\n![images/graphical_editor/modeldiagramNew.png](resources/images/graphical_editor/modeldiagramNew.png) \n\nSkeleton and Example diagram types allow to add to the diagram some basic features.\n\n\n\n\n\n## Status of models in editors\n\nSimilarly to GAML editor, the graphical editor proposes a live display of errors and model statuses. A graphical model can actually be in three different states, which are visually accessible above the editing area: **Functional** (orange color), **Experimentable** (green color) and **InError** (red color). See [the section on model compilation](CompilingModels161) for more precise information about these statuses.\n\nIn its initial state, a model is always in the **Functional** state, which means it compiles without problems, but cannot be used to launch experiments. The **InError** state occurs when the file contains errors (syntactic or semantic ones).\n\nReaching the **Experimentable** state requires that all errors are eliminated and that at least one experiment is defined in the model. The experiment is immediately displayed as a button in the toolbar, and clicking on it will allow to launch this experiment on your model.\n\nExperiment buttons are updated in real-time to reflect what's in your code. If more than one experiment is defined, corresponding buttons will be displayed in addition to the first one.\n\n\n\n\n\n## Diagram definition framework\n\nThe following figure presents the editing framework:\n![images/graphical_editor/framework.png](resources/images/graphical_editor/framework.png)\n\n\n\n\n\n## Features\n\n### agents\n#### species\n\n![images/graphical_editor/species.png](resources/images/graphical_editor/species.png)\n\nThe species feature allows to define a species with a continuous topology. A species is always a micro-species of another species. The top level (macro-species of all species) is the world species.\n\n  * **source**: a species (macro-species)\n  * **target**: -\n![images/graphical_editor/Frame_Speciesdef1.png](resources/images/graphical_editor/Frame_Speciesdef1.png)\n\n![images/graphical_editor/Frame_Speciesdef2.png](resources/images/graphical_editor/Frame_Speciesdef2.png)\n\n#### grid\n\n![images/graphical_editor/grid.png](resources/images/graphical_editor/grid.png)\n\nThe grid feature allows to define a [species](Species151) with a [grid topology](Sections151#environment). A grid is always a micro-species of another species.\n\n  * **source**: a species (macro-species)\n  * **target**: -\n\n![images/graphical_editor/Frame_grid.png](resources/images/graphical_editor/Frame_grid.png)\n\n#### Inheriting link\nThe inheriting link feature allows to define an inheriting link between two species.\n\n  * **source**: a species (parent)\n  * **target**: a species (child)\n\n![images/graphical_editor/inhereting_link.png](resources/images/graphical_editor/inhereting_link.png)\n\n\n#### world\n\n![images/graphical_editor/world.png](resources/images/graphical_editor/world.png)\n\nWhen a model is created, a world species is always defined. It represent the global part of the model. The world species, which is unique, is the top level species. All other species are micro-species of the world species.\n\n![images/graphical_editor/Frame_world.png](resources/images/graphical_editor/Frame_world.png)\n\n### agent features\n\n#### action\n![images/graphical_editor/action.png](resources/images/graphical_editor/action.png)\n\nThe action feature allows to define an action for a species.\n\n  * **source**: a species (owner of the action)\n  * **target**: -\n\n![images/graphical_editor/Frame_action.png](resources/images/graphical_editor/Frame_action.png)\n\n#### reflex\n![images/graphical_editor/reflex.png](resources/images/graphical_editor/reflex.png)\n\nThe reflex feature allows to define a reflex for a species.\n\n  * **source**: a species (owner of the reflex)\n  * **target**: -\n\n![images/graphical_editor/Frame_reflex.png](resources/images/graphical_editor/Frame_reflex.png)\n\n#### aspect\n![images/graphical_editor/aspect.png](resources/images/graphical_editor/aspect.png)\n\nThe aspect feature allows to define an aspect for a species.\n\n  * **source**: a species (owner of the aspect)\n  * **target**: -\n\n![images/graphical_editor/Frame_aspect.png](resources/images/graphical_editor/Frame_aspect.png)\n\n\n![images/graphical_editor/Frame_Aspect_layer.png](resources/images/graphical_editor/Frame_Aspect_layer.png)\n### experiment\n#### GUI experiment\n\n![images/graphical_editor/guiXP.png](resources/images/graphical_editor/guiXP.png)\n\nThe GUI Experiment feature allows to define a GUI experiment.\n\n  * **source**: world species\n  * **target**: -\n\n![images/graphical_editor/Frame_Experiment.png](resources/images/graphical_editor/Frame_Experiment.png)\n\n#### display\n\n![images/graphical_editor/display.png](resources/images/graphical_editor/display.png)\n\nThe display feature allows to define a display.\n\n  * **source**: GUI experiment\n  * **target**: -\n\n![images/graphical_editor/Frame_display.png](resources/images/graphical_editor/Frame_display.png)\n\n\n![images/graphical_editor/Frame_layer_display.png](resources/images/graphical_editor/Frame_layer_display.png)\n\n#### batch experiment\n\n![images/graphical_editor/batchxp.png](resources/images/graphical_editor/batchxp.png)\n\nThe Batch Experiment feature allows to define a Batch experiment.\n\n  * **source**: world species\n  * **target**: -\n\n\n\n\n\n## Pictogram color modification\nIt is possible to change the color of a pictogram.\n  * Right click on a pictogram, then select the \"Chance the color\".\n\n\n\n\n\n## GAML Model generation\nIt is possible to automatically generate a Gaml model from a diagram.\n  * Right click on the graphical framework (where the diagram is defined), then select the \"Generate Gaml model\".\nA new GAML model with the same name as the diagram is created (and open).\n","url":"wiki/GraphicalEditor.md"},{"id":"wiki/ValidationOfModels.md","title":" Validation of Models","content":"# Validation of Models\n\nWhen editing a model, GAMA will continuously validate (i.e. _compile_) what the modeler is entering and indicate, with specific visual affordances, various information on the state of the model. This information ranges from documentation items to errors indications. We will review some of them in this section.\n\n## Table of contents \n\n* [Validation of Models](#validation-of-models)\n\t* [Syntactic errors](#syntactic-errors)\n\t* [Semantic errors](#semantic-errors)\n\t* [Semantic warnings](#semantic-warnings)\n\t* [Semantic information](#semantic-information)\n\t* [Semantic documentation](#semantic-documentation)\n\t* [Changing the visual indicators](#changing-the-visual-indicators)\n\t* [Errors in imported files](#errors-in-imported-files)\n\t* [Cleaning models](#cleaning-models)\n\n\n## Syntactic errors\nThese errors are produced when the modeler enters a sentence that has no meaning in the grammar of GAML (see [the documentation of the language](GamlLanguage)). It can either be a non-existing symbol (like \"globals\" (instead of _global_) in the example below), a wrong punctuation scheme, or any other construct that puts the parser in the incapacity of producing a correct syntax tree. These errors are extremely common when editing models (since incomplete keywords or sentences are continuously validated). GAMA will report them using several indicators: the icon of the file in the title of the editor will sport an error icon and the gutter of the editor (i.e. the vertical space beside the line numbers) will use error **markers** to report two or more errors: one on the statement defining the model, and one (or more) in the various places where the parser has failed to produce the syntax tree. In addition, the toolbar over the editor will turn red and indicate that errors have been detected.\n\n![images/model_with_syntactic_errors.png](resources/images/editingModels/model_with_syntactic_errors.png)\n\nHovering over one of these **markers** indicates what went wrong during the syntactic validation. Note that these errors are sometimes difficult to interpret, since the parser might fail in places that are not precisely those where a wrong syntax is being used (it will usually fail **after**).\n\n![images/model_with_syntactic_errors_and_hover.png](resources/images/editingModels/model_with_syntactic_errors_and_hover.png)\n\n\n## Semantic errors\nWhen syntactic errors are eliminated, the validation enters a so-called semantic phase, during which it ensures that what the modeler has written makes sense with respect to the various rules of the language. To understand the difference between the two phases, take a look at the following example.\n\nThis sentence below is **syntactically** correct:\n```\nspecies my_species parent: my_species;\n```\nBut it is **semantically** incorrect because a species cannot be parent of itself. No syntactic errors will be reported here, but the validation will fail with a **semantic** error.\n\n![images/semantic_error_detail.png](resources/images/editingModels/semantic_error_detail.png)\n\n\n\nSemantic errors are reported in a way similar to syntactic errors, except that no **marker** are displayed beside the model statement. The compiler tries to report them as precisely as possible, underlining the places where they have been found and outputting hopefully meaningful error messages. In the example below, for instance, we use a wrong number of arguments for defining a square geometry. Although the sentence is syntactically correct, GAMA will nevertheless issue an error and prevent the model from being experimentable.\n\n![images/model_with_semantic_errors.png](resources/images/editingModels/model_with_semantic_errors.png)\n\n\n\nThe message accompanying this error can be obtained by hovering over the error **marker** found in the gutter (multiple messages can actually be produced for a same error, see below).\n\n![images/model_with_semantic_errors_and_hover.png](resources/images/editingModels/model_with_semantic_errors_and_hover.png)\n\n\n\nWhile the editor is in a so-called _dirty_ state (i.e. the model has not been saved), errors are only reported locally (in the editor itself). However, as soon as the user saves a model containing syntactic or semantic errors, they are \"promoted\" to become workspace errors, and, as such, indicated in other places: the file icon in the _Navigator_, and a new line in the _Errors_ view.\n\n![images/model_with_semantic_errors_saved.png](resources/images/editingModels/model_with_semantic_errors_saved.png)\n\n\n## Semantic warnings\n\nThe semantic validation phase does not only report errors. It also outputs various indicators that can help the modeler in verifying the correctness of his/her model. Among them are **warnings**. A warning is an indication that something is not completely right in the way the model is written, although it can _probably_ be worked around by GAMA when the model will be executed. For instance, in the example below, we pass a string argument to the facet \"number:\" of the \"create\" statement. GAMA will emit a warning in such a case, indicating that \"number:\" expects an integer, and that the string passed will be casted to int when the model will be executed. Warnings are to be considered seriously, as they usually indicate some flaws in the logic of the model.\n\n![images/model_with_warnings.png](resources/images/editingModels/model_with_warnings.png)\n\n\n\nHovering over the warning **marker** will allow the modeler to have access to the explanation and hopefully fix the cause of the warning.\n\n![images/model_with_warnings_and_hover.png](resources/images/editingModels/model_with_warnings_and_hover.png)\n\n\n\n## Semantic information\nBesides warnings, another type of harmless feedback is produce by the semantic validation phase: information **markers**. They are used to indicate useful information to the modeler, for example that an attribute has been redefined in a sub-species, or that some operation will take place when running the model (for instance, the truncation of a float to an int). The visual affordance used in this case is voluntarily discrete (a small \"i\" in the editor's gutter).\n\n![images/model_with_info.png](resources/images/editingModels/model_with_info.png)\n\n\nAs with the other types of **markers**, information markers unveil their messages when being hovered.\n\n![images/model_with_info_and_hover.png](resources/images/editingModels/model_with_info_and_hover.png)\n\n\n\n\n## Semantic documentation\nThe last type of output of the semantic validation phase consists in a complete documentation of the various elements present in the model, which the user can retrieve by hovering over the different symbols. Note that although the best effort is being made in producing a complete and consistent documentation, it may happen that some symbols do not produce anything. In that case, please report a new Issue [here](https://code.google.com/p/gama-platform/issues/list).\n\n![images/model_with_no_errors_and_hover.png](resources/images/editingModels/model_with_no_errors_and_hover.png)\n\n\n\n## Changing the visual indicators\nThe default visual indicators depicted in the examples above to report errors, warnings and information can be customized to be less (or more) intrusive. This can be done by choosing the \"Preferences...\" item of the editor contextual menu and navigating to \"General > Editors > Text Editors > Annotations\". There, you will find the various **markers** used, and you will be able to change how they are displayed in the editor's view. For instance, if you prefer to highlight errors in the text, you can change it here.\n\n![images/preferences_annotations.png](resources/images/editingModels/preferences_annotations.png)\n\n\nWhich will result in the following visual feedback for errors:\n\n![images/model_with_semantic_error_different_annotation.png](resources/images/editingModels/model_with_semantic_error_different_annotation.png)\n\n\n\n## Errors in imported files\n\nFinally, even if your model has been cleansed of all errors, it may happen that it refuses to launch because it imports another model that cannot be compiled. In the following screenshot, \"My First Model.gaml\" imports \"My Imported Model.gaml\", which sports a syntactic error.\n\n![images/model_with_imported_errors.png](resources/images/editingModels/model_with_imported_errors.png)\n\n\nIn such a case, the importing model refuses to compile (although it is itself valid) and to propose experiments. There are cases, however, where the same importation can work. Consider the following example, where, this time, \"My Imported Model.gaml\" sports a semantic error in the definition of the global 'shape' attribute. Without further modifications, the use case is similar to the first one.\n\n![images/model_with_imported_semantic_error.png](resources/images/editingModels/model_with_imported_semantic_error.png)\n\nHowever, if \"My First Model.gaml\" happens to redefine the _shape_ attribute (in global), it is now considered as valid. All the valid sections of \"My Imported Model.gaml\" are effectively imported, while the erroneous definition is superseded by the new one.\n\n![images/model_with_superseded_semantic_error.png](resources/images/editingModels/model_with_superseded_semantic_error.png)\n\nThis process is described by the information marker next to the redefinition.\n\n![images/model_with_superseded_semantic_error_and_hover.png](resources/images/editingModels/model_with_superseded_semantic_error_and_hover.png)\n\n\n\n## Cleaning models\nIt may happen that the metadata that GAMA maintains about the different projects (which includes the various **markers** on files in the workspace, etc.) becomes corrupted from time to time. This especially happens if you frequently switch workspaces, but not only. In those (hopefully rare) cases, GAMA may report incorrect errors for perfectly legible files.\n\nWhen such odd behaviors are detected, or if you want to regularly keep your metadata in a good shape, you can clean all your project, by clicking on the button \"Clear and validate all projects\" (in the syntax errors view).\n\n![images/action_clean.png](resources/images/editingModels/action_clean.png)","url":"wiki/ValidationOfModels.md"},{"id":"wiki/Headless.md","title":" Headless Mode","content":"# Headless Mode\n\nThe aim of this feature is to be able to run one or multiple instances of GAMA without any user interface, so that models and experiments can be launched on a grid or a cluster. Without GUI, the memory footprint, as well as the speed of the simulations, are usually greatly improved.\n\nIn this mode, GAMA can only be used to run experiments and that editing or managing models is not possible. In order to launch experiments and still benefit from a user interface (which can be used to prepare headless experiments), launch GAMA normally (see [here](G__Launching)) and refer to this [page](G__RunningExperiments) for instructions.\n\n## Table of contents \n\n* [Headless Mode](#headless-mode)\n\t* [Command](#command)\n\t\t* [Shell Script](#shell-script)\n\t\t* [Java Command](#java-command)\n\t* [Experiment Input File](#experiment-input-file)\n\t\t* [Heading](#heading)\n\t\t* [Parameters](#parameters)\n\t\t* [Outputs](#outputs)\n\t* [Output Directory](#output-directory)\n\t* [Simulation Output](#simulation-output)\n\t\t* [Step](#step)\n\t\t* [Variable](#variable)\n\t* [Snapshot files](#snapshot-files)\n\n\n## Command\n\nThere are two ways to run a GAMA experiment in headless mode: using a dedicated shell script (recommended) or directly from the command line. These commands take 2 arguments: an experiment file and an output directory.\n\n### Shell Script\nIt can be found in the `headless` directory located inside `Gama`. Its name is `gama-headless.sh` on MacOSX and Linux, and `gama-headless.bat` on Windows.\n\n```\n sh gama-headless.sh [m/c/t/hpc/v] $1 $2\n```\n\n* with:\n\t* $1 input parameter file : an xml file determining experiment parameters and attended outputs\n\t* $2 output directory path : a directory which contains simulation results (numerical data and simulation snapshot)\n\t* options [-m/c/t/hpc/v]\n\t\t* -m memory : memory allocated to gama\n\t\t* -c : console mode, the simulation description could be written with the stdin\n\t\t* -t : tunneling mode, simulation description are read from the stdin, simulation results are printed out in stdout\n\t\t* -hpc nb_of_cores : allocate a specific number of cores for the experiment plan\n\t\t* -v : verbose mode. trace are displayed in the console \n\n\n* For example (using the provided sample), navigate in your terminal to the GAMA root folder and type :\n\n```\nsh headless/gama-headless.sh headless/samples/predatorPrey.xml outputHeadLess\n```\n\nAs specified in **predatorPrey.xml**, this command runs the prey - predator model for 1000 steps and record a screenshot of the main display every 5 steps. The screenshots are recorded in the directory outputHeadLess (under the GAMA root folder).\n\n\nNot that the current directory to run gama-headless command must be $GAMA\\_PATH/headless\n\n### Java Command\n\n```\njava -cp $GAMA_CLASSPATH -Xms512m -Xmx2048m -Djava.awt.headless=true org.eclipse.core.launcher.Main -application msi.gama.headless.id4 $1 $2\n```\n\n* with:\n\t* $GAMA\\_CLASSPATH gama classpath: contains relative or absolute path of jars inside the gama plugin directory and jars created by users\n\t* $1 input parameter file: an xml file determining experiment parameters and attended outputs\n\t* $2 output directory path: a directory which contains simulation results (numerical data and simulation snapshot)\n\nNote that the output directory is created during the experiment and should not exist before.\n\n\n\n\n## Experiment Input File\n\nThe XML input file contains for example:\n\n```\n\n\n \n  \n    \n    \n  \n  \n    \n    \n    \n    \n  \n \n\n```\nNote that several simulations could be determined in one experiment plan. These simulations are run in parallel according to the number of allocated cores.\n\n### Heading\n\n```\n\n```\n\n* with:\n\t* `id`: permits to prefix output files for experiment plan with huge simulations.\n\t* `sourcePath`: contains the relative or absolute path to read the gaml model.\n\t* `finalStep`: determines the number of simulation step you want to run.\n\t* `experiment`: determines which experiment should be run on the model. This experiment should exist, otherwise the headless mode will exit.\n\n### Parameters\nOne line per parameter you want to specify a value to:\n\n```\n\n```\n\n  * with:\n    * `name`:  name of the parameter in the gaml model\n    * `type`:  type of the parameter (INT, FLOAT, BOOLEAN, STRING)\n    * `value`: the chosen value\n\n### Outputs\nOne line per output value you want to retrieve. Outputs can be names of monitors or displays defined in the 'output' section of experiments, or the names of attributes defined in the experiment or the model itself (in the 'global' section).\n\n```\n    ... with the name of a monitor defined in the 'output' section of the experiment...\n    \n    ... with the name of a (built-in) variable defined in the experiment itself...\n    \n```\n\n* with:\n\t* `name` : name of the output in the 'output'/'permanent' section in the experiment or name of the experiment/model attribute to retrieve\n\t* `framerate` : the frequency of the monitoring (each step, each 2 steps,  each 100 steps...).\n\n* Note that :\n\t* the lower the framerate value the longer the experiment.\n\t* if the chosen output is a display, an image is produced and the output file contains the path to access this image\n\n\n\n## Output Directory\nDuring headless experiments, a directory is created with the following structure:\n\n```\nOutputed-directory-path/\n    |-simulation-output.xml\n    |- snapshot\n          |- main_display2-0.png\n          |- main_display2-10.png\n          |- ...\n\n```\n* with:\n\t* `simulation-output.xml`: containing the results\n\t* `snapshot`: containing the snapshots produced during the simulation\n\nIs it possible to change the output directory for the images by adding the attribute \"output_path\" in the xml : \n\nIf we write ``, then the display \"my_display\" will have the name \"imageName-stepNb.png\" and will be written in the folder \"/F:/path/\"\n\n## Simulation Output\nA file named `simulation-output.xml` is created with the following contents when the experiment runs.\n\n```\n\n\n\t\n\t\t\n\t\t\n\t\t\n                \n\t\n\t\n\t\t\n\t\t\n\t\t\n                \n\t\n        \n\n...\n```\n\n* With:\n\t* `` : block containing results of the simulation 2 (this Id is identified in the Input Experiment File)\n\t* ` ... `: one block per step done. The id corresponds to the step number\n\n### Step\n```\n\t\n\t\t\n\t\t\n\t\t\n                \n\t\n\n```\n\nThere is one Variable block per Output identified in the output experiment file.\n\n### Variable\n\n```\n \n```\n\n* with:\n\t* `name`: name of the output, the model variable\n\t* `value`: the current value of model variable.\n\nNote that the value of an output is repeated according to the framerate defined in the input experiment file.\n\n\n\n\n## Snapshot files\nThis directory contains images generated during the experiment. There is one image per displayed output per step (according to the framerate). File names follow a naming convention, e.g:\n\n```\n   [outputName][SimulationID]_[stepID].png -> main_display2-20.png\n```\n\nNote that images are saved in '.png' format.","url":"wiki/Headless.md"},{"id":"wiki/Installation.md","title":" Installation","content":"# Installation\n\nGAMA 1.7 comes in 5 different versions (32 & 64 bits for Windows & Linux, and 64 bits for MacOS X). You first need to determine which version to use (it depends on your computer, which may, or not, support 64 bits instructions, but also on the version of Java already installed, as the number of bits of the two versions must match).\n\nYou can then download the right version from the [Downloads page](http://vps226121.ovh.net/download#GAMALATEST), expand the zip file wherever you want on your machine, and [launch GAMA](Launching).\n\n\n## Table of contents \n\n* [Installation](#installation)\n\t* [System Requirements](#system-requirements)\n\t* [Installation of Java](#installation-of-java)\n\t\t* [On MacOS X](#on-macos-x)\n\t\t* [On Windows](#on-windows-7--8-64-bits)\n\t\t* [On Ubuntu & Linux](#on-ubuntu--linux)\n\n\n## System Requirements\n\nGAMA 1.7 requires that **Java 1.8** be installed on your machine, approximately 200MB of disk space and a minimum of 4GB of RAM (to increase the portion of memory usable by GAMA, please refer to [these instructions](Troubleshooting#Memory_problems)).\n\n### MacOS \n\nIn some cases, \"Archive utility.app\" in MacOS may damage the files when extracting them from the zip or tar.gz archive files. This problem manifests itself by a dialog opening and explaining that the application is damaged and cannot be launched (see [Issue 2082](https://github.com/gama-platform/gama/issues/2082#issuecomment-271812519) and also [this thread](https://bugs.eclipse.org/bugs/show_bug.cgi?id=398450#c17). In that case, to expand the files, consider using a different utility, like the free [Stuffit Expander](http://my.smithmicro.com/stuffit-expander-mac.html) or directly from the command line. \n\nMacOS Sierra has introduced a series of issues linked to the so-called \"quarantine\" mode (where applications downloaded from Internet prevent to use and update their internal components, such as the models of the library or the self-updating of the application). See this [page](http://lapcatsoftware.com/articles/app-translocation.html) for background information. To be certain that Gama will work, and until we find an easier solution, the installation should follow these steps:\n\n1. Download the GAMA zip file\n2. Unzip it (possibly with another archive utility, see above)\n3. Copy and paste `Gama` in the `Applications` folder\n4. Launch `Terminal.app`\n5. Type `cd /Applications` and hit return.\n6. Type `xattr -d -r com.apple.quarantine Gama.app/` and hit return to remove the quarantine attribute\n\nFrom now on, Gama should be fully functional.\n\n## Installation of Java\n\nOn all environments, the recommended Java Virtual Machine under which GAMA has been tested is the one distributed by Oracle ([http://www.java.com/en/download/manual.jsp](http://www.java.com/en/download/manual.jsp)). It may work with others — or not. For better performances, you may also want to install the JDK version of the JVM (and not the standard JRE), although is it not mandatory  (GAMA should run fine, but slower, under a JRE).\n\n### On MacOS \nThe latest version of GAMA requires a JVM (or JDK or JRE) compatible with Java 1.8 to run. \n\n_Note for GAMA 1.6.1 users: if you plan to keep a copy of GAMA 1.6.1, you will need to have both Java 1.6 (distributed by Apple) and Java 1.8 (distributed by Oracle) installed at the same time. Because of this bug in SWT (https://bugs.eclipse.org/bugs/show_bug.cgi?id=374199), GAMA 1.6.1 will not run correctly under Java 1.8 (all the displays will appear empty). To install the JDK 1.6 distributed by Apple, follow the instructions here : http://support.apple.com/kb/DL1572. Alternatively, you might want to go to https://developer.apple.com/downloads and, after a free registration step if you're not an Apple Developer, get the complete JDK from the list of downloads._\n\n### On Windows\nPlease notice that, by default, Internet Explorer and Chrome browsers will download a 32 bits version of the JRE. Running GAMA 32 bits for Windows is ok, but you may want to download the latest JDK instead, in order to both improve the performances of the simulator and be able to run GAMA 64 bits.\n\n  * To download the appropriate java version, follow this link: http://www.java.com/en/download/manual.jsp\n  * Execute the downloaded file\n  * You can check that a **Java\\\\jre8** folder has been installed at the location **C:\\\\Program Files\\\\**\n\nIn order for Java to be found by Windows, you may have to modify environment variables:\n\n  * Go to the **Control Panel**\n  * In the new window, go to **System**\n  * On the left, click on **Advanced System parameters**\n  * In the bottom, click on **Environment Variables**\n  * In System Variables, choose to modify the **Path** variable\n  * At the end, add **;C:\\\\Program Files\\\\Java\\\\jre8\\\\bin** (or jre8\\\\bin)\n\n### On Ubuntu & Linux\n\nTo have a complete overview of java management on Ubuntu, have a look at:\n\n  * [Ubuntu Java documentation](https://help.ubuntu.com/community/Java)\n  * for French speaking users: [http://doc.ubuntu-fr.org/java#installations_alternatives](http://doc.ubuntu-fr.org/java#installations_alternatives)\n\nBasically, you need to do:\n```\nsudo add-apt-repository ppa:webupd8team/java\nsudo apt-get update\nsudo apt-get install oracle-java8-installer \n```\n\nYou can then switch between java version using:\n```\nsudo update-alternatives --config java\n```\n\nSee [the troubleshooting page](Troubleshooting#Ubuntu) for more information on workaround for problems on Unbuntu.","url":"wiki/Installation.md"},{"id":"wiki/InstallingPlugins.md","title":" Installing Plugins","content":"# Installing Plugins\n\nBesides the plugins delivered by the developers of the GAMA platform, which can be installed and updated as explained [here](Updating), there are a number of additional plugins that can be installed to add new functionalities to GAMA or enhance the existing ones. GAMA being based on Eclipse, a number of plugins developed for Eclipse are then available (a complete listing of Eclipse plugins can be found in the so-called [Eclipse MarketPlace](http://marketplace.eclipse.org)).\n\nThere are, however, three important restrictions:\n\n1. The current version of GAMA is based on Eclipse Juno (version number 3.8.2), which excludes de facto all the plugins targeting solely the 4.3 (Kepler) or 4.4 (Luna) versions of Eclipse. These will refuse to install anyway.\n2. The Eclipse foundations in GAMA are only a subset of the complete Eclipse platform, and a number of libraries or frameworks (for example the Java Development Toolkit) are not (and will never be) installed in GAMA. So plugins relying on their existence will refuse to install as well.\n3. Some components of GAMA rely on a specific version of other plugins and will refuse to work with other versions, essentially because their compatibility will not be ensured anymore. For instance, the parser and validator of the GAML language in GAMA 1.6.1 require [XText v. 2.4.1](http://www.eclipse.org/Xtext/) to be installed (and neither XText 2.5.4 nor XText 2.3 will satisfy this dependency).\n\nWith these restrictions in mind, it is however possible to install interesting additional plugins. We propose here a list of some of these plugins (known to work with GAMA), but feel free to either add a comment if you have tested plugins not listed here or [create an issue](Troubleshooting) if a plugin does not work, in order for us to see what the requirements to make it work are and how we can satisfy them (or not) in GAMA.\n\n## Table of contents \n\n* [Installing Plugins](#installing-plugins)\n\t* [Installation](#installation)\n\t* [Selected Plugins](#selected-plugins)\n\t\t* [Overview](#overview)\n\t\t* [Git](#git)\n\t\t* [CKEditor] (#ckeditor)\n\t\t* [Startexplorer](#startexplorer)\n\t\t* [Pathtools](#pathtools)\n\t\t* [CSV Edit](#csv-edit)\n\t\t* [Quickimage](#quickimage)\n\n\n## Installation\nInstalling new plugins is a process identical to the one described when [updating GAMA](Updating), with one exception: the _update site_ to enter is normally provided by the vendor of the additional plugin and must be entered instead of GAMA's one in the dialog. Let us suppose, for instance, that we want to install a RSS feed reader available on this [site](http://junginger.biz/eclipse/).\nAn excerpt from the page reads that :\n\n> All plugins are installed with the standard update manager of Eclipse. It will guide you through the installation process and also eases keeping your plugins up-to-date. Just add the update site: http://www.junginger.biz/eclipse/\n\nSo we just have to follow these instructions, which leads us to the following dialog, in which we select \"RSS view\" and click \"Next\".\n\n![images/dialog_install_plugins.png](resources/images/installationAndLaunching/dialog_install_plugins.png)\n\nThe initial dialog is followed by two other ones, a first to report that the plugin satisfies all the dependencies, a second to ask the user to accept the license agreement.\n\n\n\n|![images/dialog_install_plugins_2.png](resources/images/installationAndLaunching/dialog_install_plugins_2.png)|![images/dialog_install_plugins_3.png](resources/images/installationAndLaunching/dialog_install_plugins_3.png)|\n|---|---|\n\nOnce we dismiss the warning that the plugin is not signed and accept to restart GAMA, we can test the new plugin by going to the \"Views\" menu.\n\n![images/menu_other_views.png](resources/images/installationAndLaunching/menu_other_views.png)\n\n\nThe new RSS view is available in the list of views that can be displayed in GAMA.\n\n![images/dialog_show_view.png](resources/images/installationAndLaunching/dialog_show_view.png)\n\n\nAnd we can enjoy (after setting some preferences available in its local menu) monitoring the Issues of GAMA from within GAMA itself !\n\n![images/feed_working.png](resources/images/installationAndLaunching/feed_working.png)\n\n\n\n\n\n## Selected Plugins\nIn addition to the RSS reader described above, below is a list of plugins that have been tested to work with GAMA. There are many others so take the time to explore them !\n\n### Overview\n  * A very useful plugin for working with large model files. It renders an overview of the file in a separate view (with a user selectable font size), allowing to know where the edition takes place, but also to navigate very quickly and efficiently to different places in the model.\n  * Update site: http://sandipchitaleseclipseplugins.googlecode.com/svn/trunk/text.overview.updatesite/site.xml\n  * After installing the plugin, an error might happen when closing GAMA. It is harmless. After restarting GAMA, go to Views > Open View > Others... > Overview >.\n\n### Git\n  * Git is a version control system (like CVS or SVN, extensively used in GAMA) http://git-scm.com/. Free sharing space are provided on [GitHub](https://github.com/) among others. Installing Git allows to share or gather models that are available in Git repositories.\n  * Update site (general): `http://download.eclipse.org/releases/mars/` (Alternatively, you can use `http://download.eclipse.org/egit/updates`)\n  * Select the two following plugins:\n    * Eclipse EGit\n    * Git Team Provider Core\n    \n### CKEditor\n  * CKEditor is a lightweight and powerful web-based editor, perfect for almost WYSIWYG edition of HTML files. It can be installed, directly in GAMA, in order to edit .html, .htm, .xml, .svg, etc. files directly without leaving the platform. No other dependencies are required. A must ! \n  * Update site: `http://kosz.bitbucket.org/eclipse-ckeditor/update-site`\n\n### Startexplorer\n  * A nice utility that allows the user to select files, folders or projects in the [Navigator](NavigatingWorkspace) and open them in the filesystem (either the UI Explorer, Finder, whatever, or in a terminal).\n  * Update site: `http://basti1302.github.com/startexplorer/update/`\n\n![images/start_explorer.png](resources/images/installationAndLaunching/start_explorer.png)\n\n\n### Pathtools\n  * Same purpose as StartExplorer, but much more complete, and additionally offers the possibility to add new commands to handle files (open them in specific editors, execute external programs on them, etc.). Very nice and professional. Works flawlessly in GAMA except that contributions to the toolbar are not accepted (so you have to rely on the commands present in the [Navigator](NavigatingWorkspace) pop-up menu).\n  * Update site: `http://pathtools.googlecode.com/svn/trunk/PathToolsUpdateSite/site.xml`\n  * Website: `https://pathtools.googlecode.com`\n\n### CSV Edit\n\n  * An editor for CSV files. Quite handy if you do not want to launch Excel every time you need to inspect or change the CSV data files used in models.\n  * Update site: `http://csvedit.googlecode.com/svn/trunk/csvedit.update`\n\n![images/csv_edit.png](resources/images/installationAndLaunching/csv_edit.png)\n\n### TM Terminal\n\n  * A powerful, yet simple, terminal which can connect locally or via ssh or other methods. \n  * Update site (general): `http://download.eclipse.org/releases/mars/`\n  * Select the following plugin: TM Terminal\n\n\n### Quickimage\n\n  * A lightweight viewer of images, which can be useful when several images are used in a model.\n  * Update site: `http://psnet.nu/eclipse/updates`\n\n![images/quick_image.png](resources/images/installationAndLaunching/quick_image.png)","url":"wiki/InstallingPlugins.md"},{"id":"wiki/Launching.md","title":" Launching GAMA","content":"# Launching GAMA\n\nRunning GAMA for the first time requires that you launch the application (`Gama.app` on MacOS X, `Gama.exe` on Windows, `Gama` on Linux, located in the folder called `Gama` once you have unzipped the archive). Other folders and files are present here, but you don't have to care about them for the moment. In case you are unable to launch the application, of if error messages appear, please refer to the [installation](Installation) or [troubleshooting](Troubleshooting) instructions.\n\n## Table of contents \n\n* [Launching GAMA](#launching-gama)\n\t* [Launching the Application](#launching-the-application)\n\t* [Choosing a Workspace](#choosing-a-workspace)\n\t* [Welcome Page](#welcome-page)\n\n\n## Launching the Application\n\n\nNote that GAMA can also be launched in two different other ways:\n\n1. In a so-called _headless mode_ (i.e. without user interface, from the command line, in order to conduct experiments or to be run remotely). Please refer to [the corresponding instructions](Headless).\n2. From the terminal, using a path to a model file and the name or number of an experiment, in order to allow running this experiment directly (note that the two arguments are optional: if the second is omitted, the file is imported in the workspace if not already present and opened in an editor; if both are omitted, GAMA is launched as usual):\n\n* `Gama.app/Contents/MacOS/Gama path_to_a_model_file#experiment_name_or_number` on MacOS X\n* `Gama path_to_a_model_file#experiment_name_or_number` on Linux\n* `Gama.exe path_to_a_model_file#experiment_name_or_number` on Windows\n\n![Eclipse folder.](resources/images/installationAndLaunching/0.folder.png)\n\n## Choosing a Workspace\nPast the splash screen, GAMA will ask you to choose a workspace in which to store your models and their associated data and settings. The workspace can be any folder in your filesystem on which you have read/write privileges. If you want GAMA to remember your choice next time you run it (it can be handy if you run Gama from the command line), simply check the corresponding option. If this dialog does not show up when launching GAMA, it probably means that you inherit from an older workspace used with GAMA 1.6 or 1.5.1 (and still \"remembered\"). In that case, a warning will be produced to indicate that the models library is out of date, offering you the possibility to create a new workspace.\n\n![Window to choose the workspace.](resources/images/installationAndLaunching/1.workspace_choice.png)\n\nYou can enter its address or browse your filesystem using the appropriate button. If the folder already exists, it will be reused (after a warning if it is not already a workspace). If not, it will be created. It is always a good idea, when you launch a new version of GAMA for the first time, to create a new workspace. You will then, later, be able to [import your existing models](ImportingModels) into it. Failing to do so might lead to odd errors in the various validation processes.\n\n![This pop-up appears when the user wants to create a new workspace. Click on OK.](resources/images/installationAndLaunching/2.workspace_choice2.png)\n\n\n\n## Welcome Page\nAs soon as the workspace is created, GAMA will open and you will be presented with its **first window**. GAMA is based on [Eclipse](http://www.eclipse.org) and reuses most of its visual metaphors for organizing the work of the modeler. The main window is then composed of several **parts**, which can be **views** or **editors**, and are organized in a **perspective**. GAMA proposes 2 main perspectives: _Modeling_, dedicated to the creation of models, and _Simulation_, dedicated to their execution and exploration. Other perspectives are available if you use shared models.\n\nThe default perspective in which GAMA opens is _Modeling_. It is composed of a central area where [GAML editors](GamlEditorGeneralities) are displayed, which is surrounded by a [Navigator view](NavigatingWorkspace) on the left-hand side of the window, an Outline view (linked with the open editor) and the Problems view, which indicates errors and warnings present in the models stored in the workspace.\n\n![GAMA after the first launch.](resources/images/installationAndLaunching/3.workbench_window.png)\n\nIn the absence of previously open models, GAMA will display a _Welcome page_ (actually a web page), from which you can find links to the website, current documentation, tutorials, etc. This page can be kept open (for instance if you want to display the documentation when editing models) but it can also be safely closed (and reopened later from the \"Views\" menu).\n\n![Menu to open new views.](resources/images/installationAndLaunching/5.welcome_page.png)\n\nFrom this point, you are now able to [edit a new model](EditingModels), [navigate in the models libraries](NavigatingWorkspace), or [import an existing model](ImportingModels).","url":"wiki/Launching.md"},{"id":"wiki/Troubleshooting.md","title":" Troubleshooting","content":"# Troubleshooting\n\nThis page exposes some of the most common problems a user may encounter when running GAMA — and offers advices and workarounds for them. It will be regularly enriched with new contents. Note also that the [Issues section](https://github.com/gama-platform/gama/issues) of the website might contain precious information on crashes and bugs encountered by other users. If neither the workarounds described here nor the solutions provided by other users allow to solve your particular problem, please submit a new issue report to the developers.\n\n\n## Table of contents \n\n* [Troubleshooting](#troubleshooting)\n\t* [Table of contents](#table-of-contents)\n\t* [On Ubuntu (& Linux Systems)](#on-ubuntu--linux-systems)\n\t\t* [Workaround if GAMA crashes when displaying web contents](#workaround-if-gama-crashes-when-displaying-web-contents)\n\t\t* [Workaround if GAMA does not display the menus (the 'Edit' menu is the only one working)](#workaround-if-gama-does-not-display-the-menus-the-edit-menu-is-the-only-one-working)\n\t* [On Windows](#on-windows)\n\t* [On MacOS X](#on-macos-x)\n\t\t* [Workaround in case of glitches in the UI](#workaround-in-case-of-glitches-in-the-ui)\n\t\t* [Workaround in case of corrupted icons in menus under El Capitan](#workaround-in-case-of-corrupted-icons-in-menus-under-el-capitan)\n\t* [Memory problems](#memory-problems)\n\t* [Submitting an Issue](#submitting-an-issue)\n\n\n## On Ubuntu (& Linux Systems)\n### Workaround if GAMA crashes when displaying web contents\nIn case GAMA crashes whenever trying to display a web page or the pop-up online documentation, you may try to edit the file Gama.ini and add the line `-Dorg.eclipse.swt.browser.DefaultType=mozilla` to it. This workaround is described here: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=705420 and in Issue 700 (on Google Code).\n\n### Workaround if GAMA does not display the menus (the 'Edit' menu is the only one working)\nIf, when selecting a menu, nothing happens (or, in the case of the 'Agents' menu, all population submenus appear empty), it is likely that you have run into this issue: https://bugs.eclipse.org/bugs/show_bug.cgi?id=330563. The only workaround known is to launch GAMA from the command line (or from a shell script) after having told Ubuntu to attach its menu back to its main window. For example (if you are in the directory where the \"Gama\" executable is present):\n\n```\nexport UBUNTU_MENUPROXY=0\n./Gama\n```\n\nNo fix can be provided from the GAMA side for the moment.\n\n\n\n\n## On Windows\nNo common trouble...\n\n\n\n\n## On MacOS X\n\n### Workaround in case of glitches in the UI\n\nThe only problems reported so far on MacOS X (from Lion to Yosemite) concern visual glitches in the UI and problems with displays, either not showing or crashing the JVM. Most (all ?) of these problems are usually related to the fact that GAMA does not run under the correct version of Java Virtual Machine. In that case, follow [these instructions](Installation#On_MacOS_X_(Lion,_Mountain_Lion,_Mavericks)) to install the correct version.\n\n### Workaround in case of corrupted icons in menus under El Capitan\n\nFor some particular configurations (in particular some particular graphic cards), the icons of the menus (e.g. Edit menu) may be corrupted. This bug is documented for all RCP products under El Capitan. See these references:\n[https://bugs.eclipse.org/bugs/show_bug.cgi?id=479590](https://bugs.eclipse.org/bugs/show_bug.cgi?id=479590)\n[https://trac.filezilla-project.org/ticket/10669](https://trac.filezilla-project.org/ticket/10669)\n\nThese is nothing we can do now except using the workaround that consists in switching the language of the OS to English (in System Preferences, Language & Region).\n\n\n## Memory problems\nThe most common causes of problems when running GAMA are memory problems. Depending on your activities, on the size of the models you are editing, on the size of the experiments you are running, etc., you have a chance to require more memory than what is currently allocated to GAMA. A typical GAMA installation  will need between 40 and 200MB of memory to run \"normally\" and launch small models.\nMemory problems are easy to detect: on the bottom right corner of its window, GAMA will always display the status of the current memory. The first number represents the memory currently used (in MB), the second (always larger) the memory currently allocated by the JVM. And the little trash icon allows to \"garbage collect\" the memory still used by agents that are not used anymore (if any). If GAMA appears to hang or crash and if you can see that the two numbers are very close, it means that the memory required by GAMA exceeds the memory allocated.\n\n\n![images/memory_status.png](resources/images/installationAndLaunching/memory_status.png)\n\nThere are two ways to circumvent this problem: the first one is to increase the memory allocated to GAMA by the Java Virtual Machine. The second, detailed [on this page](OptimizingModels) is to try to optimize your models to reduce their memory footprint at runtime.\nTo increase the memory allocated, first locate the file called `Gama.ini`. On Windows and Ubuntu, it is located next to the executable. On MacOS X, you have to right-click on `Gama.app`, choose \"Display Package Contents...\", and you will find `Gama.ini` in `Contents/MacOS`.\nThis file typically looks like the following (some options/keywords may vary depending on the system), and we are interested in two JVM arguments:\n\n![images/gama_ini.png](resources/images/installationAndLaunching/gama_ini.png)\n\n\n`-Xms` supplies the minimal amount of memory the JVM should allocate to GAMA, `-Xmx` the maximal amount. By changing these values (esp. the second one, of course, for example to 4096M, or 4g), saving the file and relaunching GAMA, you can probably solve your problem. Note that 32 bits versions of GAMA will not accept to run with a value of `-Xmx` greater than 1500M. See [here](http://stackoverflow.com/questions/14763079/what-are-the-xms-and-xmx-parameters-when-starting-jvms) for additional information on these two options.\n\n\n\n\n## Submitting an Issue\nIf you think you have found a new bug/issue in GAMA, it is time to create an issue report [here](https://github.com/gama-platform/gama/issues/new) ! Alternatively, you can click the [Issues](https://github.com/gama-platform/gama/issues) tab on the project site, search if a similar problem has already been reported (and, maybe, solved) and, if not, enter a new issue with as much information as possible:\n  * A complete description of the problem and how it occurred.\n  * The GAMA model or code you are having trouble with. If possible, attach a complete model.\n  * Screenshots or other files that help describe the issue.\n\nTwo files may be particularly interesting to attach to your issue: the **configuration details** and the **error log**. Both can be obtained quite easily from within GAMA itself in a few steps. First, click the \"About GAMA...\" menu item (under the \"Gama\" menu on MacOS X, \"Help\" menu on Linux & Windows)\n\n> \n![images/menu_about_gama.png](resources/images/installationAndLaunching/menu_about_gama.png)\n\n\nIn the dialog that appears, you will find a button called \"Installation Details\".\n\n\n![images/dialog_about_gama.png](resources/images/installationAndLaunching/dialog_about_gama.png)\n\n\nClick this button and a new dialog appears with several tabs.\n\n\n![images/dialog_configuration.png](resources/images/installationAndLaunching/dialog_configuration.png)\n\n\nTo provide a complete information about the status of your system at the time of the error, you can\n\n(1) copy and paste the text found in the tab \"Configuration\" into your issue. Although, it is preferable to attach it as a text file (using textEdit, Notepad or Emacs e.g.) as it may be too long for the comment section of the issue form.\n\n(2) click the \"View error log\" button, which will bring you to the location, in your file system, of a file called \"log\", which you can then attach to your issue as well.\n\n\n![images/log_file.png](resources/images/installationAndLaunching/log_file.png)","url":"wiki/Troubleshooting.md"},{"id":"wiki/Updating.md","title":" Updating GAMA","content":"# Updating GAMA\n\nUnless you are using the version of GAMA built from the sources available in the GIT repository of the project (see [here](InstallingGitVersion)), you are normally running a specific **release** of GAMA that sports a given **version number** (e.g. GAMA 1.6.1, GAMA 1.7, etc.). When new features were developed, or when serious issues were fixed, the release you had on your disk, prior to GAMA 1.6.1, could not benefit from them. Since this version, however, GAMA has been enhanced to support a _self\\_update_ mechanism, which allows to import from the GAMA update site additional plugins (offering new features) or updated versions of the plugins that constitute the core of GAMA.\n\n## Table of contents \n\n* [Updating GAMA](#updating-gama)\n\t* [Manual Update](#manual-update)\n\t* [Automatic Update](#automatic-update)\n\n\n\n## Manual Update\nTo activate this feature, you have to invoke the \"Check for Updates\" or \"Install New Software...\" menu commands in the \"Help\" menu.\n\nThe first one will only check if the existing plugins have any updates available, while the second will, in addition, scan the update site to detect any new plugins that might be added to the current installation.\n\n![Menu to install new extensions to GAMA.](resources/images/installationAndLaunching/menu_install.png)\n\nIn general, it is preferable to use the second command, as more options (including that of _desinstalling_ some plugins) are provided. Once invoked, it makes the following dialog appear:\n\n![Window where the user enters the adress of an update site and can choose plugins to install.](resources/images/installationAndLaunching/dialog_install.png)\n\nGAMA expects the user to enter a so-called _update site_. You can copy and paste the following line (or choose it from the drop-down menu as this address is built inside GAMA):\n```\nhttp://updates.gama-platform.org\n```\n\nGAMA will then scan the entire update site, looking both for new plugins (the example below) and updates to existing plugins. The list available in your installation will of course be different from the one displayed here.\n\n![Display of the list of available extensions.](resources/images/installationAndLaunching/dialog_install_2.png)\n\nChoose the ones you want to install (or update) and click \"Next...\". A summary page will appear, indicating which plugins will actually be installed (since some plugins might require additional plugins to run properly), followed by a license page that you have to accept. GAMA will then proceed to the installation (that can be cancelled any time) of the plugins chosen.\n\nDuring the course of the installation, you might receive the following warning, that you can dismiss by clicking \"OK\".\n\n![Warning window that can be dismissed.](resources/images/installationAndLaunching/warning_install.png)\n\nOnce the plugins are installed, GAMA will ask you whether you want to restart or not. It is always safer to do so, so select \"Yes\" and let it close by itself, register the new plugins and restart.\n\n![After installation, GAMA has to be restarted.](resources/images/installationAndLaunching/install_restart.png)\n\n\n\n## Automatic Update\nGAMA offers a mechanism to monitor the availability of updates to the plugins already installed. To install this feature, [open the preferences of GAMA](Preferences) and choose the button \"Advanced...\", which gives access to additional preferences.\n\n![Button to give access to additional preferences.](resources/images/installationAndLaunching/open_advanced.png)\n\nIn the dialog that appears, navigate to \"Install/Update > Automatic Updates\". Then, enable the option using the check-box on the top of the dialog and choose the best settings for your workflow. Clicking on \"OK\" will save these preferences and dismiss the dialog.\n\n![Check for automatic update.](resources/images/installationAndLaunching/prefs_update.png)\n\n\nFrom now on, GAMA will continuously support you in having an up-to-date version of the platform, provided you accept the updates.\n","url":"wiki/Updating.md"},{"id":"wiki/BatchSpecific.md","title":" Batch Specific UI","content":"# Batch Specific UI\n\nWhen an [experiment of type Batch](BatchExperiments) is run, a dedicated UI is displayed, depending on the parameters to explore and of the exploration methods.\n\n\n## Table of contents \n\n* [Batch Specific UI](#batch-specific-ui)\n\t* [Information bar](#information-bar)\n\t* [Batch UI](#batch-ui)\n\n## Information bar\n\nIn batch mode, the top information bar displays 3 distinct information (instead of only the cycle number in the GUI experiment):\n  * The **run** number: One run corresponds to X executions of simulation with one given parameters values (X is an integer given by the facet `repeat` in the definition of the [exploration method](ExplorationMethods));\n  * The **simulation** number: the number of replications done (and the number of replications specified with the `repeat` facet);\n  * The number of **thread**: the number of threads used for the simulation.\n\n![images/batch_Information_bar.png](resources/images/runningExperiments/batch_Information_bar.png)\n\n\n## Batch UI\n\nThe parameters view is also a bit different in the case of a Batch UI. The following interface is generated given the following model part:\n```\nexperiment Batch type: batch repeat: 2 keep_seed: true until: (food_gathered = food_placed) or (time > 400) {\n   parameter 'Size of the grid:' var: gridsize init: 75 unit: 'width and height';\n   parameter 'Number:' var: ants_number init: 200 unit: 'ants';\n   parameter 'Evaporation:' var: evaporation_rate among: [0.1, 0.2, 0.5, 0.8, 1.0] unit: 'rate every cycle (1.0 means 100%)';\n   parameter 'Diffusion:' var: diffusion_rate min: 0.1 max: 1.0 unit: 'rate every cycle (1.0 means 100%)' step: 0.3;\n\n   method exhaustive maximize: food_gathered;\n```\n\n![images/batch_Parameters_pane.png](resources/images/runningExperiments/batch_Parameters_pane.png)\n\n\nThe interface summarizes all model parameters and the parameters given to the exploration method:\n  * **Environment and Population**: displays all the model parameters that should not be explored;\n  * **Parameters to explore**: the parameters to explore are the parameters defined in the experiment with a range of values (with `among` facet or `min`, `max` and `step` facets);\n  * **Exploration method**: it summarizes the Exploration method and the stop condition. For exhaustive method it also evaluates the parameter space. For other methods, it also displays the method parameters (e.g. mutation or crossover probability...). Finally the best fitness found and the last fitness found are displayed (with the associated parameter set).","url":"wiki/BatchSpecific.md"},{"id":"wiki/Displays.md","title":" Displays","content":"# Displays\n\nGAMA allows modelers to [define several and several kinds of displays](DefiningDisplaysGeneralities) in a [GUI experiment](DefiningGUIExperiment):\n  * java 2D displays\n  * OpenGL displays\n\nThese 2 kinds of display allows the modeler to display the same objects (agents, charts, texts ...). The OpenGL display offers extended features in particular in terms of 3D visualisation.\nThe OpenGL displays offers in addition better performance when zooming in and out.\n\n## Table of contents \n\n* [Displays](#displays)\n\t* [Classical displays (java2D)](#classical-displays-java2d)\n\t* [OpenGL displays](#opengl-displays)\n\n\n## Classical displays (java2D)\n\nThe classical displays displaying any kind of content can be manipulated via the mouse (if no mouse event has been defined):\n* the **mouse left** press and move allows to move the camera (in 2D),\n* the **mouse right** click opens a context menu allowing the modeler to inspect displayed agents,\n* the **wheel** allows the modeler to zoom in or out.\n\n![images/display-java2D.png](resources/images/runningExperiments/display-java2D.png)\n\n\nEach display provides several buttons to manipulate the display (from left to right):\n  * **Show/hide side bar**,\n  * **Show/hide overlay**,\n  * **Browse through all displayed agents**: open a context menu to inspect agents,\n  * **Update every X step**: configure the refresh frequence of the display,\n  * **Pause the-display**: when pressed, the display will not be displayed anymore, the simulation is still running,\n  * **Synchronize the display and the execution of the model**,\n  * **Zoom in**,\n  * **Zoom to fit view**,\n  * **Zoom out**,\n  * **Take a snapshot**: take a snapshot saved as a png image in the `snapshots` folder of the models folder.\n\nThe Show/Hide side bar button opens a side panel in the display allowing the modeler to configure:\n  * **Properties** of the display: background and highlight color, display the scale bar\n  * For each layer, we can configure visibility, transparency, position and size of the layer. For grid layers, we can in addition show/hide grids. For species layers, we can also configure the displayed aspect. For text layers, we can the expression displayed with the color and the font.\n\nThe bottom overlay bar displays information about the way it is displayed:\n  * the position of the mouse in the display,\n  * the zoom ratio,\n  * the scale of the display (depending on the zoom).\n\n![images/display-sidebar-overlay.png](resources/images/runningExperiments/display-sidebar-overlay.png)\n\n\n\n\n## OpenGL displays\n\nThe OpenGL display has an additional button **3D Options** providing 3D features:\n  * **Use FreeFly camera**/**Use Arcball camera**: switch between cameras, the default camera is the Arcball one,\n  * **Use mouse to rotate**/**Use mouse to drag** (only with Arcball camera): use left click for one of the 2 actions, left click + Ctrl for the other of the 2 actions.\n  * **Apply inertia** (only with Arcball camera): in inertia mode, when the modeler stops moving the camera, there is no straight halt but a kind of inertia.\n  * **Rotate scene**: rotate the scene around an axis orthogonal to the scene,\n  * **Split layers**/**Merge layers**: display each layer at a distinct height,\n  * **Triangulate scene**: display the polygon primitives.\n\n![images/display-OpenGL.png](resources/images/runningExperiments/display-OpenGL.png)\n\nIn addition, the bottom overlay bar provides the Camera position in 3D.\n\n### FreeFly camera commands\n\n| **Key** | **Function** |\n|:--------------------------|:-----------------------------------------------------------|\n| **Double Click** | Zoom Fit     |\n| **+**   | Zoom In      |\n| **-**   | Zoom Out     |\n| **Up**  | Move forward |\n| **Down**| Move backward|\n| **Left**| Strafe left  |\n| **Right**| Strafe right |\n| **SHIFT+Up**| Look up      |\n| **SHIFT+Down**| Look down    |\n| **SHIFT+Left**| Look left    |\n| **SHIFT+Right**| Look right   |\n| **MOUSE**| Makes the camera look up, down, left and right |\n| **MouseWheel**| Zoom-in/out to the current target (center of the screen)|\n\n### ArcBall camera commands\n\n| **Key** | **Function** |\n|:--------------------------|:-----------------------------------------------------------|\n| **Double Click** | Zoom Fit     |\n| **+**   | Zoom In      |\n| **-**   | Zoom Out     |\n| **Up**  | Horizontal movement to the top|\n| **Down**| Horizontal movement to the bottom|\n| **Left**| Horizontal movement to the left |\n| **Right**| Horizontal movement to the right|\n| **SHIFT+Up**| Rotate the model up (decrease the phi angle of the spherical coordinates)|\n| **SHIFT+Down**| Rotate the model down (increase the phi angle of the spherical coordinates)|\n| **SHIFT+Left**| Rotate the model left (increase the theta angle of the spherical coordinates)|\n| **SHIFT+Right**| Rotate the model right (decrease the theta angle of the spherical coordinates)|\n| **SPACE** | Reset the pivot to the center of the envelope |\n| **KEYPAD 2,4,6,8**| Quick rotation (increase/decrease phi/theta by 30°)|\n| **CMD+MOUSE1** | Makes the camera rotate around the model |\n| **ALT+LEFT_MOUSE**| Enables ROI Agent Selection |\n| **SHIFT+LEFT_MOUSE**| Enables ROI Zoom |\n| **SCROLL**| Zoom-in/out to the current target (center of the sphere)|\n| **WHEEL CLICK** | Reset the pivot to the center of the envelope |","url":"wiki/Displays.md"},{"id":"wiki/ErrorsView.md","title":" Errors View","content":"# Errors View\n\nWhenever a runtime error, or a warning, is issued by the currently running experiment, a view called \"Errors\" is opened automatically. This view provides, together with the error/warning itself, some contextual information about who raised the error (i.e. which agent(s)) and where (i.e. in which portion of the model code). As with other \"status\" in GAMA, errors will appear in red color and warnings in orange.\n\nSince an error appearing in the code is likely to be raised by several agents at once, GAMA groups similar errors together, simply indicating which agent(s) raised them. Note that, unless the error is raised by the experiment agent itself, its message will indicate that at least 2 agents raised it: the original agent and the experiment in which it is plunged.\n\n![images/errors_view.png](resources/images/runningExperiments/errors_view.png)","url":"wiki/ErrorsView.md"},{"id":"wiki/ExperimentsUserInterface.md","title":" Experiments User Interface","content":"# Experiments User Interface\n\n\n\nAs soon as an experiment is [launched](LaunchingExperiments), the modeler is facing a new environment (with different menus and views) called the _Simulation Perspective_). The _Navigator_ is still opened in this perspective, though, and it is still possible to [edit models](EditingModels) in it, but it is considered as good practice to use each perspective for what is has been designed for. Switching perspectives is easy. The small button in the top-left corner of the window allows to switch back and forth the two perspectives.\n\n![images/button_switch.png](resources/images/runningExperiments/button_switch.png)\n\n\nThe actual contents of the simulation perspective will depend on the experiment being run and the [outputs it defines](G__DefiningOutputs). The next sections will present the most common ones ([inspectors, monitors](InspectorsAndMonitors) and [displays](G__Display)), as well as the views that are not defined in outputs, like the [Parameters](ParametersView) or [Errors view](ErrorsView). An overview of the [menus and commands](MenusAndCommands) specific to the simulation perspective is also available.","url":"wiki/ExperimentsUserInterface.md"},{"id":"wiki/InspectorsAndMonitors.md","title":" Inspectors and monitors","content":"# Inspectors and monitors\n\nGAMA offers some tools to obtain informations about one or several agents. There are two kinds of tools :\n* agent browser\n* agent inspector\n\nGAMA offers as well a tool to get the value of a specific expression: monitors.\n\n## Table of contents \n\n* [Inspectors and monitors](#inspectors-and-monitors)\n\t* [Agent Browser](#agent-browser)\n\t* [Agent Inspector](#agent-inspector)\n\t* [Monitor](#monitor)\n\n\n## Agent Browser\nThe species browser provides informations about all or a selection of agents of a species.\n\nThe agent browser is available through the **Agents** menu or by right clicking on a display (screenshots from the ).\n\n![images/browse-menu.png](resources/images/runningExperiments/browse-menu.png)\n\n\n![images/browse_right_clicking.png](resources/images/runningExperiments/browse_right_clicking.png)\n\n\nIt displays in a table all the values of the agent variables of the considered species; each line corresponding to an agent. The list of attributes is displayed on the left side of the view, and you can select the attributes you want to be displayed, simply by clicking on it (Ctrl + Click for multi-selection).\n\n![images/browse_result.png](resources/images/runningExperiments/browse_result.png)\n\n\nBy clicking on the right mouse button on a line, it is possible to do some action for the corresponding agent.\n\n\n\n\n\n## Agent Inspector\nThe agent inspector provides information about one specific agent. It also allows to change the values of its variables during the simulation. The agent inspector is available from the **Agents** menu, by right\\_clicking on a display, in the species inspector or when inspecting another agent.\n\n![images/Agent_inspector.png](resources/images/runningExperiments/Agent_inspector.png)\n\nIt is possible to «highlight» the selected agent.\n\n![images/Inspector_highlight.png](resources/images/runningExperiments/Inspector_highlight.png)\n\nTo change the color of the highlighted agent, go to Preferences/Display.\n\n![images/Inspector_change_highlight_color.png](resources/images/runningExperiments/Inspector_change_highlight_color.png)\n\n\n\n## Monitor\nMonitors allow to follow the value of a GAML expression. For instance the following monitor allow to follow the number of infected people agents during the simulation. The monitor is updated at each simulation step.\n\n![images/monitor.png](resources/images/runningExperiments/monitor.png)\n\n\n\nIt is possible to define a monitor inside a model (see [this page](DefiningMonitorsAndInspectors)). It is also possible to define a monitor through the graphical interface.\n\nTo define a monitor, first choose **Add Monitor** in the **Views** menu (or by clicking on the icon in the Monitor view), then define the display legend and the expression to monitor.\n\n![images/add_monitor.png](resources/images/runningExperiments/add_monitor.png)\n\nIn the following example, we defined a monitor with the legend \"Number initial of preys\" and that has for value the global variable \"nb_preys_init\".\n\n![images/monitor_definition.png](resources/images/runningExperiments/monitor_definition.png)\n\nThe expression should be written with the GAML language. See [this page](GamlReference) for more details about the GAML language.","url":"wiki/InspectorsAndMonitors.md"},{"id":"wiki/LaunchingExperiments.md","title":" Launching Experiments from the User Interface","content":"# Launching Experiments from the User Interface\n\n\n\nGAMA supports multiple ways of launching experiments from within the Modeling Perspective, in editors or in the [navigator](NavigatingWorkspace).\n\n\n## Table of contents \n\n* [Launching Experiments from the User Interface](#launching-experiments-from-the-user-interface)\n\t* [From an Editor](#from-an-editor)\n\t* [From the Navigator](#from-the-navigator)\n\t* [Running Experiments Automatically](#running-experiments-automatically)\n\t* [Running Several Simulations](#running-several-simulations)\n\n\n\n## From an Editor\nAs already mentioned on [this page](GamlEditorGeneralities), GAML editors will provide the easiest way to launch experiments. Whenever a model that contains the definition of experiments is validated, these experiments will appear as distinct buttons, in the order in which they are defined in the file, in the header ribbon above the text. Simply clicking one of these buttons launches the corresponding experiment.\n\n![images/editor_launch.png](resources/images/runningExperiments/editor_launch.png)\n\nFor each of those launching buttons, you can see 2 different pictograms, showing the type of experiment. An experiment can either be a [GUI Experiment](DefiningGUIExperiment) or a [Batch Experiment](BatchExperiments).\n\n![images/editor_different_types_of_experiment.png](resources/images/runningExperiments/editor_different_types_of_experiment.png)\n\n\n## From the Navigator\nYou can also launch your experiments from the navigator, by expanding a model and double clicking on one of the experiments available (The number of experiments for each model is visible also in the navigator). As for the editor, the two types of experimentations (gui and batch) are differentiated by a pictogram.\n\n![images/navigator_launch.png](resources/images/runningExperiments/navigator_launch.png)\n\n\n## Running Experiments Automatically\nOnce an experiment has been launched (unless it is run in [headless](Headless) mode, of course), it normally displays its views and waits from an input from the user, usually a click on the \"Run\" or \"Step\" buttons (see [here](MenusAndCommands)).\n\nIt is however possible to make experiments run directly once launched, without requiring any intervention from the user.  To install this feature, [open the preferences of GAMA](Preferences). On the first tab, simply check \"Auto-run experiments when they are launched\" (which is unchecked by default) and hit \"OK\" to dismiss the dialog. Next time you'll launch an experiment, it will run automatically (this option also applies to experiments launched from the command line).\n\n![images/prefs_auto_run.png](resources/images/runningExperiments/prefs_auto_run.png)\n\n## Running Several Simulations\n\nIt is possible in GAMA to run several simulations. Each simulation will be launched with the same seed (which means that if the parameters are the same, then the result will be exactly the same). All those simulations are synchronized in the same cycle.\n\nTo run several experiments, you have to [write it directly in your model](LaunchSeveralSimulations).\n\n![images/run_several_simulations.png](resources/images/runningExperiments/run_several_simulations.png)","url":"wiki/LaunchingExperiments.md"},{"id":"wiki/MenusAndCommands.md","title":" Menus and Commands","content":"# Menus and Commands\n\n\n\nThe simulation perspective adds on the user interface a number of new menus and commands (i.e. buttons) that are specific to experiment-related tasks.\n\n\n\n## Table of contents \n\n* [Menus and Commands](#menus-and-commands)\n\t* [Experiment Menu](#experiment-menu)\n\t* [Agents Menu](#agents-menu)\n\t* [General Toolbar](#general-toolbar)\n\n\n\n## Experiment Menu\nA menu, called \"Experiment\", allows to control the current experiment. It shares some of its commands with the general toolbar (see [below](#general-toolbar)).\n\n![images/menu_experiment.png](resources/images/runningExperiments/menu_experiment.png)\n\n\n  * **Run/Pause**: allows to run or pause the experiment depending on its current state.\n  * **Step by Step**: runs the experiment for one cycle and pauses it after.\n  * **Reload**: stops the current experiment, deletes its contents, and reloads it, **taking into account the [parameters values](ParametersView) that might have been changed by the user**.\n  * **Stop at first error**: if checked, the current experiment will stop running when an error is issued. The default value can be configured in the [preferences](Preferences).\n  * **Treat warnings as errors**: if checked, a warning will be considered as an error (and if the previous item is checked, will stop the experiment). The default value can be configured in the [preferences](Preferences).\n  * **Display warnings and errors**: if checked, displays the errors and warnings issued by the experiment. If not, do not display them. The default value can be configured in the [preferences](Preferences).\n  * **Force interrupt**: forces the experiment to stop, whatever it is currently doing, purges the memory from it, and switches to the modeling perspective. **Use this command with caution**, as it can have undesirable effects depending on the state of the experiment (for example, if it is reading files, or outputting data, etc.).\n\n\n\n\n\n\n## Agents Menu\n\nA second menu is added in the simulation perspective: \"Agents\". This menu allows for an easy access to the different agents that populate an experiment.\n\n![images/menu_agents.png](resources/images/runningExperiments/menu_agents.png)\n\n\nThis hierarchical menu is always organized in the same way, whatever the experiment being run. A first level is dedicated to the current simulation agent: it allows to [browse](InspectorsAndMonitors) its population or to inspect the simulation agent itself. Browsing the population will give access to the current experiment agent (the \"host\" of this population). A second level lists the \"micro-populations\" present in the simulation agent. And the third level will give access to each individual agent in these populations. This organization is of course recursive: if these agents are themselves hosts of micro-populations, they will be displayed in their individual menu.\n\n![images/menu_agents_2.png](resources/images/runningExperiments/menu_agents_2.png)\n\n\n\nEach agent, when selected, will reveal a similar individual menu. This menu will contain a set of predefined actions, [the commands defined by the user for this species](DefiningUserInteraction#define-user-command), if any, and then the micro-populations hosted by this agent, if any. Agents (like the instances of \"ant\" below) that do not host other agents and whose species has no user commands will have a \"simple\" individual menu.\n\n![images/menu_agents_3.png](resources/images/runningExperiments/menu_agents_3.png)\n\nThese are the 4 actions that will be there most of the time:\n\n  * **Inspect**: open an [inspector](InspectorsAndMonitors) on this agent.\n  * **Highlight**: makes this agent the current \"highlighted\" agent, forcing it to appear \"highlighted\" in all the displays that might have been defined.\n  * **Focus**: this option is not accessible if no displays are defined. Makes the current display zoom on the selected agent (if it is displayed) so that it occupies the whole view.\n  * **Kill**: destroys the selected agent and disposes of it. **Use this command with caution**, as it can have undesirable effects if the agent is currently executing its behavior.\n\nIf an agent hosts other agents (it is the case in [multi-level architecture](MultiLevelArchitecture)), you can access to the micro-population quite easily: \n\n![images/menu_agents_multi_level.png](resources/images/runningExperiments/menu_agents_multi_level.png)\n\nIf [user commands](DefiningUserInteraction#define-user-command) are defined for a species (for example in the existing model Features/Driving Skill/Road Traffic simple (City)), their individual menu will look like the following:\n\n![images/menu_agents_user_command.png](resources/images/runningExperiments/menu_agents_user_command.png)\n\n\n\n\n## General Toolbar\n\nThe last piece of user interface specific to the Simulation Perspective is a toolbar, which contains controls and information displays related to the current experiment.\n\nThis toolbar is voluntarily minimalist, with three buttons already present in the [experiment menu](#experiment-menu) (namely, \"Play/Pause\", \"Step by Step\" and \"Reload\"), which don't need to be detailed here, and two new controls (\"Experiment status\" and \"Cycle Delay\"), which are explained below.\n\n![images/toolbar.png](resources/images/runningExperiments/toolbar.png)\n\n\nWhile opening an experiment, the status will display some information about what's going on. For instance, that GAMA is busy instantiating the agents, or opening the displays.\n\n![images/toolbar_instantiating_agents.png](resources/images/runningExperiments/toolbar_instantiating_agents.png)\n\n\n![images/toolbar_building_outputs.png](resources/images/runningExperiments/toolbar_building_outputs.png)\n\n\nThe orange color usually means that, although the experiment is not ready, things are progressing without problems (a red color message is an indication that something went wrong). When the loading of the experiment is finished, GAMA displays the message \"Simulation ready\" on a green background. If the user runs the simulation, the status changes and displays the number of cycles already elapsed in the simulation currently managed by the experiment.\n\n![images/toolbar_running.png](resources/images/runningExperiments/toolbar_running.png)\n\n\nHovering over the status produces a more accurate information about the internal clock of the simulation.\n\n![images/toolbar_running_with_info.png](resources/images/runningExperiments/toolbar_running_with_info.png)\n\n\n\nFrom top to bottom of this hover, we find the number of cycles elapsed, the simulated time already elapsed (in the example above, one cycle lasts one second of _simulated time_), the duration of cycle in milliseconds, the average duration of one cycle (computed over the number of cycles elapsed), and the total duration, so far, of the simulation (still in milliseconds).\n\nAlthough these durations are entirely dependent on the speed of the simulation engine (and, of course, the number of agents, their behaviors, etc.), there is a way to control it partially with the second control, which allows the user to force a minimal duration (in milliseconds) for a cycle, from 0 (its initial position) to 1000. Note that this minimal duration (or delay) will remain the same for the subsequent reloads of the experiment.\n\n![images/toolbar_running_with_delay.png](resources/images/runningExperiments/toolbar_running_with_delay.png)\n\n\nIn case it is necessary to have more than 1s of delay, it has to be defined, instead, as an attribute of the [experiment](ExperimentBuiltIn).","url":"wiki/MenusAndCommands.md"},{"id":"wiki/ParametersView.md","title":" Parameters View","content":"# Parameters View\n\n\n\nIn the case of an [experiment](DefiningGUIExperiment), the modeler can [define the parameters](DefiningParameters) he wants to be able to modify to explore the simulation, and thus the ones he wants to be able to display and alter in the GUI interface.\n\n**It important to notice that all modification made in the parameters are used for simulation reload only. Creation of a new simulation from the model will erase the modifications.**\n\n\n\n## Table of contents \n\n* [Parameters View](#parameters-view)\n\t* [Built-in parameters](#built-in-parameters)\n\t* [Parameters View](#parameters-view)\n\t* [Modification of parameters values](#modification-of-parameters-values)\n\n\n## Built-in parameters\nEvery [GUI experiment](DefiningGUIExperiment) displays a pane named \"Parameters\" containing at least two built-in parameters related to the random generator:\n  * the Random Number Generator, with a choice between 3 RNG implementations,\n  * the Random Seed\n\n![images/parameters_built_in.png](resources/images/runningExperiments/parameters_built_in.png)\n\n\n## Parameters View\nThe modeler can [define himself parameters](DefiningParameters) that can be displayed in the GUI and that are sorted by categories. Note that the interface will depend on the data type of the parameter: for example, for integer or float parameters, a simple text box will be displayed whereas a color selector will be available for color parameters. The parameters value displayed are the initial value provided to the variables associated to the parameters in the model.\n\n![images/parameters.png](resources/images/runningExperiments/parameters.png)\n\nThe above parameters view is generated from the following code:\n```\nglobal\n{\n\tint i;\n\tfloat f;\n\tstring s;\n\tlist l;\n\tmatrix m;\n\tpair p;\n\trgb c;\n}\n\nexperiment maths type: gui {\n    parameter \"my_integer\" var: i ","url":"wiki/ParametersView.md"},{"id":"wiki/ChangingWorkspace.md","title":" Changing Workspace","content":"# Changing Workspace\n\nIt is possible, and actually common, to store different projects/models in different workspaces and to tell GAMA to switch between these workspaces. Doing so involves being able to create one or several new workspace locations (even if GAMA has been told to [remember](Launching#Choosing_a_Workspace) the current one) and being able to easily switch between them.\n\n## Table of contents \n\n* [Changing Workspace](#changing-workspace)\n\t* [Switching to another Workspace](#switching-to-another-workspace)\n\t* [Cloning the Current Workspace](#cloning-the-current-workspace)\n\n\n\n## Switching to another Workspace\nThis process is similar to the [choice of the workspace location](Launching#Choosing_a_Workspace) when GAMA is launched for the first time. The only preliminary step is to invoke the appropriate command (\"Switch Workspace\") from the \"File\" menu.\n\n![images/menu_switch.png](resources/images/workspaceProjectsAndModels/menu_switch.png)\n\nIn the dialog that appears, the current workspace location should already be entered. Changing it to a new location (or choosing one in the file selector invoked by clicking on \"Browse...\") and pressing \"OK\" will then either create a new workspace if none existed at that location or switch to this new workspace. Both operations will restart GAMA and set the new workspace location. To come back to the previous location, just repeat this step (the previous location is normally now accessible from the combo box).\n\n![images/dialog_switch_ok.png](resources/images/workspaceProjectsAndModels/dialog_switch_ok.png)\n\n## Cloning the Current Workspace\nAnother possibility, if you have models in your current workspace that you would like to keep in the new one (and that you do not want to [import](ImportingModels) one by one after switching workspace), or if you change workspace because you suspect the current one is corrupted, or outdated, etc. but you still want to keep your models, is to **clone** the current workspace into a new (or existing) one.\n\n**Please note that cloning (as its name implies) is an operation that will make a _copy_ of the files into a new workspace. So, if projects are stored in the current workspace, this will result in two different instances of the same projets/models with the same name in the two workspaces. However, for projects that are simply linked from the current workspace, only the link will be copied (which allows to have different workspaces \"containing\" the same project)**\n\nThis can be done by entering the new workspace location and choosing \"Clone current workspace\" in the previous dialog instead of \"Ok\".\n\n![images/dialog_switch_clone.png](resources/images/workspaceProjectsAndModels/dialog_switch_clone.png)\n\n\nIf the new location does not exist, GAMA will ask you to confirm the creation and cloning using a specific dialog box. Dismissing it will cancel the operation.\n\n![images/clone_confirm_new.png](resources/images/workspaceProjectsAndModels/clone_confirm_new.png)\n\n\nIf the new location is already the location of an existing workspace, another confirmation dialog is produced. **It is important to note that all projects in the target workspace will be erased and replaced by the projects in the current workspace if you proceed**. Dismissing it will cancel the operation.\n\n![images/clone_confirm_existing.png](resources/images/workspaceProjectsAndModels/clone_confirm_existing.png) \n\n\nThere are two cases where cloning is not accepted. The first one is when the user tries to clone the current workspace into itself (i.e. the new location is the same as the current location).\n\n![images/close_error_same.png](resources/images/workspaceProjectsAndModels/close_error_same.png)\n\nThe second case is when the user tries to clone the current workspace into one of its subdirectories (which is not feasible).\n\n![images/close_error_subdir.png](resources/images/workspaceProjectsAndModels/close_error_subdir.png)","url":"wiki/ChangingWorkspace.md"},{"id":"wiki/ImportingModels.md","title":" Importing Models","content":"# Importing Models\n\n\n_Importing_ a model refers to making a model file (or a complete project) available for edition and experimentation in the **workspace**. With the exception of [headless](Headless) experiments, GAMA requires that models be manageable in the current workspace to be able to validate them and eventually experiment them.\n\nThere are many situations where a model needs to be _imported_ by the user: someone sent it to him/her by mail, it has been attached to an [issue report](Troubleshooting), it has been shared on the web or an SVN server, or it belongs to a previous workspace after the user has [switched workspace](ChangingWorkspace). The instructions below apply equally to all these situations.\n\nSince model files need to reside in a project to be managed by GAMA, it is usually preferable to import a whole project rather than individual files (unless, of course, the corresponding models are simple enough to not require any additional resources, in which case, the model file can be imported with no harm into an existing project). GAMA will then try to detect situations where a model file is imported alone and, if a corresponding project can be found (for instance, in the upper directories of this file), to import the project instead of the file. As the last resort, GAMA will import orphan model files into a _generic_ project called _\"Unclassified Models\"_ (which will be created if it does not exist yet).\n\n## Table of contents \n\n* [Importing Models](#importing-models)\n\t* [The \"Import...\" Menu Command](#the-import-menu-command)\n\t* [Silent import](#silent-import)\n\t* [Drag'n Drop / Copy-Paste Limitations](#dragn-drop--copy-paste-limitations)\n\n\n\n## The \"Import...\" Menu Command\nThe simplest, safest and most secure way to import a project into the workspace is to use the built-in \"Import...\" menu command, available in the \"File\" menu or in the contextual menu of the _Navigator_.\n\n![images/menu_file_import.png](resources/images/workspaceProjectsAndModels/menu_file_import.png)\n\n\nWhen invoked, this command will open a dialog asking the user to choose the source of the importation. It can be a directory in the filesystem (in which GAMA will look for existing projects), a zip file, a SVN site, etc. It is safer in any case to choose \"Existing Projects into Workspace\".\n\n\n![images/dialog_import.png](resources/images/workspaceProjectsAndModels/dialog_import.png)\n\nNote that when invoked from the contextual menu, \"Import...\" will directly give access to a shortcut of this source in a submenu.\n\n![images/menu_navigator_import.png](resources/images/workspaceProjectsAndModels/menu_navigator_import.png)\n\n\nBoth options will lead the user to a last dialog where he/she will be asked to:\n\n1. Enter a location (or browse to a location) containing the GAMA project(s) to import\n2. Choose among the list of available projects (computed by GAMA) the ones to effectively import\n3. Indicate whether or not these projects need to be **copied to** or **linked from** the workspace (the latter is done by default)\n\n![images/dialog_import_2.png](resources/images/workspaceProjectsAndModels/dialog_import_2.png)\n\n\n\n## Silent import\nAnother (possibly simpler, but less controllable) way of importing projects and models is to either pass a path to a model when [launching](Launching) GAMA from the command line or to double-click on a model file (ending in _.gaml_) in the Explorer or Finder (depending on your OS).\n\nIf the file is not already part of an imported project in the current workspace, GAMA will:\n\n  1. silently import the project (by creating a link to it),\n  1. open an editor on the file selected.\n\nThis procedure may fail, however, if a project of the same name (but in a different location) already exists in the workspace, in which case GAMA will refuse to import the project (and hence, the file). The solution in this case is to rename the project to import (or to rename the existing project in the workspace).\n\n\n\n\n## Drag'n Drop / Copy-Paste Limitations\nCurrently, **there is no way** to drag and drop an entire project into GAMA _Navigator_ (or to copy a project in the filesystem and paste it in the _Navigator_). Only individual model files, folders or resources can be moved this way (and they have to be dropped or pasted into existing projects).\n\nThis limitation might be removed some time in the future, however, allowing users to use the _Navigator_ as a project drop or paste target, but it is not the case yet.","url":"wiki/ImportingModels.md"},{"id":"wiki/NavigatingWorkspace.md","title":" Navigating in the Workspace","content":"# Navigating in the Workspace\n\nAll the models that you edit or run using GAMA are accessible from a central location: the _Navigator_, which is always on the left-hand side of the main window and cannot be closed. This view presents the models currently present in (or linked from) your **workspace**.\n\n![images/navigator_first.png](resources/images/workspaceProjectsAndModels/navigator_first.png)\n\n## Table of contents \n\n* [Navigating in the Workspace](#navigating-in-the-workspace)\n\t* [The Different Categories of Models](#the-different-categories-of-models)\n\t\t* [Models library](#models-library)\n\t\t* [Plugin models](#plugin-models)\n\t\t* [User models](#user-models)\n\t* [Inspect Models](#inspect-models)\n\t* [Moving Models Around](#moving-models-around)\n\t* [Closing and Deleting Projects](#closing-and-deleting-projects)\n\n\n## The Different Categories of Models\n\nIn the _Navigator_, models are organized in three different categories: _Models library_, _Plugin models_, and _User models_. This organization is purely logical and does not reflect where the models are actually stored in the workspace (or elsewhere). Whatever their actual location, model files need to be stored in **projects**, which may contain also other files (called _resources_) necessary for the models to function. A project may of course contain several model files, especially if they are importing each other, if they represent different models on the same topic, or if they share the same resources.\n\n![images/navigator_3_categories.png](resources/images/workspaceProjectsAndModels/navigator_3_categories.png)\n\n### Models library\n\nThis category represents the models that are shipped with each version of GAMA. They do not reside in the workspace, but are considered as _linked_ from it. This link is established every time a new workspace is created. Their actual location is within a plugin (msi.gama.models) of the GAMA application. This category contains four main projects in GAMA 1.6.1, which are further refined in folders and sub-folders that contain model files and resources.\n\n![images/navigator_library_2_folders_expanded.png](resources/images/workspaceProjectsAndModels/navigator_library_2_folders_expanded.png)\n\nIt may happen, in some occasions, that the library of models is not synchronized with the version of GAMA that uses your workspace. This is the case if you use different versions of GAMA to work with the same workspace. In that case, it is required that the library be manually updated. This can be done using the \"Update library\" item in the contextual menu.\n\n![images/navigator_update_library.png](resources/images/workspaceProjectsAndModels/navigator_update_library.png)\n\n\nTo look up for a particular model in the library, users can use the \"Search for file\" menu item. A search dialog is then displayed, which allows to look for models by their title (for example, models containing \"GIS\" in the example below).\n\n\n![images/navigator_menu_search.png](resources/images/workspaceProjectsAndModels/navigator_menu_search.png)\n![images/navigator_dialog_search.png](resources/images/workspaceProjectsAndModels/navigator_dialog_search.png)\n\n### Plugin models\n\nThis category represents the models that are related to a specific plugin (additional or integrated by default). The corresponding plugin is shown between parenthesis.\n\n![images/navigator_plugin_models.png](resources/images/workspaceProjectsAndModels/navigator_plugin_models.png)\n\nFor each projects, you can see the list of plugins needed, and a caption to show you if the plugin is actually installed in your GAMA version or not : green if the plugin is installed, red otherwise.\n\n### User models\n\nThis category regroups all the projects that have been [created](GamlEditorGeneralities) or [imported](ImportingModels) in the workspace by the user. Each project is actually a folder that resides in the folder of the workspace (so they can be easily located from within the filesystem). Any modification (addition, removal of files...) made to them in the file system (or using another application) is immediately reflected in the _Navigator_ and vice-versa.\n\nModel files, although it is by no means mandatory, usually reside in a sub-folder of the project called \"models\".\n\n![images/navigator_user_expanded.png](resources/images/workspaceProjectsAndModels/navigator_user_expanded.png)\n\n## Inspect Models\n\nEach models is presented as a node in the navigation workspace, including _Experiment_ buttons and/or _Requires_ node and/or _Uses_ node.\n\n![images/inspect_model.png](resources/images/workspaceProjectsAndModels/inspect_model.png)\n\n* **Experiment button** : Experiment button are present if your model contains experiments (it is usually the case !). To run the corresponding experiment, just click on it. To learn more about running experiments, jump into this [section](LaunchingExperiments).\n\n* **Require node** : The node _Require_ is present if your model uses some plugins (additional or integrated by default). Each plugin is listed in this node, with a green icon if the plugin is already installed in your GAMA, and a red one if it is not the case. If the plugin you want in not installed, an error will be raised in your model. Please read about [how to install plugins](InstallingPlugins) to learn some more about it.\n\n![images/requires_plugin_not_found.png](resources/images/workspaceProjectsAndModels/requires_plugin_not_found.png)\n\n* **Uses node** : The node _Uses_ is present if your model uses some external resources, *and if the path to the resource is correct* (if the path to the resource is not correct, the resource will not be displayed under _Uses_)\n\n![images/uses_non_correct_paths.png](resources/images/workspaceProjectsAndModels/uses_non_correct_paths.png)\n![images/uses_correct_paths.png](resources/images/workspaceProjectsAndModels/uses_correct_paths.png)\n\n## Moving Models Around\nModel files, as well as resources, or even complete projects, can be moved around between the \"Models Library\"/\"Plugin Models\" and \"Users Models\" categories, or within them, directly in the _Navigator_. Drag'n drop operations are supported, as well as copy and paste. For example, the model \"Life.gaml\", present in the \"Models Library\", can perfectly be copied and then pasted in a project in the \"Users Model\". This local copy in the workspace can then be further edited by the user without altering the original one.\n\n![images/navigator_menu_copy_paste.png](resources/images/workspaceProjectsAndModels/navigator_menu_copy_paste.png)\n\n\n## Closing and Deleting Projects\nUsers can choose to get rid of old projects by either **closing** or **deleting** them. Closing a project means that it will still reside in the workspace (and be still visible, although a bit differently, in the _Navigator_) but its model(s) won't participate to the build process and won't be displayable until the project is opened again.\n\n![images/navigator_menu_close.png](resources/images/workspaceProjectsAndModels/navigator_menu_close.png)\n![images/navigator_close_result.png](resources/images/workspaceProjectsAndModels/navigator_close_result.png)\n\n**Deleting** a project must be invoked when the user wants this project to not appear in the workspace anymore (unless, that is, it is [imported](ImportingModels) again). Invoking this command will effectively make the workspace \"forget\" about this project, and this can be further doubled with a deletion of the projects resources and models from the filesystem.\n\n![images/navigator_menu_delete.png](resources/images/workspaceProjectsAndModels/navigator_menu_delete.png)\n![images/navigator_delete_dialog.png](resources/images/workspaceProjectsAndModels/navigator_delete_dialog.png)","url":"wiki/NavigatingWorkspace.md"},{"id":"wiki/EditingModels.md","title":" Editing models","content":"# Editing models\n\n\n\nEditing models in GAMA is very similar to editing programs in a modern IDE like [Eclipse](http://www.eclipse.rog). After having successfully [launched](Launching) the program, the user has two fundamental concepts at its disposal: a **workspace**, which contains models or links to models organized like a hierarchy of files in a filesystem, and the **workbench** (aka, the _main window_), which contains the tools to create, modify and experiment these models.\n\nUnderstanding how to navigate in the **workspace** is covered in [another section](NavigatingWorkspace) and, for the purpose of this section, we just need to understand that it is organized in **projects**, which contain **models** and their associated data. **Projects** are further categorized, in GAMA, into three categories : _Models Library_ (built-in models shipped with GAMA and automatically linked from the workspace), _Shared Models_, and _User Models_.\n\nThis section covers the following sub-sections :\n\n  * 1. [GAML Editor Generalities](GamlEditorGeneralities)\n  * 2. [GAML Editor Toolbar](GamlEditorToolbar)\n  * 3. [Validation of Models](ValidationOfModels)\n  * 4. [Graphical Editor](G__GraphicalEditor)","url":"wiki/EditingModels.md"},{"id":"wiki/InstallationAndLaunching.md","title":" Installation and Launching","content":"# Installation and Launching\n\nThe GAMA platform can be easily installed in your machine, either if you are using Windows, Mac OS or Ubuntu. GAMA can then be extended by using a number of additional plugins.\n\nThis part is dedicated to explain how to [install GAMA](Installation), [launching GAMA](Launching) and extend the platform by [installing additional plugins](InstallingPlugins). All the [known issues concerning installation](Troubleshooting) are also explain. The GAMA team provides you a continuous support by proposing corrections to some serious issues through [updating patchs](Updating). In this part, we will also present you briefly an other way to launch GAMA without any GUI : the [headless mode](Headless).\n\n* [Installation](Installation)\n* [Launching GAMA](Launching)\n* [Headless Mode](Headless)\n* [Updating GAMA](Updating)\n* [Installing Plugins](InstallingPlugins)\n* [Troubleshooting](Troubleshooting)","url":"wiki/InstallationAndLaunching.md"},{"id":"wiki/Preferences.md","title":" Preferences","content":"# Preferences\n\nVarious preferences are accessible in GAMA to allow users and modelers to personalize their working environment. This section review the different preference tabs available in the current version of GAMA, as well as how to access the preferences and settings inherited by GAMA from Eclipse.\n\nPlease note that the preferences specific to GAMA will be shared, on a same machine, and for a same user, among all the workspaces managed by GAMA. [Changing workspace](ChangingWorkspace) will not alter them. If you happen to run several instances of GAMA, they will also share these preferences.\n\n\n## Table of contents \n\n* [Preferences](#preferences)\n\t* [Opening Preferences](#opening-preferences)\n\t* [Simulation](#simulation)\n\t* [Display](#display)\n\t* [Editor](#editor)\n\t* [External](#external)\n\t* [Advanced Preferences](#advanced-preferences)\n\n\n## Opening Preferences\nTo open the preferences dialog of GAMA, either click on the small \"form\" button on the top-left corner of the window or select \"Preferences...\" from the Gama, \"Help\" or \"Views\" menu depending on your OS.\n\n![images/open_prefs.png](resources/images/preferences/open_prefs.png)\n\n\n## Simulation\n\n![images/simulation.png](resources/images/preferences/simulation.png)\n\n  * **Random Number Generation**: all the options pertaining to generating random numbers in simulations\n    * Random Number Generator: the name of the generator to use by default (if none is specified in the model).\n    * Define a default seed: whether or not a default seed should be used if none is specified in the model  (otherwise it is chosen randomly by GAMA)\n    * Default Seed value: the value of this default seed\n    * Include in the parameters of models: whether the choice of generator and seed is included by default in the [parameters views](ParametersView) of experiments or not.\n  * **Errors**: how to manage and consider simulation errors\n    * Display Errors: whether errors should be displayed or not.\n    * Number of errors to display: how many errors should be displayed at once\n    * Display most recent first: errors will be sorted in the inverse chronological order if true.\n    * Stop simulation at first error: if false, the simulations will display the errors and continue (or try to).\n    * Treat warnings as errors: if true, no more distinction is made between warnings (which do not stop the simulation) and errors (which can potentially stop it.\n  * **Runtime**: various settings regarding the execution of experiments.\n    * Default Step for Delay Slider: the number of seconds that one step of the slider used to impose a delay between two cycles of a simulation lasts.\n    * Auto-run experiments when they are launched: see [this page](LaunchingExperiments#Running_Experiments_Automatically).\n    * Ask to close the previous simulation before launching a new one: if false, previous simulations (if any) will be closed without warning.\n\n    \n## UI\n\n![images/UI.png](resources/images/preferences/UI.png)\n\n  * **Menus**\n    * Break down agents in menu every: when [inspecting](InspectorsAndMonitors) a large number of agents, how many should be displayed before the decision is made to separate the population in sub-menus.\n    * Sort colors menu by\n    * Sort operators menu by\n  * **Console**\n    * Max. number of characters to display in the console (-1 means no limit)\n    * Max. number of characters to keep in memory when console is paused (-1 means no limit)\n  * **Icons**\n    * Icons and buttons dark mode (restart to see the change): Change the highlight for the icons and the button.\n    * Size of icons in the UI (restart to see the change): Size of the icons in pixel\n  * **Viewers**\n    * Default shapefile viewer fill color:\n    * Default shapefile viewer line color:\n    * Default image viewer background color: Background color for the image viewer (when you select an image from the model explorer for example)\n\n\n## General\n\n![images/general.png](resources/images/preferences/general.png)\n\n  * **Startup**\n    * Display welcome page at startup: if true, and if no editors are opened, the [welcome page](Launching#Welcome_Page) is displayed when opening GAMA.\n\n\n## Display\n\n![images/display.png](resources/images/preferences/display.png)\n\n  * **Properties**: various properties of displays\n    * Default display method: use either 'Java2D' or 'OpenGL' if nothing is specified in the [declaration of a display](DefiningDisplaysGeneralities).\n    * Synchronize displays with simulations: if true, simulation cycles will wait for the displays to have finished their rendering before passing to the next cycle (this setting can be changed on an individual basis dynamically [here](Displays)).\n    * Show display overlay: if true, the [bottom overlay](Displays) is visible when opening a display.\n    * Show scale bar in overlay: if true, the scale bar is displayed in the bottom overlay.\n    * Apply antialiasing: if true, displays are drawn using antialiasing, which is slower but renders a better quality of image and text (this setting can be changed on an individual basis dynamically [here](Displays)).\n    * Default background color: indicates which color to use when none is specified in the [declaration of a display](DefiningDisplaysGeneralities).\n    * Default highlight color: indicates which color to use for highlighting agents in the displays.\n    * Stack displays on screen...: if true, the [display views](Displays), in case they are stacked on one another, will put the first [display declared in the model](DefiningDisplaysGeneralities) on top of the stack.\n  * **Default Aspect**: which aspect to use when an ['agent' or 'species' layer](G__DefiningOtherLayers) does not indicate it\n    * Default shape: a choice between 'shape' (which represents the actual geometrical shape of the agent) and geometrical operators ('square', etc.).\n    * Default size: what size to use. This expression must be a constant.\n    * Default color: what color to use.\n    * Default font to use in text layers or draw statements when none is specified\n  * **OpenGL**: various properties specific to OpenGL-based displays\n    * Use improved z positioning: if true, two agents positioned at the same z value will be slightly shifted in z in order to draw them more accurately.\n    * Draw 3D referential: if true, the shape of the world and the 3 axes are drawn\n    * Show number of frames per second\n    * Enable lighting: if true, lights can be defined in the display\n    * Draw normals to objects: if true, the 'normal' of each object is displayed together with it.\n    * Display as a cube: if true, the scene is drawn on all the facets of a cube.\n\n\n## Editor\n\n![images/editor.png](resources/images/preferences/editor.png)\n\n\nMost of the settings and preferences regarding editors can be found in the [advanced preferences](#advanced-preferences).\n\n  * **Options**\n    * Automatically switch to Modeling Persepective: if true, if a model is edited in the Simulation Perspective, then the perspective is automatically switched to Modeling (_inactive for the moment_)\n    * Automatically close curly brackets ({)\n    * Automatically close square brackets (])\n    * Automatically close parenthesis\n    * Mark occurrences of symbols in models: if true, when a symbol is selected in a model, all its occurrences are also highlighted.\n    * Applying formatting to models on save: if true, every time a model file is saved, its code is formatted.\n    * Save all model files before launching an experiment\n    * Ask before saving each file\n  * **Validation**\n    * Show warning markers when editing a model\n    * Show information markers when editing a model\n  * **Presentation**\n    * Turn on colorization of code sections by default\n    * Font of editors\n    * Background color of editors\n  * **Toolbars**\n    * Show edition toolbar by default\n    * Show other models' experiments in toolbar: if true, you are able to launch other models' experiments from a particular model.\n\n\n\n## External\n\n![images/external.png](resources/images/preferences/external.png)\n\n\nThese preferences pertain to the use of external libraries or data with GAMA.\n\n  * **Paths**\n    * Path to Spatialite: the path to the Spatialite library (http://www.gaia-gis.it/gaia-sins/) in the system.\n    * Path to RScript: the path to the RScript library (http://www.r-project.org) in the system.\n  * **GIS Coordinate Reference Systems**: settings about CRS to use when loading or saving GIS files\n    * Let GAMA decide which CRS to use to project GIS data: if true, GAMA will decide which CRS, based on input, should be used to project GIS data. Default is false (i.e. only one CRS, entered below, is used to project data in the models)\n    * ...or use the following CRS (EPSG code): choose a CRS that will be applied to all GIS data when projected in the models. Please refer to http://spatialreference.org/ref/epsg/ for a list of EPSG codes.\n    * When no .prj file or CRS is supplied, consider GIS data to be already projected: if true, GIS data that is not accompanied by a CRS information will be considered as projected using the above code.\n    * ...or use the following CRS (EPSG code): choose a CRS that will represent the default code for loading uninformed GIS data.\n    * When no CRS is provided, save the GIS data with the current CRS: if true, saving GIS data will use the projected CRS unless a CRS is provided.\n    * ...or use the following CRS (EPSG code): otherwise, you might enter a CRS to use to save files.\n\n\n\n\n## Advanced Preferences\n\nThe set of preferences described above are specific to GAMA. But there are other preferences or settings that are inherited from the Eclipse underpinnings of GAMA, which concern either the \"core\" of the platform (workspace, editors, updates, etc.) or plugins (like SVN, for instance) that are part of the distribution of GAMA.\n\nThese \"advanced\" preferences are accessible by clicking on the \"Advanced...\" button in the Preferences view.\n\n![images/advanced.png](resources/images/preferences/advanced.png)\n\n\nDepending on what is installed, the second view that appears will contain a tree of options on the left and preference pages on the right. **Contrary to the first set of preferences, please note that these preferences will be saved in the current workspace**, which means that changing workspace will revert them to their default values. It is however possible to import them in the new workspace using of the wizards provided in the standard \"Import...\" command (see [here](ImportingModels)).\n\n![images/advanced_2.png](resources/images/preferences/advanced_2.png)","url":"wiki/Preferences.md"},{"id":"wiki/RunningExperiments.md","title":" Running Experiments","content":"# Running Experiments\n\n\n\n_Running an experiment_ is the only way, in GAMA, to execute simulations on a model. Experiments can be run in different ways.\n  1. The first, and most common way, consists in [launching an experiment](LaunchingExperiments) from the Modeling perspective, using the [user interface](ExperimentsUserInterface) proposed by the simulation perspective to run simulations.\n  1. The second way, detailed on this [page](Launching), allows to automatically launch an experiment when opening GAMA, subsequently using the same [user interface](ExperimentsUserInterface).\n  1. The last way, known as running [headless experiments](Headless), does not make use of the user interface and allows to manipulate GAMA entirely from the command line.\n\nAll three ways are strictly equivalent in terms of computations (with the exception of the last one omitting all the computations necessary to render simulations on displays or in the UI). They simply differ by their usage:\n  1. The first one is heavily used when designing models or demonstrating several models.\n  1. The second is intended to be used when demonstrating or experimenting a single model.\n  1. The last one is useful when running large sets of simulations, especially over networks or grids of computers.","url":"wiki/RunningExperiments.md"},{"id":"wiki/WorkspaceProjectsAndModels.md","title":" Workspace, Projects and Models","content":"# Workspace, Projects and Models\n\n\n\nThe **workspace** is a directory in which GAMA stores all the current projects on which the user is working, links to other projects, as well as some meta-data like preference settings, current status of the different projects, [error markers](ValidationOfModels), and so on.\n\nExcept when running in [headless mode](Headless), **GAMA cannot function without a valid workspace**.\n\nThe workspace is organized in 3 **[categories](NavigatingWorkspace)**, which are themselves organized into **projects**.\n\nThe **projects** present in the **workspace** can be either directly _stored_ within it (as sub-directories), which is usually the case when the user [creates](EditingModels#Creating_a_first_model) a new project, or _linked_ from it (so the workspace will only contain a link to the directory of the project, supposed to be somewhere in the filesystem or on the network). A same **project** can be linked from different **workspaces**.\n\n**GAMA models files** are stored in these **projects**, which may contain also other files (called _resources_) necessary for the **models** to function. A project may of course contain several **model files**, especially if they are importing each other, if they represent different views on the same topic, or if they share the same resources.\n\nLearning how to [navigate](NavigatingWorkspace) in the workspace, how to [switch](ChangingWorkspace) workspace or how to [import, export](ImportingModels) is a necessity to use GAMA correctly. It is the purpose of the following sections.\n\n* 1. [Navigating in the Workspace](NavigatingWorkspace)\n* 2. [Changing Workspace](ChangingWorkspace)\n* 3. [Importing Models](ImportingModels)","url":"wiki/WorkspaceProjectsAndModels.md"},{"id":"wiki/Extension_cenres.gaml.extensions.hydro.md","title":" Extension","content":"# Extension\n\n----\n\n cenres.gaml.extensions.hydro\n\n## Table of Contents\n### Operators\n[water_area_for](#water_area_for), [water_level_for](#water_level_for), [water_polylines_for](#water_polylines_for), \n\n### Statements\n\n\n### Skills\n\n\n### Architectures\n\n\n\n### Species\n\n\n\n----\n\n## Operators\n\t\n    \t\n----\n\n\n[//]: # (keyword|operator_water_area_for)\n### `water_area_for`\n\n#### Possible use: \n  * `geometry` **`water_area_for`** `float` --->  `float`\n  *  **`water_area_for`** (`geometry` , `float`) --->  `float`\n\n#### Special cases:     \n  * if the left operand is a polyline and the right operand a float for the water y coordinate, returrns the area of the water (water flow area)\n\n#### Examples: \n```\nwaterarea   `float`\n  *  **`water_level_for`** (`geometry` , `float`) --->  `float`\n\n#### Special cases:     \n  * if the left operand is a polyline and the right operand a float for the area, returrns the y coordinate of the water (water level)\n\n#### Examples: \n```\nwaterlevel   `msi.gama.util.IList>`\n  *  **`water_polylines_for`** (`geometry` , `float`) --->  `msi.gama.util.IList>`\n\n#### Special cases:     \n  * if the left operand is a polyline and the right operand a float for the water y coordinate, returrns the shapes of the river sections (list of list of points)\n\n#### Examples: \n```\nwaterarea ","url":"wiki/Extension_cenres.gaml.extensions.hydro.md"},{"id":"wiki/Extension_cict.gaml.extensions.netcdf.md","title":" Extension","content":"# Extension\n\n----\n\n cict.gaml.extensions.netcdf\n\n## Table of Contents\n### Operators\n[is_netcdf](#is_netcdf), [netcdf_file](#netcdf_file), [reduce_dimension](#reduce_dimension), \n\n### Statements\n\n\n### Skills\n\n\n### Architectures\n\n\n\n### Species\n\n\n\n----\n\n## Operators\n\t\n    \t\n----\n\n\n[//]: # (keyword|operator_is_netcdf)\n### `is_netcdf`\n\n#### Possible use: \n  *  **`is_netcdf`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a netcdf file.\n    \t\n----\n\n\n[//]: # (keyword|operator_netcdf_file)\n### `netcdf_file`\n\n#### Possible use: \n  *  **`netcdf_file`** (`string`) --->  `file` \n\n#### Result: \nConstructs a file of type netcdf. Allowed extensions are limited to nc\n    \t\n----\n\n\n[//]: # (keyword|operator_reduce_dimension)\n### `reduce_dimension`\n\n#### Possible use: \n  * `string` **`reduce_dimension`** `container` --->  `container`\n  *  **`reduce_dimension`** (`string` , `container`) --->  `container` \n\n#### Result: \ngeneral operator to manipylate multidimension netcdf data.\n\n----\n\n## Skills\n\t\n\n----\n\n## Statements\n\t\t\n\t\n----\n\n## Species\n\t\n\t\n----\n\n## Architectures \n\t","url":"wiki/Extension_cict.gaml.extensions.netcdf.md"},{"id":"wiki/Extension_dream.gama.opengis.md","title":" Extension","content":"# Extension\n\n----\n\n dream.gama.opengis\n\n## Table of Contents\n### Operators\n[gml_from_wfs](#gml_from_wfs), [image_from_direct_wms](#image_from_direct_wms), [image_from_wms](#image_from_wms), [read_json_rest](#read_json_rest), \n\n### Statements\n\n\n### Skills\n\n\n### Architectures\n\n\n\n### Species\n\n\n\n----\n\n## Operators\n\t\n    \t\n----\n\n\n[//]: # (keyword|operator_gml_from_wfs)\n### `gml_from_wfs`\n\n#### Possible use: \n  *  **`gml_from_wfs`** (`string`, `string`, `string`) --->  `msi.gama.util.IList>` \n\n#### Result: \nWMS: A simple call to WFS/GML2\n    \t\n----\n\n\n[//]: # (keyword|operator_image_from_direct_wms)\n### `image_from_direct_wms`\n\n#### Possible use: \n  * `string` **`image_from_direct_wms`** `string` --->  `file`\n  *  **`image_from_direct_wms`** (`string` , `string`) --->  `file` \n\n#### Result: \nWMS: A simple call to WMS\n    \t\n----\n\n\n[//]: # (keyword|operator_image_from_wms)\n### `image_from_wms`\n\n#### Possible use: \n  *  **`image_from_wms`** (`string`, `string`, `int`, `int`, `int`, `float`, `float`, `float`, `float`) --->  `file` \n\n#### Result: \nWMS: A simple call to WMS\n    \t\n----\n\n\n[//]: # (keyword|operator_read_json_rest)\n### `read_json_rest`\n\n#### Possible use: \n  * `string` **`read_json_rest`** `string` --->  `msi.gama.util.IList>`\n  *  **`read_json_rest`** (`string` , `string`) --->  `msi.gama.util.IList>` \n\n#### Result: \nREST: Read data from RESTService\n\n----\n\n## Skills\n\t\n\n----\n\n## Statements\n\t\t\n\t\n----\n\n## Species\n\t\n\t\n----\n\n## Architectures \n\t","url":"wiki/Extension_dream.gama.opengis.md"},{"id":"wiki/Extension_idees.gama.mapcomparison.md","title":" Extension","content":"# Extension\n\n----\n\n idees.gama.mapcomparison\n\n## Table of Contents\n### Operators\n[fuzzy_kappa](#fuzzy_kappa), [fuzzy_kappa_sim](#fuzzy_kappa_sim), [kappa](#kappa), [kappa_sim](#kappa_sim), [percent_absolute_deviation](#percent_absolute_deviation), \n\n### Statements\n\n\n### Skills\n\n\n### Architectures\n\n\n\n### Species\n\n\n\n----\n\n## Operators\n\t\n    \t\n----\n\n\n[//]: # (keyword|operator_fuzzy_kappa)\n### `fuzzy_kappa`\n\n#### Possible use: \n  *  **`fuzzy_kappa`** (`list`, `list`, `list`, `list`, `list`, `matrix`, `float`) --->  `float`\n  *  **`fuzzy_kappa`** (`list`, `list`, `list`, `list`, `list`, `matrix`, `float`, `list`) --->  `float` \n\n#### Result: \nfuzzy kappa indicator for 2 map comparisons: fuzzy_kappa(agents_list,list_vals1,list_vals2, output_similarity_per_agents,categories,fuzzy_categories_matrix, fuzzy_distance). Reference: Visser, H., and T. de Nijs, 2006. The map comparison kit, Environmental Modelling & Software, 21\nfuzzy kappa indicator for 2 map comparisons: fuzzy_kappa(agents_list,list_vals1,list_vals2, output_similarity_per_agents,categories,fuzzy_categories_matrix, fuzzy_distance, weights). Reference: Visser, H., and T. de Nijs, 2006. The map comparison kit, Environmental Modelling & Software, 21\n\n#### Examples: \n```\nfuzzy_kappa([ag1, ag2, ag3, ag4, ag5],[cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0],[0,1,0],[0,0,1]], 2)\nfuzzy_kappa([ag1, ag2, ag3, ag4, ag5],[cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0],[0,1,0],[0,0,1]], 2, [1.0,3.0,2.0,2.0,4.0])\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_fuzzy_kappa_sim)\n### `fuzzy_kappa_sim`\n\n#### Possible use: \n  *  **`fuzzy_kappa_sim`** (`list`, `list`, `list`, `list`, `list`, `list`, `matrix`, `float`) --->  `float`\n  *  **`fuzzy_kappa_sim`** (`list`, `list`, `list`, `list`, `list`, `list`, `matrix`, `float`, `list`) --->  `float` \n\n#### Result: \nfuzzy kappa simulation indicator for 2 map comparisons: fuzzy_kappa_sim(agents_list,list_vals1,list_vals2, output_similarity_per_agents,fuzzy_transitions_matrix, fuzzy_distance). Reference: Jasper van Vliet, Alex Hagen-Zanker, Jelle Hurkens, Hedwig van Delden, A fuzzy set approach to assess the predictive accuracy of land use simulations, Ecological Modelling, 24 July 2013, Pages 32-42, ISSN 0304-3800, \nfuzzy kappa simulation indicator for 2 map comparisons: fuzzy_kappa_sim(agents_list,list_vals1,list_vals2, output_similarity_per_agents,fuzzy_transitions_matrix, fuzzy_distance, weights). Reference: Jasper van Vliet, Alex Hagen-Zanker, Jelle Hurkens, Hedwig van Delden, A fuzzy set approach to assess the predictive accuracy of land use simulations, Ecological Modelling, 24 July 2013, Pages 32-42, ISSN 0304-3800, \n\n#### Examples: \n```\nfuzzy_kappa_sim([ag1, ag2, ag3, ag4, ag5], [cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,1]], 2)\nfuzzy_kappa_sim([ag1, ag2, ag3, ag4, ag5], [cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,1]], 2,[1.0,3.0,2.0,2.0,4.0])\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_kappa)\n### `kappa`\n\n#### Possible use: \n  *  **`kappa`** (`list`, `list`, `list`) --->  `float`\n  *  **`kappa`** (`list`, `list`, `list`, `list`) --->  `float` \n\n#### Result: \nkappa indicator for 2 map comparisons: kappa(list_vals1,list_vals2,categories). Reference: Cohen, J. A coefficient of agreement for nominal scales. Educ. Psychol. Meas. 1960, 20.\nkappa indicator for 2 map comparisons: kappa(list_vals1,list_vals2,categories, weights). Reference: Cohen, J. A coefficient of agreement for nominal scales. Educ. Psychol. Meas. 1960, 20. \n\n#### Examples: \n```\nkappa([cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2],[cat1,cat2,cat3])\nfloat var1   `float`\n  *  **`kappa_sim`** (`list`, `list`, `list`, `list`, `list`) --->  `float` \n\n#### Result: \nkappa simulation indicator for 2 map comparisons: kappa(list_valsInits,list_valsObs,list_valsSim, categories, weights). Reference: van Vliet, J., Bregt, A.K. & Hagen-Zanker, A. (2011). Revisiting Kappa to account for change in the accuracy assessment of land-use change models, Ecological Modelling 222(8)\nkappa simulation indicator for 2 map comparisons: kappa(list_valsInits,list_valsObs,list_valsSim, categories). Reference: van Vliet, J., Bregt, A.K. & Hagen-Zanker, A. (2011). Revisiting Kappa to account for change in the accuracy assessment of land-use change models, Ecological Modelling 222(8).\n\n#### Examples: \n```\nkappa([cat1,cat1,cat2,cat2,cat2],[cat2,cat1,cat2,cat1,cat3],[cat2,cat1,cat2,cat3,cat3], [cat1,cat2,cat3],[1.0, 2.0, 3.0, 1.0, 5.0])\nkappa([cat1,cat1,cat2,cat2,cat2],[cat2,cat1,cat2,cat1,cat3],[cat2,cat1,cat2,cat3,cat3], [cat1,cat2,cat3])\n```\n  \n    \t\n----\n\n\n[//]: # (keyword|operator_percent_absolute_deviation)\n### `percent_absolute_deviation`\n\n#### Possible use: \n  * `list` **`percent_absolute_deviation`** `list` --->  `float`\n  *  **`percent_absolute_deviation`** (`list` , `list`) --->  `float` \n\n#### Result: \npercent absolute deviation indicator for 2 series of values: percent_absolute_deviation(list_vals_observe,list_vals_sim)\n\n#### Examples: \n```\npercent_absolute_deviation([200,300,150,150,200],[250,250,100,200,200])\n```\n  \n\n----\n\n## Skills\n\t\n\n----\n\n## Statements\n\t\t\n\t\n----\n\n## Species\n\t\n\t\n----\n\n## Architectures \n\t","url":"wiki/Extension_idees.gama.mapcomparison.md"},{"id":"wiki/Extension_idees.gama.weka.md","title":" Extension","content":"# Extension\n\n----\n\n idees.gama.weka\n\n## Table of Contents\n### Operators\n[clustering_cobweb](#clustering_cobweb), [clustering_DBScan](#clustering_dbscan), [clustering_em](#clustering_em), [clustering_farthestFirst](#clustering_farthestfirst), [clustering_simple_kmeans](#clustering_simple_kmeans), [clustering_xmeans](#clustering_xmeans), \n\n### Statements\n\n\n### Skills\n\n\n### Architectures\n\n\n\n### Species\n\n\n\n----\n\n## Operators\n\t\n    \t\n----\n\n\n[//]: # (keyword|operator_clustering_cobweb)\n### `clustering_cobweb`\n\n#### Possible use: \n  *  **`clustering_cobweb`** (`list`, `list`, `map`) --->  `list>` \n\n#### Result: \nA list of agent groups clusteredby CobWeb Algorithm based on the given attributes. Some paremeters can be defined: acuity: minimum standard deviation for numeric attributes; cutoff: category utility threshold by which to prune nodes seed\n\n#### Examples: \n```\nlist> var0 `, `list`, `map`) --->  `list>` \n\n#### Result: \nA list of agent groups clustered by DBScan Algorithm based on the given attributes. Some paremeters can be defined: distance_f: The distance function to use for instances comparison (euclidean or manhattan); min_points: minimun number of DataObjects required in an epsilon-range-queryepsilon: epsilon -- radius of the epsilon-range-queries\n\n#### Examples: \n```\nlist> var0 `, `list`, `map`) --->  `list>` \n\n#### Result: \nA list of agent groups clustered by EM Algorithm based on the given attributes. Some paremeters can be defined: max_iterations: the maximum number of iterations to perform;num_clusters: the number of clusters; minStdDev: minimum allowable standard deviation\n\n#### Examples: \n```\nlist> var0 `, `list`, `map`) --->  `list>` \n\n#### Result: \nA list of agent groups clustered by Farthest First Algorithm based on the given attributes. Some paremeters can be defined: num_clusters: the number of clusters\n\n#### Examples: \n```\nlist> var0 `, `list`, `map`) --->  `list>` \n\n#### Result: \nA list of agent groups clustered by K-Means Algorithm based on the given attributes. Some paremeters can be defined: distance_f: The distance function to use. 4 possible distance functions: euclidean (by default) ; 'chebyshev', 'manhattan' or 'levenshtein'; dont_replace_missing_values: if false, replace missing values globally with mean/mode; max_iterations: the maximum number of iterations to perform;num_clusters: the number of clusters\n\n#### Examples: \n```\nlist> var0 `, `list`, `map`) --->  `list>` \n\n#### Result: \nA list of agent groups clustered by X-Means Algorithm based on the given attributes. Some paremeters can be defined: bin_value: value given for true value of boolean attributes; cut_off_factor: the cut-off factor to use;distance_f: The distance function to use. 4 possible distance functions: euclidean (by default) ; 'chebyshev', 'manhattan' or 'levenshtein'; max_iterations: the maximum number of iterations to perform; max_kmeans: the maximum number of iterations to perform in KMeans; max_kmeans_for_children: the maximum number of iterations KMeans that is performed on the child centers;max_num_clusters: the maximum number of clusters; min_num_clusters: the minimal number of clusters\n\n#### Examples: \n```\nlist> var0 ","url":"wiki/Extension_idees.gama.weka.md"},{"id":"wiki/Extension_irit.maelia.gaml.additions.md","title":" Extension","content":"# Extension\n\n----\n\n irit.maelia.gaml.additions\n\n## Table of Contents\n### Operators\n\n\n### Statements\n\n\n### Skills\n\n\n### Architectures\n\n\n\n### Species\n\n\n\n----\n\n## Operators\n\t\n\n----\n\n## Skills\n\t\n\n----\n\n## Statements\n\t\t\n\t\n----\n\n## Species\n\t\n\t\n----\n\n## Architectures \n\t","url":"wiki/Extension_irit.maelia.gaml.additions.md"},{"id":"wiki/Extension_miat.gama.extension.ifcfile.md","title":" Extension","content":"# Extension\n\n----\n\n miat.gama.extension.ifcfile\n\n## Table of Contents\n### Operators\n[eleldkdjxuxsnel](#eleldkdjxuxsnel), [ifc_file](#ifc_file), [is_ifc](#is_ifc), \n\n### Statements\n\n\n### Skills\n\n\n### Architectures\n\n\n\n### Species\n\n\n\n----\n\n## Operators\n\t\n    \t\n----\n\n\n[//]: # (keyword|operator_eleldkdjxuxsnel)\n### `eleldkdjxuxsnel`\n\n#### Possible use: \n  * `rgb` **`eleldkdjxuxsnel`** `rgb` --->  `string`\n  *  **`eleldkdjxuxsnel`** (`rgb` , `rgb`) --->  `string`\n    \t\n----\n\n\n[//]: # (keyword|operator_ifc_file)\n### `ifc_file`\n\n#### Possible use: \n  *  **`ifc_file`** (`string`) --->  `file` \n\n#### Result: \nConstructs a file of type ifc. Allowed extensions are limited to ifc\n    \t\n----\n\n\n[//]: # (keyword|operator_is_ifc)\n### `is_ifc`\n\n#### Possible use: \n  *  **`is_ifc`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a ifc file.\n\n----\n\n## Skills\n\t\n\n----\n\n## Statements\n\t\t\n\t\n----\n\n## Species\n\t\n\t\n----\n\n## Architectures \n\t","url":"wiki/Extension_miat.gama.extension.ifcfile.md"},{"id":"wiki/Extension_msi.gaml.extensions.cplex.md","title":" Extension","content":"# Extension\n\n----\n\n msi.gaml.extensions.cplex\n\n## Table of Contents\n### Operators\n\n\n### Statements\n\n\n### Skills\n\n\n### Architectures\n\n\n\n### Species\n\n\n\n----\n\n## Operators\n\t\n\n----\n\n## Skills\n\t\n\n----\n\n## Statements\n\t\t\n\t\n----\n\n## Species\n\t\n\t\n----\n\n## Architectures \n\t","url":"wiki/Extension_msi.gaml.extensions.cplex.md"},{"id":"wiki/Extension_msi.gaml.extensions.humanmoving.md","title":" Extension","content":"# Extension\n\n----\n\n msi.gaml.extensions.humanmoving\n\n## Table of Contents\n### Operators\n\n\n### Statements\n\n\n### Skills\n\n\n### Architectures\n\n\n\n### Species\n\n\n\n----\n\n## Operators\n\t\n\n----\n\n## Skills\n\t\n\n----\n\n## Statements\n\t\t\n\t\n----\n\n## Species\n\t\n\t\n----\n\n## Architectures \n\t","url":"wiki/Extension_msi.gaml.extensions.humanmoving.md"},{"id":"wiki/Extension_msi.gaml.extensions.traffic2d.md","title":" Extension","content":"# Extension\n\n----\n\n msi.gaml.extensions.traffic2d\n\n## Table of Contents\n### Operators\n\n\n### Statements\n\n\n### Skills\n\n\n### Architectures\n\n\n\n### Species\n\n\n\n----\n\n## Operators\n\t\n\n----\n\n## Skills\n\t\n\n----\n\n## Statements\n\t\t\n\t\n----\n\n## Species\n\t\n\t\n----\n\n## Architectures \n\t","url":"wiki/Extension_msi.gaml.extensions.traffic2d.md"},{"id":"wiki/Extension_simtools.graphanalysis.fr.md","title":" Extension","content":"# Extension\n\n----\n\n simtools.graphanalysis.fr\n\n## Table of Contents\n### Operators\n\n\n### Statements\n[layout_forceatlas2](#layout_forceatlas2), [layout_yifanhu](#layout_yifanhu), \n\n### Skills\n\n\n### Architectures\n\n\n\n### Species\n\n\n\n----\n\n## Operators\n\t\n\n----\n\n## Skills\n\t\n\n----\n\n## Statements\n\t\n\n----\n\n[//]: # (keyword|statement_layout_forceatlas2)\n### layout_forceatlas2 \n#### Facets \n  \n  * **`graph`** (graph), (omissible) : the graph to apply the layout.\n  * `approximate_repulsion` (boolean): Barnes Hut optimization: n2 complexity to n.ln(n); allows larger graphs. default: false\n  * `approximation` (float): Theta of the Barnes Hut optimization. default: 1.2\n  * `bounded_point1` (point): The new nodes positions are bounded within the two bound points if both are not null. default: null\n  * `bounded_point2` (point): The new nodes positions are bounded within the two bound points if both are not null. default: null\n  * `dissuade_hubs` (boolean): Distributes attraction along outbound edges. Hubs attract less and thus are pushed to the borders (default: false).\n  * `edge_weight_influence` (float): How much influence you give to the edges wight. 0 is no influence, 1 is normal. default: 1.0\n  * `gravity` (float): Attracts nodes to the center. Prevents islands from drifting away. default: 1.0\n  * `linlog_mode` (boolean): Switch model from lin-lin to lin-log. Makes clusters more tight (default: false).\n  * `nb_steps` (int): The number of steps of the algorithm to perform (default 1).\n  * `prevent_overlap` (boolean): Should not be used with approximate_repulsion default: false\n  * `scaling` (float): How much repulsion you want. More makes a more sparse graph. default: 2.0\n  * `stronger_gravity` (boolean): A stronger gravity law default: false\n  * `thread_number` (int): More threads means more speed (default: 1).\n  * `tolerance` (float): How much swinging you allow. Above 1 discouraged. Lower gives less speed and more precision. default: 0.1\n\n#### Embedments\n* The `layout_forceatlas2` statement is of type: **Single statement**\n* The `layout_forceatlas2` statement can be embedded into: Behavior, Sequence of statements or action, \n* The `layout_forceatlas2` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_layout_yifanhu)\n### layout_yifanhu \n#### Facets \n  \n  * **`graph`** (graph), (omissible) : the graph to apply the layout.\n  * `bounded_point1` (point): The new nodes positions are bounded within the two bound points if both are not null. default: null\n  * `bounded_point2` (point): The new nodes positions are bounded within the two bound points if both are not null. default: null\n  * `nb_steps` (int): The number of steps of the algorithm to perform (default 1).\n  * `optimal_distance` (float): the natural length of the springs. Bigger values mean nodes will be farther apart (default: 100).\n  * `quadtree_max_level` (int): The maximum level to be used in the quadtree representation. Greater values mean more accuracy (default: 10).\n  * `relative_strength` (float): The relative strength between electrical force (repulsion) and spring force (attriaction). default: 0.2\n  * `step_size` (float): The step size used in the algorithm. It has to be a meaningful size compared to the optimal distance (e.g. 10%). default: 10\n  * `theta` (float): The theta parameter for Barnes-Hut opening criteria. Smaller values mean more accuracy (default: 1.2).\n\n#### Embedments\n* The `layout_yifanhu` statement is of type: **Single statement**\n* The `layout_yifanhu` statement can be embedded into: Behavior, Sequence of statements or action, \n* The `layout_yifanhu` statement embeds statements: \t\n\t\n----\n\n## Species\n\t\n\t\n----\n\n## Architectures \n\t","url":"wiki/Extension_simtools.graphanalysis.fr.md"},{"id":"wiki/Extension_ummisco.gama.communicator.md","title":" Extension","content":"# Extension\n\n----\n\n ummisco.gama.communicator\n\n## Table of Contents\n### Operators\n\n\n### Statements\n\n\n### Skills\n\n\n### Architectures\n\n\n\n### Species\n\n\n\n----\n\n## Operators\n\t\n\n----\n\n## Skills\n\t\n\n----\n\n## Statements\n\t\t\n\t\n----\n\n## Species\n\t\n\t\n----\n\n## Architectures \n\t","url":"wiki/Extension_ummisco.gama.communicator.md"},{"id":"wiki/Extension_ummisco.gama.gpu.md","title":" Extension","content":"# Extension\n\n----\n\n ummisco.gama.gpu\n\n## Table of Contents\n### Operators\n[CPU_path_between](#cpu_path_between), [GPU_path_between](#gpu_path_between), \n\n### Statements\n\n\n### Skills\n\n\n### Architectures\n\n\n\n### Species\n\n\n\n----\n\n## Operators\n\t\n    \t\n----\n\n\n[//]: # (keyword|operator_CPU_path_between)\n### `CPU_path_between`\n\n#### Possible use: \n  *  **`CPU_path_between`** (`graph`, `geometry`, `geometry`) --->  `path` \n\n#### Result: \nThe shortest path between a list of two objects in a graph computed with CPU\n\n#### Examples: \n```\npath var0   `path` \n\n#### Result: \nThe shortest path between a list of two objects in a graph computed with GPU\n\n#### Examples: \n```\npath var0 ","url":"wiki/Extension_ummisco.gama.gpu.md"},{"id":"wiki/Extension_ummisco.gaml.extensions.rjava.md","title":" Extension","content":"# Extension\n\n----\n\n ummisco.gaml.extensions.rjava\n\n## Table of Contents\n### Operators\n\n\n### Statements\n\n\n### Skills\n\n\n### Architectures\n\n\n\n### Species\n\n\n\n----\n\n## Operators\n\t\n\n----\n\n## Skills\n\t\n\n----\n\n## Statements\n\t\t\n\t\n----\n\n## Species\n\t\n\t\n----\n\n## Architectures \n\t","url":"wiki/Extension_ummisco.gaml.extensions.rjava.md"},{"id":"wiki/Extension_ummisco.gaml.extensions.sound.md","title":" Extension","content":"# Extension\n\n----\n\n ummisco.gaml.extensions.sound\n\n## Table of Contents\n### Operators\n\n\n### Statements\n[pause_sound](#pause_sound), [resume_sound](#resume_sound), [start_sound](#start_sound), [stop_sound](#stop_sound), \n\n### Skills\n\n\n### Architectures\n\n\n\n### Species\n\n\n\n----\n\n## Operators\n\t\n\n----\n\n## Skills\n\t\n\n----\n\n## Statements\n\t\n\n----\n\n[//]: # (keyword|statement_pause_sound)\n### pause_sound \n#### Facets \n\n\n#### Embedments\n* The `pause_sound` statement is of type: **Sequence of statements or action**\n* The `pause_sound` statement can be embedded into: Behavior, Sequence of statements or action, \n* The `pause_sound` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_resume_sound)\n### resume_sound \n#### Facets \n\n\n#### Embedments\n* The `resume_sound` statement is of type: **Sequence of statements or action**\n* The `resume_sound` statement can be embedded into: Behavior, Sequence of statements or action, \n* The `resume_sound` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_start_sound)\n### start_sound \n#### Facets \n  \n  * **`source`** (string): The path to music file. This path is relative to the path of the model.\n  * `mode` (an identifier), takes values in: {overwrite, ignore}: Mode of \n  * `repeat` (boolean): \n\n#### Embedments\n* The `start_sound` statement is of type: **Sequence of statements or action**\n* The `start_sound` statement can be embedded into: Behavior, Sequence of statements or action, \n* The `start_sound` statement embeds statements: \n\n----\n\n[//]: # (keyword|statement_stop_sound)\n### stop_sound \n#### Facets \n\n\n#### Embedments\n* The `stop_sound` statement is of type: **Sequence of statements or action**\n* The `stop_sound` statement can be embedded into: Behavior, Sequence of statements or action, \n* The `stop_sound` statement embeds statements: \t\n\t\n----\n\n## Species\n\t\n\t\n----\n\n## Architectures \n\t","url":"wiki/Extension_ummisco.gaml.extensions.sound.md"},{"id":"wiki/Extension_ummisco.gaml.extensions.stats.md","title":" Extension","content":"# Extension\n\n----\n\n ummisco.gaml.extensions.stats\n\n## Table of Contents\n### Operators\n[auto_correlation](#auto_correlation), [beta](#beta), [binomial_coeff](#binomial_coeff), [binomial_complemented](#binomial_complemented), [binomial_sum](#binomial_sum), [chi_square](#chi_square), [chi_square_complemented](#chi_square_complemented), [correlation](#correlation), [covariance](#covariance), [dnorm](#dnorm), [durbin_watson](#durbin_watson), [gamma](#gamma), [gamma_distribution](#gamma_distribution), [gamma_distribution_complemented](#gamma_distribution_complemented), [incomplete_beta](#incomplete_beta), [incomplete_gamma](#incomplete_gamma), [incomplete_gamma_complement](#incomplete_gamma_complement), [kurtosis](#kurtosis), [lgamma](#lgamma), [log_gamma](#log_gamma), [moment](#moment), [normal_area](#normal_area), [normal_density](#normal_density), [normal_inverse](#normal_inverse), [pbinom](#pbinom), [pchisq](#pchisq), [percentile](#percentile), [pgamma](#pgamma), [pnorm](#pnorm), [pValue_for_fStat](#pvalue_for_fstat), [pValue_for_tStat](#pvalue_for_tstat), [quantile](#quantile), [quantile_inverse](#quantile_inverse), [rank_interpolated](#rank_interpolated), [rms](#rms), [skew](#skew), [student_area](#student_area), [student_t_inverse](#student_t_inverse), [variance](#variance), \n\n### Statements\n\n\n### Skills\n\n\n### Architectures\n\n\n\n### Species\n\n\n\n----\n\n## Operators\n\t\n    \t\n----\n\n\n[//]: # (keyword|operator_auto_correlation)\n### `auto_correlation`\n\n#### Possible use: \n  * `container` **`auto_correlation`** `int` --->  `float`\n  *  **`auto_correlation`** (`container` , `int`) --->  `float` \n\n#### Result: \nReturns the auto-correlation of a data sequence\n    \t\n----\n\n\n[//]: # (keyword|operator_beta)\n### `beta`\n\n#### Possible use: \n  * `float` **`beta`** `float` --->  `float`\n  *  **`beta`** (`float` , `float`) --->  `float` \n\n#### Result: \nReturns the beta function with arguments a, b.\n    \t\n----\n\n\n[//]: # (keyword|operator_binomial_coeff)\n### `binomial_coeff`\n\n#### Possible use: \n  * `int` **`binomial_coeff`** `int` --->  `float`\n  *  **`binomial_coeff`** (`int` , `int`) --->  `float` \n\n#### Result: \nReturns n choose k as a double. Note the integerization of the double return value.\n    \t\n----\n\n\n[//]: # (keyword|operator_binomial_complemented)\n### `binomial_complemented`\n\n#### Possible use: \n  *  **`binomial_complemented`** (`int`, `int`, `float`) --->  `float` \n\n#### Result: \nReturns the sum of the terms k+1 through n of the Binomial probability density, where n is the number of trials and P is the probability of success in the range 0 to 1.\n    \t\n----\n\n\n[//]: # (keyword|operator_binomial_sum)\n### `binomial_sum`\n\n#### Possible use: \n  *  **`binomial_sum`** (`int`, `int`, `float`) --->  `float` \n\n#### Result: \nReturns the sum of the terms 0 through k of the Binomial probability density, where n is the number of trials and p is the probability of success in the range 0 to 1.\n    \t\n----\n\n\n[//]: # (keyword|operator_chi_square)\n### `chi_square`\n\n#### Possible use: \n  * `float` **`chi_square`** `float` --->  `float`\n  *  **`chi_square`** (`float` , `float`) --->  `float` \n\n#### Result: \nReturns the area under the left hand tail (from 0 to x) of the Chi square probability density function with df degrees of freedom.\n    \t\n----\n\n\n[//]: # (keyword|operator_chi_square_complemented)\n### `chi_square_complemented`\n\n#### Possible use: \n  * `float` **`chi_square_complemented`** `float` --->  `float`\n  *  **`chi_square_complemented`** (`float` , `float`) --->  `float` \n\n#### Result: \nReturns the area under the right hand tail (from x to infinity) of the Chi square probability density function with df degrees of freedom.\n    \t\n----\n\n\n[//]: # (keyword|operator_correlation)\n### `correlation`\n\n#### Possible use: \n  * `container` **`correlation`** `container` --->  `float`\n  *  **`correlation`** (`container` , `container`) --->  `float` \n\n#### Result: \nReturns the correlation of two data sequences\n    \t\n----\n\n\n[//]: # (keyword|operator_covariance)\n### `covariance`\n\n#### Possible use: \n  * `container` **`covariance`** `container` --->  `float`\n  *  **`covariance`** (`container` , `container`) --->  `float` \n\n#### Result: \nReturns the covariance of two data sequences\n    \t\n----\n\n\n[//]: # (keyword|operator_dnorm)\n### `dnorm`\nSame signification as [normal_density](#normal_density)\n    \t\n----\n\n\n[//]: # (keyword|operator_durbin_watson)\n### `durbin_watson`\n\n#### Possible use: \n  *  **`durbin_watson`** (`container`) --->  `float` \n\n#### Result: \nDurbin-Watson computation\n    \t\n----\n\n\n[//]: # (keyword|operator_gamma)\n### `gamma`\n\n#### Possible use: \n  *  **`gamma`** (`float`) --->  `float` \n\n#### Result: \nReturns the value of the Gamma function at x.\n    \t\n----\n\n\n[//]: # (keyword|operator_gamma_distribution)\n### `gamma_distribution`\n\n#### Possible use: \n  *  **`gamma_distribution`** (`float`, `float`, `float`) --->  `float` \n\n#### Result: \nReturns the integral from zero to x of the gamma probability density function.  \n\n#### Comment: \nincomplete_gamma(a,x) is equal to pgamma(a,1,x).\n    \t\n----\n\n\n[//]: # (keyword|operator_gamma_distribution_complemented)\n### `gamma_distribution_complemented`\n\n#### Possible use: \n  *  **`gamma_distribution_complemented`** (`float`, `float`, `float`) --->  `float` \n\n#### Result: \nReturns the integral from x to infinity of the gamma probability density function.\n    \t\n----\n\n\n[//]: # (keyword|operator_incomplete_beta)\n### `incomplete_beta`\n\n#### Possible use: \n  *  **`incomplete_beta`** (`float`, `float`, `float`) --->  `float` \n\n#### Result: \nReturns the regularized integral of the beta function with arguments a and b, from zero to x.\n    \t\n----\n\n\n[//]: # (keyword|operator_incomplete_gamma)\n### `incomplete_gamma`\n\n#### Possible use: \n  * `float` **`incomplete_gamma`** `float` --->  `float`\n  *  **`incomplete_gamma`** (`float` , `float`) --->  `float` \n\n#### Result: \n Returns the regularized integral of the Gamma function with argument a to the integration end point x.\n    \t\n----\n\n\n[//]: # (keyword|operator_incomplete_gamma_complement)\n### `incomplete_gamma_complement`\n\n#### Possible use: \n  * `float` **`incomplete_gamma_complement`** `float` --->  `float`\n  *  **`incomplete_gamma_complement`** (`float` , `float`) --->  `float` \n\n#### Result: \nReturns the complemented regularized incomplete Gamma function of the argument a and integration start point x.\n    \t\n----\n\n\n[//]: # (keyword|operator_kurtosis)\n### `kurtosis`\n\n#### Possible use: \n  *  **`kurtosis`** (`container`) --->  `float`\n  * `float` **`kurtosis`** `float` --->  `float`\n  *  **`kurtosis`** (`float` , `float`) --->  `float` \n\n#### Result: \nReturns the kurtosis (aka excess) of a data sequence\nReturns the kurtosis (aka excess) of a data sequence\n    \t\n----\n\n\n[//]: # (keyword|operator_lgamma)\n### `lgamma`\nSame signification as [log_gamma](#log_gamma)\n    \t\n----\n\n\n[//]: # (keyword|operator_log_gamma)\n### `log_gamma`\n\n#### Possible use: \n  *  **`log_gamma`** (`float`) --->  `float` \n\n#### Result: \nReturns the log of the value of the Gamma function at x.\n    \t\n----\n\n\n[//]: # (keyword|operator_moment)\n### `moment`\n\n#### Possible use: \n  *  **`moment`** (`container`, `int`, `float`) --->  `float` \n\n#### Result: \nReturns the moment of k-th order with constant c of a data sequence\n    \t\n----\n\n\n[//]: # (keyword|operator_normal_area)\n### `normal_area`\n\n#### Possible use: \n  *  **`normal_area`** (`float`, `float`, `float`) --->  `float` \n\n#### Result: \nReturns the area to the left of x in the normal distribution with the given mean and standard deviation.\n    \t\n----\n\n\n[//]: # (keyword|operator_normal_density)\n### `normal_density`\n\n#### Possible use: \n  *  **`normal_density`** (`float`, `float`, `float`) --->  `float` \n\n#### Result: \nReturns the probability of x in the normal distribution with the given mean and standard deviation.\n    \t\n----\n\n\n[//]: # (keyword|operator_normal_inverse)\n### `normal_inverse`\n\n#### Possible use: \n  *  **`normal_inverse`** (`float`, `float`, `float`) --->  `float` \n\n#### Result: \nReturns the x in the normal distribution with the given mean and standard deviation, to the left of which lies the given area. normal.Inverse returns the value in terms of standard deviations from the mean, so we need to adjust it for the given mean and standard deviation.\n    \t\n----\n\n\n[//]: # (keyword|operator_pbinom)\n### `pbinom`\nSame signification as [binomial_sum](#binomial_sum)\n    \t\n----\n\n\n[//]: # (keyword|operator_pchisq)\n### `pchisq`\nSame signification as [chi_square](#chi_square)\n    \t\n----\n\n\n[//]: # (keyword|operator_percentile)\n### `percentile`\nSame signification as [quantile_inverse](#quantile_inverse)\n    \t\n----\n\n\n[//]: # (keyword|operator_pgamma)\n### `pgamma`\nSame signification as [gamma_distribution](#gamma_distribution)\n    \t\n----\n\n\n[//]: # (keyword|operator_pnorm)\n### `pnorm`\nSame signification as [normal_area](#normal_area)\n    \t\n----\n\n\n[//]: # (keyword|operator_pValue_for_fStat)\n### `pValue_for_fStat`\n\n#### Possible use: \n  *  **`pValue_for_fStat`** (`float`, `int`, `int`) --->  `float` \n\n#### Result: \nReturns the P value of F statistic fstat with numerator degrees of freedom dfn and denominator degress of freedom dfd. Uses the incomplete Beta function.\n    \t\n----\n\n\n[//]: # (keyword|operator_pValue_for_tStat)\n### `pValue_for_tStat`\n\n#### Possible use: \n  * `float` **`pValue_for_tStat`** `int` --->  `float`\n  *  **`pValue_for_tStat`** (`float` , `int`) --->  `float` \n\n#### Result: \nReturns the P value of the T statistic tstat with df degrees of freedom. This is a two-tailed test so we just double the right tail which is given by studentT of -|tstat|.\n    \t\n----\n\n\n[//]: # (keyword|operator_quantile)\n### `quantile`\n\n#### Possible use: \n  * `container` **`quantile`** `float` --->  `float`\n  *  **`quantile`** (`container` , `float`) --->  `float` \n\n#### Result: \nReturns the phi-quantile; that is, an element elem for which holds that phi percent of data elements are less than elem. The quantile need not necessarily be contained in the data sequence, it can be a linear interpolation.\n    \t\n----\n\n\n[//]: # (keyword|operator_quantile_inverse)\n### `quantile_inverse`\n\n#### Possible use: \n  * `container` **`quantile_inverse`** `float` --->  `float`\n  *  **`quantile_inverse`** (`container` , `float`) --->  `float` \n\n#### Result: \nReturns how many percent of the elements contained in the receiver are <= element. Does linear interpolation if the element is not contained but lies in between two contained elements.\n    \t\n----\n\n\n[//]: # (keyword|operator_rank_interpolated)\n### `rank_interpolated`\n\n#### Possible use: \n  * `container` **`rank_interpolated`** `float` --->  `float`\n  *  **`rank_interpolated`** (`container` , `float`) --->  `float` \n\n#### Result: \nReturns the linearly interpolated number of elements in a list less or equal to a given element. The rank is the number of elements <= element. Ranks are of the form {0, 1, 2,..., sortedList.size()}. If no element is <= element, then the rank is zero. If the element lies in between two contained elements, then linear interpolation is used and a non integer value is returned.\n    \t\n----\n\n\n[//]: # (keyword|operator_rms)\n### `rms`\n\n#### Possible use: \n  * `int` **`rms`** `float` --->  `float`\n  *  **`rms`** (`int` , `float`) --->  `float` \n\n#### Result: \nReturns the RMS (Root-Mean-Square) of a data sequence. The RMS of data sequence is the square-root of the mean of the squares of the elements in the data sequence. It is a measure of the average size of the elements of a data sequence.\n    \t\n----\n\n\n[//]: # (keyword|operator_skew)\n### `skew`\n\n#### Possible use: \n  *  **`skew`** (`container`) --->  `float`\n  * `float` **`skew`** `float` --->  `float`\n  *  **`skew`** (`float` , `float`) --->  `float` \n\n#### Result: \nReturns the skew of a data sequence.\nReturns the skew of a data sequence, which is moment(data,3,mean) / standardDeviation3\n    \t\n----\n\n\n[//]: # (keyword|operator_student_area)\n### `student_area`\n\n#### Possible use: \n  * `float` **`student_area`** `int` --->  `float`\n  *  **`student_area`** (`float` , `int`) --->  `float` \n\n#### Result: \nReturns the area to the left of x in the Student T distribution with the given degrees of freedom.\n    \t\n----\n\n\n[//]: # (keyword|operator_student_t_inverse)\n### `student_t_inverse`\n\n#### Possible use: \n  * `float` **`student_t_inverse`** `int` --->  `float`\n  *  **`student_t_inverse`** (`float` , `int`) --->  `float` \n\n#### Result: \nReturns the value, t, for which the area under the Student-t probability density function (integrated from minus infinity to t) is equal to x.\n    \t\n----\n\n\n[//]: # (keyword|operator_variance)\n### `variance`\n\n#### Possible use: \n  *  **`variance`** (`float`) --->  `float`\n  *  **`variance`** (`int`, `float`, `float`) --->  `float` \n\n#### Result: \nReturns the variance from a standard deviation.\nReturns the variance of a data sequence. That is (sumOfSquares - mean*sum) / size with mean = sum/size.\n\n----\n\n## Skills\n\t\n\n----\n\n## Statements\n\t\t\n\t\n----\n\n## Species\n\t\n\t\n----\n\n## Architectures \n\t","url":"wiki/Extension_ummisco.gaml.extensions.stats.md"},{"id":"wiki/Extension_ummisco.miro.extension.md","title":" Extension","content":"# Extension\n\n----\n\n ummisco.miro.extension\n\n## Table of Contents\n### Operators\n\n\n### Statements\n\n\n### Skills\n\n\n### Architectures\n\n\n\n### Species\n\n\n\n----\n\n## Operators\n\t\n\n----\n\n## Skills\n\t\n\n----\n\n## Statements\n\t\t\n\t\n----\n\n## Species\n\t\n\t\n----\n\n## Architectures \n\t","url":"wiki/Extension_ummisco.miro.extension.md"},{"id":"wiki/Extension_ummisco.miro.extension.traffic.md","title":" Extension","content":"# Extension\n\n----\n\n ummisco.miro.extension.traffic\n\n## Table of Contents\n### Operators\n\n\n### Statements\n\n\n### Skills\n\n\n### Architectures\n\n\n\n### Species\n\n\n\n----\n\n## Operators\n\t\n\n----\n\n## Skills\n\t\n\n----\n\n## Statements\n\t\t\n\t\n----\n\n## Species\n\t\n\t\n----\n\n## Architectures \n\t","url":"wiki/Extension_ummisco.miro.extension.traffic.md"},{"id":"wiki/Extension.md","title":" Extensions","content":"# Extensions\n----\n**This file is automatically generated from java files. Do Not Edit It.**\n\n----\n\n## Introduction\nThis page provides a link to each of the extension pages. Extensions are the additional GAMA plugins that exist in the GAMA GitHub repository but will not be packaged with the release. **These extensions are not maintained by GAMA core team but by their authors.**\n* [idees.gama.weka](PluginDocumentation/Extension_idees.gama.weka)\n* [ummisco.gaml.extensions.stats](PluginDocumentation/Extension_ummisco.gaml.extensions.stats)\n* [miat.gama.extension.ifcfile](PluginDocumentation/Extension_miat.gama.extension.ifcfile)\n* [ummisco.gaml.extensions.sound](PluginDocumentation/Extension_ummisco.gaml.extensions.sound)\n* [simtools.graphanalysis.fr](PluginDocumentation/Extension_simtools.graphanalysis.fr)\n* [ummisco.gaml.extensions.rjava](PluginDocumentation/Extension_ummisco.gaml.extensions.rjava)\n","url":"wiki/Extension.md"},{"id":"wiki/GamlReferences.md","title":" Gaml Reference","content":"# Gaml Reference\n\nThe following pages introduce the various constructs that are made available to the modelers in GAML. All these constructs are **built-in**, i.e. defined in Java, either in the core of GAMA or in its extensions. They include [species](BuiltInSpecies), [skills](BuiltInSkills), [control architectures](BuiltInArchitectures), [statements](Statements), [data types](DataTypes), and various types of [expressions](Expressions), including a long and quite exhaustive list of [operators](Operators).\n\nThis set of pages is to be used as a _reference_, which means its role is not to explain _how_ to properly use these constructs but to detail their structures and components.\n\nIf you are not familiar yet with GAML language, please read carefully the section [Learn GAML Step by Step](LearnGAMLStepByStep) before.","url":"wiki/GamlReferences.md"},{"id":"wiki/ModelLibrary.md","title":" Models Library","content":"# Models Library\n\nHere is the list of models accessible when you download GAMA. Do not hesitate to consult those models to have an idea of the possibilities of the platform.\n\nModels are divided within 5 categories :\n\n* [Features](references#Features) : very short models designed to present the differents features of the platform.\n* [Syntax](references#Syntax) : some gaml files in order to show you the syntax to use for basic things (casting, containers manipulation...).\n* [Toy Models](references#ToyModels) : some pre-made models designed to answer to concrete problematics.\n* [Tutorials](tutorials) : models build in the [tutorial section](tutorials#ThematicTutorials).\n* [Additionnal Plugins](references#AdditionnalPlugins) : models using particular additionnal plugins.","url":"wiki/ModelLibrary.md"},{"id":"wiki/PlatformDocumentation.md","title":" Platform","content":"# Platform\n\nGAMA consists of a single application that is based on the RCP architecture provided by [Eclipse](http://www.eclipse.org). Within this single application software, often referred to as a _**platform**_, users can undertake, without the need of additional third-parties softwares, most of the activities related to modeling and simulation, namely [editing models](EditingModels) and [simulating, visualizing and exploring them](RunningExperiments) using dedicated tools.\n\nFirst-time users may however be intimidated by the apparent complexity of the platform, so this part of the documentation has been designed to ease their first contact with it, by clearly identifying tasks of interest to modelers and how they can be accomplished within GAMA.\n\nIt is accomplished by firstly providing some background about important notions found throughout the platform, especially those of [workspace and projects](WorkspaceProjectsAndModels) and explaining how to [organize and navigate through models](NavigatingWorkspace). Then we take a look at the [edition of models](EditingModels) and its various tools and components ([dedicated editors](GamlEditorGeneralities) and [related tools](GamlEditorToolbar), of course, but also [validators](ValidationOfModels)). Finally, we show how to [run experiments](RunningExperiments) on these models and what support the [user interface](ExperimentsUserInterface) can provide to users in this task.","url":"wiki/PlatformDocumentation.md"},{"id":"wiki/PluginDocumentation.md","title":" Extensions","content":"# Extensions\n\nIn this part, we will present you all the different plugins available for GAMA.\n\n## Introduction\nThis page provides a link to each of the extension pages. Extensions are the additional GAMA plugins that exist in the GAMA GitHub repository but will not be packaged with the release. **These extensions are not maintained by GAMA core team but by their authors.**\n* [msi.gaml.extensions.humanmoving](https://github.com/gama-platform/gama/wiki/Content\\References\\PluginDocumentation\\Extension_msi.gaml.extensions.humanmoving.md)\n* [ummisco.gaml.extensions.stats](https://github.com/gama-platform/gama/wiki/Content\\References\\PluginDocumentation\\Extension_ummisco.gaml.extensions.stats.md)\n* [ummisco.gama.gpu](https://github.com/gama-platform/gama/wiki/Content\\References\\PluginDocumentation\\Extension_ummisco.gama.gpu.md)\n* [ummisco.gama.communicator](https://github.com/gama-platform/gama/wiki/Content\\References\\PluginDocumentation\\Extension_ummisco.gama.communicator.md)\n* [ummisco.gaml.extensions.rjava](https://github.com/gama-platform/gama/wiki/Content\\References\\PluginDocumentation\\Extension_ummisco.gaml.extensions.rjava.md)\n* [ummisco.gaml.extensions.sound](https://github.com/gama-platform/gama/wiki/Content\\References\\PluginDocumentation\\Extension_ummisco.gaml.extensions.sound.md)\n* [ummisco.miro.extension.traffic](https://github.com/gama-platform/gama/wiki/Content\\References\\PluginDocumentation\\Extension_ummisco.miro.extension.traffic.md)\n* [cenres.gaml.extensions.hydro](https://github.com/gama-platform/gama/wiki/Content\\References\\PluginDocumentation\\Extension_cenres.gaml.extensions.hydro.md)\n* [irit.maelia.gaml.additions](https://github.com/gama-platform/gama/wiki/Content\\References\\PluginDocumentation\\Extension_irit.maelia.gaml.additions.md)\n* [ummisco.miro.extension](https://github.com/gama-platform/gama/wiki/Content\\References\\PluginDocumentation\\Extension_ummisco.miro.extension.md)\n* [dream.gama.opengis](https://github.com/gama-platform/gama/wiki/Content\\References\\PluginDocumentation\\Extension_dream.gama.opengis.md)\n* [msi.gaml.extensions.cplex](https://github.com/gama-platform/gama/wiki/Content\\References\\PluginDocumentation\\Extension_msi.gaml.extensions.cplex.md)\n* [idees.gama.weka](https://github.com/gama-platform/gama/wiki/Content\\References\\PluginDocumentation\\Extension_idees.gama.weka.md)\n* [msi.gaml.extensions.traffic2d](https://github.com/gama-platform/gama/wiki/Content\\References\\PluginDocumentation\\Extension_msi.gaml.extensions.traffic2d.md)\n* [simtools.graphanalysis.fr](https://github.com/gama-platform/gama/wiki/Content\\References\\PluginDocumentation\\Extension_simtools.graphanalysis.fr.md)","url":"wiki/PluginDocumentation.md"},{"id":"wiki/GraphSpecies.md","title":" Graph Species","content":"[//]: # (startConcept|graph)\n[//]: # (keyword|concept_graph)\n[//]: # (keyword|concept_node)\n[//]: # (keyword|concept_edge)\n# Graph Species\n[//]: # (keyword|type_graph)\n[//]: # (keyword|concept_topology)\n\nUsing a graph species enables to easily show interaction between agents of a same species. This kind of species is particularly useful when trying to show the interaction (especially the non-spatial one) that exist between agents.\n\n## Index\n\n* [Declaration](#declaration)\n  * [Declare a graph with handmade agents](#declare-a-graph-with-handmade-agents)\n  * [Declare a graph by using an geometry file](#declare-a-graph-by-using-an-geometry-file)\n  * [Declare a graph with nodes and edges](#declare-a-graph-with-nodes-and-edges)\n* [Useful operators with graph](#useful-operators-with-graph)\n  * [Knowing the degree of a node](#knowing-the-degree-of-a-node)\n  * [Get the neighbors of a node](#get-the-neighbors-of-a-node)\n  * [Compute the shortest path](#compute-the-shortest-path)\n  * [Control the weight in graph](#control-the-weight-in-graph)\n* [Example](#example)\n\n## Declaration\n\n### Declare a graph with handmade agents\n\nTo instantiate this `graph` species, several steps must be followed. First the graph species must inherit from the abstract species `graph_node`, then the method `related_to` must be redefined and finally an auxiliary species that inherits from `base_edge` used to represent the edges of the generated graph must be declared.\nA graph node is an abstract species that must redefine one method called `related_to`. \n\n```\nspecies graph_agent parent: graph_node edge_species: edge_agent{\n  bool related_to(graph_agent other){\n  \treturn true;\n  }\n}\n\nspecies edge_agent parent: base_edge {\n}\n```\n\nThe method `related_to` returns a boolean, and take the agents from the current species in argument. If the method returns true, the two agents (the current instance and the one as argument) will be linked.\n\n```\nglobal{\n\tint number_of_agents  list_neighbors (my_graph neighbors_of (self));\n}\n```\n\nHere is an example of model using those two previous concepts (a random node is chosen each step, displayed in red, and his neighbors are displayed in yellow):\n\n![graph_model.png](resources/images/definingAdvancedSpecies/graph_model.png)\n\n```\nmodel graph_model\n\nglobal\n{\n\tint number_of_agents  list_connected_index;\n\t\n\tinit {\n\t\tint i list_neighbors (my_graph neighbors_of (self));\n\n\t\tloop neighb over:list_neighbors {\n\t\t\tneighb.status  list_connected_index;\n\t\n\tinit {\n\t\tint i nodes;\n\t\t\n\tinit\n\t{\n\t\tadd point(10.0,10.0) to:nodes;\n\t\tadd point(90.0,90.0) to:nodes;\n\t\tadd point(40.0,20.0) to:nodes;\n\t\tadd point(80.0,50.0) to:nodes;\n\t\tadd point(90.0,20.0) to:nodes;\n\n\t\tloop nod over:nodes {\n\t\t\tmy_graph ","url":"wiki/GraphSpecies.md"},{"id":"wiki/GridSpecies.md","title":" Grid Species","content":"[//]: # (startConcept|grid)\n[//]: # (keyword|concept_grid)\n# Grid Species\n[//]: # (keyword|concept_topology)\n\nA grid is a particular species of agents. Indeed, a grid is a set of agents that share a grid topology (until now, we only saw species with continuous topology). As other agents, a grid species can have attributes, attributes, behaviors, aspects\nHowever, contrary to regular species, grid agents are created automatically at the beginning of the simulation. It is thus not necessary to use the create statement to create them.\nMoreover, in addition to classic built-in variables, grid a provided with a set of additional built-in variables.\n\n## Index\n\n* [Declaration](#declaration)\n* [Built-in attributes](#built-in-attributes)\n* [Access to cells](#access-to-cells)\n* [Display grid](#display-grid)\n* [Grid with matrix](#grid-with-matrix)\n* [Example](#example)\n\n## Declaration\n\nInstead of using the `species` keyword, use the keyword `grid` to declare a grid species. The grid species has exactly the same facets of the regular species, plus some others.\nTo declare a grid, you have to specify the number of columns and rows first. You can do it two different ways:\n\nUsing the two facets `width:` and `height:` to fix the number of cells (the size of each cells will be determined thanks to the environment dimension).\n\n```\ngrid my_grid width:8 height:10 {\n// my_grid has 8 columns and 10 rows\n}\n```\n\nUsing the two facets `cell_width:` and `cell_height:` to fix the size of each cells (the number cells will be determined thanks to the environment dimension).\n\n```\ngrid my_grid cell_width:3 cell_height:2 {\n// my_grid has cells with dimension 3m width by 2m height\n}\n```\n\nBy default, a grid is composed by 100 rows and 100 columns.\n\nAnother facet exists for grid only, very useful. It is the `neighbors` facet, used to determine how many neighbors has each cell. You can choose among 3 values: 4 (Von Neumann), 6 (hexagon) or 8 (Moore).\n\n![images/grid_neighbors.png](resources/images/definingAdvancedSpecies/grid_neighbors.png)\n\nA grid can also be provided with specific facets that allows to optimize the computation time and the memory space, such as `use_regular_agents`, `use_indivitual_shapes` and `use_neighbours_cache`. Please refer to the GAML Reference for more explanation about those particular facets.\n\n## Built-in attributes\n\n### grid\\_x\nThis variable stores the column index of a cell.\n```\n   grid cell width: 10 height: 10 neighbors: 4 {\n        init {\n             write \"my column index is:\" + grid_x;\n        }\n   }\n```\n\n### grid\\_y\nThis variable stores the row index of a cell.\n```\n   grid cell width: 10 height: 10 neighbors: 4 {\n        init {\n             write \"my row index is:\" + grid_y;\n        }\n   }\n```\n### agents\n\nreturn the set of agents located inside the cell. Note the use of this variable is deprecated.\nIt is preferable to use the `inside` operator:\n[//]: # (keyword|operator_inside)\n\n```\n grid cell width: 10 height: 10 neighbors: 4 { \n        list bugs_inside -> {bug inside self};\n   }\n```\n\n[//]: # (keyword|concept_color)\n### color\nThe **color** built-in variable is used by the optimized grid display. Indeed, it is possible to use for grid agents an optimized aspect by using in a display the **grid** keyword. In this case, the grid will be displayed using the color defined by the **color** variable. The border of the cells can be displayed with a specific color by using the **lines** facet.\n\nHere an example of the display of a grid species named **cell** with black border.\n\n```\nexperiment main_xp type: gui{\n\toutput {\n\t\tdisplay map {\n\t\t\tgrid cell lines: rgb(\"black\") ;\n\t\t}\n\t}\n}\n```\n\n[//]: # (keyword|concept_neighbors)\n### neighbors\nThe **neighbors** built-in variable returns the list of cells at a distance of 1.\n\n```\ngrid my_grid {\n  reflex writeNeighbors {\n    write neighbors;\n  }\n}\n```\n\n### grid\\_value\nThe **grid\\_value** built-in variable is used when initializing a grid from grid file (see later). It is also used for the 3D representation of DEM.\n\n## Access to a cell\n\nthere are several ways to access to a specific cell:\n\n  * by a location: by casting a location to a cell (the unity (`#m`, `#cm`, etc...) is defined when you choose your environment size, in the [global species](GlobalSpecies).\n\n```\n   global {\n         init {\n             write \"cell at {57.5, 45} :\" + cell({57.5, 45});\n         }\n   }\n\n   grid cell width: 10 height: 10 neighbors: 4 {\n   }\n```\n\n  * by the row and column indexes: like matrix, it is possible to directly access to a cell from its indexes\n\n```\n   global {\n         init {\n             write \"cell [5,8] :\" + cell[5,8];\n         }\n   }\n   grid cell width: 10 height: 10 neighbors: 4 {\n   }\n```\n\n[//]: # (keyword|operator_grid_at)\nThe operator `grid_at` also exists to get a particular cell. You just have to specify the index of the cell you want (in x and y):\n\n```\n   global {\n         init {\n             agent cellAgent ","url":"wiki/GridSpecies.md"},{"id":"wiki/MirrorSpecies.md","title":" Mirror species","content":"[//]: # (startConcept|mirror_species)\n[//]: # (keyword|concept_mirror)\n# Mirror species\n\nA mirror species is a species whose population is automatically managed with respect to another species. Whenever an agent is created or destroyed from the other species, an instance of the mirror species is created or destroyed. Each of these 'mirror agents' has access to its reference agent (called its target).\nMirror species can be used in different situations but the one we describe here is more oriented towards visualization purposes.\n\n## Index\n\n* [Declaration](#declaration)\n* [Example](#example)\n\n## Declaration\n\nA mirror species can be defined using the `mirrors` keyword as following:\n\n```\nspecies B mirrors: A{\n}\n```\n\nIn this case the species B mirrors the species A.\n\nBy default the location of the species B will be random but in many cases, once want to place the mirror agent at the same location of the reference species. This can be achieve by simply adding the following lines in the mirror species : \n\n```\nspecies B mirrors: A{\n    point location ","url":"wiki/MirrorSpecies.md"},{"id":"wiki/MultiLevelArchitecture.md","title":" Multi-level architecture","content":"[//]: # (startConcept|multi_level)\n[//]: # (keyword|concept_multi_level)\n# Multi-level architecture\n\nThe multi-level architecture offers the modeler the following possibilities: the declaration of a species as a micro-species of another species, the representation of an entity as different types of agent (i.e., GAML species), the dynamic migration of agents between populations.\n\n## Index\n\n* [Declaration of micro-species](#declaration-of-micro-species)\n* [Access to micro-agents / host agent](#access-to-micro-agents-host-agent)\n* [Representation of an entity as different types of agent](#representation-of-an-entity-as-different-types-of-agent)\n* [Dynamic migration of agents](#dynamic-migration-of-agents)\n* [Example](#example)\n\n## Declaration of micro-species\n\nA species can have other species as micro-species. The micro-species of a species is declared inside the species' declaration.\n\n```\nspecies macro_species {\n      species micro_species_in_group {\n      }\n}\n```\n\nIn the above example, \"micro_species_in_group\" is a micro-species of \"macro_species\". An agent of \"macro_species\" can have agents \"micro_species_in_group\" as micro-agents. Agents of \"micro_species_in_group\" have an agent of \"macro_species\" as \"host\" agent.\n\nAs the species \"micro_species_in_group\" is declared inside the species \"macro_species\", \"micro_species_in_group\" will return a list of \"micro_species_in_group\" agent inside the given \"macro_species\" agent.\n\n```\nglobal\n{\n\tinit {\n\t\tcreate macro_species number:5;\n\t}\n}\n\nspecies macro_species \n{\t\n\tinit {\n\t\tcreate micro_species_in_group number:rnd(10);\n\t\twrite \"the macro species named \"+name+\" contains \"+length(micro_species_in_group)+\" micro-species.\";\n\t}\n\t\n    species micro_species_in_group {\n    }\n}\n\nexperiment my_experiment type: gui {\n}\n```\n\nIn this above example, we create 5 macro-species, and each one of these macro-species create a random number of inner micro-species. We can see that \"micro_species_in_group\" refers to the list of micro-species inside the given macro-species.\n\n## Access to micro-agents, host agent\n\nTo access to micro-agents (from a macro-agent), and to host agent (from a micro-agents), you have to use two built-in attributes.\n\nThe `members` built-in attribute is used inside the macro-agent, to get the list of all its micro-agents.\n\n```\nspecies macro_species \n{\n\tinit {\n\t\tcreate first_micro_species number:3;\n\t\tcreate second_micro_species number:6;\n\t\twrite \"the macro species named \"+name+\" contains \"+length(members)+\" micro-species.\";\n\t}\n\t\n    species first_micro_species {\n    }\n    \n    species second_micro_species {\n    }\n}\n```\n\nThe `host` built-in attribute is used inside the micro-agent to get the host macro-agent.\n\n```\nspecies macro_species {\n\t\n\tmicro_species_in_group micro_agent;\n\t\n\tinit {\n\t\tcreate micro_species_in_group number:rnd(10);\n\t\twrite \"the macro species named \"+name+\" contains \"+length(members)+\" micro-species.\";\n\t}\n\t\n    species micro_species_in_group {\n    \tinit {\n    \t\twrite \"the micro species named \"+name+\" is hosted by \"+host;\n    \t}\n    }\n}\n```\n\nNB: We already said that the world agent is a particular agent, instantiated just once. In fact, the world agent is the host of all the agents. You can try to get the host for a regular species, you will get the world agent itself (named as you named your model). You can also try to get the members of your world (from the global scope for example), and you will get the list of the agents presents in the world.\n\n```\nglobal\n{\n\tinit {\n\t\tcreate macro_species number:5;\n\t\twrite \"the world has \"+length(members)+\" members.\";\n\t}\n}\n\nspecies macro_species \n{\t\n\tinit {\n\t\twrite \"the macro species named \"+name+\" is hosted by \"+host;\n\t}\n}\n```\n\n## Representation of an entity as different types of agent\n\nThe multi-level architecture is often used in order to represent an entity through different types of agent. For example, an agent \"bee\" can have a behavior when it is alone, but when the agent is near from a lot of agents, he can changes his type to \"bee_in_swarm\", defined as a micro-species of a macro-species \"swarm\". Other example: an agent \"pedestrian\" can have a certain behavior when walking on the street, and then change his type to \"pedestrian_in_building\" when he is in a macro-species \"building\".\nYou have then to distinguish two different species to define your micro-species:\n-\tThe first can be seen as a regular species (it is the \"bee\" or the \"pedestrian\" for instance). We will name this species as \"micro_species\".\n-\tThe second is the real micro-species, defined inside the macro-species (it is the \"bee_in_swarm\" or the \"pedestrian_in_building\" for instance). We will name this species as \"micro_species_in_group\". This species has to inherit from the \"micro_species\".\n\n```\nspecies micro_species {\n}\n\nspecies macro_species \n{\t\n\tspecies micro_species_in_group parent: micro_species {\n\t}\n}\n```\n\n## Dynamic migration of agents\n\nIn our example about bees, a \"swarm\" entity is composed of nearby flying \"bee\" entities. When a \"bee\" entity approaches a \"swarm\" entity, this \"bee\" entity will become a member of the group. To represent this, the modeler lets the \"bee\" agent change its species to \"bee_in_swarm\" species. The \"bee\" agent hence becomes a \"bee_in_swarm\" agent. To change species of agent, we can use one of the following statements: `capture`, `release`, `migrate`.\n\n[//]: # (keyword|statement_capture)\nThe statement `capture` is used by the \"macro_species\" to capture one (or several) \"micro_species\" agent(s), and turn it (them) to a \"micro_species_in_group\". You can specify which agent (or list of agents) you want to capture by using the facet `target`. The facet `as` is used to cast the agent from \"micro_species\" to \"micro_species_in_group\". You can use the facet `return` to get the newly captured agent(s).\n\n```\ncapture target:micro_species as:micro_species_in_group;\n```\n\n[//]: # (keyword|statement_release)\nThe statement `release` is used by the \"macro_species\" to release one (or several) \"micro_species_in_group\" agent(s), and turn it (them) to a \"micro_species\". You can specify which agent (or list of agents) you want to release by using the facet `target`. The facet `as` is used to cast the agent from \"micro_species_in_group\" to \"micro_species\". The facet `in` is used to specify the new host (by default, it is the host of the \"macro_species\"). You can use the facet `return` to get the newly released agent(s).\n\n```\nrelease target:list(micro_species_in_group) as:micro_species in:world;\n```\n\n[//]: # (keyword|statement_migrate)\nThe statement `migrate`, less used, permits agents to migrate from one population/species to another population/species and stay in the same host after the migration. Read the GAML Reference to learn more about this statement.\n[//]: # (endConcept|multi_level)\n\n## Example:\n\nHere is an example of micro_species that gather together in macro_species when they are close enough.\n\n![images/multilevel_model.png](resources/images/definingAdvancedSpecies/multilevel_model.png)\n\n```\nmodel multilevel\n\nglobal {\n\tint release_time 0 and flip(0.1)) {\n\t\task macro_species {\n\t\t\tlist micro_species_in_range  micro_species_list_to_be_captured  micro_list) {\n\t\tloop mic_sp over:micro_list {\n\t\t\tcapture mic_sp as:micro_species_in_group;\n\t\t}\n\t}\n\t\n\treflex release_reflex when:(remaining_release_time>0 and flip(0.1)) {\n\t\trelease members as:micro_species /*in:world*/;\n\t\tdo die;\n\t}\n\t\n\taspect base {\n\t\tdraw shape;\n\t\tdraw text:string(length(members)) color:#black size:4;\n\t}\n}\n\nexperiment MyExperiment type: gui {\n\toutput {\n\t\tdisplay MyDisplay type: java2D {\n\t\t\tspecies macro_species aspect: base;\n\t\t\tspecies micro_species aspect: base;\n\t\t}\n\t}\n}\n```","url":"wiki/MultiLevelArchitecture.md"},{"id":"wiki/Defining3DDisplays.md","title":" Defining 3D Displays","content":"[//]: # (startConcept|3d_displays)\n[//]: # (keyword|concept_3d)\n# Defining 3D Displays\n\n## Table of contents \n\n* [OpenGL display](#opengl-display)\n\t* [Position](#position)\n\t* [Size](#size)\n* [Camera](#camera)\n* [Dynamic camera](#dynamic-camera)\n\t* [Camera position](#camera-position)\n\t* [Camera direction (Look Position)](#camera-direction-look-position)\n\t* [Camera orientation (Up Vector)](#camera-orientation-up-vector)\n\t\t* [Default view](#default-view)\n\t\t* [First person view](#first-person-view)\n\t\t* [Third Person view](#third-person-view)\n* [Lighting](#lighting)\n\n[//]: # (keyword|concept_opengl)\n## OpenGL display\n\n* Define the attribute type of the display with `type:opengl` in the output of your model (or use the preferences->display windows to use it by default):\n```\noutput {\n  display DisplayName type:opengl {\n    species mySpecies;\n  }\n```\n\nThe opengl display share most of the feature that the java2D offers and that are described [here](DefiningDisplaysGeneralities).\n\nUsing 3D display offers many way to represent a simulation. A layer can be positioned and scaled in a 3D world. It is possible to superpose layer on different z value and display different information on the model at different position on the screen.\n\n### Position\nLayer can be drawn on different position (x,y and z)  value using the _position_ facet\n\n### Size\nLayer can be drawn with different size (x,y and z) using the _size_ facet\n\nHere is an example of display using all the previous facet (experiment factice to add to the model _Incremental Model 5_). You can also dynamically change those value by showing the side bar in the display.\n\n```\nexperiment expe_test type:gui {\n\toutput {\n\t\tdisplay city_display type: opengl{\n\t\t\tspecies road aspect: geom refresh:false;\n\t\t\tspecies building aspect: geom transparency:0.5 ;\n\t\t\tspecies people aspect: sphere3D position:{0,0,0.1};\n\t\t\tspecies road aspect: geom size:{0.3,0.3,0.3};\n\t\t}\n\t}\n}\n```\n\n![images/species_layer.png](resources/images/definingGUIExperiment/species_layer.png)\n\n\n[//]: # (keyword|concept_camera)\n## Camera\n\n\n\n[Arcball Camera](Displays#arcball-camera-commands)\n\n[FreeFly Camera](Displays#freefly-camera-commands)\n\n\n## Dynamic camera\n\nUser have the possibility to set dynamically the parameter of the camera (observer). The basic camera properties are its **position**, the **direction** in which is pointing, and its **orientation**. Those 3 parameters can be set dynamically at each iteration of the simulation.\n\n### Camera position\nThe facet `camera_pos(x,y,z)` places the camera at the given position.\nThe default camera positon is _(world.width/2,world/height/2,world.maxDim`*`1.5)_ to place the camera at the middle of the environement at an altitude that enables to see the entire environment.\n\n### Camera direction (Look Position)\nThe facet `camera_look_pos(x,y,z)` points the camera toward the given position.  The default look position is _(world.width/2,world/height/2,0)_ to look at the center of the environment.\n\n### Camera orientation (Up Vector)\nThe camera `camera_up_vector(x,y,z)` sets the _up vector_ of the camera.\nThe _up vector_ direction in your scene is the _up_ direction on your display screen.\nThe default value is (0,1,0)\n\nHere are some examples that can be done using those 3 parameters. You can test it by running the following model:\n\n\n\n\n[Boids 3D Camera movement](https://code.google.com/p/gama-platform/source/browse/branches/GAMA_CURRENT/msi.gama.models/models/Features/3D Visualization/Toy Models/Boids 3D Camera movement.gaml)\n\n#### Default view\n```\ndisplay RealBoids   type:opengl{\n...\t\t\n}\n```\n\n#### First person view\nYou can set the position as a first person shooter video game using:\n```\ndisplay FirstPerson  type:opengl \ncamera_pos:{boids(1).location.x,-boids(1).location.y,10} \ncamera_look_pos:{cos(boids(1).heading)*world.shape.width,-sin(boids(1).heading)*world.shape.height,0} \ncamera_up_vector:{0.0,0.0,1.0}{\n...\n}\n```\n\n#### Third Person view\nYou can follow an agent during a simulation by positioning the camera above it using:\n\n```\ndisplay ThirdPerson  type:opengl camera_pos:{boids(1).location.x,-boids(1).location.y,250}  camera_look_pos:{boids(1).location.x,-boids(1).location.y,boids(1).location.z}{\n...\n} \n```\n\n\n[//]: # (keyword|concept_light)\n## Lighting\n\nIn a 3D scene once can define light sources. The way how light sources and 3D object interact is called lighting. Lighting is an important factor to render realistic scenes.\n\nIn a real world, the color that we see depend on the interaction between color material surfaces, the light sources and the position of the viewer. There are four kinds of lighting called _ambient_, _diffuse_, _specular_ and _emissive_.\n\nGama handle _ambient_ and _diffuse_ light.\n\n\n\n* **ambient\\_light**: Allows to define the value of the ambient light either using an int (ambient\\_light:(125)) or a rgb color ((ambient\\_light:rgb(255,255,255)). default is rgb(125,125,125).\n* **diffuse\\_light**: Allows to define the value of the diffuse light either using an int (diffuse\\_light:(125)) or a rgb color ((diffuse\\_light:rgb(255,255,255)). default is rgb(125,125,125).\n* **diffuse\\_light\\_pos**: Allows to define the position of the diffuse light either using an point (diffuse\\_light\\_pos:{x,y,z}). default is {world.shape.width/2,world.shape.height/2,world.shape.width`*`2}.\n* **is\\_light\\_on**: Allows to enable/disable the light. Default is true.\n* **draw\\_diffuse\\_light**: Allows to enable/disable the drawing of the diffuse light. Default is false\")),\n\n\nHere is an example using all the available facet to define a diffuse light that rotate around the world.\n\n\n\n```\ndisplay View1  type:opengl draw_diffuse_light:true ambient_light:(0) diffuse_light:(255) diffuse_light_pos:{50+ 150*sin(time*2),50,150*cos(time*2){\n...\n}\n```\n[//]: # (endConcept|3d_displays)","url":"wiki/Defining3DDisplays.md"},{"id":"wiki/DefiningCharts.md","title":" Defining Charts","content":"[//]: # (startConcept|defining_charts)\n# Defining Charts\n\nTo visualize result and make analysis about you model, you will certainly have to use charts. You can define 3 types of charts in GAML: histograms, pie, and series. For each type, you will have to determine the data you want to highlight.\n\n## Index\n\n* [Define a chart](#define-a-chart)\n* [Data definition](#data-definition)\n* [Different types of charts](#different-type-of-charts)\n\n## Define a chart\n\nTo define a chart, we have to use the `chart` statement. A chart has to be named (with the `name` facet), and the type has to be specified (with the `type` facet). The value of the `type` facet can be `histogram`, `pie`, `series`, `scatter`, `xy`. A chart has to be defined inside a display.\n\n```\nexperiment my_experiment type: gui {\n\toutput {\n\t\tdisplay \"my_display\" {\n\t\t\tchart \"my_chart\" type:pie {\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nAfter declaring your chart, you have to define the data you want to display in your chart.\n\n## Data definition\n\nData can be specified with:\n* several data statements to specify each series\n* one datalist statement to give a list of series. It can be useful if the number of series is unknown, variable or too high.\n \nThe `data` statement is used to specify which variable will be displayed. You have to give your data a name (that will be displayed in your chart), the value of the variable you want to follow (using the `value` facet). You can add come optional facets such as `color` to specify the color of your data.\n\n``` \nglobal\n{\n\tint numberA ","url":"wiki/DefiningCharts.md"},{"id":"wiki/DefiningDisplaysGeneralities.md","title":" Defining displays (Generalities)","content":"[//]: # (startConcept|2d_displays)\n# Defining displays (Generalities)\n[//]: # (keyword|concept_display)\n[//]: # (keyword|concept_layer)\n[//]: # (keyword|concept_output)\n\n## Index\n\n* [Displays and layers](#displays-and-layers)\n* [Organize your layers](#organize-your-layers)\n* [Example of layers](#example-of-layers)\n  * [agents layer](#agents-layer)\n  * [species layer](#species-layer)\n  * [image layer](#image-layer)\n  * [text layer](#text-layer)\n  * [graphics layer](#graphics-layer)\n\n## Displays and layers\n\n[//]: # (keyword|statement_display)\n[//]: # (keyword|statement_output)\nA display is the graphical output of your simulation. You can define several displays related with what you want to represent from your model execution. To define a display, use the keyword `display` inside the `output` scope, and specify a name (`name` facet).\n\n```\nexperiment my_experiment type: gui {\n\toutput {\n\t\tdisplay \"display1\" {\n\t\t}\n\t\tdisplay name:\"display2\" {\n\t\t}\n\t}\n}\n```\n\n[//]: # (keyword|concept_background)\nOther facets are available when defining your display:\n* Use `background` to define a color for your background\n```\ndisplay \"my_display\" background:#red\n```\n[//]: # (keyword|concept_refresh)\n* Use `refresh` if you want to refresh the display when a condition is true (to refresh your display every number of steps, use the operator `every`)\n```\ndisplay \"my_display\" refresh:every(10)\n```\n\nYou can choose between two types of displays, by using the facet type:\n* java2D displays will be used when you want to have 2D visualization. It is used for example when you manipulate charts. This is the default value for the facet type. \n* opengl displays allows you to have 3D visualization.\n\n[//]: # (keyword|concept_autosave)\n[//]: # (keyword|concept_graphic)\n[//]: # (keyword|concept_graphic_unit)\nYou can save the display on the disk, as a png file, in the folder name_of_model/models/snapshots, by using the facet `autosave`. This facet takes one a boolean as argument (to allow or not to save each frame) or a point (to define the size of your image). By default, the resolution of the output image is 500x500px (note that when no unit is provided, the unit is `#px` (pixel) ).\n\n```\ndisplay my_display autosave:true type:java2D {}\n```\n\nis equivalent to :\n\n``` \ndisplay my_display autosave:{500,500} type:java2D {}\n```\n\nEach display can be decomposed in one or several layers. Here is a screenshot (from the Toy Model Ant) to better understand those different notions we are about to tackle in this session.\n\n![images/difference_layer_display.png](resources/images/definingGUIExperiment/difference_layer_display.png)\n\n## Organize your layers\n\nIn one 2D display, you will have several types of layers, giving what you want to display in your model. You have a large number of layers available. You already know some of them, such as `species`, `agents`, `grid`, but other specific layers such as `image` (to display image) and `graphics` (to freely draw shapes/geometries/texts without having to define a species) are also available\n\nEach layer will be displayed in the same order as you declare them. The last declared layer will be above the others.\n\nThus, the following code:\n\n```\nexperiment expe type:gui {\n    output {\n        display my_display {\n            graphics \"layer1\" {\n                draw square(20) at:{10,10} color:#gold;\n            }\n            graphics \"layer2\" {\n                draw square(20) at:{15,15} color:#darkorange;\n            }\n            graphics \"layer3\" {\n                draw square(20) at:{20,20} color:#cornflowerblue;\n            }\n        }\n    }\n}\n```\n\nWill have this output:\n\n![images/layers_order.png](resources/images/definingGUIExperiment/layers_order.png)\n\nMost of the layers have the `transparency` facet in order to see the layers which are under.\n\n```\nexperiment expe type:gui {\n\toutput {\n\t\tdisplay my_display {\n\t\t\tgraphics \"layer1\" {\n\t\t\t\tdraw square(20) at:{10,10} color:#darkorange;\n\t\t\t}\n\t\t\tgraphics \"layer2\" transparency:0.5 {\n\t\t\t\tdraw square(20) at:{15,15} color:#cornflowerblue;\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n![images/layers_transparency.png](resources/images/definingGUIExperiment/layers_transparency.png)\n\nTo specify a position and a size for your layer, you can use the `position` and the `size` facets.\nThe `position` facet is used with a point type, between {0,0} and {1,1}, which corresponds to the position of the upper left corner of your layer in percentage. Then, if you choose the point {0.5,0.5}, the upper left corner of your layer will be in the center of your display. By default, this value is {0,0}.\nThe `size` facet is used with a point type, between {0,0} and {1,1} also. It corresponds to the size occupied by the layer in percentage. By default, this value is {1,1}.\n\n```\nexperiment expe type:gui {\n\toutput {\n\t\tdisplay my_display {\n\t\t\tgraphics \"layer1\" position:{0,0} size:{0.5,0.8} {\n\t\t\t\tdraw shape color:#darkorange;\n\t\t\t}\n\t\t\tgraphics \"layer2\" position:{0.3,0.1} size:{0.6,0.2} {\n\t\t\t\tdraw shape color:#cornflowerblue;\n\t\t\t}\n\t\t\tgraphics \"layer3\" position:{0.4,0.2} size:{0.3,0.8} {\n\t\t\t\tdraw shape color:#gold;\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n![images/layers_size_position.png](resources/images/definingGUIExperiment/layers_size_position.png)\n\nNB : `displays` can have background, while `graphics` can't. If you want to put a background for your `graphics`, a solution can be to draw the `shape` of the world (which is, by default, a square 100m*100m).\n\nA lot of other facets are available for the different layers. Please read the documentation of [`graphics`](Statements#graphics) for more information.\n\n## Example of layers\n\n### agents layer\n`agents` allows the modeler to display only the agents that fulfill a given condition. \n\nPlease read the documentation about [`agents` statement](Statements#agents) if you are interested.\n\n### species layer\n`species` allows modeler to display all the agent of a given species in the current display. In particular, modeler can choose the aspect used to display them.\n\nPlease read the documentation about [`species` statement](Statements#species) if you are interested.\n\n### image layer\n`image` allows modeler to display an image (e.g. as background of a simulation).\n\nPlease read the documentation about [`image` statement](Statements#image) if you are interested.\n\n[//]: # (keyword|concept_text)\n### graphics layer\n`graphics` allows the modeler to freely draw shapes/geometries/texts without having to define a species.\n\nPlease read the documentation about [`graphics` statement](Statements#graphics) if you are interested.\n\n[//]: # (endConcept|2d_displays)","url":"wiki/DefiningDisplaysGeneralities.md"},{"id":"wiki/DefiningExportFiles.md","title":" Defining export files","content":"[//]: # (startConcept|export_files)\n[//]: # (keyword|concept_file)\n[//]: # (keyword|concept_load_file)\n# Defining export files\n\n## Index\n\n* [The Save Statement](#the-save-statement)\n* [Export files in experiment](#export-files-in-experiment)\n* [Autosave](#autosave)\n\n## The Save Statement\n\n[//]: # (keyword|statement_save)\nAllows to save data in a file. The type of file can be \"shp\", \"text\" or \"csv\". The **`save`** statement can be use in an init block, a reflex, an action or in a user command. Do not use it in experiments.\n\n### Facets \n\n  * **`to`** (string): an expression that evaluates to an string, the path to the file\n  * `data` (any type), (omissible) : any expression, that will be saved in the file\n  * `crs` (any type): the name of the projectsion, e.g. crs:\"EPSG:4326\" or its EPSG id, e.g. crs:4326. Here a list of the CRS codes (and EPSG id): http://spatialreference.org\n  * `rewrite` (boolean): an expression that evaluates to a boolean, specifying whether the save will ecrase the file or append data at the end of it\n  * `type` (an identifier): an expression that evaluates to an string, the type of the output file (it can be only \"shp\", \"text\" or \"csv\")\n  * `with` (map):  \n\n### Usages\n\n* Its simple syntax is:\n\n```\nsave data to: output_file type: a_type_file;\n```\n\n[//]: # (keyword|concept_text)\n* To save data in a text file:\n\n```\nsave (string(cycle) + \"->\"  + name + \":\" + location) to: \"save_data.txt\" type: \"text\";\n```\n\n[//]: # (keyword|concept_csv)\n* To save the values of some attributes of the current agent in csv file:\n\n```\nsave [name, location, host] to: \"save_data.csv\" type: \"csv\";\n```\n\n[//]: # (keyword|concept_shapefile)\n* To save the geometries of all the agents of a species into a shapefile (with optional attributes):\n\n```\nsave species_of(self) to: \"save_shapefile.shp\" type: \"shp\" with: [name::\"nameAgent\", location::\"locationAgent\"] crs: \"EPSG:4326\";\n```\n\n## Export files in experiment\n\n[//]: # (keyword|statement_output_file)\nDisplays are not the only output you can manage in GAMA. Saving data to a file during an experiment can also be achieved in several ways, depending on the needs of the modeler. One way is provided by the `save` statement, which can be used everywhere in a model or a species. The other way, described here, is to include an **`output_file`** statement in the output section.\n\n```\noutput_file name:\"file_name\" type:file_type data:data_to_write; \n```\n\nwith:\n\n`file_type`: text, csv or xml\n`file_name`: string\n`data_to_write`: string\n\n### Example:\n\n```\nfile name: \"results\" type: text data: time + \"; \" + nb_preys + \";\" + nb_predators refresh:every(2);  \n```\n\nEach time step (or according to the frequency defined in the `refresh` facet of the file output), a new line will be added at the end of the file. If `rewrite: false` is defined in its facets, a new file will be created for each simulation (identified by a timestamp in its name).\n\nOptionally, a `footer` and a `header` can also be described with the corresponding facets (of type string).\n\n## Autosave\n\n[//]: # (keyword|concept_autosave)\nImage files can be exported also through the `autosave` facet of the display, as explained in [this previous part](DefiningDisplaysGeneralities#displays-and-layers).\n[//]: # (endConcept|export_files)","url":"wiki/DefiningExportFiles.md"},{"id":"wiki/DefiningMonitorsAndInspectors.md","title":" Defining monitors and inspectors","content":"[//]: # (startConcept|monitors_and_inspectors)\n# Defining monitors and inspectors\n\nOther outputs can be very useful to study better the behavior of your agents.\n\n## Index\n\n* [Define a monitor](#define-a-monitor)\n* [Define an inspector](#define-an-inspector)\n\n[//]: # (keyword|concept_monitor)\n## Define a monitor\n\n[//]: # (keyword|statement_monitor)\nA [monitor](InspectorsAndMonitors#monitor) allows to follow the value of an arbitrary expression in GAML. It will appear, in the User Interface, in a small window on its own and be recomputed every time step (or according to its refresh facet). \n\nDefinition of a monitor: \n\n```\nmonitor monitor_name value: an_expression refresh:boolean_statement;\n```\n\nwith:\n* `value:` mandatory, the expression whose value will be displayed by the monitor.\n* `refresh:` bool statement, optional : the new value is computed if the bool statement returns true.\n\nExample:\n\n```\nexperiment my_experiment type: gui {\n\toutput {\n\t\tmonitor monitor_name value: cycle refresh:every(1);\n\t}\n}\n```\n\nNB : you can also declare monitors during the simulation, by clicking on the button \"Add new monitor\", and specifying the name of the variable you want to follow.\n\n[//]: # (keyword|concept_inspector)\n## Define an inspector\n\n[//]: # (keyword|statement_inspector)\nDuring the simulation, the user interface of GAMA provides the user the possibility to [inspect an agent](InspectorsAndMonitors), or a group of agents. But you can also define the inspector you want directly from your model, as an output of the experiment.\n\nUse the statement `inspect` to define your inspector, in the output scope of your gui experiment. The inspector has to be named (using the facet `name`), a value has to be specified (with the `value` facet).\n\n```\ninspect name:\"inspector_name\" value:the_value_you_want_to_display;\n```\n\nNote that you can inspect any type of species (regular species, grid species, even the world...).\n\nThe optional facet `type` is used to specify the type of your inspector. 2 values are possible : \n* _agent_ (default value) if you want to display the information as a regular [agent inspector](InspectorsAndMonitors#agent-inspector). Note that if you want to inspect a large number of agents, this can take a lot of time. In this case, prefer the other type _table_\n* _table_ if you want to display the information as an [agent browser](InspectorsAndMonitors#agent-browser)\n\nThe optional facet `attribute` is used to filter the attributes you want to be displayed in your inspector.\n\n**Beware** : only one agent inspector (`type:agent`) can be used for an experiment. Beside, you can add as many agent browser (`type:table`) as you want for your experiment.\n\nExample of implementation :\n\n```\nmodel new\n\nglobal {\n\tinit {\n\t\tcreate my_species number:3;\n\t}\n}\n\nspecies my_species {\n\tint int_attr ","url":"wiki/DefiningMonitorsAndInspectors.md"},{"id":"wiki/DefiningParameters.md","title":" Defining Parameters","content":"[//]: # (startConcept|define_parameters)\n[//]: # (keyword|concept_parameter)\n# Defining Parameters\n[//]: # (keyword|concept_gui)\n\nWhen playing simulation, you have the possibility to define input parameters, in order to change them and replay the simulation. Defining parameters allows to make the value of a global variable definable by the user through the user graphic interface.\n\n## Index\n\n* [Defining parameters](#defining-parameters)\n* [Additional facets](#additional-facets)\n\n## Defining parameters\n\nYou can define parameters inside the global scope, when defining your global variables with the facet `parameter`:\n\n```\nglobal\n{\n\tint my_integer_global_value ","url":"wiki/DefiningParameters.md"},{"id":"wiki/DefiningUserInteraction.md","title":" Defining user interaction","content":"[//]: # (keyword|concept_gui)\n# Defining user interaction\n\nDuring the simulation, GAML provides you the possibility to define some function the user can execute during the execution. In this chapter, we will see how to define buttons to execute action during the simulation, how to catch click event, and how to use the user control architecture.\n\n## Index\n\n* [Catch Mouse Event](#catch-mouse-event)\n* [Define User command](#define-user-command)\n  * [... in the GUI Experiment scope](#defining-user-command-in-gui-experiment-scope)\n  * [... in global or regular species](#defining-user-command-in-a-global-or-regular-species)\n  * [user_location](#user_location)\n  * [user_input](#user_input)\n* [User Control Architecture](#user-control-architecture)\n\n## Catch Mouse Event\n\n[//]: # (keyword|statement_event)\nYou can catch mouse event during the simulation using the statement `event`. This statement has 2 required facets:\n* **`name`** (identifier) : Specify which event do you want to trigger (among the following values : `mouse_down`, `mouse_down`, `mouse_move`, `mouse_enter`, `mouse_exit`).\n* **`action`** (identifier) : Specify the name of the global action to call.\n\n```\nevent mouse_down action: my_action;\n```\n\nThe `event` statement has to be defined in the `experiment`/`output`/`display` scope. Once the event is triggered, the global action linked will be called. The action linked has to have 2 arguments : the location of the click (type `point`) and the list of agents which are displayed at this position.\n\n```\nglobal\n{\n\taction my_action (point loc, list selected_agents)\n\t{\n\t\twrite \"do action\";\n\t}\n\n}\n\nspecies my_species\n{\n}\n\nexperiment my_experiment type: gui\n{\n\toutput\n\t{\n\t\tdisplay my_display\n\t\t{\n\t\t\tspecies my_species;\n\t\t\tevent mouse_down action: my_action;\n\t\t}\n\t}\n}\n```\n\n## Define User command\n\n[//]: # (keyword|statement_user_command)\nAnywhere in the global block, in a species or in an (GUI) experiment, `user_command` statements can be implemented. They can either call directly an existing action (with or without arguments) or be followed by a block that describes what to do when this command is run.\n\nTheir syntax can be (depending of the modeler needs) either:\n\n```\nuser_command cmd_name action: action_without_arg_name;\n//or\nuser_command cmd_name action: action_name with: [arg1::val1, arg2::val2];\n//or\nuser_command cmd_name {\n   // statements\n}\n```\n\nFor instance:\n\n```\nuser_command kill_myself action: die;\n//or\nuser_command kill_myself action: some_action with: [arg1::5, arg2::3];\n//or\nuser_command kill_myself {\n    do die;\n}\n```\n\n### Defining User command in GUI Experiment scope\n\nThe user command can be defined directly inside the GUI experiment scope. In that case, the implemented action appears as a button in the top of the parameter view.\n\nHere is a very short code example :\n\n```\nmodel quick_user_command_model\n\nglobal {\n\taction createAgent\n\t{\n\t\tcreate my_species;\n\t}\n}\n\nspecies my_species {\n\taspect base {\n\t\tdraw circle(1) color:#blue;\n\t}\n}\n\nexperiment expe type:gui {\n\tuser_command cmd_inside_experiment action:createAgent;\n\toutput {\n\t\tdisplay my_display {\n\t\t\tspecies my_species aspect:base;\n\t\t}\n\t}\n}\n```\n\nAnd here is screenshots of the execution :\n\n![images/user_command_inside_expe.png](resources/images/definingGUIExperiment/user_command_inside_expe.png)\n\n### Defining User command in a global or regular species\n\nThe user command can also be defined inside a species scope (either global or regular one). Here is a quick example of model :\n\n```\nmodel quick_user_command_model\n\nglobal {\n\tinit {\n\t\tcreate my_species number:10;\n\t}\n}\n\nspecies my_species {\n\tuser_command cmd_inside_experiment action:die;\n\taspect base {\n\t\tdraw circle(1) color:#blue;\n\t}\n}\n\nexperiment expe type:gui {\n\toutput {\n\t\tdisplay my_display {\n\t\t\tspecies my_species aspect:base;\n\t\t}\n\t}\n}\n```\n\nDuring the execution, you have 2 ways to access to the action :\n* When the agent is inspected, they appear as buttons above the agents' attributes\n\n![images/user_command_inside_species1.png](resources/images/definingGUIExperiment/user_command_inside_species1.png)\n* When the agent is selected by a right-click in a display, these command appear under the usual \"Inspect\", \"Focus\" and \"Highlight\" commands in the pop-up menu.\n\n![images/user_command_inside_species2.png](resources/images/definingGUIExperiment/user_command_inside_species2.png)\n\n\nRemark: The execution of a command obeys the following rules:\n* when the command is called from right-click pop-menu, it is executed immediately\n* when the command is called from panels, its execution is postponed until the end of the current step and then executed at that time.\n\n### user_location\n\nIn the special case when the `user_command` is called from the pop-up menu (from a right-click on an agent in a display), the location chosen by the user (translated into the model coordinates) is passed to the execution scope under the name `user_location`.\n\nExample:\n\n```\nglobal {\n   user_command \"Create agents here\" {\n      create my_species number: 10 with: [location::user_location];\n   }\n}\n```\n\nThis will allow the user to click on a display, choose the world (always present now), and select the menu item \"Create agents here\".\n\nNote that if the world is inspected (this `user_command` appears thus as a button) and the user chooses to push the button, the agent will be created at a random location.\n\n### user_input\n\n[//]: # (keyword|operator_user_input)\nAs it is also, sometimes, necessary to ask the user for some values (not defined as parameters), the `user_input` unary operator has been introduced. This operator takes a map [string::value] as argument (the key is the name of the chosen parameter, the value is the default value), displays a dialog asking the user for these values, and returns the same map with the modified values (if any). You can also add a text as first argument of the operator, which will be displayed as a title for your dialog popup. The dialog is modal and will interrupt the execution of the simulation until the user has either dismissed or accepted it. It can be used, for instance, in an init section like the following one to force the user to input new values instead of relying on the initial values of parameters.\n\nHere is an example of implementation:\n\n```\nmodel quick_user_command_model\n\nglobal {\n   init {\n      map values ","url":"wiki/DefiningUserInteraction.md"},{"id":"wiki/BatchExperiments.md","title":" Defining Batch Experiments","content":"[//]: # (keyword|concept_batch)\n# Defining Batch Experiments\n\nBatch experiments allows to execute numerous successive simulation runs.They are used to explore the parameter space of a model or to optimize a set of model parameters.\n\nA Batch experiment is defined by:\n\n```\nexperiment exp_title type: batch {\n   [parameter to explore]\n   [exploration method]\n   [reflex]\n   [permanent]\n}\n```\n\n## Table of contents \n\n* [The batch experiment facets](#the-batch-experiment-facets)\n* [Action _step](#action-step)\n* [Reflexes](#reflexes)\n* [Permanent](#permanent)\n\n\n\n## The batch experiment facets\nBatch experiment have the following three facets:\n* until: (expression) Specifies when to stop each simulations. Its value is a condition on variables defined in the model. The run will stop when the condition is evaluated to true. If omitted, the first simulation run will go forever, preventing any subsequent run to take place (unless a halt command is used in the model itself).\n* repeat: (integer) A parameter configuration corresponds to a set of values assigned to each parameter. The attribute repeat specifies the number of times each configuration will be repeated, meaning that as many simulations will be run with the same parameter values. Different random seeds are given to the pseudo-random number generator. This allows to get some statistical power from the experiments conducted. Default value is 1.\n* keep\\_seed: (boolean) If true, the same series of random seeds will be used from one parameter configuration to another. Default value is false.\n\n```\nexperiment my_batch_experiment type: batch repeat: 5 keep_seed: true until: time = 300 {\n   [parameter to explore]\n   [exploration method]\n}\n```\n\n\n## Action _step\nThe_step_action of an experiment is called at the end of a simulation. It is possible to override this action to apply a specific action at the end of each simulation. Note that at the experiment level, you have access to all the species and all the global variables._\n\nFor instance, the following experiment runs the simulation 5 times, and, at the end of each simulation, saves the people agents in a shapefile.\n```\nexperiment 'Run 5 simulations' type: batch repeat: 5 keep_seed: true until: ( time > 1000 ) {\n\tint cpt  \" + food_gathered;\n}\n```\n\n[//]: # (keyword|concept_output)\n[//]: # (keyword|concept_permanent)\n## Permanent\nThe **permanent** section allows to define a output block that will not be re-initialized at the beginning of each simulation but will be filled at the end of each simulation.\nFor instance, this **permanent** section will allows to display for each simulation the end value of the _food\\_gathered_ variable.\n```\npermanent {\n\tdisplay Ants background: rgb('white') refresh:every(1) {\n\t\tchart \"Food Gathered\" type: series {\n\t\t\tdata \"Food\" value: food_gathered;\n\t\t}\n\t}\n}\n```","url":"wiki/BatchExperiments.md"},{"id":"wiki/ExplorationMethods.md","title":" Exploration Methods","content":"[//]: # (startConcept|exploration_methods)\n[//]: # (keyword|concept_batch)\n# Exploration Methods\n\nSeveral batch methods are currently available. Each is described below.\n\n\n## Table of contents \n\n* [The method element](#the-method-element)\n* [Exhaustive exploration of the parameter space](#exhaustive-exploration-of-the-parameter-space)\n* [Hill Climbing](#hill-climbing)\n* [Simulated Annealing](#simulated-annealing)\n* [Tabu Search](#tabu-search)\n* [Reactive Tabu Search](#reactive-tabu-search)\n* [Genetic Algorithm](#genetic-algorithm)\n\n[//]: # (keyword|concept_algorithm)\n## The method element\nThe optional method element controls the algorithm which drives the batch.\n\nIf this element is omitted, the batch will run in a classical way, changing one parameter value at each step until all the possible combinations of parameter values have been covered. See the Exhaustive exploration of the parameter space for more details.\n\nWhen used, this element must contain at least a name attribute to specify the algorithm to use. It has theses facets:\n* minimize or a maximize (mandatory for optimization method): a attribute defining the expression to be optimized.\n* aggregation (optional): possible values (\"min\", \"max\"). Each combination of parameter values is tested **repeat** times. The aggregated fitness of one combination is by default the average of fitness values obtained with those repetitions. This facet can be used to tune this aggregation function and to choose to compute the aggregated fitness value as the minimum or the maximum of the obtained fitness values.\n* other parameters linked to exploration method (optional) : see below for a description of these parameters.\n\nExemples of use of the method elements:\n```\nmethod exhaustive minimize: nb_infected ;\n\nmethod genetic pop_dim: 3 crossover_prob: 0.7 mutation_prob: 0.1 nb_prelim_gen: 1 max_gen: 5  minimize: nb_infected aggregation: \"max\";\n```\n\n[//]: # (keyword|concept_parameter)\n## Exhaustive exploration of the parameter space\n\nParameter definitions accepted: List with step and Explicit List.\nParameter type accepted: all.\n\nThis is the standard batch method. The exhaustive mode is defined by default when there is no method element present in the batch section. It explores all the combination of parameter values in a sequential way.\n\nExample (models/ants/batch/ant\\_exhaustive\\_batch.xml):\n\n```\nexperiment Batch type: batch repeat: 2 keep_seed: true until: (food_gathered = food_placed ) or ( time > 400 ) {\n\tparameter 'Evaporation:' var: evaporation_rate among: [ 0.1 , 0.2 , 0.5 , 0.8 , 1.0 ] unit: 'rate every cycle (1.0 means 100%)';\n\tparameter 'Diffusion:' var: diffusion_rate min: 0.1 max: 1.0 unit: 'rate every cycle (1.0 means 100%)' step: 0.3;\n}\n```\n\nThe order of the simulations depends on the order of the param. In our example, the first combinations will be the followings:\n* evaporation\\_rate = 0.1, diffusion\\_rate = 0.1, (2 times)\n* evaporation\\_rate = 0.1, diffusion\\_rate = 0.4, (2 times)\n* evaporation\\_rate = 0.1, diffusion\\_rate = 0.7, (2 times)\n* evaporation\\_rate = 0.1, diffusion\\_rate = 1.0, (2 times)\n* evaporation\\_rate = 0.2, diffusion\\_rate = 0.1, (2 times)\n* ...\n\nNote: this method can also be used for optimization by adding an method element with maximize or a minimize attribute:\n\n```\nexperiment Batch type: batch repeat: 2 keep_seed: true until: (food_gathered = food_placed ) or ( time > 400 ) {\n\tparameter 'Evaporation:' var: evaporation_rate among: [ 0.1 , 0.2 , 0.5 , 0.8 , 1.0 ] unit: 'rate every cycle (1.0 means 100%)';\n\tparameter 'Diffusion:' var: diffusion_rate min: 0.1 max: 1.0 unit: 'rate every cycle (1.0 means 100%)' step: 0.3;\n\tmethod exhaustive maximize: food_gathered;\n}\n```\n\n\n## Hill Climbing\n\nName: hill\\_climbing\nParameter definitions accepted: List with step and Explicit List.\nParameter type accepted: all.\n\nThis algorithm is an implementation of the Hill Climbing algorithm. See the wikipedia article.\n\nAlgorithm:\n\n```\n Initialization of an initial solution s \n iter = 0\n While iter <= iter_max, do:\n   Choice of the solution s' in the neighborhood of s that maximize the fitness function\n   If f(s') > f(s)\n     s = s'\n   Else\n     end of the search process\n   EndIf\n   iter = iter + 1\n EndWhile\n```\n\nMethod parameters:\n* iter\\_max: number of iterations\n\nExample (models/ants/batch/ant\\_hill\\_climbing\\_batch.xml):\n\n```\nexperiment Batch type: batch repeat: 2 keep_seed: true until: (food_gathered = food_placed ) or ( time > 400 ) {\n\tparameter 'Evaporation:' var: evaporation_rate among: [ 0.1 , 0.2 , 0.5 , 0.8 , 1.0 ] unit: 'rate every cycle (1.0 means 100%)';\n\tparameter 'Diffusion:' var: diffusion_rate min: 0.1 max: 1.0 unit: 'rate every cycle (1.0 means 100%)' step: 0.3;\n\tmethod hill_climbing iter_max: 50 maximize : food_gathered;\n}\n```\n\n\n## Simulated Annealing\nName: annealing\nParameter definitions accepted: List with step and Explicit List.\nParameter type accepted: all.\n\nThis algorithm is an implementation of the Simulated Annealing algorithm. See the wikipedia article.\n\nAlgorithm:\n\n```\n Initialization of an initial solution s \n temp = temp_init\n While temp > temp_end, do:\n   iter = 0\n   While iter < nb_iter_cst_temp, do:\n     Random choice of a solution s2 in the neighborhood of s  \n     df = f(s2)-f(s)\n     If df > 0 \n       s = s2\n     Else,\n       rand = random number between 0 and 1\n       If rand < exp(df/T)\n         s = s2\n       EndIf\n     EndIf\n     iter = iter + 1\n   EndWhile\n   temp = temp * nb_iter_cst_temp\n EndWhile\n```\n\nMethod parameters:\n* temp\\_init: Initial temperature\n* temp\\_end: Final temperature\n* temp\\_decrease: Temperature decrease coefficient\n* nb\\_iter\\_cst\\_temp: Number of iterations per level of temperature\n\nExample (models/ants/batch/ant\\_simulated\\_annealing\\_batch.xml):\n\n\n```\nexperiment Batch type: batch repeat: 2 keep_seed: true until: (food_gathered = food_placed ) or ( time > 400 ) {\n\tparameter 'Evaporation:' var: evaporation_rate among: [ 0.1 , 0.2 , 0.5 , 0.8 , 1.0 ] unit: 'rate every cycle (1.0 means 100%)';\n\tparameter 'Diffusion:' var: diffusion_rate min: 0.1 max: 1.0 unit: 'rate every cycle (1.0 means 100%)' step: 0.3;\n\tmethod annealing temp_init: 100  temp_end: 1 temp_decrease: 0.5 nb_iter_cst_temp: 5 maximize: food_gathered;\n}\n```\n\n\n## Tabu Search\nName: tabu\nParameter definitions accepted: List with step and Explicit List.\nParameter type accepted: all.\n\nThis algorithm is an implementation of the Tabu Search algorithm. See the wikipedia article.\n\nAlgorithm:\n\n```\n Initialization of an initial solution s \n tabuList = {}\n iter = 0\n While iter <= iter_max, do:\n   Choice of the solution s2 in the neighborhood of s such that:\n     s2 is not in tabuList\n     the fitness function is maximal for s2\n   s = s2\n   If size of tabuList = tabu_list_size\n     removing of the oldest solution in tabuList \n   EndIf\n   tabuList = tabuList + s\n   iter = iter + 1\n EndWhile\n```\n\nMethod parameters:\n* iter\\_max: number of iterations\n* tabu\\_list\\_size: size of the tabu list\n\n\n```\nexperiment Batch type: batch repeat: 2 keep_seed: true until: (food_gathered = food_placed ) or ( time > 400 ) {\n\tparameter 'Evaporation:' var: evaporation_rate among: [ 0.1 , 0.2 , 0.5 , 0.8 , 1.0 ] unit: 'rate every cycle (1.0 means 100%)';\n\tparameter 'Diffusion:' var: diffusion_rate min: 0.1 max: 1.0 unit: 'rate every cycle (1.0 means 100%)' step: 0.3;\n\tmethod tabu iter_max: 50 tabu_list_size: 5 maximize: food_gathered;\n}\n```\n\n\n\n\n## Reactive Tabu Search\n\nName: reactive\\_tabu\nParameter definitions accepted: List with step and Explicit List.\nParameter type accepted: all.\n\nThis algorithm is a simple implementation of the Reactive Tabu Search algorithm ((Battiti et al., 1993)). This Reactive Tabu Search is an enhance version of the Tabu search. It adds two new elements to the classic Tabu Search. The first one concerns the size of the tabu list: in the Reactive Tabu Search, this one is not constant anymore but it dynamically evolves according to the context. Thus, when the exploration process visits too often the same solutions, the tabu list is extended in order to favor the diversification of the search process. On the other hand, when the process has not visited an already known solution for a high number of iterations, the tabu list is shortened in order to favor the intensification of the search process. The second new element concerns the adding of cycle detection capacities. Thus, when a cycle is detected, the process applies random movements in order to break the cycle.\n\nMethod parameters:\n* iter\\_max: number of iterations\n* tabu\\_list\\_size\\_init: initial size of the tabu list\n* tabu\\_list\\_size\\_min: minimal size of the tabu list\n* tabu\\_list\\_size\\_max: maximal size of the tabu list\n* nb\\_tests\\_wthout\\_col\\_max: number of movements without collision before shortening the tabu list\n* cycle\\_size\\_min: minimal size of the considered cycles\n* cycle\\_size\\_max: maximal size of the considered cycles\n\n```\nexperiment Batch type: batch repeat: 2 keep_seed: true until: (food_gathered = food_placed ) or ( time > 400 ) {\n\tparameter 'Evaporation:' var: evaporation_rate among: [ 0.1 , 0.2 , 0.5 , 0.8 , 1.0 ] unit: 'rate every cycle (1.0 means 100%)';\n\tparameter 'Diffusion:' var: diffusion_rate min: 0.1 max: 1.0 unit: 'rate every cycle (1.0 means 100%)' step: 0.3;\n\tmethod reactive_tabu iter_max: 50 tabu_list_size_init: 5 tabu_list_size_min: 2 tabu_list_size_max: 10 nb_tests_wthout_col_max: 20 cycle_size_min: 2 cycle_size_max: 20 maximize: food_gathered;\n}\n```\n\n\n## Genetic Algorithm\nName: genetic\nParameter definitions accepted: List with step and Explicit List.\nParameter type accepted: all.\n\nThis is a simple implementation of Genetic Algorithms (GA). See the wikipedia article. The principle of GA is to search an optimal solution by applying evolution operators on an initial population of solutions There are three types of evolution operators:\n* Crossover: Two solutions are combined in order to produce new solutions\n* Mutation: a solution is modified\n* Selection: only a part of the population is kept. Different techniques can be applied for this selection. Most of them are based on the solution quality (fitness).\n\nRepresentation of the solutions:\n* Individual solution: {Param1 = val1; Param2 = val2; ...}\n* Gene: Parami = vali\n\nInitial population building: the system builds nb\\_prelim\\_gen random initial populations composed of pop\\_dim individual solutions. Then, the best pop\\_dim solutions are selected to be part of the initial population.\n\nSelection operator: roulette-wheel selection: the probability to choose a solution is equals to: fitness(solution)/ Sum of the population fitness. A solution can be selected several times. Ex: population composed of 3 solutions with fitness (that we want to maximize) 1, 4 and 5. Their probability to be chosen is equals to 0.1, 0.4 and 0.5.\n\nMutation operator: The value of one parameter is modified. Ex: The solution {Param1 = 3; Param2 = 2} can mute to {Param1 = 3; Param2 = 4}\n\nCrossover operator: A cut point is randomly selected and two new solutions are built by taking the half of each parent solution. Ex: let {Param1 = 4; Param2 = 1} and {Param1 = 2; Param2 = 3} be two solutions. The crossover operator builds two new solutions: {Param1 = 2; Param2 = 1} and {Param1 = 4; Param2 = 3}.\n\nMethod parameters:\n* pop\\_dim: size of the population (number of individual solutions)\n* crossover\\_prob: crossover probability between two individual solutions\n* mutation\\_prob: mutation probability for an individual solution\n* nb\\_prelim\\_gen: number of random populations used to build the initial population\n* max\\_gen: number of generations\n\n```\nexperiment Batch type: batch repeat: 2 keep_seed: true until: (food_gathered = food_placed ) or ( time > 400 ) {\n\tparameter 'Evaporation:' var: evaporation_rate among: [ 0.1 , 0.2 , 0.5 , 0.8 , 1.0 ] unit: 'rate every cycle (1.0 means 100%)';\n\tparameter 'Diffusion:' var: diffusion_rate min: 0.1 max: 1.0 unit: 'rate every cycle (1.0 means 100%)' step: 0.3;\n\tmethod genetic maximize: food_gathered pop_dim: 5 crossover_prob: 0.7 mutation_prob: 0.1 nb_prelim_gen: 1 max_gen: 20; \n}\n```\n[//]: # (endConcept|exploration_methods)","url":"wiki/ExplorationMethods.md"},{"id":"wiki/RunSeveralSimulations.md","title":" Run Several Simulations","content":"[//]: # (startConcept|run_simulations_as_agents)\n# Run Several Simulations\n\nTo explore a model, the easiest and the most intuitive way to proceed is running several simulations with several parameter value, and see the differences from the output. GAMA provides you the possibility to launch several simulations from the GUI.\n\n## Index\n\n* [Create a simulation](#create-a-simulation)\n* [Manipulate simulations](#manipulate-simulations)\n* [Random seed](#random-seed)\n  * [Defining the seed from the model](#defining-the-seed-from-the-model)\n  * [Defining the seed from the experiment](#defining-the-seed-from-the-experiment)\n  * [Run several simulations with the same random numbers](#run-several-simulations-with-the-same-random-numbers)\n  * [Change the RNG](#change-the-rng)\n\n## Create a simulation\n\n[//]: # (keyword|concept_world)\nLet's remind you that in GAMA, everything is an **agent**. We already saw that the **\"world\" agent** is the **agent of the model**. The model is thus a **species**, called modelName_model :\n\n```\nmodel toto //  free_cells  (my_cell.neighbors) where empty(people inside each);\n\t\t\tif not empty(free_cells) {\n\t\t\t\tmy_cell ","url":"wiki/RunSeveralSimulations.md"},{"id":"wiki/AttachingSkills.md","title":" Attaching Skills","content":"[//]: # (startConcept|attaching_skills)\n[//]: # (keyword|concept_skill)\n# Attaching Skills\n\nGAMA allows to attach skills to agents through the facet `skills`. Skills are built-in modules that provide a set of related built-in attributes and built-in actions (in addition to those already proposed by GAMA) to the species that declare them.\n\n## Index\n\n* [The moving skill](#the-moving-skill)\n* [Other skills](#other-skills)\n* [Example of implementation](#example-of-implementation)\n\n## Skills\n\nA declaration of skill is done by filling the `skills` facet in the species definition:\n\n```\nspecies my_species skills: [skill1,skill2] {\n}\n```\n\n[//]: # (keyword|skill_moving)\nA very useful and common skill is the `moving` skill.\n\n```\nspecies my_species skills: [moving] {\n}\n```\n\nOnce your species has the moving skill, it earns automatically the following attributes: `speed`, `heading`, `destination` and the following actions: `move`, `goto`, `follow`, `wander` and `wander_3D`.\n\n### Attributes:\n\n* **`speed`** (float) designs the speed of the agent, in m/s.\n* **`heading`** (int) designs the heading of an agent in degrees, which means that is the maximum angle the agent can turn around each step.\n* **`destination`** (point) is the updated destination of the agent, with respect to its speed and heading. It's a read-only attribute, you can't change its value.\n\n### Actions:\n\n#### **`follow`**\nmoves the agent along a given path passed in the arguments.\n\n* returns: path \t\t\t\n* **`speed`** (float): the speed to use for this move (replaces the current value of speed) \t\t\t\n* **`path`** (path): a path to be followed. \t\t\t\n* **`move_weights`** (map): Weights used for the moving. \t\t\t\n* **`return_path`** (boolean): if true, return the path followed (by default: false)  \n\t \n#### **`goto`**\nmoves the agent towards the target passed in the arguments.\n\n* returns: path \t\t\t\n* **`target`** (agent,point,geometry): the location or entity towards which to move. \t\t\t\n* **`speed`** (float): the speed to use for this move (replaces the current value of speed) \t\t\t\n* **`on`** (graph): graph that restrains this move \t\t\t\n* **`recompute_path`** (boolean): if false, the path is not recompute even if the graph is modified (by default: true) \t\t\t\n* **`return_path`** (boolean): if true, return the path followed (by default: false) \t\t\t\n* **`move_weights`** (map): Weights used for the moving.  \n\t \n#### **`move`**\nmoves the agent forward, the distance being computed with respect to its speed and heading. The value of the corresponding variables are used unless arguments are passed.\n\n* returns: path \t\t\t\n* **`speed`** (float): the speed to use for this move (replaces the current value of speed) \t\t\t\n* **`heading`** (int): a restriction placed on the random heading choice. The new heading is chosen in the range (heading - amplitude/2, heading+amplitude/2) \t\t\t\n* **`bounds`** (geometry,agent): the geometry (the localized entity geometry) that restrains this move (the agent moves inside this geometry  \n\t \n#### **`wander`**\nMoves the agent towards a random location at the maximum distance (with respect to its speed). The heading of the agent is chosen randomly if no amplitude is specified. This action changes the value of heading.\n\n* returns: void \t\t\t\n* **`speed`** (float): the speed to use for this move (replaces the current value of speed) \t\t\t\n* **`amplitude`** (int): a restriction placed on the random heading choice. The new heading is chosen in the range (heading - amplitude/2, heading+amplitude/2) \t\t\t\n* **`bounds`** (agent,geometry): the geometry (the localized entity geometry) that restrains this move (the agent moves inside this geometry  \n\t \n#### **`wander_3D`**\nMoves the agent towards a random location (3D point) at the maximum distance (with respect to its speed). The heading of the agent is chosen randomly if no amplitude is specified. This action changes the value of heading.\n\n* returns: path \t\t\t\n* **`speed`** (float): the speed to use for this move (replaces the current value of speed) \t\t\t\n* **`amplitude`** (int): a restriction placed on the random heading choice. The new heading is chosen in the range (heading - amplitude/2, heading+amplitude/2) \t\t\t\n* **`z_max`** (int): the maximum altitude (z) the geometry can reach \t\t\t\n* **`bounds`** (agent,geometry): the geometry (the localized entity geometry) that restrains this move (the agent moves inside this geometry\t\n\n### Other skills\n\nA lot of other skills are available. Some of them can be [built in skills](BuiltInSkills), integrated by default in GAMA, other are linked to [additional plugins](Extension).\n\nThis is the list of skills:\n`Advanced_driving`, `communication`, `driving`, `GAMASQL`, `graphic`, `grid`, `MDXSKILL`, `moving`, `moving3D`, `physical3D`, `skill_road`, `skill_road`, `skill_road_node`, `SQLSKILL`\n\n### Example\n\nWe can now build a model using the skill moving. Let's design 2 species, one is \"species_red\", the other is \"species_green\". \nSpecies_green agents are moving randomly with a certain speed and a certain heading.\nSpecies_red agents wait for a species_green agent to be in a certain range of distance. Once it is the case, the agent move toward the species_green agent. A line link the red_species agent and its target.\n\n![images/green_and_red_species.png](resources/images/manipulateBasicSpecies/green_and_red_species.png) \n\nHere is an example of implementation:\n\n```\nmodel green_and_red_species\n\nglobal{\n\tfloat distance_to_intercept ","url":"wiki/AttachingSkills.md"},{"id":"wiki/DefiningActionsAndBehaviors.md","title":" Defining actions and behaviors","content":"[//]: # (startConcept|actions_and_behaviors)\n[//]: # (keyword|concept_action)\n[//]: # (keyword|concept_reflex)\n# Defining actions and behaviors\n[//]: # (keyword|concept_behavior)\n\nBoth actions and behaviors can be seen as methods in OOP. They can be defined in any species.\n\n## Index\n\n* [Action](#action)\n  * [Declare an action](#declare-an-action)\n  * [Call an action](#call-an-action)\n* [Behavior](#behavior)\n* [Example](#example)\n\n## Action\n\n### Declare an action\n\n[//]: # (keyword|statement_action)\nAn action is a function run by an instance of species. An action can return a value (in that case, the type of return has to be specify just before the name of the action), or not (in that case, you just have to put the keyword `action` before the name of the action).\n\n```\nspecies my_species {\n\tint action_with_return_value {\n\t\t// statements...\n\t\treturn 1;\n\t}\n\taction action_without_return_value {\n\t\t// statements...\n\t}\n}\n```\n\nArguments can also be mandated in your action. You have to specify the type and the name of the argument:\n\n```\naction action_without_return_value (int argA, float argB) {\n\t// statements...\n}\n```\n\nIf you want to have some optional arguments in the list, you can give some by default values to turn them optional. Nb: it is better to define the optional arguments at the end of the list of argument.\n\n```\naction my_action (int argA, float argB 10 {\n\t\tdo halt;\n\t}\n}\n\nspecies balloon {\n\tfloat balloon_size;\n\trgb balloon_color;\n\tinit {\n\t\tballoon_size  0.5) {\n\t\t\tif (flip(0.2)) {\n\t\t\t\tdo balloon_burst;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfloat balloon_volume (float diameter) {\n\t\tfloat exact_value ","url":"wiki/DefiningActionsAndBehaviors.md"},{"id":"wiki/GlobalSpecies.md","title":" The global species","content":"[//]: # (startConcept|global_species)\n# The global species\n[//]: # (keyword|concept_global)\n\nWe will start this chapter by studying a special species: the global species. \nIn the global species you can define the attributes, actions and behaviors that describe the world agent. There is one unique world agent per simulation: it is this agent that is created when a user runs an experiment and that initializes the simulation through its **init** scope. The global species is a species like other and can be manipulated as them. In addition, the global species automatically inherits from several of built-in variables and actions. Note that a specificity of the global species is that all its attributes can be referred by all agents of the simulation.\n\n## Index\n\n* [Declaration](#declaration)\n* [Environment Size](#environment-size)\n* [Built-in Attributes](#built-in-attributes)\n* [Built-in Actions](#built-in-actions)\n* [The init statement](#the-init-statement)\n\n## Declaration\n\nA GAMA model contains a unique global section that defines the global species.\n\n```\nglobal {\n\t// definition of global attributes, actions, behaviours\n}\n```\n\n[//]: # (keyword|concept_torus)\n`global` can use facets, such as the `torus` facet, to make the environment a torus or not (if it is a torus, all the agents going out of the environment will appear in the other side. If it's not, the agents won't be able to go out of the environment). By default, the environment is not a torus.\n\n![images/torus.png](resources/images/manipulateBasicSpecies/torus.png) \n\n```\nglobal torus:true {\n\t// definition of global attributes, actions, behaviours\n}\n```\n\nOther facets such as `control` or `schedules` are also available, but we will explain them later.\n\nDirectly in the `global` scope, you have to declare all your global attributes (can be seen as \"static members\" in Java or C++). To declare them, proceed exactly as for declaring basic variables. Those attributes are accessible wherever you want inside the species scope.\n\n## Environment size\n\n[//]: # (keyword|concept_shape)\n[//]: # (keyword|concept_geometry)\n[//]: # (keyword|type_geometry)\n[//]: # (keyword|concept_dimension)\nIn the global context, you have to define a size and a shape for your environment. In fact, an attribute already exists for the global species: it's called shape, and its type is a geometry. By default, shape is equal to a 100m*100m square. You can change the geometry of the shape by affecting another value:\n\n```\ngeometry shape ","url":"wiki/GlobalSpecies.md"},{"id":"wiki/Inheritance.md","title":" Inheritance","content":"[//]: # (startConcept|inheritance)\n[//]: # (keyword|concept_inheritance)\n# Inheritance\n\nAs for multiple programming language, inheritance can be used in GAML. It is used to structure better your code, when you have some complex models.\n\n## Index\n\n* [Mother species / child species](#mother-species-/-child-species)\n* [Virtual actions](#virtual-actions)\n* [Get all the subspecies from a species](#get-all-the-subspecies-from-a-species)\n\n## Mother species / child species\n\nTo make a species inherit from a mother species, you have to add the facet `parent`, and specify the mother species.\n\n```\nspecies mother_species {\n}\n\nspecies child_species parent:mother_species {\n}\n```\n\nThus, all the attributes, actions and reflex of the mother species are inherited to the child species.\n\n```\nspecies mother_species {\n\tint attribute_A;\n\taction action_A {}\n}\n\nspecies child_species parent:mother_species {\n\tinit {\n\t\tattribute_A  get_all_instances(species spec) {\n        return spec.population +  spec.subspecies accumulate (get_all_instances(each));\n    }\n}\n\nspecies mother {}\n\nspecies child parent:mother {}\n```\n[//]: # (endConcept|inheritance)","url":"wiki/Inheritance.md"},{"id":"wiki/InteractionBetweenAgents.md","title":" Interaction between agents","content":"[//]: # (startConcept|interaction_between_agents)\n# Interaction between agents\n\nIn this part, we will learn how interaction between agents works. We will also present you a bunch of operators useful for your modelling. \n\n## Index\n\n* [The ask statement](#the-ask-statement)\n* [Pseudo variables](#pseudo-variables)\n* [Some useful interaction operators](#some-useful-interaction-operators)\n* [Example](#example)\n\n## The ask statement\n\n[//]: # (keyword|statement_ask)\nThe `ask` statement can be used in any reflex or action scope. It is used to specify the interaction between the instances of your species and the other agents. You only have to specify the species of the agents you want to interact with. Here are the different ways of calling the ask statement:\n\n-\tIf you want to interact with one particular agent (for example, defined as an attribute of your species):\n\n```\nspecies my_species {\n\tagent target;\n\treflex update {\n\t\task target {\n\t\t\t// statements\n\t\t}\n\t}\n}\n```\n\n-\tIf you want to interact with a group of agents:\n\n```\nspecies my_species {\n\tlist targets;\n\treflex update {\n\t\task targets {\n\t\t\t// statements\n\t\t}\n\t}\n}\n```\n\n-\tIf you want to interact with agents, as if they were instance of a certain species (can raise an error if it's not the case!):\n\n```\nspecies my_species {\n\tlist targets;\n\treflex update {\n\t\task targets as:my_species {\n\t\t\t// statements\n\t\t}\n\t}\n}\n```\n\n-\tIf you want to interact with all the agent of a species:\n\n```\nspecies my_species {\n\tlist targets;\n\treflex update {\n\t\task other_species {\n\t\t\t// statements\n\t\t}\n\t}\n}\n\nspecies other_species {\n}\n```\n\nNote that you can use the attribute _population_ of `species` if you find it more explicit:\n\n```\nask other_species.population\n```\n\n-\tIf you want to interact with all the agent of a particular species from a list of agents (for example, using the global variable \"agents\"):\n\n```\nspecies my_specie {\n\treflex update {\n\t\task species of_species my_specie {\n\t\t\t// statements\n\t\t}\n\t}\n}\n```\n\n## Pseudo variables\n\n[//]: # (keyword|concept_pseudo_variable)\nOnce you are in the ask scope, you can use some pseudo variables to refer to the receiver agent (the one specify just after the ask statement) or the transmitter agent (the agent which is asking). \nWe use the pseudo variable `self` to refer to the receiver agent, and the pseudo variable `myself` to refer to the transmitter agent. The pseudo variable `self` can be omitted when calling actions or attributes.\n\n```\nspecies speciesA {\n\tinit {\n\t\tname  neighbours ","url":"wiki/InteractionBetweenAgents.md"},{"id":"wiki/RegularSpecies.md","title":" Regular species","content":"[//]: # (startConcept|regular_species)\n[//]: # (keyword|concept_species)\n# Regular species\n\nRegular species are composed of attributes, actions, reflex, aspect etc... They describes the behavior of our agents. You can instantiate as much as you want agents from a regular species, and you can define as much as you want different regular species. You can see a species as a \"class\" in OOP.\n\n## Index\n\n* [Declaration](#declaration)\n* [Built-in Attributes](#built-in-attributes)\n* [Built-in Actions](#built-in-actions)\n* [The init statement](#the-init-statement)\n* [The aspect statement](#the-aspect-statement)\n* [Instantiate an agent](#instantiate-an-agent)\n\n## Declaration\n\nThe regular species declaration starts with the keyword `species` followed by the name (or followed by the facet `name:`) :\n\n```\nspecies my_specie {\n}\n```\n\nor:\n\n```\nspecies name:my_specie {\n}\n```\n\n[//]: # (keyword|concept_attribute)\nDirectly in the \"species\" scope, you have to declare all your attributes (or \"member\" in OOP). You declare them exactly the way you declare basic variables. Those attributes are accessible wherever you want inside the species scope.\n\n```\nspecies my_specie {\n\tint variableA;\n}\n```\n\n## Built-in attributes\n\n[//]: # (keyword|concept_agent_location)\n[//]: # (keyword|concept_shape)\nAs for the global species, some attributes exist already by default in a regular species. Here is the list of built-in attributes:\n\n* **name** (type: string) is used to name your agent. By default, the name is equal to the name of your species + an incremental number. This name is the one visible on the species inspector.\n* **location** (type: point) is used to control the position of your agent. It refers to the center of the envelop of the shape associated to the agent.\n* **shape** (type: geometry) is used to describe the geometry of your agent. If you want to use some intersection operator between agents for instance, it is this geometry that is computed (nb : it can be totally different from the aspect you want to display for your agent !). By default, the shape is a point.\n* **host** (type: agent) is used when your agent is part of another agent. We will see this concept a bit further, in the topic [multi-level architecture](MultiLevelArchitecture).\n\nAll those 4 built-in attributes can be accessed in both reading and writing very easily:\n\n```\nspecies my_species {\n\tinit {\n\t\tname ","url":"wiki/RegularSpecies.md"},{"id":"wiki/ControlArchitecture.md","title":" Control Architectures","content":"[//]: # (keyword|concept_architecture)\n# Control Architectures\n\nGAMA allows to attach built-in control architecture to agents.\n\n[//]: # (keyword|concept_behavior)\nThese control architectures will give the possibility to the modeler to use for a species a specific control architecture in addition to the [common behavior structure](DefiningActionsAndBehaviors#Behaviour). Note that only one control architecture can be used per species.\n\nThe attachment of a control architecture to a species is done through the facets `control`.\n\nFor example, the given code allows to attach the `fsm` control architecture to the dummy species.\n```\nspecies dummy control: fsm {\n}\n```\n\nGAMA integrates several agent control architectures that can be used in addition to the common behavior structure:\n\n  * [fsm](#finite-state-machine): finite state machine based behavior model. During its life cycle, the agent can be in several states. At any given time step, it is in one single state. Such an agent needs to have one initial state (the state in which it will be at its initialization)\n  * [weighted\\_tasks](#task-based): task-based control architecture. At any given time, only the task only the task with the maximal weight is executed.\n  * [sorted\\_tasks](#task-based): task-based control architecture. At any given time, the tasks are all executed in the order specified by their weights (highest first).\n  * [probabilistic\\_tasks](#task-based): task-based control architecture. This architecture uses the weights as a support for making a weighted probabilistic choice among the different tasks. If all tasks have the same weight, one is randomly chosen at each step.\n  * [user\\_only](DefiningUserInteraction#user-control-architecture): allows users to take control over an agent during the course of the simulation. With this architecture, only the user control the agents (no reflexes).\n  * [user\\_first](user-control-architecture): allows users to take control over an agent during the course of the simulation. With this architecture, the user actions are executed before the agent reflexes.\n  * [user\\_last](user-control-architecture): allows users to take control over an agent during the course of the simulation. With this architecture, the user actions are executed after the agent reflexes.\n  \n## Index\n\n* [Finite State Machine](#finite-state-machine)\n  * [Declaration](#declaration)\n  * [State](#state)\n* [Task Based](#task-based)\n  * [Declaration](#declaration)\n  * [Task](#task)\n* [User Control Architecture](#user-control-architectures)\n  * [user_only, user_first, user_last](#user_only-user_first-user_last)\n  * [user_panel](#user_panel)\n  * [user_controlled](#user_controlled)\n* [Other Control Architectures](#other-control-architectures)\n\n[//]: # (startConcept|finite_state_machine)\n[//]: # (keyword|architecture_fsm)\n[//]: # (keyword|concept_fsm)\n## Finite State Machine\n\n**FSM (Finite State Machine)** is a finite state machine based behavior model. During its life cycle, the agent can be in several states. At any given time step, it is in one single state. Such an agent needs to have one initial state (the state in which it will be at its initialization).\n\nAt each time step, the agent will:\n\n  * first (only if he just entered in its current state) execute statement embedded in the `enter` statement,\n  * then all the statements in the state statement\n  * it will evaluate the condition of each embedded transition statements. If one condition is fulfilled, the agent execute the embedded statements\n\nNote that an agent executes only one state at each step.\n\n### Declaration\n\nUsing the FSM architecture for a species require to use the **control** facet:\n\n```\nspecies dummy control: fsm {\n   ...\n}\n```\n\n### State\n\n#### Attributes\n* initial: a boolean expression, indicates the initial state of agent.\n* final: a boolean expression, indicates the final state of agent.\n\n#### Sub Statements\n* enter: a sequence of statements to execute upon entering the state.\n* exit: a sequence of statements to execute right before exiting the state. Note that the `exit` statement will be executed even if the fired transition points to the same state (the FSM architecture in GAMA does not implement 'internal transitions' like the ones found in UML state charts: all transitions, even \"self-transitions\", follow the same rules).\n* transition: allows to define a condition that, when evaluated to true, will designate the next state of the life cycle. Note that the evaluation of transitions is short-circuited: the first one that evaluates to true, in the order in which they have been defined, will be followed. I.e., if two transitions evaluate to true during the same time step, only the first one will be triggered.\n\nThings worth to be mentioned regarding these sub-statements:\n\n* Obviously, only one definition of exit and enter is accepted in a given state\n* Transition statements written in the middle of the state statements will only be evaluated at the end, so, even if it evaluates to true, the remaining of the statements found after the definition of the transition will be nevertheless executed. So, despite the appearance, a transition written somewhere in the sequence will \"not stop\" the state at that point (but only at the end).\n\n#### Definition\nA state can contain several statements that will be executed, at each time step, by the agent. There are three exceptions to this rule:\n\n1. statements enclosed in `enter` will only be executed when the state is entered (after a transition, or because it is the initial state).\n1. Those enclosed in `exit` will be executed when leaving the state as a result of a successful transition (and before the statements enclosed in the transition).\n1. Those enclosed in a transition will be executed when performing this transition (but after the `exit` sequence has been executed).\n\nFor example, consider the following example:\n\n```\nspecies dummy control: fsm {       \n\tstate state1 initial: true { \n\t\twrite string(cycle) + \":\" + name + \"->\" + \"state1\";\n\t\ttransition to: state2 when: flip(0.5) {\n\t\t\twrite string(cycle) + \":\" + name + \"->\" + \"transition to state1\";\n\t\t}\n\t\ttransition to: state3 when: flip(0.2) ; \n\t}\n\n\tstate state2 {\n\t\twrite string(cycle) + \":\" + name + \"->\" + \"state2\";\n\t\ttransition to: state1 when: flip(0.5) { \n\t\t\twrite string(cycle) + \":\" + name + \"->\" + \"transition to state1\";\n\t\t}\n\t\texit {\n\t\t\twrite string(cycle) + \":\" + name + \"->\" + \"leave state2\";\n\t\t}\n\t}\n\t\n\tstate state3 {\n\t\twrite string(cycle) + \":\" + name + \"->\" + \"state3\";\n\t\ttransition to: state1 when: flip(0.5)  {\n\t\t\twrite string(cycle) + \":\" + name + \"->\" + \"transition to state1\";\n\t\t}\n\t\ttransition to: state2 when: flip(0.2)  ;\n\t}   \n}\n```\n\nthe dummy agents start at _state1_. At each simulation step they have a probability of 0.5 to change their state to _state2_. If they do not change their state to _state2_, they have a probability of 0.2 to change their state to _state3_. In _state2_, at each simulation step, they have a probability of 0.5 to change their state to _state1_. At last, in _step3_, at each simulation step they have a probability of 0.5 to change their state to _state1_. If they do not change their state to _state1_, they have a probability of 0.2 to change their state to _state2_.\n\nHere a possible result that can be obtained with one dummy agent:\n\n```\n0:dummy0->state1\n0:dummy0->transition to state1\n1:dummy0->state2\n2:dummy0->state2\n2:dummy0->leave state2\n2:dummy0->transition to state1\n3:dummy0->state1\n3:dummy0->transition to state1\n4:dummy0->state2\n5:dummy0->state2\n5:dummy0->leave state2\n5:dummy0->transition to state1\n6:dummy0->state1\n7:dummy0->state3\n8:dummy0->state2\n```\n[//]: # (endConcept|finite_state_machine)\n\n[//]: # (startConcept|task_based)\n[//]: # (keyword|concept_task_based)\n[//]: # (keyword|architecture_probabilistic_tasks)\n[//]: # (keyword|architecture_weighted_tasks)\n[//]: # (keyword|architecture_sorted_tasks)\n## Task Based\n\nGAMA integrated several **task-based** control architectures. Species can define any number of tasks within their body. At any given time, only one or several tasks are executed according to the architecture chosen:\n\n  * **weighted\\_tasks** : in this architecture, only the task with the maximal weight is executed.\n  * **sorted\\_tasks** : in this architecture, the tasks are all executed in the order specified by their weights (biggest first)\n  * **probabilistic\\_tasks**: this architecture uses the weights as a support for making a weighted probabilistic choice among the different tasks. If all tasks have the same weight, one is randomly chosen each step.\n\n\n### Declaration\n\n\nUsing the Task architectures for a species require to use the **control** facet:\n\n```\nspecies dummy control: weighted_tasks {\n   ...\n}\n```\n\n\n```\nspecies dummy control: sorted_tasks {\n   ...\n}\n```\n\n\n```\nspecies dummy control: probabilistic_tasks {\n   ...\n}\n```\n\n\n\n### Task\n\n#### Sub elements\nBesides a sequence of statements like reflex, a task contains the following sub elements:\n  * weight: Mandatory. The priority level of the task.\n\n#### Definition\nAs reflex, a task is a sequence of statements that can be executed, at each time step, by the agent. If an agent owns several tasks, the scheduler chooses a task to execute based on its current priority weight value.\n\n\nFor example, consider the following example:\n```\nspecies dummy control: weighted_tasks {   \n\ttask task1 weight: cycle mod 3 { \n\t\twrite string(cycle) + \":\" + name + \"->\" + \"task1\";\n\t}\n\ttask task2 weight: 2 { \n\t\twrite string(cycle) + \":\" + name + \"->\" + \"task2\";\n\t}\n}\n```\n\nAs the **weighted\\_tasks** control architecture was chosen, at each simulation step, the dummy agents execute only the task with the highest behavior. Thus,  when _cycle modulo 3_ is higher to 2, task1 is executed; when _cycle modulo 3_ is lower than 2, task2 is executed. In case when _cycle modulo 3_ is equal 2 (at cycle 2, 5, ...), the only the first task defined (here task1) is executed.\n\nHere the result obtained with one dummy agent:\n```\n0:dummy0->task2\n1:dummy0->task2\n2:dummy0->task1\n3:dummy0->task2\n4:dummy0->task2\n5:dummy0->task1\n6:dummy0->task2\n```\n[//]: # (endConcept|task_based)\n\n[//]: # (startConcept|user_control_architecture)\n[//]: # (keyword|concept_gui)\n[//]: # (keyword|architecture_user_first)\n[//]: # (keyword|architecture_user_last)\n[//]: # (keyword|architecture_user_only)\n## User Control Architecture\n\n### user\\_only, user\\_first, user\\_last\n\nA specific type of control architecture has been introduced to allow users to take control over an agent during the course of the simulation. It can be invoked using three different keywords: `user_only`, `user_first`, `user_last`.\n```\nspecies user control: user_only {\n   ...\n}\n```\n\nIf the control chosen is `user_first`, it means that the user controlled panel is opened first, and then the agent has a chance to run its \"own\" behaviors (reflexes, essentially, or \"init\" in the case of a \"user\\_init\" panel).\nIf the control chosen is `user_last`, it is the contrary.\n\n\n### user\\_panel\n\nThis control architecture is a specialization of the Finite State Machine Architecture where the \"behaviors\" of agents can be defined by using new constructs called `user_panel` (and one `user_init`), mixed with \"states\" or \"reflexes\". This `user_panel` translates, in the interface, in a semi-modal view that awaits the user to choose action buttons, change attributes of the controlled agent, etc. Each `user_panel`, like a `state` in FSM, can have a `enter` and `exit` sections, but it is only defined in terms of a set of `user_command`s which describe the different action buttons present in the panel.\n\nuser\\_commands can also accept inputs, in order to create more interesting commands for the user. This uses the `user_input` statement (and not operator), which is basically the same as a temporary variable declaration whose value is asked to the user. Example:\n\nAs `user_panel` is a specialization of `state`, the modeler has the possibility to describe several panels and choose the one to open depending on some condition, using the same syntax than for finite state machines :\n  * either adding `transitions` to the user\\_panels,\n  * or setting the `state` attribute to a new value, from inside or from another agent.\n\nThis ensures a great flexibility for the design of the user interface proposed to the user, as it can be adapted to the different stages of the simulation, etc...\n\nFollows a simple example, where, every 10 steps, and depending on the value of an attribute called \"advanced\", either the basic or the advanced panel is proposed.\n\n```\nspecies user control:user_only {\n   user_panel default initial: true {\n      transition to: \"Basic Control\" when: every (10) and !advanced_user_control;\n      transition to: \"Advanced Control\" when: every(10) and advanced_user_control;\n   }\n   \n   user_panel \"Basic Control\" {\n      user_command \"Kill one cell\" {\n         ask (one_of(cell)){\n            do die;\n         }\n      }\n      user_command \"Create one cell\" {\n        create cell ;\n      } \n      transition to: default when: true;\n   }\n   user_panel \"Advanced Control\" {\n      user_command \"Kill cells\" {\n        user_input \"Number\" returns: number type: int ","url":"wiki/ControlArchitecture.md"},{"id":"wiki/Equations.md","title":" Using Equations","content":"[//]: # (startConcept|equation)\n[//]: # (keyword|concept_equation)\n# Using Equations\n[//]: # (endConcept|concept_math)\n\n## Introduction\n\nODEs (Ordinary Differential Equations) are often used in ecology or in epidemiology to describe the macroscopic evolution over time of a population. Generally the whole population is split into several compartments. The state of the population is described by the number of individuals in each compartment. Each equation of the ODE system describes the evolution of the number of individual in a compartment. In such an approach individuals are not taken into account individually, with own features and behaviors. In contrary they are aggregated in a compartment and reduced to a number.\n\nA classical example is the SIR epidemic model representing the spreading of a disease in a population. The population is split into 3 compartments: S (Susceptible), I (Infected), R (Recovered). (see below for the equation)\n\nIn general the ODE systems cannot be analytically solved, i.e. it is not possible to find the equation describing the evolution of the number of S, I or R. But these systems can be numerically integrated in order to get the evolution. A numerical integration computes step after step the value of S, I and R. Several integration methods exist (e.g. Euler, Runge-Kutta...), each of them being a compromise between accuracy and computation time. The length of the integration step has also a huge impact on precision. These models are deterministic.\n\nThis approach makes a lot of strong hypotheses. The model does not take into account space. The population is considered has infinite and homogeneously mixed, so that any agent can interact with any other one.\n\n## Example of a SIR model \n\nIn the SIR model, the population is split into 3 compartments: S (Susceptible), I (Infected), R (Recovered). This can be represented by the following Forrester diagram: boxes represent stocks (i.e. compartments) and arrows are flows. Arrows hold the rate of a compartment population flowing to another compartment.\n\n![SIR-compartment.png](resources/images/multiParadigmModeling/SIR-compartment.png)\n\nThe corresponding ODE system contains one equation per stock. For example, the I compartment evolution is influenced by an inner (so positive) flow from the S compartment and an outer (so negative) flow to the R compartment.\n\n![SIR-equations.png](resources/images/multiParadigmModeling/SIR-equations.png)\n\nIntegrating this system using the Runge-Kutta 4 method provides the evolution of S, I and R over time. The initial values are:\n* S = 499\n* I = 1\n* R = 0\n* beta = 0.4\n* gamma = 0.1 \n* h = 0.1\n\n![SIR-result.png](resources/images/multiParadigmModeling/SIR-result.png)\n\n\n## Why and when can we use ODE in agent-based models ?\n\nThese hypotheses are very strong and cannot be fulfilled in agent-based models. \n\nBut in some multi-scale models, some entities can be close. For example if we want to implement a model describing the worldwide epidemic spread and the impact of air traffic on it, we cannot simulate the 7 billions people. But we can represent only cities with airports and airplanes as agents. In this case, cities are entities with a population of millions inhabitants, that will not been spatially located. As we are only interested in the disease spread, we are only interested in the number of infected people in the cities (and susceptibles and recovered too). As a consequence, it appears particularly relevant to describe the evolution of the disease in the city using a ODE system.\n\nIn addition these models have the advantage to not be sensible to population size in the integration process. Dozens or billions people does not bring a computation time increase, contrarily to agent-based models.\n\n## Use of ODE in a GAML model\n\nA stereotypical use of ODE in a GAMA agent-based model is to describe species where some agents attributes evolution is described using an ODE system.\n\nAs a consequence, the GAML language has been increased by two main concepts (as two statements):\n* equations can be written with the ``equation`` statement. An ``equation`` block is composed of a set of ``diff`` statement describing the evolution of species attributes.\n* an equation can be numerically integrated using the ``solve`` statement\n\n## ``equation``\n### Defining an ODE system\nDefining a new ODE system needs to define a new ``equation`` block in a species. As example, the following ``eqSI`` system describes the evolution of a population with 2 compartments (S and I) and the flow from S to I compartment: \n``` \nspecies userSI {\n\tfloat t ;\n\tfloat I ; \n\tfloat S ; \n\tint N ;\n\tfloat beta","url":"wiki/Equations.md"},{"id":"wiki/OptimizingModels.md","title":" Optimizing Models","content":"[//]: # (startConcept|optimizing_tips)\n[//]: # (keyword|concept_optimization)\n# Optimizing Models\n\n\nThis page aims at presenting some tips to optimize the memory footprint or the execution time of a model in GAMA.\n\n_Note:  since GAMA 1.6.1, some optimizations have become obsolete because they have been included in the compiler. They have, then, been removed from this page. For instance, writing 'rgb(0,0,0)' is now compiled directly as '#black'._\n\n\n## Table of contents \n\n* [machine_time](#machinetime)\n* [Scheduling](#scheduling)\n* [Grid](#grid)\n\t* [Optimization Facets](#optimization-facets)\n\t\t* [use_regular_agents](#useregularagents)\n\t\t* [use_individual_shapes](#useindividualshapes)\n* [Operators](#operators)\n\t* [List operators](#list-operators)\n\t\t* [first_with](#firstwith)\n\t\t* [where / count](#where--count)\n\t* [Spatial operators](#spatial-operators)\n\t\t* [container of agents in closest_to, at_distance, overlapping, inside](#container-of-agents-in-closestto-atdistance-overlapping-inside)\n\t\t* [Accelerate  with a first spatial filtering](#accelerate--with-a-first-spatial-filtering)\n* [Displays](#displays)\n\t* [shape](#shape)\n\t* [circle vs square / sphere vs cube](#circle-vs-square--sphere-vs-cube)\n\t* [OpenGL refresh facets](#opengl-refresh-facets)\n\n\n\n[//]: # (keyword|attribute_machine_time)\n## machine\\_time\n\nIn order to optimize a model, it is important to exactly know which part of the model take times. The simplest to do that is to use the **machine\\_time** built-in global variable that gives the current time in milliseconds. Then to compute the time taken by a statement, a possible way is to write:\n\n```\nfloat t  10));\n```\nWhereas it is often more optimized to use the **shuffle** operator to shuffle the list, then the **first\\_with** operator to select the first element that verifies the condition:\n```\nbug one_big_bug  10);\n```\n[//]: # (keyword|operator_where)\n[//]: # (keyword|operator_count)\n#### where / count\nIt is quite common to want to count the number of elements of a list or a container that verify a condition.\nThe obvious to do it is :\n```\nint n  10));\n```\nThis will however create an intermediary list before counting it, and this operation can be time consuming if the number of elements is important. To alleviate this problem, GAMA includes an operator called **count** that will count the elements that verify the condition by iterating directly on the container (no useless list created) :\n```\nint n  10);\n```\n### Spatial operators\n[//]: # (keyword|operator_closest_to)\n[//]: # (keyword|operator_at_distance)\n[//]: # (keyword|operator_overlapping)\n[//]: # (keyword|operator_inside)\n#### container of agents in closest\\_to, at\\_distance, overlapping, inside\nSeveral spatial query operators (such as **closest\\_to**, **at\\_distance**, **overlapping** or **inside**) allow to restrict the agents being queried to a container of agents. For instance, one can write:\n```\nagent closest_agent ","url":"wiki/OptimizingModels.md"},{"id":"wiki/RuntimeConcepts.md","title":" Runtime Concepts","content":"[//]: # (startConcept|runtime_and_schedulers)\n[//]: # (keyword|concept_scheduler)\n# Runtime Concepts\n\nWhen a model is being simulated, a number of algorithms are applied, for instance to determine the order in which to run the different agents, or the order in which the initialization of agents is performed, etc. This section details some of them, which can be important when building models and understanding how they will be effectively simulated.\n\n\n## Table of contents \n\n* [Simulation initialization](#simulation-initialization)\n* [Agents Creation](#agents-creation)\n* [Agents Step](#agents-step)\n* [Schedule Agents](#schedule-agents)\n\n\n## Simulation initialization\nOnce the user launches an experiment, GAMA starts the initialization of the simulation.\nFirst it creates a [`world` agent](GlobalSpecies).\n\nIt initializes all its attributes with their init values. This includes its shape (that will be used as environment of the simulation).\n\nIf a species of type [grid](GridSpecies) exists in the model, agents of species are created.\n\nFinally the `init` statement is executed. It should include the creation of all the other agents of [regular species](RegularSpecies) of the simulation. After their creation and initialization, they are added in the list `members` the `world` (that contains all the micro-agent of the `world`).\n\n[//]: # (keyword|concept_optimization)\n[//]: # (keyword|statement_create)\n[//]: # (keyword|concept_init)\n## Agents Creation\nExcept [`grid`](GridSpecies) agents, other agents are created using the [`create` statement](Statements#create). It is used to allocate memory for each agent and to initialize all its attributes.\n\nIf no explicit initialization exists for an attribute, it will get the default value corresponding to its [type](DataTypes).\n\nThe initialization of an attribute can be located at several places in the code; they are executed in the following order (which means that, if several ways are used, the attribute will finally have the value of the last applied one):\n* using the `from:` facet of the `create` statement;\n* in the embedded block of the `create` statement;\n* in the attribute declaration, using the `init` facet;\n* in the `init` block of the species.\n\n[//]: # (keyword|concept_cycle)\n## Agents Step\nWhen an agent is asked to _step_, it means that it is expected to update its variables, run its behaviors and then _step_ its micro-agents (if any).\n\n```\nstep of agent agent_a\n    {\n        species_a  sub-agents ","url":"wiki/RuntimeConcepts.md"},{"id":"wiki/BasicProgrammingConceptsInGAML.md","title":" Basic programming concepts in GAML","content":"[//]: # (startConcept|programming_basis)\n# Basic programming concepts in GAML\n\nIn this part, we will focus on the very basic structures in GAML, such as how to declare a variable, how to use loops, or how to manipulate lists. \nWe will overfly quickly all those basic programming concepts, admitting that you already have some basics in coding.\n\n## Index\n\t\n* [Variables](#variables)\n  * [Basic types](#basic-types)\n  * [The point type](#the-point-type)\n  * [A word about dimensions](#a-word-about-dimensions)\n* [Declare variables using facet](#declare-variables-using-facet)\n* [Operators in GAMA](#operators-in-gama)\n  * [Logical operators](#logical-operators)\n  * [Comparison operators](#comparison-operators)\n  * [Type casting operators](#type-casting-operators)\n  * [Other operators](#other-operators)\n* [Conditional structures](#conditional-structures)\n* [Loop](#loop)\n* [Manipulate containers](#manipulate-containers)\n* [Random values](#random-values)\n\n## Variables\n\nVariables are declared very easily in GAML, starting with the keyword for the type, following by the name you want for your variable. \nNB: The declaration has to be inside the `global` scope, or inside the `species` scope.\n\n```\ntypeName myVariableName;\n```\n\n### Basic types\n\n[//]: # (keyword|type_int)\n[//]: # (keyword|type_float)\n[//]: # (keyword|type_string)\n[//]: # (keyword|type_bool)\n[//]: # (keyword|operator_ ex: 5 * 3; // return 15\n\n[//]: # (keyword|operator_cos)\n[//]: # (keyword|operator_sin)\n[//]: # (keyword|operator_tan)\n[//]: # (keyword|operator_sqrt)\n[//]: # (keyword|operator_round)\nSome other operators, such as `cos`(cosinus), `sin`(sinus), `tan`(tangent), `sqrt`(square root), `round`(rounding) etc... are used this way:\n\n```\nOperator(Operand) --> ex: sqrt(49); // return 7\n```\n\n###\tLogical operators\n\n[//]: # (keyword|concept_logical)\n[//]: # (keyword|operator_and)\n[//]: # (keyword|operator_or)\n[//]: # (keyword|operator_!)\nLogical operators such as `and`(and), `or`(inclusive or) are used the same way as basic arithmetical operators. The operator `!`(negation) has to be placed just before the operand. They return a boolean result.\n\n```\nFirstOperand Operator SecondOperand --> ex: true or false; // return true\nNegationOperator Operand --> ex: !(true or false); // return false\n```\n\n[//]: # (keyword|operator_!=)\n[//]: # (keyword|operator_)\n[//]: # (keyword|operator_=)\n### Comparison operators\n\nThe comparison operators `!=`(different than), ``(bigger than), `>=`(bigger or equal) are used the same way as basic arithmetical operators:\n\n```\nFirstOperand Operator SecondOperand --> ex: 5 < 3; // return false\n```\n\n[//]: # (keyword|concept_cast)\n[//]: # (keyword|operator_int)\n### Type casting operators\n\nYou can cast an operand to a special type using casting operator:\n\t\n```\nOperator(Operand); --> ex: int(2.1); // return 2\n```\n\n### Other operators\n\nA lot of other operators exist in GAML. The standard way to use those operators is as followed:\n\n```\nOperator(FirstOperand,SecondOperand,...) --> ex: rnd(1,8);\n```\n\nSome others are used in a more intuitive way:\n\n```\nFirstOperand Operator SecondOperand --> ex: 2[6,4,5] contains(5);\n```\n\n[//]: # (keyword|concept_condition)\n[//]: # (keyword|statement_if)\n[//]: # (keyword|statement_else)\n## Conditional structures\n\nYou can write if/else if/else in GAML:\n\n```\nif (integerVariable<0) {\n\twrite \"my value is negative !! The exact value is \" + integerVariable;\n}\nelse if (integerVariable>0) {\n\twrite \"my value is positive !! The exact value is \" + integerVariable;\n}\nelse if (integerVariable=0) {\n\twrite \"my value is equal to 0 !!\";\n}\nelse {\n\twrite \"hey... This is not possible, right ?\";\n}\n```\n\n[//]: # (keyword|concept_ternary)\nGAML also accepts ternary operator:\n\n```\nstringVariable  the name is also a facet\n\twrite i;\n}\n// the output will be 0 - 1 - 2 - 3 - 4 - 5\n```\n\n-\tThe facet `from` / `to` combine with the facet `step` to choose the step:\n\n```\nloop i from:0 to: 5 step: 2 {\n\twrite i;\n}\n// the output will be 0 - 2 - 4\n```\n\n-\tThe facet over to browse containers, as we will see in the next part.\n\n[//]: # (keyword|statement_break)\nNb: you can interrupt a loop at any time by using the `break` statement.\n\n[//]: # (keyword|concept_container)\n[//]: # (keyword|type_list)\n## Manipulate containers\n\nWe saw in the previous parts \"simple\" types of variable. You also have a multiple containers types, such as list, matrix, map, pair... In this section, we will only focus on the container `list` (you can learn the other by reading the [section about datatypes](DataTypes#complex-built-in-types)).\n\n**How to declare a list?**\n\nTo declare a list, you can either or not specify the type of the data of its elements:\n\n```\nlist listOfInt  list_int  list_int1  list_int2  list_int_result  exampleOfList  exampleOfList ","url":"wiki/BasicProgrammingConceptsInGAML.md"},{"id":"wiki/ModelOrganization.md","title":" Organization of a model","content":"[//]: # (startConcept|model_structure)\n# Organization of a model\n\nAs already extensively detailed in the [introduction page](Introduction), defining a model in GAML amounts to defining a _model species_, which later allows to instantiate a _model agent_ (aka a _simulation_), which may or may not contain micro-species, and which can be flanked by _experiment plans_ in order to be simulated.\n\nThis conceptual structure is respected in the definition of model files, which follows a similar pattern:\n\n1. Definition of the _global species_, preceded by a _header_, in order to represent the _model species_\n1. Definition of the different micro-species (either nested inside the _global species_ or at the same level)\n1. Definition of the different _experiment plans_ that target this model\n\n\n## Table of contents \n\n* [Model Header (model species)](#model-header-model-species)\n* [Species declarations](#species-declarations)\n* [Experiment declarations](#experiment-declarations)\n* [Basic skeleton of a model](#basic-skeleton-of_a_model)\n\n\n[//]: # (keyword|concept_model)\n## Model Header (_model species_)\n\nThe header of a model file begins with the declaration of the name of the model. Contrarily to other statements, this declaration **does not** end with a semi-colon.\n```\nmodel name_of_the_model\n```\nThe name of the model is not necessarily the same as the name of the file. It must conform to the general rule for naming species, i.e. be a valid identifier (beginning with a letter, containing only letters, digits and dashes). This name will be used for building the name of the model species, from which _simulations_ will be instantiated. For instance, the following declaration:\n```\nmodel dummy\n```\nwill internally create a species called `dummy_model`, child of the abstract species `model`, from which simulations (called `dummy_model0`, `dummy_model1`, etc.) will be instantiated.\n\n[//]: # (keyword|concept_import)\nThis declaration is followed by optional import statements that indicate which other models this model is importing. Import statements **do not** end with a semi-colon.\n\nImporting a model can take two forms. The first one, called _inheritance import_, is declared as follows:\n```\nimport \"relative_path_to_a_model_file\"\nimport \"relative_path_to_another_model_file\"\n```\nThe second one, called _usage import_, is declared as follows:\n```\nimport \"relative_path_to_a_model_file\" as model_identifier\n```\nWhen importing models using the first form, all the declarations of the model(s) imported will be merged with those of the current model (in the order with which the import statements are declared, i.e. the latest definitions of global attributes or behaviors superseding the previous ones).\nThe second form is reserved for using models as _micro-models_ of the current model. This possibility is still experimental in the current version of GAMA.\n\nThe last part of the _header_ is the definition of the [`global` species](GlobalSpecies), which is the actual definition of the _model species_ itself.\n```\nglobal {\n    // Definition of [global attributes](GlobalSpecies#declaration), [actions and behaviors](DefiningActionsAndBehaviors)\n}\n```\n\nNote that neither the imports nor the definition of `global` are mandatory. Only the `model` statement is.\n\n\n\n## Species declarations\n\nThe header is followed by the declaration of the different species of agents that populate the model.\n\nThe [special species `global`](GlobalSpecies) is the world species. You will declare here all the global attributes/actions/behaviors. The global species does not have name, and is unique in your model.\n```\nglobal {\n    // definition of global attributes, actions, behaviors\n}\n```\n[Regular species](RegularSpecies) can be declared with the keyword `species`. You can declare several regular species, and they all have to be named.\n```\nspecies nameOfSpecies {\n\t// definition of your [species attributes](RegularSpecies#declaration), [actions and behaviors](DefiningActionsAndBehaviors)\n}\n```\nNote that the possibility to define the species _after_ the `global` definition is actually a convenience: these species are micro-species of the model species and, hence, could be perfectly defined as nested species of `global`. For instance:\n```\nglobal {\n    // definition of global attributes, actions, behaviors\n}\n\nspecies A {...}\n\nspecies B {...}\n```\nis completely equivalent to:\n```\nglobal {\n    // definition of [global attributes](GlobalSpecies#declaration), actions, behaviors\n\n    species A {...}\n\n    species B {...}\n}\n```\n\n\n## Experiment declarations\n\nExperiments are usually declared at the end of the file. They start with the keyword `experiment`. They contains the [simulation parameters](DefiningParameters), and the definition of the output (such as [displays](DefiningDisplaysGeneralities), [monitors or inspectors](DefiningMonitorsAndInspectors)). You can declare as much experiments as you want.\n\n```\nexperiment first_experiment {\n    // definition of parameters (intputs)\n\n    // definition of output\n    output {...}\n}\n\nexperiment second_experiment {\n    // definition of parameters (inputs)\n\n    // definition of output\n}\n```\n\nNote that you have two types of experiments:\nA [GUI experiment](DefiningGUIExperiment) allows to display a graphical interface with input parameters and outputs. It is declared with the following structure :\n```\nexperiment gui_experiment type:gui {\n\t[...]\n}\n```\nA [Batch experiment](BatchExperiments) allows to execute numerous successive simulation runs (often used for model exploration). It is declared with the following structure :\n```\nexperiment batch_experiment type:batch {\n\t[...]\n}\n``` \n\n## Basic skeleton of a model\n\nHere is the basic skeleton of a model :\n```\nmodel name_of_the_model\n\nglobal {\n\t// definition of [global attributes](GlobalSpecies#declaration), actions, behaviours\n}\n\nspecies my_specie {\n\t// definition of attributes, actions, behaviours\n}\n\nexperiment my_experiment /* + specify the type : \"type:gui\" or \"type:batch\" */\n{\n\t// here the definition of your experiment, with...\n\t// ... your inputs\n\toutput {\n\t\t// ... and your outputs\n\t}\n}\n```\nDon't forget this structure ! This will be the basis for all the models you will create from now.\n\n[//]: # (endConcept|model_structure)","url":"wiki/ModelOrganization.md"},{"id":"wiki/DefiningAdvancedSpecies.md","title":" Defining advanced species","content":"# Defining advanced species\n\nIn the previous chapter, we saw how to declare and manipulate [**regular species**](RegularSpecies) and the [**global species**](GlobalSpecies) (as a reminder, the instance of the **global species** is the **world agent**). \n\nWe will now see that GAMA provides you the possibility to declare some special species, such as [**grids**](GridSpecies) or [**graphs**](GraphSpecies), with their own built-in attributes and their own built-in actions. We will also see how to declare [**mirror species**](MirrorSpecies), which is a \"copy\" of a regular species, in order to give it an other representation. Finally, we will learn how to represent several agents through one unique agent, with [**multi-level architecture**](MultiLevelArchitecture).","url":"wiki/DefiningAdvancedSpecies.md"},{"id":"wiki/DefiningGUIExperiment.md","title":" Defining GUI Experiment","content":"[//]: # (startConcept|gui_experiments)\n# Defining GUI Experiment\n\nWhen you execute your simulation, you will often need to display some information. For each simulation, you can define some inputs and outputs:\n* The inputs will be composed of parameters manipulated by the user for each simulation.\n* The outputs will be composed of displays, monitors or output files. They will be define inside the scope `output`.\n\n```\nexperiment exp_name type: gui {\n   [input]\n   output {\n     [display statements]\n     [monitor statements]\n     [file statements]\n   }\n}\n```\n\nYou can define two types of experiment (through the facet `type`):\n* **`gui`** experiments (the default type) are used to play an experiment, and interpret its outputs.\n* **`batch`** experiments are used to play an experiment several times (usually with other input values), used for model exploration. We will come back to this notion a bit further in the tutorial.\n\nInside experiment scope, you can access to some built-ins which can be useful, such as `minimum_cycle_duration`, to force the duration of one cycle.\n\n```\nexperiment my_experiment type: gui {\n\tfloat minimum_cycle_duration ","url":"wiki/DefiningGUIExperiment.md"},{"id":"wiki/ExploringModels.md","title":" Exploring Models","content":"[//]: # (keyword|concept_experiment)\n[//]: # (keyword|concept_batch)\n# Exploring Models\n\nWe just learnt how to launch GUI Experiments from GAMA. A GUI Experiment will start with a particular set of input, compute several outputs, and will stop at the end (if asked).\n\nIn order to explore models (by automatically running the Experiment using several configurations to analyze the outputs), a first approach is to run several simulations from the same experiment, considering each simulation as an agent. A second approach, much more efficient for larger explorations, is to run an other type of experiment : the **Batch Experiment**.\n\nWe will start this part by learning how to [**run several simulations**](RunSeveralSimulations) from the same experiment. Then, we will see how [**batch experiments**](BatchExperiments) work, and we will focus on how to use those batch experiments to explore models by using [**exploration methods**](ExplorationMethods).","url":"wiki/ExploringModels.md"},{"id":"wiki/Introduction.md","title":" Introduction","content":"# Introduction\n\nGAML is an _agent-oriented_ language dedicated to the definition of _agent-based_ simulations. It takes its roots in _object-oriented_ languages like Java or Smalltalk, but extends the object-oriented programming approach with powerful concepts (like skills, declarative definitions or agent migration) to allow for a better expressivity in models.\n\nIt is of course very close to _agent\\_based_ modeling languages like, e.g., [NetLogo](http://ccl.northwestern.edu/netlogo/), but, in addition to enriching the traditional representation of agents with modern computing notions like inheritance, type safety or multi-level agency, and providing the possibility to use different behavioral architectures for programming agents, GAML extends the agent-based paradigm to eliminate the boundaries between the domain of a model (which, in ABM, is represented with agents) and the experimental processes surrounding its simulations (which are usually not represented with agents), including, for example, _visualization_ processes. This [paper](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.104.7241&rep=rep1&type=pdf) (_Drogoul A., Vanbergue D., Meurisse T., Multi-Agent Based Simulation: Where are the Agents ?, Multi-Agent Based Simulation 3, pp. 1-15, LNCS, Springer-Verlag. 2003_) was in particular foundational in the definition of the concepts on which GAMA (and GAML) are based today.\n\nThis orientation has several conceptual consequences among which at least two are of immediate practical interest for modelers:\n* Since simulations, or experiments, are represented by agents, GAMA is bound to support high-level _model compositionality_, i.e. the definition of models that can use other models as _inner agents_, leveraging multi-modeling or multi-paradigm modeling as particular cases of composition.\n* The _visualization_ of models can be expressed by _models of visualization_, composed of agents entirely dedicated to visually represent other agents, allowing for a clear _separation of concerns_ between a simulation and its representation and, hence, the possibility to play with multiple representations of the same model at once.\n\n\n## Table of contents \n\n* [Key Concepts (Under construction)](#key-concepts-under-construction)\n\t* [Lexical semantics of GAML](#lexical-semantics-of-gaml)\n\t* [Translation into a concrete syntax](#translation-into-a-concrete-syntax)\n\t* [Vocabulary correspondance with the object-oriented paradigm as in Java](#vocabulary-correspondance-with-the-object-oriented-paradigm-as-in-java)\n\t* [Vocabulary correspondance with the agent-based paradigm as in NetLogo](#vocabulary-correspondance-with-the-agent-based-paradigm-as-in-netlogo)\n\n\n\n## Lexical semantics of GAML\nThe vocabulary of GAML is described in the following sentences, in which the meaning and relationships of the important _words_ of the language (in **bold face**) are summarized.\n\n1. The role of GAML is to support modelers in writing **models**, which are specifications of **simulations** that can be executed and controlled during **experiments**, themselves specified by **experiment plans**.\n1. The **agent-oriented** modeling paradigm means that everything \"active\" (entities of a model, systems, processes, activities, like simulations and experiments) can be represented in GAML as an **agent** (which can be thought of as a computational component owning its own data and executing its own behavior, alone or in interaction with other agents).\n1. Like in the object-oriented paradigm, where the notion of _class_ is used to supply a specification for _objects_, agents in GAML are specified by their **species**, which provide them with a set of **attributes** (_what they know_), **actions** (_what they can do_), **behaviors** (_what they actually do_) and also specifies properties of their **population**, for instance its **topology** (_how they are connected_) or **schedule** (_in which order and when they should execute_).\n1. Any **species** can be nested in another **species** (called its _macro-species_), in which case the **populations** of its instances will imperatively be hosted by an instance of this _macro-species_. A **species** can also inherit its properties from another **species** (called its _parent species_), creating a relationship similar to _specialization_ in object-oriented design. In addition to this, **species** can be constructed in a compositional way with the notion of **skills**, bundles of **attributes** and **actions** that can be shared between different species and inherited by their children.\n1. Given that all **agents** are specified by a **species**, **simulations** and **experiments** are then instances of two species which are, respectively, called **model** and **experiment plan**. Think of them as \"specialized\" categories of species.\n1. The relationships between **species**, **models** and **experiment plans** are codified in the meta-model of GAML in the form of a framework composed of three abstract species respectively called **agent** (direct or indirect parent of all **species**), **model** (parent of all **species** that define a model) and **experiment** (parent of all **species** that define an experiment plan). In this meta-model, instances of the children of **agent** know the instance of the child of **model** in which they are hosted as their **world**, while the instance of **experiment plan** identifies the same agent as one of the **simulations** it is in charge of. The following diagram summarizes this framework:\n\n![framework.png](resources/images/introduction/framework.png)\n\nPutting this all together, writing a model in GAML then consists in defining a species which inherits from **model**, in which other **species**, inheriting (directly or not) from **agent** and representing the entities that populate this model, will be nested, and which is itself nested in one or several **experiment plans** among which a user will be able to choose which **experiment** he/she wants to execute.\n\n![user_model.png](resources/images/introduction/user_model.png)\n\nAt the operational level, i.e. when _running_ an experiment in GAMA,\n\n## Translation into a concrete syntax\nThe concepts presented above are expressed in GAML using a syntax which bears resemblances with mainstream programming languages like Java, while reusing some structures from Smalltalk (namely, the syntax of _facets_ or the infix notation of _operators_). While this syntax is fully described in the subsequent sections of the documentation, we summarize here the meaning of its most prominent structures and their correspondance (when it exists) with the ones used in Java and NetLogo.\n\n1. A **model** is composed of a **header**, in which it can refer to other **models**, and a sequence of **species** and **experiments** declarations, in the form of special **declarative statements** of the language.\n1. A **statement** can be either a **declaration** or a **command**. It is always composed of a **keyword** followed by an optional **expression**, followed by a sequence of **facets**, each of them composed of a **keyword** (terminated by a ‘:’) and an **expression**.\n1. **facets** allow to pass arguments to **statements**. Their **value** is an **expression** of a given **type**. An **expression** can be a literary constant, the name of an **attribute**, **variable** or **pseudo-variable**, the name of a **unit** or **constant** of the language, or the application of an **operator**.\n1. A **type** can be a **primitive type**, a **species type** or a **parametric type** (i.e. a composition of **types**).\n1. Some **statements** can include sub-statements in a **block** (sequence of **statements** enclosed in curly brackets).\n1. **declarative statements** support the definition of special constructs of the language: for instance, **species** (including **global** and **experiment** species), **attributes**, **actions**, **behaviors**, **aspects**, **variables**, **parameters** and **outputs** of **experiments**.\n1. **imperative statements** that execute something or control the flow of execution of **actions**, **behaviors** and **aspects** are called **commands**.\n1. A **species** declaration (**global**, **species** or **grid** keywords) can only include 6 types of declarative statements : **attributes**, **actions**, **behaviors**, **aspects**, **equations** and (nested) **species**. In addition, **experiment** species allow to declare **parameters**, **outputs** and batch **methods**.\n\n\n\n## Vocabulary correspondance with the object-oriented paradigm as in Java\n| GAML | Java |\n|:--|:--|\n| species | class |\n| micro-species | nested class |\n| parent species | superclass |\n| child species | subclass |\n| model | program |\n| experiment | (main) class |\n| agent | object |\n| attribute | member |\n| action | method |\n| behavior | collection of methods |\n| aspect | collection of methods, mixed with the behavior |\n| skill | interface (on steroids) |\n| statement | statement |\n| type | type |\n| parametric type | generics |\n\n\n\n\n\n## Vocabulary correspondance with the agent-based paradigm as in NetLogo\n| GAML | NetLogo |\n|:--|:--|\n| species | breed   |\n| micro-species | -       |\n| parent species | -       |\n| child species | - (only from 'turtle') |\n| model | model   |\n| experiment | observer |\n| agent | turtle/observer |\n| attribute | 'breed'-own |\n| action | global function applied only to one breed |\n| behavior | collection of global functions applied to one breed |\n| aspect | only one, mixed with the behavior |\n| skill | -       |\n| statement | primitive |\n| type | type    |\n| parametric type | -       |","url":"wiki/Introduction.md"},{"id":"wiki/ManipulateBasicSpecies.md","title":" Manipulate basic species","content":"# Manipulate basic species\n\nIn this chapter, we will learn how to manipulate some basic species. As you already know, a species can be seen as the definition of a type of **agent** (we call agent the instance of a species). In OOP (Object-Oriented Programming), a **species** can be seen as the class. Each species is then defined by some **attributes** (\"member\" in OOP), **actions** (\"method\" in OOP) and **behavior** (\"method\" in OOP).\n\nIn this section, we will first learn how to declare the **world agent**, using the [**global species**](GlobalSpecies). We will then learn how to declare [**regular species**](RegularSpecies) which will populate our world. The following lesson will be dedicated to learn how to [**define actions and behaviors**](DefiningActionsAndBehaviors) for all those species. We will then learn how [**agents can interact between each other**](InteractionBetweenAgents), especially with the statement `ask`. In the next chapter then, we will see how to [**attach skills**](AttachingSkills) to our species, giving them new attributes and actions. This section will be closed with a last lesson dealing with how [**inheritence**](Inheritance) works in GAML.","url":"wiki/ManipulateBasicSpecies.md"},{"id":"wiki/MultiParadigmModeling.md","title":" Multi-Paradigm Modeling","content":"[//]: # (keyword|concept_architecture)\n[//]: # (keyword|concept_equation)\n# Multi-Paradigm Modeling\n\n![images/multiParadigmModeling/equation.png](resources/images/multiParadigmModeling/equation.png)\n![images/fsm.png](resources/images/multiParadigmModeling/fsm.png)\n\n[//]: # (keyword|concept_behavior)\nMulti-paradigm modeling is a research field focused on how to define a model semantically. From the beginning of this step by step tutorial, our approach is based on [behavior](DefiningActionsAndBehaviors#behaviors) (or reflex), for each agents. In this part, we will see that GAMA provides other ways to implement your model, using several control architectures. Sometime, it will be easier to implement your models choosing other paradigms.\n\nIn a first part, we will see how to use some [**control architectures**](ControlArchitecture) which already exist in GAML, such as [finite state machine architecture](ControlArchitecture#finite-state-machine), [task based architecture](ControlArchitecture#task-based) or [user control architecture](#user-control-architecture). In a second part, we will see an other approach, a math approach, through [**equations**](Equations). ","url":"wiki/MultiParadigmModeling.md"},{"id":"wiki/OptimizingModelsSection.md","title":" Optimizing Models","content":"[//]: # (keyword|concept_optimization)\n# Optimizing Models\n\nNow you are becoming more comfortable with GAML, it is time to think about how the runtime works, to be able to run some more optimized models. Indeed, if you already tried to write some models by yourself using GAML, you could have notice that the execution time depends a lot of how you implemented your model !\n\nWe will first present you in this part some [**runtime concepts**](RuntimeConcepts) (and present you the species facet [`scheduler`](RuntimeConcepts#schedule-agents)), and we will then show you some [**tips to optimize your models**](OptimizingModels) (how to increase performances using [scheduler](OptimizingModels#scheduling), [grids](OptimizingModels#grid), [displays](OptimizingModels#displays) and how to [choose your operators](OptimizingModels#operators)). ","url":"wiki/OptimizingModelsSection.md"},{"id":"wiki/StartWithGAML.md","title":" Start with GAML","content":"# Start with GAML\n\nIn this part, we will present you some basic concepts of GAML that will help you a lot for the next pages. \n\nYou will first learn how to [**organize a standard model**](ModelOrganization), then you will learn about some [**basis about GAML**](BasicProgrammingConceptsInGAML), such as how to declare a variable, how to use the basic operators, how to write a conditional structure or a loop, how to manipulate containers and how to generate random values.","url":"wiki/StartWithGAML.md"},{"id":"wiki/CallingR.md","title":" Calling R","content":"[//]: # (startConcept|call_r)\n[//]: # (keyword|concept_r)\n# Calling R\n\n\n## Introduction\n\n\n\nR language is one of powerful data mining tools, and its community is very large in the world (See the website: http://www.r-project.org/). Adding the R language into GAMA is our strong endeavors to accelerate many statistical, data mining tools into GAMA.\n\nRCaller 2.0 package (Website: http://code.google.com/p/rcaller/) is used for GAMA 1.6.1.\n\n\n## Table of contents \n\n* [Introduction](#introduction)\n\t* [Configuration in GAMA](#configuration-in-gama)\n\t* [Calling R from GAML](#calling-r-from-gaml)\n\t\t* [Calling the built-in operators](#calling-the-built-in-operators)\n\t\t\t* [Example 1](#example-1)\n\t\t* [Calling R codes from a text file (.txt) WITHOUT the parameters](#calling-r-codes-from-a-text-file-txt-without-the-parameters)\n\t\t\t* [Example 2](#example-2)\n\t\t\t* [Correlation.R file](#correlationr-file)\n\t\t* [Output](#output)\n\t\t\t* [Example 3](#example-3)\n\t\t\t* [RandomForest.R file](#randomforestr-file)\n* [Load the package:](#load-the-package)\n* [Read data from iris:](#read-data-from-iris)\n* [Build the decision tree:](#build-the-decision-tree)\n* [Build the random forest of 50 decision trees:](#build-the-random-forest-of-50-decision-trees)\n* [Predict the acceptance of test set:](#predict-the-acceptance-of-test-set)\n* [Calculate the accuracy:](#calculate-the-accuracy)\n\t\t\t* [Output](#output)\n\t\t* [Calling R codes from a text file (.R, .txt) WITH the parameters](#calling-r-codes-from-a-text-file-r-txt-with-the-parameters)\n\t\t\t* [Example 4](#example-4)\n\t\t\t* [Mean.R file](#meanr-file)\n\t\t* [Output](#output)\n\t\t\t* [Example 5](#example-5)\n\t\t\t* [AddParam.R file](#addparamr-file)\n\t\t\t* [Output](#output)\n\n\n\n\n## Configuration in GAMA\n1) Install R language into your computer.\n\n2) In GAMA, select menu option: **Edit/Preferences**.\n\n3) In \"**Config RScript's path**\", browse to your \"**Rscript**\" file (R language installed in your system).\n\n**Notes**: Ensure that install.packages(\"Runiversal\") is already applied in R environment.\n\n\n\n\n\n## Calling R from GAML\n\n### Calling the built-in operators\n\n#### Example 1\n\n```\nmodel CallingR\n\nglobal {\n\tlist X  0.755928946018454\n\t\twrite meanR(X); // -> 2.0\n\t}\n}\n```\n\n\n### Calling R codes from a text file (**.R,**.txt) WITHOUT the parameters\n\nUsing **R\\_compute(String RFile)** operator. This operator DOESN’T ALLOW to add any parameters form the GAML code. All inputs is directly added into the R codes.\n**Remarks**: Don’t let any white lines at the end of R codes. **R\\_compute** will return the last variable of R file, this parameter can be a basic type or a list.  Please ensure that the called packages must be installed before using.\n\n#### Example 2 \n```\nmodel CallingR\n\nglobal\n{\n\tlist result;\n\n\tinit{\n\t\tresult ","url":"wiki/CallingR.md"},{"id":"wiki/Comodel.md","title":" Using Comodel","content":"# Using Comodel\n\n## Introduction\nIn the trend of developing complex system of multi-disciplinary, composing and coupling models are days by days become the most attractive research objectives. \nGAMA is supporting the co-modelling and co-simulation which are suppose to be the common coupling infrastructure.\n\n\n## Example of a Comodel \n\nA Comodel is a model, especially an multi-agent-based, compose several sub-model, called micro-model. A comodel itself could be also a micro-model of an other comodel. From the view of a micro-model, comodel is called a macro-model.\n\nA micro-model must be import, instantiate, and life-control by macro-model.\n\n![](resources/images/comodel/concepts.png)\n\n\n## Why and when can we use Comodel ?\n\nto be completed...\n\n## Use of Comodel in a GAML model\n\n\nThe GAML language has been evolve by extend the import section. The old importation tell the compiler to merge all imported elements into as one model, but the new one allows modellers to keep the elements come from imported models separately with the caller model.\n\n### Defining a micro-model\nDefining a micro-model of comodel is to import an existing model with an alias name. The syntax is: \n``` \nimport  as \n```\nThe identifier is then become the new name of the micro-model.\n\n\n### Instantiate a micro-model\nAfter the importation and giving an identifier, micro-model must be explicitly instantiated. It could be done by create statement. \n```\ncreate  .  [optional parameter];\n```\nTHe  is an expriment inside micro-model. This syntax will generate an experiment agent and attach an implicitly simulation. \n\nNote: Creation of multi-instant is not create multi-simulation, but multi-experiment. Modellers could create a experiment with multi-simulation by explicitly do the init inside the experiment scope.\n\n### Control micro-model life-cycle\nA micro-model can be control as the normal agent by asking the correspond identifier, and also be destroy by the 'o die' statement. As fact, it can be recreate any time we need.\n\n\n```\nask ( .   at  ) . simulation {\n\t\t...\n}\n```\n\n\n## Visualize micro-model\n\nThe micro-model species could display in comodel with the support of agent layer\n\n```\nagents \"name of layer\" value: ( .  at ).;\n```\n\n\n\n## More details\n\n\n## Example of the comodel\n\n### Urbanization model with Traffic model\n\n![](resources/images/comodel/comodel_urban_traffic.png)\n\n### Flood model with Evacuation model\nReusing of  two existing models:Flood Simulation and Evacuation.\n\nToy Models/Evacuation/models/continuous_move.gaml\n\n![](resources/images/comodel/continuous_move_model_display.png)\n\nToy Models/Flood Simulation/models/Hydrological Model.gaml\n\n![](resources/images/comodel/hydro_model_display.png)\n\nThe comodel explore the effect of flood on evacuation plan:\n\n![](resources/images/comodel/comodel_disp_Flood_Evacuation.png)\n\nSimulation results:\n\n![](resources/images/comodel/comodel_Flood_Evacuation.png)\n","url":"wiki/Comodel.md"},{"id":"wiki/Diffusion.md","title":" Implementing diffusion","content":"[//]: # (startConcept|diffusion)\n[//]: # (keyword|concept_diffusion)\n# Implementing diffusion\n[//]: # (keyword|concept_grid)\n[//]: # (keyword|concept_math)\n[//]: # (keyword|concept_topology)\n\nGAMA provides you the possibility to represent and simulate the diffusion of a variable through a grid topology. \n\n## Index\n\n* [Diffuse statement](#diffuse-statement)\n* [Diffusion with matrix](#diffusion-with-matrix)\n  * [Diffusion matrix](#diffusion-matrix)\n  * [Gradient matrix](#gradient-matrix)\n  * [Compute multiple propagations at the same step](#compute-multiple-propagations-at-the-same-step)\n  * [Executing several diffusion matrix](#execution-several-diffusion-matrix)\n* [Diffusion with parameters](#diffusion-with-parameters)\n* [Computation methods](#computation-methods)\n  * [Convolution](#convolution)\n  * [Dot Product](#dot-product)\n* [Use mask](#using-mask)\n  * [Generalities](#generalities)\n  * [Tips](#tips)\n* [Pseudo code](#pseudo-code)\n\n## Diffuse statement\n\n[//]: # (keyword|statement_diffuse)\nThe statement to use for the diffusion is `diffuse`. It has to be used in a `grid` species. The `diffuse` uses the following facets:\n\n  * **`var`** (an identifier), (omissible) : the variable to be diffused  \n  * **`on`** (any type in [container, species]): the list of agents (in general cells of a grid), on which the diffusion will occur\n  * `avoid_mask` (boolean): if true, the value will not be diffused in the masked cells, but will be restitute to the neighboring cells, multiplied by the variation value (no signal lost). If false, the value will be diffused in the masked cells, but masked cells won't diffuse the value afterward (lost of signal). (default value : false)\n  * `cycle_length` (int): the number of diffusion operation applied in one simulation step\n  * `mask` (matrix): a matrix masking the diffusion (matrix created from a image for example). The cells corresponding to the values smaller than \"-1\" in the mask matrix will not diffuse, and the other will diffuse.\n  * `matrix` (matrix): the diffusion matrix (\"kernel\" or \"filter\" in image processing). Can have any size, as long as dimensions are odd values.\n  * `method` (an identifier), takes values in: {convolution, dot_product}: the diffusion method\n  * `min_value` (float): if a value is smaller than this value, it will not be diffused. By default, this value is equal to 0.0. This value cannot be smaller than 0.\n  * `propagation` (a label), takes values in: {diffusion, gradient}: represents both the way the signal is propagated and the way to treat multiple propagation of the same signal occurring at once from different places. If propagation equals 'diffusion', the intensity of a signal is shared between its neighbors with respect to 'proportion', 'variation' and the number of neighbours of the environment places (4, 6 or 8). I.e., for a given signal S propagated from place P, the value transmitted to its N neighbors is : S' = (S / N / proportion) - variation. The intensity of S is then diminished by S `*` proportion on P. In a diffusion, the different signals of the same name see their intensities added to each other on each place. If propagation equals 'gradient', the original intensity is not modified, and each neighbors receives the intensity : S / proportion - variation. If multiple propagation occur at once, only the maximum intensity is kept on each place. If 'propagation' is not defined, it is assumed that it is equal to 'diffusion'.\n  * `proportion` (float): a diffusion rate\n  * `radius` (int): a diffusion radius (in number of cells from the center)\n  * `variation` (float): an absolute value to decrease at each neighbors \n\nTo write a diffusion, you first have to declare a grid, and declare a special attribute for the diffusion. You will then have to write the `diffuse` statement in an other scope (such as the `global` scope for instance), which will permit the values to be diffused at each step. There, you will specify which variable you want to diffuse (through the **`var`** facet), on which species or list of agents you want the diffusion (through the **`on`** facet), and how you want this value to be diffused (through all the other facets, we will see how it works [with matrix](#diffusion-with-matrix) and [with special parameters](#diffusion-with-parameters) just after).\n\nHere is the template of code we will use for the next following part of this page:\n\n```\nglobal {\n\tint size  mat_diff  mat_diff  mat_diff  mat_diff  mat_diff_left_wall 30)) matrix:mat_diff;\n\tdiffuse var: phero on: (cells where(each.grid_x=30)) matrix:mat_diff_left_wall;\n}\n```\n\n![resources/images/recipes/wall_simulation.png](resources/images/recipes/wall_simulation.png)\n\nNote that almost the same result can be obtained by using the facet `avoid_mask` : the value of all masked cells will remain at 0, and the value which was supposed to be affected to the masked cell will be distributed to the neighboring cells. Notice that the results can be slightly different if you are using the `convolution` or the `dot_product` method : the algorithm of redistribution of the value to the neighboring cells is a bit different. We advise you to use the `dot_product` with the `avoid_mask` facet, the results are more accurates.\n\n#### Wind pushing the diffusion\n\nLet's simulate a uniform diffusion that is pushed by a wind from \"north\" everywhere in the grid. A wind from \"west\" as blowing at the top side of the grid. We will here have to build 2 matrix : one for the uniform diffusion, one for the \"north\" wind and one for the \"west\" wind. The sum of the values for the 2 matrix meant to simulate the wind will be equal to 0 (as it will be add to the diffusion matrix).\n\n```\nmatrix mat_diff  mat_wind_from_west  mat_wind_from_north =32)) matrix:mat_wind_from_west;\n}\n```\n\n![resources/images/recipes/diffusion_with_wind.png](resources/images/recipes/diffusion_with_wind.png)\n\n#### Endless world\n\nNote that when your world is not a torus, it has the same effect as a _mask_, since all the values outside from the world cannot diffuse some values back :\n\n![resources/images/recipes/uniform_diffusion_near_edge.png](resources/images/recipes/uniform_diffusion_near_edge.png)\n\nYou can \"fake\" the fact that your world is endless by adding a different diffusion for the cells with `grid_x=0` to have almost the same result :\n\n![resources/images/recipes/uniform_diffusion_near_edge_with_mask.png](resources/images/recipes/uniform_diffusion_near_edge_with_mask.png)\n\n```\nmatrix mat_diff  mat_diff_upper_edge 0)) matrix:mat_diff;\n\tdiffuse var: phero on: (cells where(each.grid_y=0)) matrix:mat_diff_upper_edge;\n}\n```\n\n## Pseudo code\n\n_This section is more for a better understanding of the source code._\n\nHere is the pseudo code for the computation of diffusion :\n\n1) : Execute the statement `diffuse`, store the diffusions in a map (from class _DiffusionStatement_ to class _GridDiffuser_) :\n\n```\n- Get all the facet values\n- Compute the \"real\" mask, from the facet \"mask:\" and the facet \"on:\".\n  - If no value for \"mask:\" and \"on:\" all the grid, the mask is equal to null.\n- Compute the matrix of diffusion\n  - If no value for \"matrix:\", compute with \"nb_neighbors\", \"is_gradient\", \"proportion\", \"propagation\", \"variation\", \"range\".\n  - Then, compute the matrix of diffusion with \"cycle_length\".\n- Store the diffusion properties in a map\n  - Map : [\"method_diffu\", \"is_gradient\", \"matrix\", \"mask\", \"min_value\"] is value, [\"var_diffu\", \"grid_name\"] is key.\n  - If the key exists in the map, try to \"mix\" the diffusions\n    - If \"method_diffu\", \"mask\" and \"is_gradient\" equal for the 2 diffusions, mix the diffusion matrix.\n```\n\n2) : At the end of the step, execute the diffusions (class _GridDiffuser_) :\n\n```\n- For each key of the map,\n  - Load the couple \"var_diffu\" / \"grid_name\"\n  - Build the \"output\" and \"input\" array with the dimension of the grid. \n  - Initialize the \"output\" array with -Double.MAX_VALUE.\n  - For each value of the map for that key,\n    - Load all the properties : \"method_diffu\", \"is_gradient\", \"matrix\", \"mask\", \"min_value\"\n    - Compute :\n      - If the cell is not masked, if the value of input is > min_value, diffuse to the neighbors.\n        - If the value of the cell is equal to -Double.MAX_VALUE, remplace it by input[idx] * matDiffu[i][j].\n        - Else, do the computation (gradient or diffusion).\n    - Finish the diffusion :\n      - If output[idx] > -Double.MAX_VALUE, write the new value in the cell.\n```\n[//]: # (endConcept|diffusion)","url":"wiki/Diffusion.md"},{"id":"wiki/FAQ.md","title":" FAQ (Frequently Asked Questions)","content":"# FAQ (Frequently Asked Questions)\n\n[//]: # (concept|video)\n## Can we record a video from an experiment ?\n\nNo, we cannot directly. But you have two alternatives :\n- With the set of images generated with the `autosave` facet of an experiment, you can construct your own video file using powerful software such as [ffmpeg](https://www.ffmpeg.org/).\n- You can directly record the video stream using software such as [VLC Media Player](http://www.videolan.org/vlc/index.html) or [QuickTime](http://www.apple.com/quicktime/download/).","url":"wiki/FAQ.md"},{"id":"wiki/GamAnalyzer.md","title":" Using GAMAnalyzer","content":"[//]: # (startConcept|run_several_models_using_gamanalyzer)\n# Using GAMAnalyzer\n\n## Install\n\nGo to Git View -> Click on Import Projects\nAdd the dependencies in ummisco.gama.feature.dependencies\n\nGamAnalyzer is a tool to monitor several multi-agents simulation\n\nThe \"agent_group_follower\" goal is to monitor and analyze a group of agent during several simulation. This group of agent can be chosen by the user according to criteria chosen by the user. The monitoring process and analysis of these agents involves the extraction, processing and visualization of their data at every step of the simulation.  The data for each simulation are pooled and treated commonly for their graphic representation or clusters.\n\n## Built-in Variable\n\n\n\n\n* **varmap**: All variable that can be analyzed or displayed in a graph.\n\n* **numvarmap**: Numerical variable (on this variable all the aggregator numeric are computed). \n\n* **qualivarmap**: All non numerical variable. Could be used for BDI to analyze beliefs.\n\n* **metadatahistory**: See updateMetaDataHistory. This matrice store all the metadata like getSimulationScope(), getClock().getCycle(), getUniqueSimName(scope), rule, scope.getAgentScope().getName(), this.getName(), this.agentsCourants.copy(scope), this.agentsCourants.size(), this.getGeometry().\n\n\n* **lastdetailedvarvalues**: store all the value (in varmap) for all the followed agent for the last iteration.\n\n\n\n* **averagehistory**: Average value for each of the numvar \n* **stdevhistory**: Std deviation value for each of the numvar \n* **minhistory**: Min deviation value for each of the numvar \n* **maxhistory**: Max deviation value for each of the numvar\n* **distribhistoryparams**: Gives the interval of the distribution described in distribhistory\n* **distribhistory**: Distribution of numvarmap\n\n* **multi_metadatahistory**: Aggregate each metadatahistory for each experiment \n\n\n## Example \n\nThis example is based on a toy model which is only composed of wandering people. In this example we will use GamAnalyzer to follow the agent people. \n\n### \n```\nagent_group_follower peoplefollower;\n```\n```\ncreate agentfollower \n{\n  do analyse_cluster species_to_analyse:\"people\";\n  peoplefollower","url":"wiki/GamAnalyzer.md"},{"id":"wiki/Headless-mode-for-dummies.md","title":" Overview","content":"# Overview\n\nThis tutorial presents the headless mode usage of GAMA. We will execute the Predator-Prey model, already presented in [this tutorial](PredatorPrey_step1).\nHeadless mode is documented [here](Headless), with the same model as an example. Here, we focus on the definition of an experiment plan, where the model is run several times. We only consider the shell script execution, not the java command execution.\n\nIn headless-mode, GAMA can be seen as any shell command, whose behavior is controlled by passing arguments to it.\nYou must provide 2 arguments : \n\n* an **input experiment file **, used to describe the execution plan of your model, its inputs and the expected outputs.\n* an ** output directory **, where the results of the execution are stored\n \nHeadless-mode is a little bit more technical to handle than the general GAMA use-case, and the following commands and code have been solely tested on a Linux Ubuntu 15.04 machine, x86_64 architecture, with kernel 3.19.0-82-generic.\nJava version is 1.8.0_121 (java version \"1.8.0_121\")\n\nYou may have to perform some adjustments (such as paths definition) according to your machine, OS, java and GAMA versions and so on.\n\n\n\n# Setup \n\n## GAMA version\n\nHeadless mode is frequently updated by GAMA developers, so you have to get the very latest build version of GAMA. You can download it here  [https://github.com/gama-platform/gama/releases](https://github.com/gama-platform/gama/releases) Be sure to pick the ** Continuous build **  version (The name looks like `GAMA1.7_Linux_64_02.26.17_da33f5b.zip`) and ** not ** the major release, e.g. `GAMA1.7_Linux_64.zip`.\n\n\n## gama-headless.sh script setup\n\n\nThe `gama-headless.sh` script can be found under the `headless` directory, in GAMA installation directory e.g. : `~/GAMA/headless/\n\n\n## Modifying the script (a little bit)\n\nThe original script looks like this : \n\n\t#! /bin/bash\n\tmemory=2048m\n\tdeclare -i i\t\n\n\ti=0\n\techo ${!i}\t\n\n\tfor ((i=1;i<=$#;i=$i+1))\n\tdo\n\tif test ${!i} = \"-m\"\n\tthen\n\t    i=$i+1\n\t    memory=${!i}\n\telse\n\t    PARAM=$PARAM\\ ${!i}\n\t    i=$i+1\n\t    PARAM=$PARAM\\ ${!i}\n\tfi\n\tdone\t\n\n\techo \"******************************************************************\"\n\techo \"* GAMA version 1.7.0 V7                                          *\"\n\techo \"* http://gama-platform.org                                       *\"\n\techo \"* (c) 2007-2016 UMI 209 UMMISCO IRD/UPMC & Partners              *\"\n\techo \"******************************************************************\"\n\tpassWork=.work$RANDOM\t\n\n\tjava -cp ../plugins/org.eclipse.equinox.launcher*.jar -Xms512m -Xmx$memory  -Djava.awt.headless=true org.eclipse.core.launcher.Main  -application msi.gama.headless.id4 -data $passWork $PARAM $mfull $outputFile\n\trm -rf $passWork\n\n\nNotice the final command of the script `rm -rf $passWork`. It is intended to remove the temporary file used during the execution of the script. For now, we should comment this commmand, in order to check the logs if an error appears : `#rm -rf $passWork`\n\n## Setting the experiment file\n\n\nHeadless mode uses a XML file to describe the execution plan of a model. An example is given in the [headless mode documentation page](Headless).\n\nThe script looks like this :\n** N.B. this version of the script, given as an example, is deprecated**\n\n\n\t\n\t\n\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\n\t\n\n\nAs you can see, you need to define 3 things in this minimal example :\n* Simulation:  its id, path to the model , finalStep (or stop condition), and name of the experiment\n* Parameters name, of the model for * this * simulation (i.e. Simulation of id= 2)\n* Outputs of the model: their id, name, type, and the rate (expressed in cycles) at which they are logged in the results file during the simulation\n\n\nWe now describe how to constitute your experiment file.\n\n# Experiment File : Simulation\n\n## id\n\nFor now, we only consider one single execution of the model, so the simulation `id` is not critical, let it unchanged.\nLater example will include different simulations in the same experiment file.\nSimulation `id` is a string. Don't introduce weird symbols into it. \n\n## sourcePath \n\n`sourcePath` is the relative (or absolute) path to the model file you want to execute headlessly.\n\nHere we want to execute the [fourth model of the Predator Prey tutorial suite](PredatorPrey_step4), located in `~/GAMA/plugins/msi.gama.models_1.7.0.XXXXXXXXXXXX/models/Tutorials/Predator Prey/models` (with XXXXXXXXXXXX replaced by the number of the release you downloaded)\n  \nSo we set sourcePath=\"../plugins/msi.gama.models_1.7.0.201702260518/models/Tutorials/Predator Prey/models/Model 07.gaml\"  (Remember that the headless script is located in `~/GAMA/headless/`)\n \nDepending on the directory you want to run the `gama-headless.sh` script, sourcePath must me modified accordingly.\nAnother workaround for shell more advanced users is to define a  `$GAMA_PATH`, `$MODEL_PATH` and `$OUPUT_PATH` in `gama-headless.sh` script.\nDon't forget the quotes `\"` around your path.\n\n## finalStep\n\nThe duration, in cycles, of the simulation. \n\n## experiment\n\nThis is the name of (one of) the experiment statement at the end of the model code.\n\nIn our case there is only one, called `prey_predator` and  it looks like this :\n\n\texperiment prey_predator type: gui {\n\t\tparameter \"Initial number of preys: \" var: nb_preys_init min: 1 max: 1000 category: \"Prey\" ;\n\t\tparameter \"Prey max energy: \" var: prey_max_energy category: \"Prey\" ;\n\t\tparameter \"Prey max transfert: \" var: prey_max_transfert  category: \"Prey\" ;\n\t\tparameter \"Prey energy consumption: \" var: prey_energy_consum  category: \"Prey\" ;\n\t\toutput {\n\t\t\tdisplay main_display {\n\t\t\t\tgrid vegetation_cell lines: #black ;\n\t\t\t\tspecies prey aspect: base ;\n\t\t\t}\n\t\t\tmonitor \"Number of preys\" value: nb_preys ;\n\t\t}\n\t}  \n\nSo we are now able to constitute the entire Simulation tag : \n\n``\n\t\n\nN.B. the numbers after `msi.gama.models` (the number of your GAMA release actually) have to be adapted to your own release of GAMA number.\nThe path to the GAMA installation directory has also to be adapted of course.\n\n\n# Experiment File : Parameters\n\nThe parameters section of the experiment file describes the parameters names, types and values to be passed to the model for its execution.\n\nLet's say we want to fix the number of preys and their max energy  for this simulation.\nWe look at the experiment section of the model code and use their ** title **. \nThe title of a parameter is the name that comes right after the `parameter` statement. In our case,  the strings \"Initial number of preys: \" and \"Prey max energy: \" (Mind the spaces, quotes and colon)\n\n\n\nThe parameters section of the file would look like :\n\n\t\n\t\t\n\t\t\n\t\n\n\nAny declared parameter can be set this way, yet you don't have to set all of them, provided they are initialized with a default value in the model (see the global statement part of the model code).\n\n\n\n# Experiment File : Outputs\n\n\nOutput section of the experiment file is pretty similar to the previous one, except for the `id` that have to be set for each of the outputs .\n\nWe can log some of the declared outputs  : `main_display` and `number_of_preys`.\n\nThe outputs section would look like the following:\n\n\t\n\t\t\n\t\t\n\t\n\nOutputs must have an id, a name, and a framerate.\n\n* `id` is a number that identifies the output\n* framerate is the rate at which the output is written in the result file. It's a number of cycle of simulation (integer). In this example the display is saved every 10 cycle\n* `name` is either the \"title\" of the corresponding monitor. In our case, the second output's is the title of the monitor `\"Number of preys\"`, i.e. \"Number of preys\"\n\nWe also save a **display ** output, that is an image of the simulation graphical display named `main_display` in the code of the model. Theses images is what you would have seen if you had run the model in the traditional GUI mode.\n\n\n\n\n# Execution and results\n\nOur new version of the experiment file is ready : \n\n\n\n\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\n\n\n\n\n\n## Execution \n\n\nWe have to launch the `gama-headless.sh` script and provide two arguments : the experiment file we just completed and the path of a directory where the results will be written.\n\n** Warning ** In this example ,we are lazy and define the source path as the absolute path to the model we want to execute. If you want to use a relative path, note that it has to be define relatively to the location of your ** ExperimentFile.xml location ** (and the location where you launched the script)\n\n\n\nIn a terminal, position yourself in the headless directory : `~/GAMA/headless/'.\n\nThen type the following command :  \n\t\n\tbash gama-headless.sh -v ~/a/path/to/MyExperimentFile.xml  /path/to/the/desired/output/directory  \n\nAnd replace paths by the location of your ExperimentFile and output directory\n\nYou should obtain the following output in the terminal : \n\n\n\t******************************************************************\n\t* GAMA version 1.7.0 V7                                          *\n\t* http://gama-platform.org                                       *\n\t* (c) 2007-2016 UMI 209 UMMISCO IRD/UPMC & Partners              *\n\t******************************************************************\n\t>GAMA plugin loaded in 2927 ms: \tmsi.gama.core\n\t>GAMA plugin loaded in 67 ms: \tummisco.gama.network\n\t>GAMA plugin loaded in 56 ms: \tsimtools.gaml.extensions.traffic\n\t>GAMA plugin loaded in 75 ms: \tsimtools.gaml.extensions.physics\n\t>GAMA plugin loaded in 1 ms: \tirit.gaml.extensions.test\n\t>GAMA plugin loaded in 75 ms: \tummisco.gaml.extensions.maths\n\t>GAMA plugin loaded in 47 ms: \tmsi.gaml.extensions.fipa\n\t>GAMA plugin loaded in 92 ms: \tummisco.gama.serialize\n\t>GAMA plugin loaded in 49 ms: \tirit.gaml.extensions.database\n\t>GAMA plugin loaded in 2 ms: \tmsi.gama.lang.gaml\n\t>GAMA plugin loaded in 1 ms: \tmsi.gama.headless\n\t>GAMA plugin loaded in 103 ms: \tummisco.gama.java2d\n\t>GAMA plugin loaded in 189 ms: \tmsi.gaml.architecture.simplebdi\n\t>GAMA plugin loaded in 129 ms: \tummisco.gama.opengl\n\t>GAMA building GAML artefacts>GAMA total load time 4502 ms.\n\t in 714 ms\n\tcpus :8\n\tSimulation is running...\n\t....................................................................................................\n\tSimulation duration: 7089ms\n\n\n\t\n\n\n\n\n## Results \n\nThe results are stored in the output directory you provided as the second argument of the script.\n\n3 items have appeared :\n\n* A `console_output.txt` file, containing the output of the GAMA console of the model execution if any\n* a XML file `simulation-outputXX.xml`, where XX is the `id` number of your simulation. In our case it should be 2.\n* the folder `snapshots` containing the screenshots coming from the second declared output : `main_display`. image name format is `main_display[id]_[cycle].png`.\n\nThe values of the monitor \"Number of preys\" are stored in the xml file `simulation-outputXX.xml`\n\n\n\n\n\n\n# Common error messages \n\n\n`Exception in thread \"Thread-7\" No parameter named prey_max_energy in experiment prey_predator`\nProbably a typo in the name or the title of a parameter. check spaces, capital letters, symbols and so on.\n\n\njava.io.IOException: Model file does not exist: /home/ubuntu/dev/tutoGamaHeadless/../plugins/msi.gama.models_1\nThis may be a relative path mistake; try with absolute path.\n\njava.lang.NumberFormatException: For input string: \"1.0\"\nThis may be a problem of type declaration in the parameter section. \n\n\n# Going further \n\n## Experiments of several simulation\n\nYou can launch several simulation by replicating the simulation declaration in your ExperimentFile.xml and varying the values of the parameters.\nSince you will have to edit the experiment file by hand, you should do that only for a reasonable number of simulations (e.g. <10 )\n\n\n\n## Design of experiments plans\n\nFor more systematic parameter values samples, you should turn towards a more adapted tool such as GAMAR, to generate a `ExperimentFile.xml` with a huge number of simulations.\n\n\n","url":"wiki/Headless-mode-for-dummies.md"},{"id":"wiki/KnownIssues.md","title":" Known issues","content":"# Known issues\n\n[//]: # (keyword|concept_opengl)\n## Crash when using openGL on Windows\n\nIf you are using GAMA with Windows, and your video card is a Radeon AMD, then GAMA can crash while running a simulation using OpenGL. To avoid this issue, you have to disable your video card. This will slow down a bit the performances, but at least you will be able to run GAMA without those annoying crashes.\n\nTo disable your video card, open the control panel, click on Hardware and Sound / Devices and Printers / Device manager, and then right click on your video card (as shown in the following image)\n\n![resources/images/recipes/disable_amd_radeon.png](resources/images/recipes/disable_amd_radeon.png)\n\n[//]: # (keyword|concept_grid)\n## Grid not displayed right using openGL\n\nWhen you try to display a grid with opengl, the cells have not a regular shape (as it is shown in the following image)\n\n![resources/images/recipes/grid_display_problem.png](resources/images/recipes/grid_display_problem.png)\n\nThe reason of this problem is that we can only map a grid of 2^n*2^n cells in the plan. Here are some solutions for this problem :\n- Choose a grid with 2^n*2^n dimension (such as 16x16, or 32x32)\n- Display the grid in java2D\n- Display the grid as _species_, and not as _grid_ (note that the difference in term of performance between displaying a grid as a _grid_ and as a _species_ is not so important for opengl displays. It has originally been done for java2D displays)","url":"wiki/KnownIssues.md"},{"id":"wiki/ManipulateDates.md","title":" Manipulate Dates","content":"[//]: # (keyword|concept_date)\n# Manipulate Dates\n\n[//]: # (keyword|type_date) \n[//]: # (keyword|concept_time)\n## Managing Time in Models\n\nIf some models are based on a abstract time - only the number of cycles is important - others are based on a real time. In order to manage the time, GAMA provides some tools to manage time.\n\nFirst, GAMA allows to define the duration of a simulation step. It provides access to different time variables. At last, since GAMA 1.7, it provides a date variable type and some global variables allowing to use a real calendar to manage time.\n\n## Definition of the step and use of temporal unity values\nGAMA provides three important [global variables to manage time](GlobalSpecies#cycle):\n\n* `cycle` (int - not modifiable): the current simulation step - this variable is incremented by 1 at each simulation step\n* `step` (float - can be modified): the duration of a simulation step (in seconds). By default the duration is one second.\n* `time` (float - not modifiable): the current time spent since the beginning of the simulation - this variable is computed at each simulation step by: time = cycle * step. \n\nThe value of the cycle and time variables are shown in the top left (green rectangle) of the simulation interface. Clicking on the green rectangle allows to display either the number cycles or the time variable. Concerning this variable, it is presented following a years - month - days - hours - minutes - seconds format. In this presentation, every months are considered as being composed of 30 days (the different number of days of months are not taken into account).\n\nConcerning the step facet, the variable can be modified by the modeler. A classic way of doing it consists in reediting the variable in the global section:\n\n```\nglobal {\n       float step ","url":"wiki/ManipulateDates.md"},{"id":"wiki/ManipulateLight.md","title":" Implementing light","content":"[//]: # (startConcept|light)\n[//]: # (keyword|concept_3d)\n[//]: # (keyword|concept_light)\n# Implementing light\n\nWhen using opengl display, GAMA provides you the possibility to manipulate one or several lights, making your display more realistic.\nMost of the following screenshots will be taken with the following short example gaml : \n```\nmodel test_light\n\ngrid cells {\n\taspect base {\n\t\tdraw square(1) at:{grid_x,grid_y} color:#white;\n\t}\n}\nexperiment my_experiment type:gui{\n\toutput {\n\t\tdisplay my_display type:opengl background:#darkblue {\n\t\t\tspecies cells aspect:base;\n\t\t\tgraphics \"my_layer\" {\n\t\t\t\tdraw square(100) color:#white at:{50,50};\n\t\t\t\tdraw cube(5) color:#lightgrey at:{50,30};\n\t\t\t\tdraw cube(5) color:#lightgrey at:{30,35};\n\t\t\t\tdraw cube(5) color:#lightgrey at:{60,35};\n\t\t\t\tdraw sphere(5) color:#lightgrey at:{10,10,2.5};\n\t\t\t\tdraw sphere(5) color:#lightgrey at:{20,30,2.5};\n\t\t\t\tdraw sphere(5) color:#lightgrey at:{40,30,2.5};\n\t\t\t\tdraw sphere(5) color:#lightgrey at:{40,60,2.5};\n\t\t\t\tdraw cone3D(5,5) color:#lightgrey at:{55,10,0};\n\t\t\t\tdraw cylinder(5,5) color:#lightgrey at:{10,60,0};\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n## Index\n\n* [Light generalities](#light-generalities)\n* [Default light](#default-light)\n* [Custom lights](#custom-lights)\n\n## Light generalities\n\nBefore going deep into the code, here is a quick explanation about how light works in opengl.\nFirst of all, you need to know that there are 3 types of lights you can manipulate : the **ambient light**, the **diffuse light** and the **specular light**. Each \"light\" in opengl is in fact composed of those 3 types of lights.\n\n### Ambient light\n\nThe **ambient light** is the light of your world without any lighting. If a face of a cube is not stricken by the light rays for instance, this face will appear totally black if there is no ambient light. To make your world more realistic, it is better to have an ambient light.\nAn ambient light has then no position or direction. It is equally distributed to all the objects of your scene.\n\nHere is an example of our GAML scene using only ambient light (color red) : \n\n![resources/images/lightRecipes/ambient_light.png](resources/images/lightRecipes/ambient_light.png)\n\n### Diffuse light\n\nThe **diffuse light** can be seen as the light rays : if a face of a cube is stricken by the diffuse light, it will take the color of this diffuse light. You have to know that the more perpendicular the face of your object will be to the light ray, the more lightened the face will be.\n\nA diffuse light has then a direction. It can have also a position.\nYour have 2 categories of diffuse light : the **positional lights**, and the **directional lights**.\n\n#### Positional lights\n\nThose lights have a position in your world. It is the case of **point lights** and **spot lights**.\n\n- Point lights\n\nPoints lights can be seen as a candle in your world, diffusing the light equally in all the direction.\n\nHere is an example of our GAML scene using only diffuse light, with a point light (color red, the light source is displayed as a red sphere) : \n\n![resources/images/lightRecipes/point_light.png](resources/images/lightRecipes/point_light.png)\n\n- Spot lights\n\nSpot lights can be seen as a torch light in your world. It needs a position, and also a direction and an angle.\n\nHere is an example of our GAML scene using only diffusion light, with a spot light (color red, the light source is displayed as a red cone) : \n\n![resources/images/lightRecipes/spot_light.png](resources/images/lightRecipes/spot_light.png)\n\nPositional lights, as they have a position, can also have an attenuation according to the distance between the light source and the object. The value of positional lights are computed with the following formula :\ndiffuse_light = diffuse_light * ( 1 / (1 + constante_attenuation + linear_attenuation * d + quadratic_attenuation * d))\nBy changing those 3 values (constante_attenuation, linear_attenuation and quadratic_attenuation), you can control the way light is diffused over your world (if your world is \"foggy\" for instance, you may turn your linear and quadratic attenuation on). Note that by default, all those attenuation are equal to 0.\n\nHere is an example of our GAML scene using only diffusion light, with a point light with linear attenuation (color red, the light source is displayed as a red sphere) : \n\n![resources/images/lightRecipes/point_light_with_attenuation.png](resources/images/lightRecipes/point_light_with_attenuation.png)\n\n#### Directional lights\n\nDirectional lights have no real \"position\" : they only have a direction. A directional light will strike all the objects of your world with the same direction. An example of directional light you have in the real world would be the light of the sun : the sun is so far away from us that you can consider that the rays have the same direction and the same intensity wherever they strike.\nSince there is no position for directional lights, there is no attenuation either.\n\nHere is an example of our GAML scene using only diffusion light, with a directional light (color red) : \n\n![resources/images/lightRecipes/direction_light.png](resources/images/lightRecipes/direction_light.png)\n\n### Specular light\n\nThis is a more advanced concept, giving an aspect a little bit \"shinny\" to the objects stricken by the specular light. It is used to simulate the interaction between the light and a special material (ex : wood, steel, rubber...).\nThis specular light is not implemented yet in gama, only the two others are.\n\n## Default light\n\nIn your opengl display, without specifying any light, you will have only one light, with those following properties :\n\nThose values have been chosen in order to have the same visual effect in both opengl and java2D displays, when you display 2D objects, and also to have a nice \"3D effect\" when using the opengl displays. We chose the following setting by default : \n* The ambient light value : rgb(127,127,127,255)\n* diffuse light value : rgb(127,127,127,255)\n* type of light : direction\n* direction of the light : (0.5,0.5,-1);\n\nHere is an example of our GAML scene using the default light : \n\n![resources/images/lightRecipes/default_light.png](resources/images/lightRecipes/default_light.png)\n\n## Custom lights\n\nIn your opengl display, you can create up to 8 lights, giving them the properties you want.\n\n### Ambient light\n\nIn order to keep it simple, the ambient light can be set directly when you are declaring your display, through the facet `ambient_light`. You will have one only ambient light.\n\n```\nexperiment my_experiment type:gui {\n\toutput {\n\t\tdisplay \"my_display\" type:opengl ambient_light:100 {\n\t\t}\n\t}\n}\n```\n\n_Note for developers_ : Note that this ambient light is set to the GL_LIGHT0. This GL_LIGHT0 only contains an ambient light, and no either diffuse nor specular light.\n\n### Diffuse light\n\n[//]: # (keyword|statement_light)\nIn order to add lights, or modifying the existing lights, you can use the statement `light`, inside your `display` scope : \n\n```\nexperiment my_experiment type:gui {\n\toutput {\n\t\tdisplay \"my_display\" type:opengl {\n\t\t\tlight id:0;\n\t\t}\n\t}\n}\n```\n\nThis statement has just one non-optional facet : the facet \"id\". Through this facet, you can specify which light you want. You can control 7 lights, through an integer value between 1 and 7.\nOnce you are manipulating a light through the `light` statement, the light is turned on. To switch off the light, you have to add the facet `active`, and turn it to `false`.\nThe light you are declaring through the `light` statement is in fact a \"diffuse\" light. You can specify the color of the diffuse light through the facet `color` (by default, the color will be turn to white).\nAn other very important facet is the `type` facet. This facet accepts a value among `direction`, `point` and `spot`.\n\n#### Declaring direction light\n\nA direction light, as explained in the first part, is a light without any position. Instead of the facet `position`, you will use the facet `direction`, giving a 3D vector.\n\nExample of implementation : \n\n```\nlight id:1 type:direction direction:{1,1,1} color:rgb(255,0,0);\n```\n\n#### Declaring point light\n\nA point light will need a facet `position`, in order to give the position of the light source.\n\nExample of implementation of a basic point light : \n\n```\nlight id:1 type:point position:{10,20,10} color:rgb(255,0,0);\n```\n\nYou can add, if you want, a custom attenuation of the light, through the facets `linear_attenuation` or `quadratic_attenuation`.\n\nExample of implementation of a point light with attenuation : \n\n```\nlight id:1 type:point position:{10,20,10} color:rgb(255,0,0) linear_attenuation:0.1;\n```\n\n#### Declaring spot light\n\nA spot light will need the facet `position` (a spot light is a positionnal light) and the facet `direction`. A spot light will also need a special facet `spot_angle` to determine the angle of the spot (by default, this value is set to 45 degree).\n\nExample of implementation of a basic spot light : \n\n```\nlight id:1 type:spot position:{0,0,10} direction:{1,1,1} color:rgb(255,0,0) spot_angle:20;\n```\n\nSame as for point light, you can specify an attenuation for a spot light.\n\nExample of implementation of a spot light with attenuation : \n\n```\nlight id:1 type:spot position:{0,0,10} direction:{1,1,1} color:rgb(255,0,0) spot_angle:20;\n```\n\nNote that when you are working with lights, you can display your lights through the facet `draw light` to help you implementing your model. The three types of lights are displayed differently :\n- The **point** light is represented by a sphere with the color of the diffuse light you specified, in the position of your light source.\n- The **spot** light is represented by a cone with the color of the diffuse light you specified, in the position of your light source, the orientation of your light source. The size of the base of the cone will depend of the angle you specified.\n- The **direction** light, as it has no real position, is represented with arrows a bit above the world, with the direction of your direction light, and the color of the diffuse light you specified.\n\n![resources/images/lightRecipes/draw_light.png](resources/images/lightRecipes/draw_light.png)\n\n_Note for developers_ : Note that, since the GL_LIGHT0 is already reserved for the ambient light (only !), all the other lights (from 1 to 7) are the lights from GL_LIGHT1 to GL_LIGHT7.\n\n[//]: # (endConcept|light)","url":"wiki/ManipulateLight.md"},{"id":"wiki/ManipulateOSMDatas.md","title":" Manipulate OSM Datas","content":"[//]: # (startConcept|use_osm_datas)\n[//]: # (keyword|concept_osm)\n# Manipulate OSM Datas\n\n[//]: # (keyword|concept_load_file)\nThis section will be presented as a quick tutorial, showing how to proceed to manipulate OSM (Open street map) datas, and load them into GAMA. We will use the software [QGIS](http://www.qgis.org/en/site/) to change the attributes of the OSM file.\n\n\nFrom the website [openstreetmap.org](https://www.openstreetmap.org/), we will chose a place (in this example, we will take a neighborhood in New York City). Directly from the website, you can export the chosen area in the osm format.\n\n![images/manipulate_OSM_file_1.png](resources/images/recipes/manipulate_OSM_file_1.png)\n\nWe have now to manipulate the attributes for the exported osm file.\nSeveral software are possible to use, but we will focus on [QGIS](http://www.qgis.org/en/site/), which is totally free and provides a lot of possibilities in term of manipulation of data.\n\nOnce you have installed correctly QGIS, launch QGIS Desktop, and start to import the topology from the osm file.\n\n![images/manipulate_OSM_file_2.png](resources/images/recipes/manipulate_OSM_file_2.png)\n\n![images/manipulate_OSM_file_3.png](resources/images/recipes/manipulate_OSM_file_3.png)\n\nA message indicates that the import was successful. An output file .osm.db is created. You have now to export the topology to SpatiaLite.\n\n![images/manipulate_OSM_file_4.png](resources/images/recipes/manipulate_OSM_file_4.png)\n\nSpecify the path for your DataBase file, then choose the export type (in your case, we will choose the type \"Polygons (closed ways)\"), choose an output layer name. If you want to use the open street maps attributes values, click on \"Load from DB\", and select the attributes you want to keep. Click OK then.\n\n![images/manipulate_OSM_file_5.png](resources/images/recipes/manipulate_OSM_file_5.png)\n\nA message indicates that the export was successful, and you have now a new layer created.\n\n![images/manipulate_OSM_file_6.png](resources/images/recipes/manipulate_OSM_file_6.png)\n\nWe will now manipulate the attributes of your datafile. Right click on the layer, and select \"Open Attribute Table\".\n\n![images/manipulate_OSM_file_7.png](resources/images/recipes/manipulate_OSM_file_7.png)\n\nThe table of attribute appears. Select the little pencil on the top-left corner of the window to modify the table.\n\n![images/manipulate_OSM_file_8.png](resources/images/recipes/manipulate_OSM_file_8.png)\n\nWe will add an attribute manually. Click on the button \"new column\", choose a name and a type (we will choose the type \"text\").\n\n![images/manipulate_OSM_file_9.png](resources/images/recipes/manipulate_OSM_file_9.png)\n\nA new column appears at the end of the table. Let's fill some values (for instance blue / red). Once you finishes, click on the \"save edit\" button.\n\n![images/manipulate_OSM_file_10.png](resources/images/recipes/manipulate_OSM_file_10.png)\n\nOur file is now ready to be exported. Right click on the layer, and click on \"Save As\".\n\n![images/manipulate_OSM_file_11.png](resources/images/recipes/manipulate_OSM_file_11.png)\n\nChoose \"shapefile\" as format, choose a save path and click ok.\n\n![images/manipulate_OSM_file_12.png](resources/images/recipes/manipulate_OSM_file_12.png)\n\nCopy passed all the .shp created in the include folder of your GAMA project. You are now ready to write the model.\n\n[//]: # (keyword|concept_shapefile)\n```\nmodel HowToUseOpenStreetMap\n\nglobal {\n\t// Global variables related to the Management units\t\n\tfile shapeFile ","url":"wiki/ManipulateOSMDatas.md"},{"id":"wiki/UsingBDI.md","title":" Using BDI","content":"[//]: # (keyword|concept_bdi)\n# Using BDI\n\n## Install\nYou need to run the Git version.\n\nThe plugin need to be add with Eclipse doing the following:\n\n  * In ummisco.gama.feature.core open the feature.xml file.\n  * In plug-ins click add the msi.gaml.architecture.simplebdi\n\n## Acteur Projet\nA website (still in construction) of the ACTEUR project can be found here http://acteur-anr.fr/\n\n\n## An introduction to cognitive agent\n\nThe belief-desire-intention software model (usually referred to simply, but ambiguously, as BDI) is a software model developed for programming intelligent agents.\n\n  * **Belief**: State of the agent.\n  * **Desire**: Objectives that the agent would like to accomplish.\n  * **Intention**: What the agent has chosen to do.\n    * **Plan**: Sequences of actions that an agent can perform to achieve one or more of its intensions.\n\n## Basic Example: A fire rescue model using cognitive agent\n\nWe introduce a simple example to illustrate the use of the BDI architecture.\n\nThis simple model consists in creating \"cognitive\" agent whose goal is to extinguish a fire. In a first approximation we consider only one static water area and fire area. The aim is not to have a realistic model but to illustrate how to give a \"cognitive\" behavior to an agent using the BDI architecture.\n\nFirst let's create a BDI agent using the key control **simple\\_bdi** (A description of all existing control architectures is available [here](BuiltInArchitectures).)\n\n### Species Helicopter creation\n\n```\nspecies helicopter skills:[moving] control: simple_bdi{\n...\n}\n```\n\n#### Attributes\nThe species `helicopter` needs 2 attributes to represent the water value and its speed.\n```\nfloat waterValue;\nfloat speed 0){\n\t\tdo add_belief(water_predicate);\n\t\tdo remove_belief(no_water_predicate);\n\t}\n\tif(waterValue<=0){\n\t\tdo add_belief(no_water_predicate);\n\t\tdo remove_belief(water_predicate);\n\t}\n}\n```\nThe second perception is about the fires. Here, the fires are represented with the species **fireArea**. The helicopter has a radius of perception of 10 meters. If it perceives a fire, it will focus on the location of this fire. The **focus** tool create a belief with the same name as the focus (here, \"fireLocation\") and will store the value of the focused variable (here, the variable location from the specie fireArea) with a priority of 10 in this example. Once the fire is perceived, the helicopter removes its intention of patrolling.\n```\nperceive target:fireArea in: 10{\n\tfocus fireLocation var:location priority:10;\n\task myself{\n\t\tdo remove_intention(patrol_desire, true);\n\t}\n}\n```\n\n#### Rules\nThe agent can use rules to create desires from beliefs. In this example, the agent has two rules. The first **rule** is to have a desire corresponding to the belief of a location of a fire. It means that when the agent has the belief that there is a fire in a particular location, it will have the desire to extinguish it. This permits to have the location value in the desire base.\nThe second rule is to create the desire to have water when the agent has the belief that it not has water.\n\n```\nrule belief: new_predicate(\"fireLocation\") new_desire: get_belief_with_name(\"fireLocation\");\nrule belief: no_water_predicate new_desire: water_predicate;\n```\n\n#### Plan\n##### Patrolling\nThis plan will be used when the agent has the intention to patrol.\n```\nplan patrolling intention: patrol_desire{\n  do wander;\n}\n```\n##### stopFire\nThis plan is executed when the agent has the intention to extinguish a fire.\n```\nplan stopFire intention: new_predicate(\"fireLocation\") {\n\tpoint target_fire 0){\n\t\tif (self distance_to target_fire <= 1) {\n\t\t\tfireArea current_fire ","url":"wiki/UsingBDI.md"},{"id":"wiki/UsingDatabase.md","title":" Using Database Access","content":"[//]: # (startConcept|use_database)\n[//]: # (keyword|concept_database)\n# Using Database Access\n\nDatabase features of GAMA provide a set of actions on Database Management Systems (DBMS) and Multi-Dimensional Database for agents in GAMA. Database features are implemented in the irit.gaml.extensions.database plug-in with these features:\n  * Agents can execute SQL queries (create, Insert, select, update, drop, delete) to various kinds of DBMS.\n  * Agents can execute MDX (Multidimensional Expressions) queries to select multidimensional objects, such as cubes, and return multidimensional cellsets that contain the cube's data .\nThese features are implemented in two kinds of component: _skills_ (SQLSKILL, MDXSKILL) and agent (AgentDB)\n\nSQLSKILL and AgentDB provide almost the same features (a same set of actions on DBMS) but with certain slight differences:\n\n  * An agent of species AgentDB will maintain a unique connection to the database during the whole simulation. The connection is thus initialized when the agent is created.\n  * In contrast, an agent of a species with the SQLSKILL skill will open a connection each time he wants to execute a query. This means that each action will be composed of three running steps:\n    * Make a database connection.\n    * Execute SQL statement.\n    * Close database connection.\n> An agent with the SQLSKILL spends lot of time to create/close the connection each time it needs to send a query; it saves the database connection (DBMS often limit the number of simultaneous connections). In contrast, an AgentDB agent only needs to establish one database connection and it can be used for any actions. Because it does not need to create and close database connection for each action: therefore, actions of AgentDB agents are executed faster than actions of SQLSKILL ones but we must pay a connection for each agent.\n\n  * With an inheritance agent of species AgentDB  or an agent of a species using SQLSKILL, we can query data from relational database for creating species, defining environment or analyzing or storing simulation results into RDBMS. On the other hand, an agent of species with MDXKILL supports the OLAP technology to query data from data marts (multidimensional database).\nThe database features help us to have more flexibility in management of simulation models and analysis of simulation results.\n\n\n\n\n\n\n\n\n## Description\n\n  * **Plug-in**: _irit.gaml.extensions.database_\n  * **Author**: TRUONG Minh Thai, Frederic AMBLARD, Benoit GAUDOU, Christophe SIBERTIN-BLANC\n\n\n\n\n## Supported DBMS\n\nThe following DBMS are currently supported:\n  * SQLite\n  * MySQL Server\n  * PostgreSQL Server\n  * SQL Server\n  * Mondrian OLAP Server\n  * SQL Server Analysis Services\n\nNote that, other DBMSs require a dedicated server to work while SQLite on only needs a file to be accessed.\nAll the actions can be used independently from the chosen DBMS. Only the connection parameters are DBMS-dependent.\n\n\n\n\n## SQLSKILL\n### Define a species that uses the SQLSKILL skill\n\nExample of declaration:\n\n```\nspecies toto skills: [SQLSKILL] {\n\t//insert your descriptions here\n}\n```\n\nAgents with such a skill can use additional actions (defined in the skill)\n\n### Map of connection parameters for SQL\n\nIn the actions defined in the SQLSkill, a parameter containing the connection parameters is required. It is a map with the following _key::value_ pairs:\n\n| **Key** | **Optional** | **Description** |\n|:-------|:--------|:--------------------------------------------------------|\n| _dbtype_ | No | DBMS type value. Its value is a string. We must use \"mysql\" when we want to connect to a MySQL. That is the same for \"postgres\", \"sqlite\" or \"sqlserver\" (ignore case sensitive) |\n| _host_  | Yes | Host name or IP address of data server. It is absent when we work with SQlite. |\n| _port_  | Yes | Port of connection. It is not required when we work with SQLite.|\n| _database_ | No | Name of database. It is the file name including the path when we work with SQLite. |\n| _user_  | Yes | Username. It is not required when we work with SQLite. |\n| _passwd_ | Yes | Password. It is not required when we work with SQLite. |\n| srid    | Yes | srid (Spatial Reference Identifier)  corresponds to a spatial reference system. This value is specified when GAMA connects to spatial database. If it is absent then GAMA uses spatial reference system defined in _Preferences->External_ configuration. |\n**Table 1**: Connection parameter description\n\n\n**Example**: Definitions of connection parameter\n\n```\n// POSTGRES connection parameter\nmap   POSTGRES   SQLITE  SQLSERVER   MySQL  _**testConnection** (params: connection`_`parameter)_\nThe action tests the connection to a given database.\n  * **Return**: boolean. It is:\n    * _true_: the agent can connect to the DBMS (to the given Database with given name and password)\n    * _false_: the agent cannot connect\n  * **Arguments**:\n    * _params_: (type = map) map of connection parameters\n  * **Exceptions**: _GamaRuntimeException_\n\n**Example**: Check a connection to MySQL\n\n```\nif (self testConnection(params:MySQL)){\n\twrite \"Connection is OK\" ;\n}else{\n\twrite \"Connection is false\" ;\n}\t\n\n```\n\n### Select data from database\n**Syntax**:\n> _**select** (param: connection`_`parameter, select: selection`_`string,values: value`_`list)_\nThe action creates a connection to a DBMS and executes the select statement. If the connection or selection fails then it throws a GamaRuntimeException.\n  * **Return**: list < list >. If the selection succeeds, it returns a list with three elements:\n    * The first element is a list of column name.\n    * The second element is a list of column type.\n    * The third element is a data set.\n  * **Arguments**:\n    * _params_: (type = map) map containing the connection parameters\n    * _select_: (type = string) select string. The selection string can contain question marks.\n    * _values_: List of values that are used to replace question marks in appropriate. This is an optional parameter.\n  * **Exceptions**: _GamaRuntimeException_\n\n**Example**: select data from table points\n\n```\nmap    PARAMS  t  (self select(params:PARAMS, \n\t\t                 select:\"SELECT * FROM points ;\"));\n```\n\n**Example**: select data from table point with question marks from table points\n\n```\nmap    PARAMS  t  (self select(params: PARAMS, \n                                           select: \"SELECT temp_min FROM points where (day>? and day);\"\n                                           values: [10,20] ));\n```\n\n### Insert data into database\n**Syntax**:\n> _**insert** (param: connection`_`parameter,  into:  table`_`name, columns: column`_`list, values: value`_list)_The action creates a connection to a DBMS and executes the insert statement. If the connection or insertion fails then it throws a_GamaRuntimeException_.\n  * **Return**: int\n> If the insertion succeeds, it returns a number of records inserted by the insert.\n  * **Arguments**:\n    *_params_: (type = map) map containing the connection parameters.\n    *_into_: (type = string) table name.\n    *_columns_: (type=list)  list of column names of table. It is an optional argument. If it is not applicable then all columns of table are selected.\n    *_values_: (type=list) list of values that are used to insert into table corresponding to columns. Hence the columns and values must have same size.\n  * **Exceptions**:_GamaRuntimeException\n\n**Example**: Insert data into table registration\n\n```\nmap PARAMS  _**executeUpdate** (param: connection`_`parameter,  updateComm:  table`_`name, values: value`_`list)_\nThe action executeUpdate executes an update command (create/insert/delete/drop) by using the current database connection of the agent. If the database connection does not exist or the update command fails then it throws a GamaRuntimeException. Otherwise it returns an integer value.\n  * **Return**: int. If the insertion succeeds, it returns a number of records inserted by the insert.\n  * **Arguments**:\n    * _params_: (type = map) map containing the connection parameters\n    * _updateComm_: (type = string) SQL command string. It may be commands: _create_, _update_, _delete_ and _drop_ with or without question marks.\n    * _columns_: (type=list)  list of column names of table.\n    * _values_: (type=list) list of values that are used to replace question marks if appropriate. This is an optional parameter.\n  * **Exceptions**: _GamaRuntimeException_\n\n**Examples**: Using action executeUpdate do sql commands (create, insert, update, delete and drop).\n\n```\nmap PARAMS  SSAS   MONDRIANXMLA   MONDRIAN  _**testConnection** (params: connection`_`parameter)_\nThe action tests the connection to a given OLAP database.\n  * **Return**: boolean.  It is:\n    * _true_: the agent can connect to the DBMS (to the given Database with given name and password)\n    * _false_: the agent cannot connect\n  * **Arguments**:\n    * _params_: (type = map) map of connection parameters\n  * **Exceptions**: _GamaRuntimeException_\n\n**Example**: Check a connection to MySQL\n\n```\nif (self testConnection(params:MONDIRANXMLA)){\n\twrite \"Connection is OK\";\n}else{\n\twrite \"Connection is false\";\n}\t\n```\n\n### Select data from OLAP database\n**Syntax**:\n> _**select** (param: connection`_`parameter, onColumns: column`_`string, onRows: row`_`string from: cube`_`string, where: condition`_`string, values: value`_`list)_\nThe action creates a connection to an OLAP database and executes the select statement. If the connection or selection fails then it throws a _GamaRuntimeException_.\n  * **Return**: list < list >.  If the selection succeeds, it returns a list with three elements:\n    * The first element is a list of column name.\n    * The second element is a list of column type.\n    * The third element is a data set.\n  * **Arguments**:\n    * _params_: (type = map) map containing the connection parameters\n    * _onColumns_: (type = string) declare  the select string on columns. The selection string can contain question marks.\n    * _onRows_: (type = string) declare the selection string on rows. The selection string can contain question marks.\n    * _from_: (type = string) specify cube where data is selected. The cube\\_string can contain question marks.\n    * where_: (type = string) specify the selection conditions. The condiction\\_string can contains question marks. This is an optional parameter.\n    *_values_: List of values that are used to replace question marks if appropriate. This is an optional parameter.\n  * **Exceptions**:_GamaRuntimeException\n\n**Example**: select data from SQL Server Analysis Service via XMLA\n\n```\nif (self testConnection[ params::SSAS]){\n\tlist l1   l2   (self select(params: MONDRIANXMLA, \n\tonColumns:\" {[Measures].[Unit Sales], [Measures].[Store Cost], [Measures].[Store Sales]} \",\n\tonRows:\"  Hierarchize(Union(Union(Union({([Promotion Media].[All Media],\"\n \t+\" [Product].[All Products])}, \"\n\t+\" Crossjoin([Promotion Media].[All Media].Children, \"\n\t+\" {[Product].[All Products]})), \"\n\t+\" Crossjoin({[Promotion Media].[Daily Paper, Radio, TV]}, \"\n\t+\" [Product].[All Products].Children)), \"\n\t+\" Crossjoin({[Promotion Media].[Street Handout]}, \" \n\t+\" [Product].[All Products].Children)))  \",\n\tfrom:\" from [?] \" ,\n\twhere :\" where [Time].[?] \" ,\n\tvalues:[\"Sales\",1997]));\n\twrite \"result2:\"+ l2;\n}else {\n\twrite \"Connect error\";\n}\n```\n\n\n\n\n## AgentDB\n\nAgentBD is a built-in species, which supports behaviors that look like actions in SQLSKILL but differs slightly with SQLSKILL in that it uses  only one connection for several actions. It means that AgentDB makes a connection to DBMS and keeps that connection for its later operations with DBMS.\n### Define a species that is an inheritance of agentDB\nExample of declaration:\n\n```\nspecies agentDB parent: AgentDB {  \n\t//insert your descriptions here\n} \n```\n\n### Connect to database\n\n**Syntax**:\n\n> _**Connect** (param: connection`_`parameter)_\nThis action makes a connection to DBMS. If a connection is established then it will assign the connection object into a built-in attribute of species (conn) otherwise it throws a GamaRuntimeException.\n  * **Return**: connection\n  * **Arguments**:\n    * _params_: (type = map) map containing the connection parameters\n  * **Exceptions**: GamaRuntimeException\n**Example**: Connect to PostgreSQL\n\n```\n// POSTGRES connection parameter\nmap   POSTGRES  _**isConnected** (param: connection`_`parameter)_\nThis action checks if an agent is connecting to database or not.\n  * **Return**: Boolean.   If agent is connecting to a database then isConnected returns true; otherwise it returns false.\n  * **Arguments**:\n    * _params_: (type = map) map containing the connection parameters\n\n**Example**: Using action executeUpdate do sql commands (create, insert, update, delete and drop).\n\n```\nask agentDB {\n\tif (self isConnected){\n              write \"It already has a connection\";\n\t}else{\n              do connect (params: POSTGRES);\n        } \n}\n```\n\n### Close the current connection\n\n**Syntax**:\n\n> _**close**_\nThis action closes the current database connection of species. If species does not has a database connection then it throws a GamaRuntimeException.\n  * **Return**: null\nIf the current connection of species is close then the action return null value; otherwise it throws a GamaRuntimeException.\n\n**Example**:\n\n```\nask agentDB {\n\tif (self isConnected){\n\t      do close;\n\t}\n}\n```\n\n### Get connection parameter\n\n**Syntax**:\n\n> _**getParameter**_\nThis action returns the connection parameter of species.\n  * **Return**: map < string, string >\n\n**Example**:\n\n```\nask agentDB {\n\tif (self isConnected){\n\t\twrite \"the connection parameter: \" +(self getParameter);\n        }\n}\n```\n\n### Set connection parameter\n\n**Syntax**:\n\n> _**setParameter** (param: connection`_`parameter)_\nThis action sets the new values for connection parameter and closes the current connection of species. If it can not close the current connection then it will throw GamaRuntimeException. If the species wants to make the connection to database with the new values then action connect must be called.\n  * **Return**: null\n  * **Arguments**:\n    * _params_: (type = map) map containing the connection parameters\n  * **Exceptions**: _GamaRuntimeException_\n\n**Example**:\n\n```\nask agentDB {\n\tif (self isConnected){\n             do setParameter(params: MySQL);\n             do connect(params: (self getParameter));\n        }\n}\n```\n\n### Retrieve data from database by using AgentDB\nBecause of the connection to database of AgentDB is kept alive then AgentDB can execute several SQL queries with only one connection. Hence AgentDB can do actions such as **select**, **insert**, **executeUpdate** with the same parameters of those actions of SQLSKILL _except **params** parameter is always absent_.\n\n**Examples**:\n\n```\nmap PARAMS  t  (self select( \n\t select:\"SELECT * FROM registration;\"));\n    //update \n    int n External configuration. |\n| _select_ | No |Selection string |\n\n**Table 3**: Select boundary parameter description\n\n**Example**:\n\n```\nmap BOUNDS   PARAMS  PARAMS ","url":"wiki/UsingDatabase.md"},{"id":"wiki/UsingDrivingSkill.md","title":" Advanced Driving Skill","content":"# Advanced Driving Skill\n[//]: # (keyword|concept_transport)\n[//]: # (keyword|concept_skill)\n[//]: # (keyword|skill_driving)\n\n\nThis page aims at presenting how to use the advanced driving skill in models.\n\nThe use of the advanced driving skill requires to use 3 skills:\n  * **Advanced driving skill**: dedicated to the definition of the driver species. It provides the driver agents with variables and actions allowing to move an agent on a graph network and to tune its behavior.\n  * **Road skill**: dedicated to the definition of roads. It provides the road agents with variables and actions allowing to registers agents on the road.\n  * **RoadNode skill**: dedicated to the definition of node. It provides the node agents with variables allowing to take into account the intersection of roads and the traffic signals.\n\n## Table of contents \n\n* [Advanced Driving Skill](#advanced-driving-skill)\n\t* [Structure of the network: road and roadNode skills](#structure-of-the-network-road-and-roadnode-skills)\n\t* [Advanced driving skill](#advanced-driving-skill)\n\t* [Application example](#application-example)\n\n\n## Structure of the network: road and roadNode skills\nThe advanced driving skill is versatile enough to be usable with most of classic road GIS data, in particular OSM data. We use a classic format for the roads and nodes. Each road is a polyline composed of road sections (segments). Each road has a target node and a source node. Each node knows all its input and output roads. A road is considered as directed. For bidirectional roads, 2 roads have to be defined corresponding to both directions. Each road will be the **linked\\_road** of the other. Note that for some GIS data, only one road is defined for bidirectional roads, and the nodes are not explicitly defined. In this case, it is very easy, using the GAML language, to create the reverse roads and the corresponding nodes (it only requires few lines of GAML).\n\n\n[images/roads_structure.PNG](resources/images/recipes/roads_structure.PNG) \n\nA lane can be composed of several lanes and the vehicles will be able to change at any time its lane. Another property of the road that will be taken into account is the maximal authorized speed on it. Note that even if the user of the plug-in has no information about these values for some of the roads (the OSM data are often incomplete), it is very easy using the GAML language to fill the missing value by a default value. It is also possible to change these values dynamically during the simulation (for example, to take into account that after an accident, a lane of a road is closed or that the speed of a road is decreased by the authorities).\n\n\n[images/roads.PNG](resources/images/recipes/roads.PNG) \n\nThe **road skill** provides the road agents with several variables that will define the road properties:\n  * **lanes**: integer, number of lanes.\n  * **maxspeed**: float; maximal authorized speed on the road.\n  * **linked\\_road**: road agent; reverse road (if there is one).\n  * **source\\_node**: node agent; source node of the road.\n  * **target\\_node**: node agent; target node of the road.\n\n\nIt provides as well the road agents with one read only variable:\n  * **agents\\_on**: list of list (of driver agents); for each lane, the list of driver agents on the road.\n\n\nThe\\*roadNode skill**provides the road agents with several variables that will define the road properties:\n  ***roads\\_in**: list of road agents; the list of road agents that have this node for target node.\n  ***roads\\_out**: list of road agents; the list of road agents that have this node for source node.\n  ***stop**: list of list of road agents; list of stop signals, and for each stop signal, the list of concerned roads.**\n\n\nIt provides as well the road agents with one read only variable:\n\n  * **block**: map: key: driver agent, value: list of road agents; the list of driver agents blocking the node, and for each agent, the list of concerned roads.\n\n\n## Advanced driving skill\nEach driver agent has a planned trajectory that consists in a succession of edges. When the driver agent enters a new edge, it first chooses its lane according to the traffic density, with a bias for the rightmost lane. The movement on an edge is inspired by the Intelligent Driver Model. The drivers have the possibility to change their lane at any time (and not only when entering a new edge).\n\nThe **advanced driving skill** provides the driver agents with several variables that will define the car properties and the personality of the driver:\n  * **final\\_target**: point; final location that the agent wants to reach (its goal).\n  * **vehicle\\_length**: float; length of the vehicle.\n  * **max\\_acceleration**: float; maximal acceleration of the vehicle.\n  * **max\\_speed**: float; maximal speed of the vehicle.\n  * **right\\_side\\_driving**: boolean; do drivers drive on the right side of the road?\n  * **speed\\_coef**: float; coefficient that defines if the driver will try to drive above or below the speed limits.\n  * **security\\_distance\\_coeff**: float; coefficient for the security distance. The security distance will depend on the driver speed and on this coefficient.\n  * **proba\\_lane\\_change\\_up**: float; probability to change lane to a upper lane if necessary (and if possible).\n  * **proba\\_lane\\_change\\_down**: float; probability to change lane to a lower lane if necessary (and if possible).\n  * **proba\\_use\\_linked\\_road**: float; probability to take the reverse road if necessary (if there is a reverse road).\n  * **proba\\_respect\\_priorities**: float; probability to respect left/right (according to the driving side) priority at intersections.\n  * **proba\\_respect\\_stops**: list of float; probabilities to respect each type of stop signals (traffic light, stop sign...).\n  * **proba\\_block\\_node**: float; probability to accept to block the intersecting roads to enter a new road.\n\n\nIt provides as well the driver agents with several read only variables:\n\n  * **speed**: float; speed expected according to the road **max\\_value**, the car properties, the personality of the driver and its **real\\_speed**.\n  * **real\\_speed**: float; real speed of the car (that takes into account the other drivers and the traffic signals).\n  * **current\\_path**: path (list of roads to follow); the path that the agent is currently following.\n  * **current\\_target**: point; the next target to reach (sub-goal). It corresponds to a node.\n  * **targets**: list of points; list of locations (sub-goals) to reach the final target.\n  * **current\\_index**: integer; the index of the current goal the agent has to reach.\n  * **on\\_linked\\_road**: boolean; is the agent on the linked road?\n\n\nOf course, the values of these variables can be modified at any time during the simulation. For example, the probability to take a reverse road (**proba\\_use\\_linked\\_road**) can be increased if the driver is stucked for several minutes behind a slow vehicle.\n\nIn addition, the advanced driving skill provides the driver agents with several actions:\n  * **compute\\_path**: arguments: a graph and a target node. This action computes from a graph the shortest path to reach a given node.\n  * **drive**: no argument. This action moves the driver on its current path according to the traffic condition and the driver properties (vehicle properties and driver personality).\n\n\nthe **drive** action works as follow: while the agent has the time to move (**remaining\\_time > 0**), it first defines the speed expected. This speed is computed from the **max\\_speed** of the road, the current **real\\_speed**, the **max\\_speed**, the **max\\_acceleration** and the **speed\\_coef** of the driver (see Equation 1).\n```\n\nspeed_driver = Min(max_speed_driver, Min(real_speed_driver + max_acceleration_driver,max_speed_road * speed_coef_driver))\n\n```\n\nThen, the agent moves toward the current target and compute the remaining time. During the movement, the agents can change lanes (see below). If the agent reaches its final target, it stops; if it reaches its current target (that is not the final target), it tests if it can cross the intersection to reach the next road of the current path. If it is possible, it defines its new target (target node of the next road) and continues to move.\n\n\n[images/drive_action.png](resources/images/recipes/drive_action.png) \n\nThe function that defines if the agent crosses or not the intersection to continue to move works as follow: first, it tests if the road is blocked by a driver at the intersection (if the road is blocked, the agent does not cross the intersection). Then, if there is at least one stop signal at the intersection (traffic signal, stop sign...), for each of these signals, the agent tests its probability to respect or not the signal (note that the agent has a specific probability to respect each type of signals). If there is no stopping signal or if the agent does not respect it, the agent checks if there is at least one vehicle coming from a right (or left if the agent drives on the left side) road at a distance lower than its security distance. If there is one, it tests its probability to respect this priority. If there is no vehicle from the right roads or if it chooses to do not respect the right priority, it tests if it is possible to cross the intersection to its target road without blocking the intersection (i.e. if there is enough space in the target road). If it can cross the intersection, it crosses it; otherwise, it tests its probability to block the node: if the agent decides nevertheless to cross the intersection, then the perpendicular roads will be blocked at the intersection level (these roads will be unblocked when the agent is going to move).\n\n\n\n[images/stop_at_intersection.png](resources/images/recipes/stop_at_intersection.png) \n\n\nConcerning the movement of the driver agents on the current road, the agent moves from a section of the road (i.e. segment composing the polyline) to another section according to the maximal distance that the agent can moves (that will depend on the remaining time). For each road section, the agent first computes the maximal distance it can travel according the remaining time and its speed. Then, the agent computes its security distance according to its speed and its **security\\_distance\\_coeff**. While its remaining distance is not null, the agent computes the maximal distance it can travel (and the corresponding lane), then it moves according to this distance (and update its current lane if necessary). If the agent is not blocked by another vehicle and can reach the end of the road section, it updates its current road section and continues to move.\n\n\n[images/follow_driving.png](resources/images/recipes/follow_driving.png) \n\nThe computation of the maximal distance an agent can move on a road section consists in computing for each possible lane the maximal distance the agent can move. First, if there is a lower lane, the agent tests the probability to change its lane to a lower one. If it decides to test the lower lane, the agent computes the distance to the next vehicle on this lane and memorizes it. If this distance corresponds to the maximal distance it can travel, it chooses this lane; otherwise it computes the distance to the next vehicle on its current lane and memorizes it if it is higher than the current memorized maximal distance. Then if the memorized distance is lower than the maximal distance the agent can travel and if there is an upper lane, the agents tests the probability to change its lane to a upper one. If it decides to test the upper lane, the agent computes the distance to the next vehicle on this lane and memorizes it if it is higher than the current memorized maximal distance. At last, if the memorized distance is still lower than the maximal distance it can travel, if the agent is on the highest lane and if there is a reverse road, the agent tests the probability to use the reverse road (linked road). If it decides to use the reverse road, the agent computes the distance to the next vehicle on the lane 0 of this road and memorizes the distance if it is higher than the current memorized maximal distance.\n\n\n[images/define_max_dist.png](resources/images/recipes/define_max_dist.png) \n\n## Application example\n\n\nWe propose a simple model to illustrate the driving skill. We define a driver species. When a driver agent reaches its destination, it just chooses a new random final target. In the same way, we did not define any specific behavior to avoid traffic jam for the driver agents: once they compute their path (all the driver agents use for that the same road graph with the same weights), they never re-compute it even if they are stucked in a traffic jam. Concerning the traffic signals, we just consider the traffic lights (without any pre-processing: we consider the raw OSM data). One step of the simulation represents 1 second. At last, in order to clarify the explanation of the model, we chose to do not present the parts of the GAML code that concern the simulation visualization.\n\n\n\n[images//sim_snapshot.png](resources/images/recipes/sim_snapshot.png) \n\nThe following code shows the definition of species to represent the road infrastructure:\n```\nspecies road skills: [skill_road] { \n  string oneway;\n}\n\nspecies node skills: [skill_road_node] {\n  bool is_traffic_signal;\n  int time_to_change = time_to_change) { \n      counter ","url":"wiki/UsingDrivingSkill.md"},{"id":"wiki/UsingFIPAACL.md","title":" Using FIPA ACL","content":"[//]: # (keyword|concept_fipa)\n[//]: # (startConcept|fipa_acl)\n# Using FIPA ACL\n\n\nThe communicating skill offers some actions and built-in variables which enable agents to communicate with each other using the FIPA interaction protocol. This document describes the built-in variables and actions of this skill. Examples are found in the models library bundled with GAMA.\n\n##Variables\n\n* **accept_proposals (list)**: A list of 'accept_proposal' performative messages of the agent's mailbox having .\n* **agrees (list)**: A list of 'accept_proposal' performative messages.\n* **cancels (list)**: A list of 'cancel' performative messages.\n* **cfps (list)**: A list of 'cfp' (call for proposal) performative messages.\n* **conversations (list)**: A list containing the current conversations of agent. Ended conversations are automatically removed from this list.\n* **failures (list)**: A list of 'failure' performative messages.\n* **informs (list)**: A list of 'inform' performative messages.\n* **messages (list)**: The mailbox of the agent, a list of messages of all types of performatives.\n* **proposes (list)**: A list of 'propose' performative messages .\n* **queries (list)**: A list of 'query' performative messages.\n* **refuses (list)**: A list of 'propose' performative messages.\n* **reject_proposals (list)**: A list of 'reject_proposals' performative messages.\n* **requests (list)**: A list of 'request' performative messages.\n* **requestWhens (list)**: A list of 'request-when' performative messages.\n* **subscribes (list)**: A list of 'subscribe' performative messages.\n\n### Actions\n####accept_proposal\nReplies a message with an 'accept_proposal' performative message\n* returns: unknown\n* message (message): The message to be replied\n* content (list): The content of the replying message\n\n####agree\nReplies a message with an 'agree' performative message.\n* returns: unknown\n* message (message): The message to be replied\n* content (list): The content of the replying message\n\n####cancel\nReplies a message with a 'cancel' peformative message.\n* returns: unknown\n* message (message): The message to be replied\n* content (list): The content of the replying message\n\n####cfp\nReplies a message with a 'cfp' performative message.\n* returns: unknown\n* message (message): The message to be replied\n* content (list): The content of the replying message\n\n####end_conversation\nReplies a message with an 'end_conversation' peprformative message. This message marks the end of a conversation. In a 'no-protocol' conversation, it is the responsible of the modeler to explicitly send this message to mark the end of a conversation/interaction protocol.\n* returns: unknown\n* message (message): The message to be replied\n* content (list): The content of the replying message\n\n####failure\nReplies a message with a 'failure' performative message.\n* returns: unknown\n* message (message): The message to be replied\n* content (list): The content of the replying message\n\n####inform\nReplies a message with an 'inform' performative message.\n* returns: unknown\n* message (message): The message to be replied\n* content (list): The content of the replying message\n\n####propose\nReplies a message with a 'propose' performative message.\n* returns: unknown\n* message (message): The message to be replied\n* content (list): The content of the replying message\n\n####query\nReplies a message with a 'query' performative message.\n* returns: unknown\n* message (message): The message to be replied\n* content (list): The content of the replying message\n\n####refuse\nReplies a message with a 'refuse' performative message.\n* returns: unknown\n* message (message): The message to be replied\n* content (list): The content of the replying message\n\n####reject_proposal\nReplies a message with a 'reject_proposal' performative message.\n* returns: unknown\n* message (message): The message to be replied\n* content (list): The content of the replying message\n\n####reply\nReplies a message. This action should be only used to reply a message in a 'no-protocol' conversation and with a 'user defined performative'. For performatives supported by GAMA (i.e., standard FIPA performatives), please use the 'action' with the same name of 'performative'. For example, to reply a message with a 'request' performative message, the modeller should use the 'request' action.\n* returns: unknown\n* message (message): The message to be replied\n* performative (string): The performative of the replying message\n* content (list): The content of the replying message\n\n####request\nReplies a message with a 'request' performative message.\n* returns: unknown\n* message (message): The message to be replied\n* content (list): The content of the replying message\n\n####send\nStarts a conversation/interaction protocol.\n* returns: msi.gaml.extensions.fipa.Message\n* receivers (list): A list of receiver agents\n* content (list): The content of the message. A list of any GAML type\n* performative (string): A string, representing the message performative\n* protocol (string): A string representing the name of interaction protocol\n\n####start_conversation\nStarts a conversation/interaction protocol.\n* returns: msi.gaml.extensions.fipa.Message\n* receivers (list): A list of receiver agents\n* content (list): The content of the message. A list of any GAML type\n* performative (string): A string, representing the message performative\n* protocol (string): A string representing the name of interaction protocol\n\n####subscribe\nReplies a message with a 'subscribe' performative message.\n* returns: unknown\n* message (message): The message to be replied\n* content (list): The content of the replying message\n\n[//]: # (endConcept|fipa_acl)","url":"wiki/UsingFIPAACL.md"},{"id":"wiki/IncrementalModel_step1.md","title":" 1. Simple SI Model","content":"# 1. Simple SI Model\nThis first step Illustrates how to write a model in GAMA. In particular, it describes how to structure a model and how to define species - that are the key components of GAMA models.\n\n\n\n\n\n\n## Formulation\n  * Definition of the **people** species with a variable (is\\_infected) , an aspect (base) and two behaviors (move and infect)\n  * Definition of **nb\\_infected\\_init**, **distance\\_infection** and **proba\\_infection** parameters\n  * Creation of **500** **people** agents randomly located in the environment (size: 500x500)\n  * Definition a display to visualize the people agents.\n\n![images/Incremental_model1.jpg](resources/images/tutorials/Incremental_model1.jpg)\n\n\n\n\n\n## Model Definition\n\n### model structure\nA GAMA model is composed of three type of sections:\n  * **global** : this section, that is unique, defines the \"world\" agent, a special agent of a GAMA model. It represents all that is global to the model: dynamics, variables, actions. In addition, it allows to initialize the simulation (init block).\n  * **species** : these sections define the species of agents composing the model.\n  * **experiment** : these sections define a context of execution of the simulations. In particular, it defines the input (parameters) and output (displays, files...) of a model.\n\nMore details about the different sections of a GAMA model can be found [here](ModelOrganization).\n\n### species\nA [species](RegularSpecies) represents a «prototype» of agents: it defines their common properties.\n\nA species includes several sub-definitions:\n  * the internal state of its agents (attributes)\n  * their behavior\n  * how they are displayed (aspects)\n\nGAMA provides as well the possibility to give **skills** to species of agents. A skillI is a module integrating variables and actions coded in Java.\n\nConcerning our model, we will give the **moving** skill to the **people** agents: it will give to the people agents supplementary variables (speed, heading, destination) and actions (follow, goto, move, wander).\n\n```\nspecies people skills:[moving]{\n}\n```\n\nConcerning the internal state, a [attribute](RegularSpecies#declaration) is defined as follows: type of the attribute (int (integer), float (floating point number), string, bool (boolean, true or false), point (coordinates), list, pair, map, file, matrix, espèce d’agents, rgb (color), graph, path...) + name\n  * Optional facets:  In addition we ask **nb\\_infected\\_init** people to become infected (use of the **nb among list** to randomly draw nb elements of the list).\n```\nglobal{ \n\t...\n\tinit{\n\t\tcreate people number:nb_people {\n\t\t\tspeed ","url":"wiki/IncrementalModel_step1.md"},{"id":"wiki/IncrementalModel_step2.md","title":" 2. Charts","content":"# 2. Charts\nThis step Illustrates how define monitors and charts in GAMA. In addition, it illustrates how to define a stopping condition for the simulation.\n\n\n\n\n\n\n\n## Formulation\n  * Definition of new global variables: current\\_hour, nb\\_people\\_infected, nb\\_people\\_not\\_infected, infected\\_rate\n  * Definition of a monitor to follow the current hour and the nb of people infected\n  * Definition of a series chart to follow the number of people infected and not infected\n  * Definition of a stopping condition (when infected rate = 1)\n\n![images/Incremental_model2.jpg](resources/images/tutorials/Incremental_model2.jpg)\n\n\n\n\n\n## Model Definition\n\n### global variables\nIn order to define dynamic variable able to update itself, we use the **update** facet of variable definition.\nIndeed, at each simulation step, all the agents (and the world agent) apply for each dynamic variable (in their definition order) its update expression.\nWe define 4 new variables:\n  * **current hour** (int) : current simulation step (**cycle**) / 60 mod 24\n  * **nb\\_people\\_infected** (int): nb of people with is\\_infected = true (use of the **list count condition** operator that count the number of elements of the list for which the condition is true)\n  * **nb\\_people\\_not\\_infected** (int): nb\\_people - nb of people infected\n  * **infected\\_rate** (float): nb of people infected / nb of people\n```\nglobal{\n\t...\n        int current_hour update: (cycle / 60) mod 24;\n\tint nb_people_infected ","url":"wiki/IncrementalModel_step2.md"},{"id":"wiki/IncrementalModel_step3.md","title":" 3. Integration of GIS Data","content":"# 3. Integration of GIS Data\nThis step Illustrates how load and agentry GIS data.\n\n\n\n\n\n\n\n## Formulation\n  * Load, agentify and display two layers of GIS data (building and road)\n  * Modify the initialization of the people agents to put them inside buildings\n\n![resources/images/tutorials/Incremental_model3.jpg](resources/images/tutorials/Incremental_model3.jpg)\n\n\n\n\n\n## Model Definition\n\n### species\nWe have to define two species of agents: the **building** agents and the **road** ones. These agents will not have a particular behavior, they will just be displayed.\nWe define an aspect for these species. In this model, we want to represent the geometry of the agent, we then use the keyword **draw** that allow to draw a given geometry. In order to draw the geometry of the agent we use the attribute **shape** (which is a built-in attribute of all agents).\n\n```\nspecies building {\n\taspect geom {\n\t\tdraw shape color: #gray;\n\t}\n}\n\nspecies road {\n\taspect geom {\n\t\tdraw shape color: #black;\n\t}\n}\n```\n\n\n### parameters\nGAMA allows to automatically read GIS data that are formatted as shapefiles. In order to let the user chooses his/her shapefiles, we define two parameters. One allowing the user to choose the road shapefile, one allowing him/her to choose the building shapefile.\n\nDefinition of the two global variables of type _file_ concerning the GIS files:\n```\nglobal {\n   file shape_file_buildings ","url":"wiki/IncrementalModel_step3.md"},{"id":"wiki/IncrementalModel_step4.md","title":" 4. Movement on Graph","content":"# 4. Movement on Graph\nThis step illustrates how load a graph and use it for the displacement of our species.\n\n\n\n\n\n\n\n## Formulation\n  * definition of a global graph to represent the road network\n  * definition of a new global variable: **staying\\_coeff** to represent the fact that people move more near 9h, 12h and 18h\n  * definition of two new variables for the people agents: **target** and **staying\\_counter**\n  * definition of a new reflex for people agents: **stay**\n  * modification of the **move** reflex of the people agents\n\n![images/Incremental_model4.jpg](resources/images/tutorials/Incremental_model4.jpg)\n\n\n\n\n\n## Model Definition\n\n### global variables\nWe define two new global variables:\n  * **road\\_network** (graph) : represents the graph that will be built from the road network\n  * **staying\\_coeff** (float) : represents the fact that people have more chance to move from their current building near 9h (go to work), 12h (lunch time) and 18h (go home). This variable is updated at each simulation step (use of the **update** facet).\n\n```\n global{\n\t....\n        graph road_network;\n\tfloat staying_coeff update: 10.0 ^ (1 + min([abs(current_hour - 9), abs(current_hour - 12), \nabs(current_hour - 18)]));\n\t....\n}\n```\n\n### initialization\nWe need to compute from the **road** agents, a graph for the moving of the **people** agents. The operator **as\\_edge\\_graph** allows to do that. It automatically builds from a set of agents or geometries a graph where the agents are the edges of the graph, a node represent the extremities of the agent geometry. The weight of each edge corresponds to the length of the road.\n```\nglobal {\n   ...\n   init {\n      ...\n      create road from: roads_shapefile;\n      road_network ","url":"wiki/IncrementalModel_step4.md"},{"id":"wiki/IncrementalModel_step5.md","title":" 5. Visualizing in 3D","content":"# 5. Visualizing in 3D\nThis step Illustrates how to define a 3D display\n\n\n\n\n\n\n\n## Formulation\n  * add a variable (height: int from 10m to 20m) and modify the aspect of buildings to display them in 3D\n  * add a variable (display\\_shape: geometry; shape with a buffer of 2m) and modify the aspect of the roads to display them with this new shape.\n  * add a new global variable that indicate if it is night or not (bool: night before 7h and after 20h).\n  * define a new aspect (sphere3D) for people to display them as sphere.\n  * modify the display to use this new aspect.\n\n![images/Incremental_model5.jpg](resources/images/tutorials/Incremental_model5.jpg)\n\n\n\n\n\n## Model Definition\n\n### building\nFirst, we add a new variable for buildings (**height**) of type float from 10m to 20m. Then we modify the aspect in order to specify a depth for the geometry (using the **depth** facet).\n```\nspecies building {\n\tfloat height  20;\n       ...\n}\n```\n\n### people\nWe define a new aspect for the people agent called **sphere3D**. This aspect draw people agent as a 3m sphere. In order to avoid to cut the sphere in half, we translate the centroid of the drawn sphere to 3m along the z axis.\n```\nspecies people skills:[moving]{\t\t\n\t...\n\taspect sphere3D{\n\t\tdraw sphere(3) at: {location.x,location.y,location.z + 3} color:is_infected ? #red : #green;\n\t}\n}\n```\n\n### display\nThe element that we have to modify is the display. We change its name to **map\\_3D** to better reflect its visual aspect.\n\nIn order to get a 3D aspect, we specify that this display will be an opengl one. For that, we just have to add the facet **type: opengl**. In addition, to get a different light between night and day : \nThe statement `light` allows us to declare a light. We can change up to 7 lights, called through the facet \"id\". The default light is a white light, directional, with the id=1. You can set the intensity of the light through the facet \"color\" (you can pass a color, or an integer between 0 and 255). To have a nice effect night / day, we will set the intensity of the light to 50 during the night, and 255 for the day. To learn more about light, please read this [page](ManipulateLight).\n\nThen, we add a new layer that consists in an image (soil.jpg) by using the **image** statement.\nIn order to see the people inside the building, we add transparency to the building (0.5). The transparency of a layer is a float value between 0 (solid) and 1 (totally transparent). In order to be able to manage this transparency aspect, opengl has to draw the people agents before the building, thus we modify the order of drawing of the different layers (people agents before building agents). At last, we modify the aspect of the people agents by the new one: **sphere3D**.\n\n```\nexperiment main_experiment type:gui{\n\t...\n\toutput {\n\t\t...\n\t\tdisplay map_3D type: opengl {\n\t\t\tlight 1 color:(is_night ? 50 : 255);\n\t\t\timage \"../includes/soil.jpg\";\n\t\t\tspecies road aspect:geom;\n\t\t\tspecies people aspect:sphere3D;\t\t\t\n\t\t\tspecies building aspect:geom transparency: 0.5;\n\t\t}\n\t\t...\n\t}\n}\n```\n\n\n\n\n\n## Complete Model\n\n```\nmodel model5 \n \nglobal {\n\tint nb_people  20;\n\t\n\tfloat infected_rate update: nb_people_infected/length(people);\n\tinit {\n\t\tcreate road from: roads_shapefile;\n\t\troad_network ","url":"wiki/IncrementalModel_step5.md"},{"id":"wiki/IncrementalModel_step6.md","title":" 6. Multi-Level","content":"# 6. Multi-Level\nThis step Illustrates how to define a multi-level model\n\n\n\n\n\n\n\n## Formulation\nWe propose to let the buildings manage what happens when the people are inside buildings. In this context, we will use the multi-level properties of GAMA: when a people agent will be inside a building, it will be captured by it and its species will be modified. It will be not anymore the people agent that will decide when to leave the building, but the building itself.\n\nWe will need to:\n  * define a micro-species of people inside the building species (**people\\_in\\_buildings**)\n  * define a new variable for the building agent (_people\\_in**building**)\n  * define two new behaviors for building: **let\\_people\\_leave** and **let\\_people\\_enter**\n  * modify the aspect of the building\n  * modify some global variables for counting the number of infected people_\n\n![images/Incremental_model6.jpg](resources/images/tutorials/Incremental_model6.jpg)\n\n\n\n\n\n## Model Definition\n### building\nFirst, we define a new species called **people\\_in\\_building** inside the **building** species. Thus, a building could have agents of this species as **members** and control them. The **people\\_in\\_building** species has for parent the **people** species, which means that a **people\\_in\\_building** agent has all the properties, aspect and behaviors of a **people** agent.\nIn our case, we want the once a people agent inside a building, this people agent does nothing. Then, we use the **schedules** facet of the species to remove the **people\\_in\\_building** from the scheduler.\n\n```\nspecies building {\n\t...\n        species people_in_building parent: people schedules: [] {\n\t}\n\t...\n}\n```\n\nWe define a new dynamic variable for building agent: **people\\_inside** that will correspond to the list of **people\\_in\\_building** agents inside the building. Note that we use the syntax **-> {...}** to make the variable dynamic. However, instead of **update** that allows a variable to be recomputed at each simulation step, the syntax **-> {...}** allows the variable to be recomputed each time it is called (and thus avoid outdated problems). To compute this variable, we use the **members** built-in variable that corresponds to the list of micro-agents captured by the macro-agent.\n\n```\nspecies building {\n\t...\n        list people_inside -> {members collect people_in_building(each)};\n\t...\n}\n```\n\n\nWe define a first reflex for the buildings that will be activated at each simulation step and that will allow the building to capture all the people that are inside its geometry and that are not moving (target = nil). Capturing agents means putting them inside its **members** list and changing their species: here the **people** agents become **people\\_in\\_building** agents.\n```\nspecies building {\n\t...\n      reflex let_people_enter {\n\t\tlist entering_people  leaving_people (members where (flip(people_in_building(each).staying_counter / staying_coeff)));\n\t\tif not (empty (leaving_people)) {\n\t\t\trelease leaving_people as: people in: world returns: released_people;\n\t\t\task released_people {\n\t\t\t\ttarget  0.5 ? #red : #green) depth: height;\n\t}\n}\n```\n\n### global variables\nIn order to take into account the people that are inside the buildings for the computation of **nb\\_people\\_infected**, we first build the list of **people\\_in\\_building**. As **people\\_in\\_building** is a macro species of **building**, we cannot compute it directly like for the other species, we then aggregate all the list **people\\_inside** of all building in a single list (**list\\_people\\_in\\_buildings**). Then, we compute the number of infected people as the number of people infected outside the building + the number of people infected inside them.\n\n```\nglobal  {\n\t...\n\tlist list_people_in_buildings update: (building accumulate each.people_inside) where (not dead(each));\n\tint nb_people_infected  list_people_in_buildings update: (building accumulate each.people_inside) where (not dead(each));\n\tint nb_people_infected  20;\n\t\n\tfloat infected_rate update: nb_people_infected/nb_people;\n\tinit {\n\t\tcreate road from: roads_shapefile;\n\t\troad_network  people_inside -> {members collect people_in_building(each)};\n\t\n\taspect geom {\n\t\tint nbI  0.5 ? #red : #green) depth: height;\n\t}\n\t\n\tspecies people_in_building parent: people schedules: [] {\n\t\taspect circle{}\n\t\taspect sphere3D{}\n\t}\n\t\n\tspecies people_in_2 parent: people schedules: [] {\n\t\taspect circle{}\n\t\taspect sphere3D{}\n\t}\n\t\n\treflex let_people_leave  {\n\t\task members as: people_in_building{\n\t\t\tstaying_counter  leaving_people (members where (flip(people_in_building(each).staying_counter / staying_coeff)));\n\t\tif not (empty (leaving_people)) {\n\t\t\trelease leaving_people as: people in: world returns: released_people;\n\t\t\task released_people {\n\t\t\t\ttarget  entering_people ","url":"wiki/IncrementalModel_step6.md"},{"id":"wiki/IncrementalModel_step7.md","title":" 7. Differential Equations","content":"# 7. Differential Equations\nThis step Illustrates how to use differential equations\n\n\n\n\n\n\n\n## Formulation\nWe are interested by the spreading of the disease inside the buildings. In order to model it, we will use differential equations. So, we will need to:\n\n  * add two global variables to define the building epidemic properties (**beta** and **h**).\n  * add new variables for the buildings (**I**, **S**, **T**, **t**, **I\\_to\\_1**);\n  * define differential equations for disease spreading inside buildings\n  * add a behavior for buildings for the spreading of the disease.\n\n![images/incremental_model.jpg](resources/images/tutorials/incremental_model.jpg)\n\n\n\n\n\n## Model Definition\n### global variables\nWe define two new global variables that will be used disease spreading dynamic inside the buildings.\n```\nglobal  {\n\t...\n\tfloat beta  S_members (members where not (people_in_building(each).is_infected));\n    \t        S  0 and S > 0) {\n    \t\t       solve SI method: \"rk4\" step: h;\n    \t\t       I_to1  list_people_in_buildings update: (building accumulate each.people_inside) where (not dead(each));\n\tint nb_people_infected  20;\n\t\n\tfloat infected_rate update: nb_people_infected/nb_people;\n\tinit {\n\t\tcreate road from: roads_shapefile;\n\t\troad_network  people_inside -> {members collect people_in_building(each)};\n\tfloat I;\n\tfloat S;\n\tfloat T;\n   \tfloat t;   \n   \tfloat I_to1; \n   \t\n\taspect geom {\n\t\tint nbI  0.5 ? #red : #green) depth: height;\n\t}\n\t\n\tspecies people_in_building parent: people schedules: [] {\n\t}\n\t\n\treflex let_people_leave  {\n\t\task members as: people_in_building{\n\t\t\tstaying_counter  leaving_people (members where (flip(people_in_building(each).staying_counter / staying_coeff)));\n\t\tif not (empty (leaving_people)) {\n\t\t\trelease leaving_people as: people in: world returns: released_people;\n\t\t\task released_people {\n\t\t\t\ttarget  entering_people  S_members (members where not (people_in_building(each).is_infected));\n    \tS  0 and S > 0) {\n    \t\tsolve SI method: \"rk4\" step: h;\n    \t\tI_to1 ","url":"wiki/IncrementalModel_step7.md"},{"id":"wiki/LuneraysFlu_step1.md","title":" 1. Creation of a first basic disease spreading model","content":"# 1. Creation of a first basic disease spreading model\nThis first step illustrates how to create simple agents and make them move in their environment.\n\n\n![images/luneray1.tiff](resources/images/tutorials/luneray1.tiff)\n\n\n\n\n## Formulation\n  * Set the time duration of a time step to 1 minutes\n  * Define the people species with a moving skill\n  * Define the move reflex that allow the people agent to move randomly and the infect reflex that allows them to infect other people agents.\n  * Define the aspect of the people species\n  * Add the people species to a display\n\n\n\n## Model Definition\n\n### Project and model\nThe first step of this tutorial consists in launching GAMA and choosing a workspace, then to define a new project or to import the existing one. For people that do not want to re-write all the models but just to follow the model construction, they can just download the model project here and the follow this [procedure](ImportingModels) to import it into GAMA. For the other, the project and model creation procedures are detailed [here](GamlEditorGeneralities). \n\nNote that the concepts of workspace and projects are explained [here](WorkspaceProjectsAndModels).\n\n\n### model structure\nA GAMA model is composed of three type of sections:\n  * **global** : this section, that is unique, defines the \"world\" agent, a special agent of a GAMA model. It represents all that is global to the model: dynamics, variables, actions. In addition, it allows to initialize the simulation (init block).\n  * **species** and **grid**: these sections define the species of agents composing the model. Grid are defined in the following model step \"vegetation dynamic\";\n  * **experiment** : these sections define a context of execution of the simulations. In particular, it defines the input (parameters) and output (displays, files...) of a model.\n\nMore details about the different sections of a GAMA model can be found [here](ModelOrganization).\n\n### species\nA [species](RegularSpecies) represents a «prototype» of agents: it defines their common properties.\n\nThree different elements can be defined in a species:\n  * the internal state of its agents (attributes)\n  * their behavior\n  * how they are displayed (aspects)\n\nIn our model, we define a people species:\n```\nspecies people {\n\t\t \n}\n```\n\nIn addition, we want add a new capability to our agent: the possibility to move randomly. for that, we add a specific skill to our people agents. A [skill](AttachingSkills) is a built-in module that provide the modeler a self-contain and relevant set of actions and variables. The [moving](__BuiltInSkills#moving) provides the agents with several attributes and actions related to movement. \n\n```\n   species people skills: [moving]{\n       ...\n   }\n```\n\n\n#### Internal state\nAn [attribute](RegularSpecies#declaration) is defined as follows: type of the attribute  and name. Numerous types of attributes are available: _int (integer), float (floating point number), string, bool (boolean, true or false), point (coordinates), list, pair, map, file, matrix, espèce d’agents, rgb (color), graph, path..._\n  * Optional facets: ","url":"wiki/LuneraysFlu_step1.md"},{"id":"wiki/LuneraysFlu_step2.md","title":" 2. Definition of monitors and chart outputs","content":"# 2. Definition of monitors and chart outputs\nThis second step illustrates how to create monitors and charts to follows the evolution of variables and to add an ending condition to the simulation.\n\n\n![images/luneray2.tiff](resources/images/tutorials/luneray2.tiff)\n\n\n\n\n## Formulation\n  * Add three new global dynamic variables to follow the evolution of the number of infected people agents, of not infected people agents and of the rate of infected people.\n  * Define an ending condition for the simulation\n  * Define a monitor to follow the rate of infected people agents\n  * Define a chart to follow the rate of infected people agents\n\n\n\n## Model Definition\n\n\n### global section\n\n#### global variables\n\nGAMA offers the possibility to define dynamic variable that will be recomputed at each simulation step by using the _update_ facet when defining a variable. When an agent is activated, first, it recomputes each of its variables with a update facet (in their definition order), then it activates each of its reflexes (in their definition order).\n\nTo better follow the evolution of sick people, we add three new global variables to the model:\n  * nb_people_infected of type _int_ with _nb\\_infected\\_init_ as init value and updated at each simulation step by the number of infected people\n  * nb_people_not_infected of type _int_ with _(nb\\_people - nb\\_infected\\_init)_ as init value and updated at each simulation step by the number of not infected people\n  * infected_rate of type _float_ updated at each simulation step by the number of infected people divided by the number of people.\n\n```\nglobal{\n\t//... other attributes\n\tint nb_people_infected ","url":"wiki/LuneraysFlu_step2.md"},{"id":"wiki/LuneraysFlu_step3.md","title":" 3. Importation of GIS data","content":"# 3. Importation of GIS data\nThis third step illustrates how load GIS data and to agentify them.\n\n![images/luneray3.tiff](resources/images/tutorials/luneray3.tiff)\n\n\n\n\n## Formulation\n  * Define 2 new species that will just be displayed: *road* and *building*.\n  * Add a new *my_building* attribute to the _people_ agents.\n  * Define new global attributes to load GIS data (shape file).\n  * Use the GIS data to create the _road_ and _building_ agents.\n  * Add the _road_ and _building_ agents to the display.\n\n## Model Definition\n\nFor this step, you will need to add the shapefiles of the roads and buildings inside the _includes_ folder of the project. The shapefiles (and all the other files) can be found [here](https://github.com/gama-platform/gama/wiki/images/Tutorials/Luneray's flu/Luneray's flu.zip). \n \n### species\nIn this model, we have to define two species of agents: the **road** agents and the **building** ones. These agents will not have a particular behavior, they will just be displayed.\nFor each of this species we define an aspect called _geom_. As we want to represent the geometry of the agent, we then use the keyword **draw** that allow to draw a given geometry. In order to draw the geometry of the agent we use the attribute **shape** (which is a built-in attribute of all agents). The road will be displayed in black and the building in gray.\n\n```\nspecies road {\n\taspect geom {\n\t\tdraw shape color: #black;\n\t}\n}\n\nspecies building {\n\taspect geom {\n\t\tdraw shape color: #gray;\n\t}\n}\n\n```\n\nIn addition, we add an attribute to the people species called *my_builing* of type _building_. Note that agent species can be use as variable type.\n\n```\nspecies people skills:[moving]{\t\t\n\t//other attributes\n\tbuilding my_house; \n        //reflexes and aspect \n}\n```\n\n### global section\n\n#### global variables\n\nGAMA allows to automatically read GIS data that are formatted as shape files (or as OSM file). In our model, we define 2 shapefiles: one corresponding to the roads and the other ones to the buildings. Note that GAMA is able to manage the projection of the GIS data. \nIn order to set the right size (and position) of the world geometry, we define its value as the envelope of the road shapefile (and no more a square of 1500 meters).\n\n```\nglobal{\n\t//... other attributes\n\tfile roads_shapefile ","url":"wiki/LuneraysFlu_step3.md"},{"id":"wiki/LuneraysFlu_step4.md","title":" 4. Use of a graph to constraint the movements of people]","content":"# 4. Use of a graph to constraint the movements of people]\nThis fourth step illustrates how to use a graph to constraint the movements of agents\n\n\n![images/luneray4.tiff](resources/images/tutorials/luneray4.tiff)\n\n\n\n\n## Formulation\n  * Define a new global variable: the road network (graph).\n  * Build the road network graph from the road agents\n  * Add new attribute to the people agents (target and in_my_house)\n  * Define a new reflex for people agents: stay.\n  * Modify the move reflex of the people agents.\n\n## Model Definition\n\n### global section\n\n#### global variables\n\nIn this model, we want that people agents move from buildings to buildings by using the shortest path in the road network. In order to compute this shortest path, we need to use a graph structure.\n\nWe thus define a new global variable called _road\\_network_ of type _graph_ that will represent the road network.\n\n```\nglobal{\n\t//... other attributes\n\tgraph road_network;\n\t\n\t//... init\n}\n```\n\nIn order to compute the graph from the road network, we use, just after having creating the road agents, the [as_edge_graph](Operators#as_edge_graph) operator. This operator automatically built a graph from a set of polylines. Each extremity point of the lines will become a node in the graph, and each polyline an edge. By default, the graph is not oriented and the weights of the edges are the perimeters of the polylines. It is of course possible to change through the use of some operators.  \n\n```\nglobal {\n\t// world variable definition\n\n\tinit{\n\t\tcreate road from: roads_shapefile;\n\t\troad_network ","url":"wiki/LuneraysFlu_step4.md"},{"id":"wiki/LuneraysFlu_step5.md","title":" 5. Definition of 3D displays","content":"# 5. Definition of 3D displays\nThis fifth step illustrates how to define 3D displays\n\n\n![images/Luneray_model.png](resources/images/tutorials/Luneray_model.png)\n\n\n\n\n## Formulation\n  * Define a new 3D aspect for roads.\n  * Define a new 3D aspect for buildings\n  * Define a new 3D aspect for people\n  * Define a new 3D display \n\n## Model Definition\n\n### species\n\nFirst, we add a new variable called _display\\_shape_ of type _geometry_ for road agent that is a tube of 2m radius built from its geometry. Note that it is possible to get the list of points composing a geometry by using the _points_ variable of the geometry. We define then an aspect called _geom3D_ that draws the previous geometry in black.\n\n![images/roads_display.tiff](resources/images/tutorials/roads_display.tiff)\n\n```\nspecies road {\n\tgeometry display_shape ","url":"wiki/LuneraysFlu_step5.md"},{"id":"wiki/PredatorPrey_step1.md","title":" 1. Basic Model","content":"# 1. Basic Model\nThis first step Illustrates how to write a model in GAMA. In particular, it describes how to structure a model and how to define species - that are the key components of GAMA models.\n## Content\n\n\n\n\n\n\n\n## Formulation\n  * Definition of the **prey** species\n  * Definition of a **nb\\_prey\\_init** parameter\n  * Creation of **nb\\_prey\\_init** **prey** agents randomly located in the environment (size: 100x100)\n\n\n\n\n\n## Model Definition\n\n### model structure\nA GAMA model is composed of three type of sections:\n  * **global** : this section, that is unique, defines the \"world\" agent, a special agent of a GAMA model. It represents all that is global to the model: dynamics, variables, actions. In addition, it allows to initialize the simulation (init block).\n  * **species** and **grid**: these sections define the species of agents composing the model. Grid are defined in the following model step \"vegetation dynamic\";\n  * **experiment** : these sections define a context of execution of the simulations. In particular, it defines the input (parameters) and output (displays, files...) of a model.\n\nMore details about the different sections of a GAMA model can be found [here](ModelOrganization).\n\n### species\nA [species](RegularSpecies) represents a «prototype» of agents: it defines their common properties.\n\nA species definition requires the definition of three different elements :\n  * the internal state of its agents (attributes)\n  * their behavior\n  * how they are displayed (aspects)\n\n#### Internal state\nAn [attribute](RegularSpecies#declaration) is defined as follows: type of the attribute  and name. Numerous types of attributes are available: _int (integer), float (floating point number), string, bool (boolean, true or false), point (coordinates), list, pair, map, file, matrix, espèce d’agents, rgb (color), graph, path..._\n  * Optional facets: ","url":"wiki/PredatorPrey_step1.md"},{"id":"wiki/PredatorPrey_step10.md","title":" 10. Charts","content":"# 10. Charts\nThis 10th step Illustrates how to define charts.\n\n\n\n\n\n\n\n## Formulation\n  * Adding a new display to visualize:\n    * One chart representing the evolution of the quantity of prey and predator agents over the time\n    * Two histograms representing the energy distribution of the prey and predator agents\n\n\n\n\n## Model Definition\n\n### output\n\nGAMA can display various chart types:\n  * Time series\n  * Pie charts\n  * Histograms\n\nA chart must be defined in a display : it behaves exactly like any other layer.\nDefinition of a chart :\n\n```\nchart chart_name type: chart_type  {\n     [data]\n}\n```\n\nThe data to draw are define inside the chart block as follow:\n\n```\n     data data_legend value: data_value\n```\n\nWe add a new display called **Population\\_information** that refreshes every 5 simulation steps.\nInside this display, we define 3 charts: one of type _series_ (i.e. time series chart), two of type _histogram_ :\n  * \"Species evolution\"; background : white; size : {1, 0.5}; position : {0, 0}\n    * data1: number\\_of\\_preys; color : blue\n    * data2: number\\_of\\_predator; color : red\n\n  * \"Prey Energy Distribution\"; background : lightGray; size : {0.5, 0.5}; position : {0, 0.5}\n    * data \"]0;0.25]\" : number of preys with (each.energy <= 0.25) ;\n    * data \"]0.25;0.5]\" number of preys with ((each.energy > 0.25) and (each.energy <= 0.5)) ;\n    * data \"]0.5;0.75]\" number of preys with ((each.energy > 0.5) and (each.energy <= 0.75)) ;\n    * data \"]0.75;1]\" number of preys with  (each.energy > 0.75) ;\n\n  * \"Predator Energy Distribution\"; background : lightGray; size : {0.5, 0.5}; position : {0.5, 0.5}\n    * data \"]0;0.25]\" : number of predators with (each.energy <= 0.25) ;\n    * data \"]0.25;0.5]\" number of predators with ((each.energy > 0.25) and (each.energy <= 0.5)) ;\n    * data \"]0.5;0.75]\" number of predators with ((each.energy > 0.5) and (each.energy <= 0.75)) ;\n    * data \"]0.75;1]\" number of predators with  (each.energy > 0.75) ;\n\nTo evaluate the value of the data of the two histogram, we use the operator **list count condition\" that returns the number of elements of**list**for which the condition is true.**\n\n```\ndisplay Population_information refresh:every(5) {\n\tchart \"Species evolution\" type: series size: {1,0.5} position: {0, 0} {\n\t\tdata \"number_of_preys\" value: nb_preys color: #blue ;\n\t\tdata \"number_of_predator\" value: nb_predators color: #red ;\n\t}\n\tchart \"Prey Energy Distribution\" type: histogram background: rgb(\"white\") size: {0.5,0.5} position: {0, 0.5} {\n\t\tdata \"]0;0.25]\" value: prey count (each.energy <= 0.25) color:#blue;\n\t\tdata \"]0.25;0.5]\" value: prey count ((each.energy > 0.25) and (each.energy <= 0.5)) color:#blue;\n\t\tdata \"]0.5;0.75]\" value: prey count ((each.energy > 0.5) and (each.energy <= 0.75)) color:#blue;\n\t\tdata \"]0.75;1]\" value: prey count (each.energy > 0.75) color:#blue;\n\t}\n\tchart \"Predator Energy Distribution\" type: histogram background: rgb(\"white\") size: {0.5,0.5} position: {0.5, 0.5} {\n\t\tdata \"]0;0.25]\" value: predator count (each.energy <= 0.25) color: #red ;\n\t\tdata \"]0.25;0.5]\" value: predator count ((each.energy > 0.25) and (each.energy <= 0.5)) color: #red ;\n\t\tdata \"]0.5;0.75]\" value: predator count ((each.energy > 0.5) and (each.energy <= 0.75)) color: #red ;\n\t\tdata \"]0.75;1]\" value: predator count (each.energy > 0.75) color: #red;\n\t}\n}\n```\n\n\n\n\n\n## Complete Model\n\n```\nmodel prey_predator\n\nglobal {\n\tint nb_preys_init  {length (prey)};\n\tint nb_predators -> {length (predator)};\n\t\n\tinit {\n\t\tcreate prey number: nb_preys_init ; \n\t\tcreate predator number: nb_predators_init ;\n\t}\n\t\n\treflex stop_simulation when: (nb_preys = 0) or (nb_predators = 0) {\n\t\tdo halt ;\n\t} \n}\n\nspecies generic_species {\n\tfloat size = energy_reproduce) and (flip(proba_reproduce)) {\n\t\tint nb_offsprings  0 {\n\t\tfloat energy_transfert  reachable_preys update: prey inside (myCell);\n\tfloat proba_reproduce  neighbours   0.25) and (each.energy <= 0.5)) color:#blue;\n\t\t\t\tdata \"]0.5;0.75]\" value: prey count ((each.energy > 0.5) and (each.energy <= 0.75)) color:#blue;\n\t\t\t\tdata \"]0.75;1]\" value: prey count (each.energy > 0.75) color:#blue;\n\t\t\t}\n\t\t\tchart \"Predator Energy Distribution\" type: histogram background: rgb(\"lightGray\") size: {0.5,0.5} position: {0.5, 0.5} {\n\t\t\t\tdata \"]0;0.25]\" value: predator count (each.energy <= 0.25) color: #red ;\n\t\t\t\tdata \"]0.25;0.5]\" value: predator count ((each.energy > 0.25) and (each.energy <= 0.5)) color: #red ;\n\t\t\t\tdata \"]0.5;0.75]\" value: predator count ((each.energy > 0.5) and (each.energy <= 0.75)) color: #red ;\n\t\t\t\tdata \"]0.75;1]\" value: predator count (each.energy > 0.75) color: #red;\n\t\t\t}\n\t\t}\n\t\tmonitor \"Number of preys\" value: nb_preys;\n\t\tmonitor \"Number of predators\" value: nb_predators;\n\t}\n}\n```","url":"wiki/PredatorPrey_step10.md"},{"id":"wiki/PredatorPrey_step11.md","title":" 11. Writing Files","content":"# 11. Writing Files\nThis 11th step Illustrates how to save data in a text file.\n\n\n\n\n\n\n\n## Formulation\n  * At each simulation step, write in a text file:\n    * The time step\n    * The number of prey and predator agents\n    * The min and max energy of the prey and predator agents\n\n\n\n\n\n## Model Definition\n\n### global section\nGAMA provides several ways to write file.\n\nA first ways consist in using the statement **file** in the output section: at each simulation step, the expression given is written in the given file.\n```\n   file file_name type: file_type data: data_to_write;  \n```\n\nWith:\n  * file\\_name: string (by default the file in saved in the _/models/_ of your project directory)\n  * file\\_type: string\n\nThere are 2 possible types :\n  * ‘txt’ (text) : in that case, my\\_data is treated as a string, which is written directly in the file\n  * ‘csv’ : in that case, my\\_data is treated as a list of variables to write : [\"var1\", \"var2\", \"var3\"].\n\nA second way to write file consists in using the save statement:\n```\n   save my_data type: file_type to: file_name;  \n```\nWith:\n  * file\\_type : string\n  * file\\_name : string\n\nThere are 3 possible types :\n  * ‘shp’ (shapefile - GIS data) : in that case, my\\_data is treated as a list of agents : all their geometries are saved in the file (with some variables as attributes)\n  * ‘txt’ (text) : in that case, my\\_data is treated as a string, which is written directly in the file\n  * ‘csv’ : in that case, my\\_data is treated as a list of values : [val1, val2, val3].\n\nWe use this statement (in a global reflex called **save\\_result**) to write:\n  * The cycle step: use of the **cycle** keyword that returns the current simulation step.\n  * The number of prey and predator agents: use of nb\\_preys and nb\\_predators variables\n  * The min and max energy of the prey and predator agents: use of **list min\\_of expression** and **list max\\_of expression** keywords. In addition, we verify with the tertiary operator (condition ? val\\_if : val\\_else).\n```\nreflex save_result when: (nb_preys > 0) and (nb_predators > 0){\n\tsave (\"cycle: \"+ cycle + \"; nbPreys: \" + nb_preys\n\t\t+ \"; minEnergyPreys: \" + ((prey as list) min_of each.energy)\n\t\t+ \"; maxSizePreys: \" + ((prey as list) max_of each.energy) \n\t   \t+ \"; nbPredators: \" + nb_predators           \n\t   \t+ \"; minEnergyPredators: \" + ((predator as list) min_of each.energy)          \n\t   \t+ \"; maxSizePredators: \" + ((predator as list) max_of each.energy)) \n\t   \tto: \"results.txt\" type: \"text\" ;\n}\n```\n\n\n\n\n## Complete Model\n\n```\nmodel prey_predator\n\nglobal {\n\tint nb_preys_init  {length (prey)};\n\tint nb_predators -> {length (predator)};\n\t\n\tinit {\n\t\tcreate prey number: nb_preys_init ; \n\t\tcreate predator number: nb_predators_init ;\n\t}\n\t\n\treflex save_result when: (nb_preys > 0) and (nb_predators > 0){\n\t\tsave (\"cycle: \"+ cycle + \"; nbPreys: \" + nb_preys\n\t\t\t+ \"; minEnergyPreys: \" + ((prey as list) min_of each.energy)\n\t\t\t+ \"; maxSizePreys: \" + ((prey as list) max_of each.energy) \n\t   \t\t+ \"; nbPredators: \" + nb_predators           \n\t   \t\t+ \"; minEnergyPredators: \" + ((predator as list) min_of each.energy)          \n\t   \t\t+ \"; maxSizePredators: \" + ((predator as list) max_of each.energy)) \n\t   \t\tto: \"results.txt\" type: \"text\" ;\n\t}\n\t\n\treflex stop_simulation when: (nb_preys = 0) or (nb_predators = 0) {\n\t\tdo halt ;\n\t} \n}\n\nspecies generic_species {\n\tfloat size = energy_reproduce) and (flip(proba_reproduce)) {\n\t\tint nb_offsprings  0 {\n\t\tfloat energy_transfert  reachable_preys update: prey inside (myCell);\n\tfloat proba_reproduce  neighbours   0.25) and (each.energy <= 0.5)) color:#blue;\n\t\t\t\tdata \"]0.5;0.75]\" value: prey count ((each.energy > 0.5) and (each.energy <= 0.75)) color:#blue;\n\t\t\t\tdata \"]0.75;1]\" value: prey count (each.energy > 0.75) color:#blue;\n\t\t\t}\n\t\t\tchart \"Predator Energy Distribution\" type: histogram background: rgb(\"lightGray\") size: {0.5,0.5} position: {0.5, 0.5} {\n\t\t\t\tdata \"]0;0.25]\" value: predator count (each.energy <= 0.25) color: #red ;\n\t\t\t\tdata \"]0.25;0.5]\" value: predator count ((each.energy > 0.25) and (each.energy <= 0.5)) color: #red ;\n\t\t\t\tdata \"]0.5;0.75]\" value: predator count ((each.energy > 0.5) and (each.energy <= 0.75)) color: #red ;\n\t\t\t\tdata \"]0.75;1]\" value: predator count (each.energy > 0.75) color: #red;\n\t\t\t}\n\t\t}\n\t\tmonitor \"Number of preys\" value: nb_preys;\n\t\tmonitor \"Number of predators\" value: nb_predators;\n\t}\n}\n```","url":"wiki/PredatorPrey_step11.md"},{"id":"wiki/PredatorPrey_step12.md","title":" 12. Image loading","content":"# 12. Image loading\nThis 12th step illustrates how to load an image file and to use it to initialize a grid.\n\n\n\n\n\n\n\n## Formulation\n  * Building of the initial environment (food and foodProd of the cells) from a image file\n\n\n\n\n\n## Model Definition\n### global variable\n\nWe add a new global variable: the image file:\n```\n\tfile map_init  {length (prey)};\n\tint nb_predators -> {length (predator)};\n\t\n\tinit {\n\t\tcreate prey number: nb_preys_init ; \n\t\tcreate predator number: nb_predators_init ;\n\t\task vegetation_cell {\n\t\t\tcolor  0) and (nb_predators > 0){\n\t\tsave (\"cycle: \"+ cycle + \"; nbPreys: \" + nb_preys\n\t\t\t+ \"; minEnergyPreys: \" + ((prey as list) min_of each.energy)\n\t\t\t+ \"; maxSizePreys: \" + ((prey as list) max_of each.energy) \n\t   \t\t+ \"; nbPredators: \" + nb_predators           \n\t   \t\t+ \"; minEnergyPredators: \" + ((predator as list) min_of each.energy)          \n\t   \t\t+ \"; maxSizePredators: \" + ((predator as list) max_of each.energy)) \n\t   \t\tto: \"results.txt\" type: \"text\" ;\n\t}\n\t\n\treflex stop_simulation when: (nb_preys = 0) or (nb_predators = 0) {\n\t\tdo halt ;\n\t} \n}\n\nspecies generic_species {\n\tfloat size = energy_reproduce) and (flip(proba_reproduce)) {\n\t\tint nb_offsprings  0 {\n\t\tfloat energy_transfert  reachable_preys update: prey inside (myCell);\n\tfloat proba_reproduce  neighbours   0.25) and (each.energy <= 0.5)) color:#blue;\n\t\t\t\tdata \"]0.5;0.75]\" value: prey count ((each.energy > 0.5) and (each.energy <= 0.75)) color:#blue;\n\t\t\t\tdata \"]0.75;1]\" value: prey count (each.energy > 0.75) color:#blue;\n\t\t\t}\n\t\t\tchart \"Predator Energy Distribution\" type: histogram background: rgb(\"lightGray\") size: {0.5,0.5} position: {0.5, 0.5} {\n\t\t\t\tdata \"]0;0.25]\" value: predator count (each.energy <= 0.25) color: #red ;\n\t\t\t\tdata \"]0.25;0.5]\" value: predator count ((each.energy > 0.25) and (each.energy <= 0.5)) color: #red ;\n\t\t\t\tdata \"]0.5;0.75]\" value: predator count ((each.energy > 0.5) and (each.energy <= 0.75)) color: #red ;\n\t\t\t\tdata \"]0.75;1]\" value: predator count (each.energy > 0.75) color: #red;\n\t\t\t}\n\t\t}\n\t\tmonitor \"Number of preys\" value: nb_preys;\n\t\tmonitor \"Number of predators\" value: nb_predators;\n\t}\n}\n```","url":"wiki/PredatorPrey_step12.md"},{"id":"wiki/PredatorPrey_step2.md","title":" 2. Vegetation Dynamic","content":"`[IN PROGRESS]`\n# 2. Vegetation Dynamic\nThis second steps present the idea of environment or topological space. Defining a \"vegetation\" environment allows to define the movement of the preys through dynamic variables (use of the _update_ facet). We will also discover more about displays.\n\n\n\n\n\n\n\n\n## Formulation\n  * Definition of a grid (for the vegetation)\n  * Definition of a dynamic for each cell (food production)\n  * Display of the cell color according to the quantity of food\n  * Localization of the prey agents on the cells (at its center)\n\n\n\n\n\n## Model Definition\n\n### grid\n\nIn GAMA, grids are specific agent species with a particular topology. First, a grid allow yet constrains the movement of other (moving) agents but they can have variables and behaviors.\n\nA grid is defined as follows:\n```\n   grid grid_name width: nb_cols height: nb_lines neighbors: 4/6/8 {\n      ...\n   }\n```\n\nWith:\n  * width : number of cells along x-axis\n  * height : number of cells along y-axis\n  * neighbours : neighborhood type (4 - Von Neumann, 6 - hexagon or 8 - Moore)\n\nIn our model, we define a grid species, called **vegetation\\_cell** composed of 50x50 cells and with a Von Neumann neighborhood.\nIn order for each grid agents (or cell of the grid) to represent the vegetation, we provide them with four variables:\n  * _maxFood_ : maximum food that a cell can contain -> type: _float_ ; init value: 1.0\n  * _foodProd_ : food produced at each simulation step -> type: _float_ ; init value: random number between 0 and 0.01\n  * _food_ : current quantity of food -> type: _float_ ; init value: random number between 0 and 1.0; at each simulation step : food  type: _rgb_ ; init value: color computed according to the food value: more the food value is close to 1.0, greener the color is, more the food value is close to 0,  whiter the color is; update : computation of the new color depending on the current level of food (at each simulation step).\n\nThe **update** facet allows to give a behavior to the agents. Indeed, at each simulation step, each agent is activated (by default, in a random order) and first applies for each dynamic variable (in their definition order) its update expression. In the present case, it allows us to link the displayed color of the cell to its food level.\n```\n   grid vegetation_cell width: 50 height: 50 neighbours: 4 {\n      float maxFood ","url":"wiki/PredatorPrey_step2.md"},{"id":"wiki/PredatorPrey_step3.md","title":" 3. Prey Agent Behavior","content":"# 3. Prey Agent Behavior\nThis third step Illustrates how to define the behaviors of prey agents and the concept of spatial topology.\n\n\n\n\n\n\n## Formulation\n  * Random movement of the prey agents to a distance of 2 cells (Von Neumann neighborhood)\n  * At each step, the prey agents loss energy\n  * At each step, the prey agents eat food if there is food on the cell on which they are localized (with a max of max\\_transfer) and gain energy\n  * If a prey agent has no more energy, it dies\n\n\n\n\n\n## Model Definition\n\n### parameters\nTo define a behavior for the prey agents we add them three new parameters:\n  * The max energy of the prey agents\n  * The maximum energy that can a prey agent consume from vegetation per tick\n  * The energy used by a prey agent at each time step\n\nAs we consider these parameters to be global to all prey, we define them in the  global section as follows:\n\n```\n   float prey_max_energy  neighbours  0 { \n      float energy_transfer  0 { \n\t\tfloat energy_transfer  neighbours  ","url":"wiki/PredatorPrey_step3.md"},{"id":"wiki/PredatorPrey_step4.md","title":" 4. Inspectors and Monitors","content":"# 4. Inspectors and Monitors\nThis fourth step Illustrates how to monitor more precisely the simulation. Practically, we will define monitors to follow the evolution of specific variables (or expression) whereas inspector allows to follow the state of a given agent (or a species).\n\n\n\n\n\n\n## Formulation\n  * Adding of a monitor to follow the evolution of the number of prey agents\n\n\n\n\n\n## Model Definition\n\n### global variable\nWe add a new global variable:\n  * **nb\\_preys** : returns, each time it is called, the current number of (live) prey agents\n\nTo do so we use the **->{expression}** facet which returns the value of **expression**, each time it is called..\nWe use as well the operator **length** that returns the number of elements in a list.\n\nThus, In the global section, we add the **nb\\_preys** global variable:\n```\n   int nb_preys -> {length (prey)};\n```\n\n### monitor\nA monitor allows to follow the value of an arbitrary expression in GAML. It has to be defined in an output section. A monitor is defined as follows:\n```\n      monitor monitor_name value: an_expression refresh:every(nb_steps);\n```\n\nWith:\n  * value: mandatory, its that value will be displayed in the monitor.\n  * refresh: bool, optional : if the expression is true, compute (default is true).\n\nIn this model, we define a monitor to follow the value of the variable **nb\\_preys**:\n```\n      monitor \"number of preys\" value: nb_preys;\n```\n\n### inspector\n\nInspectors allow to obtain informations about a species or an agent. There are two kinds of agent information features:\n  * Species browser: provides informations about all the agents of a species. Available in the Agents menu.\n\n![images/browser_table.png](resources/images/tutorials/browser_table.png)\n\n  * Agent inspector: provides information about one specific agent. Also allows to change the values of its variables during the simulation. Available from the Agents menu, by right\\_clicking on a display, in the species inspector or when inspecting another agent. It provides also the possibility to «highlight» the inspected agent.\n\n![images/inspector.png](resources/images/tutorials/inspector.png)\n\n\n\n\n\n## Complete Model\n\n```\nmodel prey_predator\n\nglobal {\n\tint nb_preys_init  {length (prey)};\n\t\n\tinit {\n\t\tcreate prey number: nb_preys_init ;\n\t}\n}\nspecies prey {\n\tfloat size  0 { \n\t\tfloat energy_transfert  neighbours  ","url":"wiki/PredatorPrey_step4.md"},{"id":"wiki/PredatorPrey_step5.md","title":" 5. Predator Agent","content":"# 5. Predator Agent\nThis fifth step Illustrates how to use parent species. Indeed,prey and predators share a few common features thus we will define a generic species that will regroup all the common elements (variables, behaviors and aspects) between the prey and the predator species.\n\n\n\n\n\n\n\n## Formulation\n  * Definition of a new generic species: generic\\_species\n  * Definition of a new species: predator\n  * predator agents move randomly\n  * At each simulation step, a predator agent can eat a prey that is localized at its grid cell\n\n\n\n\n## Model Definition\n\n### parameters\n\nWe add four new parameters related to predator agents:\n  * The init number of predator agents\n  * The max energy of the predator agents\n  * The energy gained by a predator agent while eating a prey agent\n  * The energy consumed by a predator agent at each time step\n\nWe define four new global variables in the global section:\n```\nglobal {\n   ...\n   int nb_predators_init  0 {\n\t\tfloat energy_transfer  reachable_preys update: prey inside (myCell);\n\t\t\n\treflex eat when: ! empty(reachable_preys) {\n\t\task one_of (reachable_preys) {\n\t\t\tdo die ;\n\t\t}\n\t\tenergy  {length (predator)};\n   ...\n}\n```\n\nDefinition of the corresponding monitor:\n```\nmonitor \"number of predators\" value: nb_predators ;\n```\n\n\n\n\n\n## Complete Model\n\n```\nmodel prey_predator\n\nglobal {\n\tint nb_preys_init  {length (prey)};\n\tint nb_predators -> {length (predator)};\n\t\n\tinit {\n\t\tcreate prey number: nb_preys_init ; \n\t\tcreate predator number: nb_predators_init ;\n\t}\n}\n\nspecies generic_species {\n\tfloat size  0 {\n\t\tfloat energy_transfer  reachable_preys update: prey inside (myCell);\n\t\t\n\treflex eat when: ! empty(reachable_preys) {\n\t\task one_of (reachable_preys) {\n\t\t\tdo die ;\n\t\t}\n\t\tenergy  neighbours  ","url":"wiki/PredatorPrey_step5.md"},{"id":"wiki/PredatorPrey_step6.md","title":" 6. Breeding","content":"# 6. Breeding\nSo far we created agents only during the initialisation of the simulation. In this sixth step we Illustrate how to create new agents during a simulation of a dynamic species.\n\n\n\n\n\n\n\n## Formulation\n  * Adding of a reproduce action of the prey and predator agents:\n    * When a agent has energy enough, it has a certain probability to have a certain number of offspring\n    * The energy of the offspring is equal to the parent energy divided by the number of offspring\n    * The parent get the same energy as its offspring\n\n\n\n\n## Model Definition\n\n### parameters\n\nWe add six new parameters related to breeding:\n  * The reproduction probability for prey agents\n  * The max number of offspring for prey agents\n  * The minimum energy to reproduce for prey agents\n  * The reproduction probability for predator agents\n  * The max number of offspring for predator agents\n  * The minimum energy to reproduce for predator agents\n\nWe define six new global variables in the global section:\n```\nglobal {\n   ...\n   float prey_proba_reproduce = energy_reproduce) and (flip(proba_reproduce)) {\n         int nb_offsprings  {length (prey)};\n\tint nb_predators -> {length (predator)};\n\t\n\tinit {\n\t\tcreate prey number: nb_preys_init ; \n\t\tcreate predator number: nb_predators_init ;\n\t}\n}\n\nspecies generic_species {\n\tfloat size = energy_reproduce) and (flip(proba_reproduce)) {\n\t\tint nb_offsprings  0 {\n\t\tfloat energy_transfert  reachable_preys update: prey inside (myCell);\n\tfloat proba_reproduce  neighbours  ","url":"wiki/PredatorPrey_step6.md"},{"id":"wiki/PredatorPrey_step7.md","title":" 7. Agent Aspect","content":"# 7. Agent Aspect\nIn this seventh step we will focus on the display and more specifically the aspects of the agents: how they are represented. It can be a simple shape (circle, square, etc.), an icon, a polygon (see later GIS support).\n\n\n\n\n\n\n\n## Formulation\n  * Definition of two new aspects for the prey and predator agents:\n    * A icon\n    * A square with information about the agent energy\n\n  * Use of the **icon** aspect as default aspect for the prey and predator agents.\n\n\n\n\n\n## Model Definition\n\n### parent species\n\nWe add a new variable of type _file_ called **my\\_icon** to the **generic\\_species**.\nWe define as well two new aspects:\n  * **icon** : draw the image given by the variable **icon**\n  * **info** : draw a square of side size **size** and color **color**; draw as a text the energy of the agent (with a precision of 2)\n\n```\n   species generic_species {\n      ...\n      file my_icon;\n      ...\n      aspect base {\n         draw circle(size) color: color ;\n      }\n      aspect icon {\n         draw my_icon size: 2 * size ;\n      }\n      aspect info {\n         draw square(size) color: color ;\n         draw string(energy with_precision 2) size: 3 color: #black ;\n      }\n   }\n```\n\n### prey species\nWe specialize the **prey** species from the **generic\\_species** species:\n  * definition of the initial value of the agent variables\n```\n   species prey parent: generic_species {\n      ...  \n      file my_icon  {length (prey)};\n\tint nb_predators -> {length (predator)};\n\t\n\tinit {\n\t\tcreate prey number: nb_preys_init ; \n\t\tcreate predator number: nb_predators_init ;\n\t}\n}\n\nspecies generic_species {\n\tfloat size = energy_reproduce) and (flip(proba_reproduce)) {\n\t\tint nb_offsprings  0 {\n\t\tfloat energy_transfert  reachable_preys update: prey inside (myCell);\n\tfloat proba_reproduce  neighbours  ","url":"wiki/PredatorPrey_step7.md"},{"id":"wiki/PredatorPrey_step8.md","title":" 8. Complex Behavior","content":"# 8. Complex Behavior\nThis eighth step Illustrates how to define and call actions and how to use conditional statements.\n\n\n\n\n\n\n\n## Formulation\n  * Definition of more complex behaviors for prey and predator agents:\n    * The preys agents are moving to the cell containing the highest quantity of food\n    * The predator agents are moving if possible to a cell that contains preys; otherwise random cell\n\n\n\n\n\n## Model Definition\n\n### parent species\nWe modify the **basic\\_move** reflex of the **generic\\_species** in order to give the **prey** and **predator** a more complex behaviors: instead of choose a random vegetation cell in the neighborhood, the agent will choose a vegetation cell (still in the neighborhood) thanks to a **choose\\_cell** action.\nThis action will be specialized for each species.\n\n```\n   species generic_species {\n        ...\n        reflex basic_move {\n\t\tmyCell  {length (prey)};\n\tint nb_predators -> {length (predator)};\n\t\n\tinit {\n\t\tcreate prey number: nb_preys_init ; \n\t\tcreate predator number: nb_predators_init ;\n\t}\n}\n\nspecies generic_species {\n\tfloat size = energy_reproduce) and (flip(proba_reproduce)) {\n\t\tint nb_offsprings  0 {\n\t\tfloat energy_transfert  reachable_preys update: prey inside (myCell);\n\tfloat proba_reproduce  neighbours  ","url":"wiki/PredatorPrey_step8.md"},{"id":"wiki/PredatorPrey_step9.md","title":" 9. Stopping condition","content":"# 9. Stopping condition\nThis 9th step Illustrates how to use the **halt** action to stop a simulation\n\n\n\n\n\n\n\n## Formulation\n  * Adding of a stopping condition for the simulation: when there is no more prey or predator agents, the simulation stops\n\n\n\n\n\n## Model Definition\n\nWe add a new reflex that stops the simulation if the number of preys or the number of predator is null.\n\n```\nglobal {\n   ...\n   reflex stop_simulation when: (nb_preys = 0) or (nb_predators = 0) {\n      do halt ;\n   } \n}\n```\n\nNote that it would have been possible to use the **pause** action that pauses the simulation instead of the **halt** action that stops the simulation.\n\n\n\n\n\n## Complete Model\n\n```\nmodel prey_predator\n\nglobal {\n\tint nb_preys_init  {length (prey)};\n\tint nb_predators -> {length (predator)};\n\t\n\tinit {\n\t\tcreate prey number: nb_preys_init ; \n\t\tcreate predator number: nb_predators_init ;\n\t}\n\t\n\treflex stop_simulation when: (nb_preys = 0) or (nb_predators = 0) {\n\t\tdo halt ;\n\t} \n}\n\nspecies generic_species {\n\tfloat size = energy_reproduce) and (flip(proba_reproduce)) {\n\t\tint nb_offsprings  0 {\n\t\tfloat energy_transfert  reachable_preys update: prey inside (myCell);\n\tfloat proba_reproduce  neighbours  ","url":"wiki/PredatorPrey_step9.md"},{"id":"wiki/RoadTrafficModel_step1.md","title":" 1. Loading of GIS Data","content":"# 1. Loading of GIS Data\nThis first step Illustrates how to load GIS data (shapefiles) and to read attributes from GIS data.\n\n\n\n\n\n\n\n## Formulation\n  * Set the time duration of a time step to 10 minutes\n  * Load, agentify and display two layers of GIS data (building and road). Agentifying a GIS element will allow us to give it a behavior later on (thus not being simply a static/passive object).\n  * Read the 'NATURE' attribute of the building data: the buildings of 'Residential' type will be colored in gray, the buildings of 'Industrial' type will be color in blue.\n\n\n\n\n\n## Model Definition\n\n### species\nIn this first model, we have to define two species of agents: the **building** agents and the **road** ones. These agents will not have a particular behavior, they will just be displayed.\nFor each of these species, we define a new attribute: **color** of type _rgb_, with for initial value: \"black\" for the **road** agent and \"gray\" (by default) for the **building** agent.\nConcerning the **building** agent, we define a second attribute named **type** representing the type of the building (\"Residential\" or \"Industrial\").\nAt last, we define an aspect for these species. In this model, we want to represent the geometry of the agent, we then use the keyword **draw** that allow to draw a given geometry. In order to draw the geometry of the agent we use the attribute **shape** (which is a built-in attribute of all agents).\n\n\n```\nspecies building {\n\tstring type; \n\trgb color ","url":"wiki/RoadTrafficModel_step1.md"},{"id":"wiki/RoadTrafficModel_step2.md","title":" 2. People Agents","content":"# 2. People Agents\nThis second step Illustrates how to obtain a random point inside a geometry. We will also define some moving agent called _people_.\n\n\n\n\n\n\n\n## Formulation\n  * Define a new species of agents: the **people** agents. The **people** agents have a point for geometry and are represented by a yellow circle of radius 10m.\n  * At initialization, 100 **people** agents are created. Each **people** agent is placed inside a building of type 'Residential' (randomly selected).\n\n\n\n\n\n## Model Definition\n\n### species\nWe define a new species of agents: the **people** agents. In this model, these agents will not have a specific behavior yet. They will be just displayed. Thus, we just have to define an aspect for the agents. We want to represent the **people** agents by a yellow circle of radius 10m. We then use the **circle** value for the **shape** facet of the **draw** command, with the expected color and radius size (defined by the facet **size**).\n\n```\nspecies people {\n\trgb color  residential_buildings  residential_buildings ","url":"wiki/RoadTrafficModel_step2.md"},{"id":"wiki/RoadTrafficModel_step3.md","title":" 3. Movement of People","content":"# 3. Movement of People\n\nThis third step presents how to create a road system from GIS data. More precisely, it shows how to build a graph from a list of polylines and to constrain the movement of an agent according to this graph.\n\n\n\n\n\n\n\n## Formulation\n  * Definition of day\\_time global variable that will indicate, according to the simulation step, the time of the day: each simulation step will represent 10 minutes, then the day\\_time variable will be ranged between 0 and 144.\n  * For each **people** agent: define a living\\_place(building of type 'Residential') and working place (building of type 'Industrial').\n  * For each **people** agent: define start\\_work and end\\_work hours that respectively represent when the agent leaves its house to go to work and when it leaves its working\\_place to go back home. These hours will be randomly define between 36 (6 a.m;) and 60 (10 a.m.) for the start\\_work and 84 (2p.m.) and 132 (10p.m.) for the end\\_work.\n  * For each **people** agent: define a objective variable: this one can 'go home' or 'working'.\n  * For each **people** agent: define a speed. The speed will be randomly define between 50 and 100.\n  * The **people** agents move along the road, taking the shortest path.\n\n\n\n\n\n\n## Model Definition\n\n### people agents\nFirst, we have to change the skill of the **people** agents: as we want to use an action of the **moving** skill (**goto**), we will provide the **people** agents with this skill. A [skill](AttachingSkills) is a built-in module that provide the modeler a self-contain and relevant set of actions and variables.\n\n```\n   species people skills: [moving]{\n       ...\n   }\n```\n\nThen, we have to add new variables to the people agents: living\\_place, working\\_place, start\\_work, end\\_work, objective. In addition, we will add a \"the\\_target\" variable that will represents the point toward which the agent will be currently moving.\n\n```\n   species people skills: [moving]{\n\trgb color  residential_buildings   industrial_buildings  residential_buildings   industrial_buildings ","url":"wiki/RoadTrafficModel_step3.md"},{"id":"wiki/RoadTrafficModel_step4.md","title":" 4. Weight for Road Network","content":"# 4. Weight for Road Network\nThe present model will introduce how to design a road system, or graph, based on the road GIS data and provide each edge a `weight`representing the destruction level of the road.\n\n\n\n\n\n\n\n## Formulation\n  * Add a **destruction\\_coeff** variable to the **road** agent. The value of this variable is higher or equal to 1 or lower or equal to 2. At initialization, the value of this variable is randomly defined between 1 and 2.\n  * In the road network graph, more a road is worn out (destruction\\_coeff high), more a **people** agent takes time to go all over it. Then the value of the arc representing the road in the graph is equal to \"length of the road `*` destruction\\_coeff\".\n  * The color of the road depends of the **destruction\\_coeff**. If \"destruction\\_coeff = 1\", the road is green, if \"destruction\\_coeff = 2\", the road is red.\n\n\n\n\n\n## Model Definition\n\n### road agent\nWe add a **destruction\\_coeff** variable which initial value is randomly defined between 1 and 2 and that have a max of 2. The color of the agent will depend of this variable. In order to simplify the GAML code, we define a new variable  **colorValue** that represents the value of red color and that will be defined between 0 and 255.\n\n```\n   species road  {\n\tfloat destruction_coeff  weights_map  weights_map  residential_buildings   industrial_buildings ","url":"wiki/RoadTrafficModel_step4.md"},{"id":"wiki/RoadTrafficModel_step5.md","title":" 5. Dynamic weights","content":"# 5. Dynamic weights\nThis 5th step illustrates how to obtain a shortest path from a point to another and to update the weights of an existing graph.\n\n\n\n\n\n\n\n\n## Formulation\n  * At initialization, the value of the **destruction\\_coeff** of the **road** agents will be equal to 1.\n  * Add a new parameter: the **destroy** parameter that represents the value of destruction when a people agent takes a road. By default, it is equal to 0.02.\n  * When an people arrive at its destination (home or work), it updates the **destruction\\_coeff** of the **road** agents it took to reach its destination:  \"destruction\\_coeff = destruction\\_coeff - destroy\". Then, the graph is updated.\n\n\n\n\n\n## Model Definition\n### global section\nWe add the **destroy** parameter.\n\nIn the global section, definition of the **destroy** and **update\\_roads** variables:\n```\n   float destroy  weights_map  segments  weights_map  residential_buildings   industrial_buildings  weights_map  segments ","url":"wiki/RoadTrafficModel_step5.md"},{"id":"wiki/RoadTrafficModel_step6.md","title":" 6. Charts","content":"# 6. Charts\nThis 6th step illustrates how to display charts.\n\n\n\n\n\n\n\n## Formulation\n  * Add a chart to display the evolution of the road destruction: the mean value of the **destruction\\_coeff** of the **road** agents, and its max value (refreshed every 10 simulation steps).\n  * Add a chart to display the activity of the **people** agent (working or staying home, refreshed every 10 simulation steps).\n\n\n\n\n\n## Model Definition\n### chart display\nFirst we add a chart of type **series** to display the road destruction evolution. To compute the mean of the **destruction\\_coeff**, we use the **mean** operator. For the max, we use the **max\\_of** operator.\n\n```\n     output {\n       display chart_display refresh:every(10) {\n             chart \"Road Status\" type: series size: {1, 0.5} position: {0, 0} {\n                  data \"Mean road destruction\" value: mean (road collect each.destruction_coeff) style: line color: #green ;\n\t\t  data \"Max road destruction\" value: road max_of each.destruction_coeff style: line color: #red ;\n\t    }\n         ...\n      }\n   }\n```\n\nSecond, we add a chart of type **pie** to display the activity of the **people** agents. We use for that the **objective** variable of the **people** agents and the **count** operator that allows to compute the number of elements of a list that verify a condition.\n\n```\n    output {\n      ...\n      display chart_display refresh:every(10) {\n          ...\n          chart \"People Objectif\" type: pie style: exploded size: {1, 0.5} position: {0, 0.5}{\n\t       data \"Working\" value: people count (each.objective=\"working\") color: #magenta ;\n\t       data \"Resting\" value: people count (each.objective=\"resting\") color: #blue ;\n\t  }\n     }\n   }\n```\n\n\n\n\n\n## Complete Model\n\n```\nmodel tutorial_gis_city_traffic\n\nglobal {\n\tfile shape_file_buildings  weights_map  residential_buildings   industrial_buildings  weights_map  segments ","url":"wiki/RoadTrafficModel_step6.md"},{"id":"wiki/RoadTrafficModel_step7.md","title":" 7. Automatic Road Repair","content":"# 7. Automatic Road Repair\nThis 7th step illustrates how how to select in a list an element that optimize a given function.\n\n\n\n\n\n\n\n## Formulation\n  * Add a new parameter, **repair\\_time**, that is equal to 2.\n  * Every **repair\\_time**, the **road** with the highest **destruction\\_coeff** value is repaired (set its **destruction\\_coeff** to 1).\n\n\n\n\n\n## Model Definition\n\n### parameters\nWe add a new parameter: the **repair\\_time**.\n\nIn the global section, definition of the **repair\\_time** variable:\n```\n   int repair_time  weights_map  residential_buildings   industrial_buildings  weights_map  segments ","url":"wiki/RoadTrafficModel_step7.md"},{"id":"wiki/ThreeD_step1.md","title":" 1. Basic Model","content":"# 1. Basic Model\n\n\n\nIn this first step, we will see how to define a 3D environment and populate it.\n\n\n\n\n\n\n## Formulation\nInitialize a 3D world with a population of cells placed randomly in a 3D 100x100x100 cube.\n  * Definition of the **cells** species\n  * Definition of the **nb\\_cells** parameter\n  * Creation of **nb\\_cells** **cells** agents randomly located in the 3D environment size: 100x100x100.\n\n\n![images/3D_model_LQ.png](resources/images/tutorials/3D_model_LQ.png)\n\n\n\n\n\n## Model Definition\n\nIn this model we define one species of agent: the **cells** agents. The agents will be just displayed as a blue sphere of radius 1.\n\n```\nspecies cells{                      \n  aspect default {\n    draw sphere(1) color:#blue;   \n  }\n}\n```\n\n### Global Section\n\n#### Global variable\n\nDefinition of a global variable **nb\\_cells** of type _int_ representing the number of **cells** agents.\n\n```\nglobal {\n   int nb_cells  3D) and the GIT version of the model can be found here [Model 01.gaml](https://github.com/gama-platform/gama/tree/master/msi.gama.models/models/Tutorials/3D/models/Model 01.gaml)\n\n```\nmodel Tuto3D\n\nglobal {\n  int nb_cells ","url":"wiki/ThreeD_step1.md"},{"id":"wiki/ThreeD_step2.md","title":" 2. Moving Cells","content":"# 2. Moving Cells\n\n\nThis second step model adds the **moving3D** skills to the **cell** agents and simply makes move the **cells** agent by defining a reflex that will call the action **move**. We will also add additional visual information to the display.\n\n\n\n\n\n## Formulation\n  * Redefining the shape of the world with a 3D Shape.\n  * Attaching new skills (**moving3D**) to **cells** agent.\n  * Modify **cells** aspect\n  * Add a graphics layer\n\n\n\n\n\n\n\n## Model Definition\n\n\n\n### Global Section\n\n\n#### Global variable\nWe use a new global variable called _environmentSize\\_that to define the size of our 3D environment.\nIn the global section we define the new variable\n```\nint environmentSize  ","url":"wiki/ThreeD_step2.md"},{"id":"wiki/ThreeD_step3.md","title":" 3. Connections","content":"# 3. Connections\n\n\n\n\n\n\n\n\n\n## Formulation\n  * Mapping the network of connection\n\n\n\n\n\n\n\n## Model Definition\nIn this final step we will display edges between cells that are within a given distance.\n\n### Cells update\n\nWe add a new reflex to collect the neighbours of the cell that are within a certain distance :\n\n```\nspecies cells skills:[moving3D]{\n...\nreflex computeNeighbours {\n                neighbours  neighbors;\n\tint offset;\n\t\n\treflex move {\n      do wander;\t\n\t}\t\n\t\n\treflex computeNeighbors {\n      neighbors ","url":"wiki/ThreeD_step3.md"},{"id":"wiki/IncrementalModel.md","title":" Incremental Model","content":"# Incremental Model\n\n\n\nThis tutorial has for goal to give an overview all most of the capabilities of GAMA. In particular, it presents how to build a simple model and the use of GIS data, graphs, 3D visualization, multi-level modeling and differential equations. All the files related to this tutorial (images and models) are available in the Models Library (project Tutorials/Incremental Model).\n\n\n\n\n\n\n## Model Overview\nThe model built in this tutorial concerns the study of the spreading of a disease in a small city.\nThree type of entities are taken into account: the people, the buildings and the roads.\n\nWe made the following modeling choice:\n  * Simulation step: 1 minute\n  * People are moving on the roads from building to building\n  * People use the shortest path to move between buildings\n  * All people have the same speed and move at constant speed\n  * Each time, people arrived at a building they are staying a certain time\n  * The staying time depends on the current hour (lower at 9h - go to work - at 12h go to lunch - at 18h - go back home)\n  * Infected people are never cured\n\n![images/incremental_model.jpg](resources/images/tutorials/incremental_model.jpg)\n\n\n\n\n\n## Step List\n\nThis tutorial is composed of 7 steps corresponding to 7 models. For each step we present its purpose, an explicit formulation and the corresponding GAML code.\n\n  1. [Simple SI Model](IncrementalModel_step1)\n  1. [Charts](IncrementalModel_step2)\n  1. [Integration of GIS Data](IncrementalModel_step3)\n  1. [Movement on Graph](IncrementalModel_step4)\n  1. [Visualizing in 3D](IncrementalModel_step5)\n  1. [Multi-Level](IncrementalModel_step6)\n  1. [Differential Equations](IncrementalModel_step7)","url":"wiki/IncrementalModel.md"},{"id":"wiki/LuneraysFlu.md","title":" Luneray's flu","content":"# Luneray's flu\n\n\nThis tutorial has for goal to introduce how to build a model with GAMA and to use GIS data and graphs. In particular, this tutorial shows how to write a simple GAMA model (the structure of a model, the notion of species...) load gis data, to agentify them and to use a network of polylines to constraint the movement of agents. The pdf of the presentation corresponding to this tutorial is available [here](https://github.com/gama-platform/gama/wiki/images/Tutorials/Luneray's flu/Luneray's flu.pdf). All the files related to this tutorial (shapefiles and models) are available [here](https://github.com/gama-platform/gama/wiki/images/Tutorials/Luneray's flu/Luneray's flu.zip). \n\nThe importation of models is described [here] (https://github.com/gama-platform/gama/wiki/G__ImportingModels)\n\n\n## Model Overview\nThe model built in this tutorial concerns the spreading of a flu in the city of Luneray (Normandie, France).\n\n![images/Luneray.jpg](resources/images/tutorials/Luneray.jpg)\n\nTwo layers of GIS data are used: a road layer (polylines) and a building layer (polygons). In this model, people agents are moving from building to building using the road network. Each infected people can infect the neighbor people.\n\nSome data collected concerning Luneray and the disease:\n* Number of inhabitants: 2147 (source : wikipedia)\n* Mean speed of the inhabitants (while moving on the road) : 2-5 km/h\n* The disease - non lethal - is spreading (by air) from people to people\n* Time to cure the disease: more than 100 days\n* Infection distance: 10 meters\n* Infection probability (when two people are at infection distance) : 0.05/minute\n\nFrom the data collected, we made some modeling choice:\n* Simulation step: 1 minute\n* People are moving on the roads from building to building \n* Most of time people are moving to meet their friend then go back home\n* People use the shortest path to move between buildings\n* All people move at constant speed\n* Each time, people arrived at a building they are staying a certain time : they are staying longer in their home than in their friend houses\n* Infected people are never cured\n\n![images/Luneray.png](resources/images/tutorials/Luneray.png)\n\n## Step List\n\nThis tutorial is composed of 5 steps corresponding to 5 models. For each step we present its purpose, an explicit formulation and the corresponding GAML code.\n\n  1. [Creation of a first basic disease spreading model](LuneraysFlu_step1)\n  1. [Definition of monitors and chart outputs](LuneraysFlu_step2)\n  1. [Importation of GIS data](LuneraysFlu_step3)\n  1. [Use of a graph to constraint the movements of people](LuneraysFlu_step4)\n  1. [Definition of 3D displays](LuneraysFlu_step5)","url":"wiki/LuneraysFlu.md"},{"id":"wiki/PredatorPrey.md","title":" Predator Prey","content":"# Predator Prey\n\n\n\nThis tutorial presents the structure of a GAMA model as well as the use of a grid topology. In particular, this tutorial shows how to define a basic model, to define \"grid agents\" which are able to move within the constraints. It also introduce the displays and agents' aspect.\n\n\nAll the files related to this tutorial (images and models) are available in the Models Library (project Tutorials/Predator Prey).\n## Content\n\n\n\n\n\n## Model Overview\nIn this model, three types of entities are considered: preys, predators and vegetation cells. Preys\neat grass on the vegetation cells and predators eat preys. At each simulation step, grass grows on the vegetation cells. Concerning the predators and preys, at each simulation step, they move (to a neighbor cell), eat, die if they do not have enough energy, and eventually reproduce.\n\n![images/predator_prey.png](resources/images/tutorials/predator_prey.png)\n\n\n\n\n## Step List\n\nThis tutorial is composed of 12 incremental steps corresponding to 12 models. For each step we present its purpose, an explicit formulation and the corresponding GAML code of the model.\n\n  1. [Basic model (prey agents)](PredatorPrey_step1)\n  1. [Dynamic of the vegetation (grid)](PredatorPrey_step2)\n  1. [Behavior of the prey agent](PredatorPrey_step3)\n  1. [Use of Inspectors/monitors](PredatorPrey_step4)\n  1. [predator agents (parent species)](PredatorPrey_step5)\n  1. [Breeding of prey and predator agents](PredatorPrey_step6)\n  1. [Agent display (aspect)](PredatorPrey_step7)\n  1. [Complex behaviors for the preys and predators](PredatorPrey_step8)\n  1. [Adding of a stopping condition](PredatorPrey_step9)\n  1. [Definition of charts](PredatorPrey_step10)\n  1. [Writing files](PredatorPrey_step11)\n  1. [Image loading (raster data)](PredatorPrey_step12)","url":"wiki/PredatorPrey.md"},{"id":"wiki/RoadTrafficModel.md","title":" Road Traffic","content":"# Road Traffic\n\n\n\nThis tutorial has for goal to present the use of GIS data and complex geometries. In particular, this tutorial shows how to load gis data, to agentify them and to use a network of polylines to constraint the movement of agents. All the files related to this tutorial (shapefiles and models) are available in the Models Library (project road\\_traffic\\_tutorial).\n\nIf you are not familiar with agent-based models or GAMA we advice you to have a look at the [prey-predator](PredatorPrey) model first.\n\n\n\n\n\n\n## Model Overview\nThe model built in this tutorial concerns the study of the road traffic in a small city. Two layers of GIS data are used: a road layer (polylines) and a building layer (polygons). The building GIS data contain an attribute: the 'NATURE' of each building: a building can be either 'Residential' or 'Industrial'. In this model, people agents are moving along the road network. Each morning, they are going to an industrial building to work, and each night they are coming back home. Each time a people agent takes a road, it wears it out. More a road is worn out, more a people agent takes time to go all over it. The town council is able to repair some roads.\n\n![images/road_traffic.png](resources/images/tutorials/road_traffic.png)\n\n\n\n\n\n## Step List\n\nThis tutorial is composed of 7 steps corresponding to 7 models. For each step we present its purpose, an explicit formulation and the corresponding GAML code.\n\n  1. [Loading of GIS data (buildings and roads)](RoadTrafficModel_step1)\n  1. [Definition of people agents](RoadTrafficModel_step2)\n  1. [Movement of the people agents](RoadTrafficModel_step3)\n  1. [Definition of weight for the road network](RoadTrafficModel_step4)\n  1. [Dynamic update of the road network](RoadTrafficModel_step5)\n  1. [Definition of a chart display](RoadTrafficModel_step6)\n  1. [Automatic repair of roads](RoadTrafficModel_step7)","url":"wiki/RoadTrafficModel.md"},{"id":"wiki/ThreeD.md","title":" 3D Tutorial","content":"# 3D Tutorial\n\n\n\nThis tutorial introduces the 3D features offered by GAMA.\n\n\n\n\n\n\n\n## Model Overview\n\n\n\n\n## Step List\n\nThis tutorial is composed of 3 steps corresponding to 3 models. For each step we present its purpose, an explicit formulation and the corresponding GAML code.\n\n  1. [Basic model](ThreeD_step1)\n  1. [Moving cells](ThreeD_step2)\n  1. [Moving cells with neighbours](ThreeD_step3)","url":"wiki/ThreeD.md"},{"id":"wiki/LearnGAMLStepByStep.md","title":" Learn GAML Step by Step","content":"# Learn GAML Step by Step\n\nThis large progressive tutorial has been designed to help you to learn **GAML** (**GA**ma **M**odeling **L**anguage).\nIt will cover the main part of the possibilities provided by GAML, and guide you to learn some more.\n\n## How to proceed to learn better ?\n\nAs you will progress in the tutorial, you will see several links (written in [blue](noURL)) to makes you jump to another part. You can click on them if you want to learn directly about a specific topic, but we do not encourage to do this, because you can get easily lost by reading this tutorial this way. As it is named, we encourage you to follow this tutorial \"step by step\". For each chapter, some links are available in the \"search\" tab, if you want to learn more about this subject.\n\nAlthough, if you really want to learn about a specific topic, our advise is to use the \"learning graph\" interface, in the website, so that you can choose your area of interest, and a learning path will be automatically design for you to assimilate the specific concept better.\n\nGood luck with your reading, and please do not hesitate to contact us through the [mailing list](https://groups.google.com/forum/#!forum/gama-platform) if you have a question/suggestion !","url":"wiki/LearnGAMLStepByStep.md"},{"id":"wiki/Recipes.md","title":" Recipes","content":"# Recipes\n\n\n\nUnderstanding the [structure of models](ModelOrganization) in GAML and gaining some insight of [the language](GamlReference) is required, but is usually not sufficient to build correct models or models that need to deal with specific approaches (like [equation-based modeling](Equations)). This section is intended to provide readers with practical \"how to\"s on various subjects, ranging from the use of [database access](UsingDatabase) to the design of [agent communication languages](UsingFIPAACL). It is by no means exhaustive, and will progressively be extended with more \"recipes\" in the future, depending on the concrete questions asked by users.","url":"wiki/Recipes.md"},{"id":"wiki/Tutorials.md","title":" Tutorials","content":"# Tutorials\n\n\n\n\nWe propose some tutorials that are designed to allow modelers to become progressively autonomous with the GAMA platform. These tutorials cover different aspects of GAMA (Grid environment, GIS integration, 3D, multi-level modeling, equation-based models...). It is a good idea to keep a copy of the [reference of the GAML language](GamlReference) around when undertaking one of these tutorials.\n\n* [Predator Prey](#predator-prey-tutorial)\n* [Road Traffic](#road-traffic)\n* [3D Tutorial](#3d-tutorial)\n* [Luneray's flu](#lunerays-flu-tutorial)\n* [Incremental Model](#incremental-model)\n\n## [Predator Prey tutorial](PredatorPrey)\n\n![resources/images/tutorials/predator_prey.png](resources/images/tutorials/predator_prey.png)\n\nThis tutorial introduces the basic concepts of GAMA and the use of grids. It is based on the classic predator prey model (see for instance a formal definition [here](http://www.scholarpedia.org/article/Agent_based_modeling)). It is particularly adapted to beginners that want to quickly learn how to build a simple model in GAMA.\n\n\n\n## [Road Traffic](RoadTrafficModel)\n\n![resources/images/tutorials/road_traffic.png](resources/images/tutorials/road_traffic.png)\n\nThis tutorial introduces the use of GIS data. It is based on a mobility and daily activity model. It is particularly adapted to modelers that want to quickly learn how to integrate GIS data in their model and to use a road shapefile for the movement of their agents.\n\n\n\n\n## [3D Tutorial](ThreeD)\n\nThis tutorial introduces the use of 3D in GAMA. In particular, it offers a quick overview of the 3D capabilities of the platform and how to integrate 3D features in models.\n\n\n## [Luneray's flu tutorial](LuneraysFlu)\n\n![resources/images/tutorials/Luneray.jpg](resources/images/tutorials/Luneray.jpg)\n\n\nThis tutorial dedicated to beginners introduces the basic concepts of GAMA and proposes a brief overview of many features.  It concerns a model of disease spreading in the small city of Luneray. In particular, it presents how to integrate GIS data and use GIS, to use a road shapefile for the movement of agents, and to define a 3D display.\n\n## [Incremental Model](IncrementalModel)\n\n![resources/images/tutorials/incremental_model.jpg](resources/images/tutorials/incremental_model.jpg)\n\n\nThis tutorial proposes is an advance version of the Luneray's tutorial. It concerns a model of disease spreading in a small city. In particular, it presents how to integrate GIS data and use GIS, to use a road shapefile for the movement of agents, to define a 3D display, to define a multi-level model and use differential equations.","url":"wiki/Tutorials.md"},{"id":"wiki/WhatsNext.md","title":" What's next ?","content":"# What's next ?\n\nNow you have a runnable GAMA on your computer, and you know a bit more about how to use the platform, you are ready to navigate through the website. Use the new powerful functionnalities of the website :\n\n* Try the **search engine** of the website to find quickly the notion you want to learn.\n* Navigate through the website by 3 different ways :\n  * [!images/general/icon_default_navigation.png](!images/general/icon_default_navigation.png) The **classic navigation** : to have a classic top-down navigation.\n  * [!images/general/icon_learning_graph_navigation.png](!images/general/icon_learning_graph_navigation.png) The **learning path navigation** : select the concept you want to learn, and a learning path will be build just for you, in order to assimilate this concept more quickly !\n  * [!images/general/icon_search_navigation.png](!images/general/icon_search_navigation.png) The **search related navigation** : for each page, some suggestions of related pages (dealing with the same concepts, or presenting the same GAML world) allows you to have a more transversal navigation.\n\n___________________________________________________________________________","url":"wiki/WhatsNext.md"},{"id":"wiki/CreatingAReleaseOfGama.md","title":" Product a release of GAMA","content":"# Product a release of GAMA\n## From the product\nLocate the file named `gama.product` (in plugin `ummisco.gama.product`) and open it.\nOn the first page, select the link `Eclipse Product export wizard` and follow the instructions in it. You can specify a root directory (under which the plugins will be copied) and an export directory on your hard drive where to export the whole application. Then click `Finish` and wait for a few minutes while Eclipse exports and packages your application. Once it is done, you can safely delete the `Repository` folder and the `logs.zip` file.\n## Specific to MacOS X\nUse `Gama.app` as the name of the root directory. Failing to do so will leave you with a non-working application. \n\n[[/resources/images/Export_Mac.png]]\n\nThis should result in a self-contained `Gama.app` application. However, the enclosed `Info.plist` lacks several key definitions. Open it (in a text editor) and paste the following items under the first  (replace existing double entries if necessary):\n```\n\tNSHighResolutionCapable\n\tTrue\n\tCFBundleExecutable\n\tGama\n\tCFBundleGetInfoString\n\tGama 1.7.0b, Copyright UMMISCO IRD/UPMC and partners 2006-2016 http://gama-platform.org\n\tCFBundleShortVersionString\n\t1.7.0b\n\tCFBundleSignature\n\tGAMA\n\tCFBundleVersion\n\t1.7.0b\n\n```\n\nIf you also want the `.gaml` documents to be decorated with an icon and recognized when double-clicking on them, you can add:\n```\n\tCFBundleDocumentTypes\n\t\n\t\t\n\t\t\tCFBundleTypeExtensions\n\t\t\t\n\t\t\t\tgaml\n\t\t\t\n\t\t\tCFBundleTypeIconFile\n\t\t\tModel.icns\n\t\t\tCFBundleTypeName\n\t\t\tGama Model\n\t\t\tCFBundleTypeRole\n\t\t\tEditor\n\t\t\tCFBundleTypeOSTypes\n\t\t\t\n\t\t\t\tTEXT\n\t\t\t\n\t\t\n\t\n```\n\nYou can additionally create an icon (`Model.icns`) for these files, which needs to reside in `Gama.app/Contents/Resources` next to `icon.icns`. An example of icon is available in the plugin `msi.gama.application/macosx`. \n\n## On Windows OS\nNo specific step to do. After select the link `Eclipse Product export wizard`, choose the directory for the export by click on Browse button, in Destination section. Then, click on Finish.\n\n## Configure your IDE in order to allow multi-platform builds\n\n* Open Eclipse Preferences\n* Navigate to Plugin Development Environment/Target Platform\n* Select your (active) target platform\n* Click Edit\n* Click Add\n* Select \"Software Site\"\n* Click Next\n* In \"Work With\" type: http://download.eclipse.org/eclipse/updates/4.5 (replace 4.5 with your current version)\n* Check \"Eclipse RCP Target Components\"\n* Check \"Equinox Target Components\"\n* **Uncheck** \"Include required software\" (**IMPORTANT**)\n* **Check** \"Include all environments\" (**IMPORTANT**)\n* Press Finish\n* Wait for the plugins to be downloaded and provisioned\n* Press Finish\n* Press OK\n\nOpen your product file and select the \"Export\" option. You will see that the \"Export for multiple platforms\" checkbox is available. The next page allows you to choose for which platform you'd like to export GAMA.","url":"wiki/CreatingAReleaseOfGama.md"},{"id":"wiki/DevelopingControlArchitectures.md","title":" Developing architecture","content":"# Developing architecture\n\n\n\nIn addition to existing [control architectures](BuiltInArchitectures), developers can add new ones.\n\nDefining a new control architecture needs to [create new statements of type behavior](DevelopingStatements) and included in species statements and to define how to manage their execution.\n\n\n\n\n\n\n## Implementation\n\nA control architecture is a Java class, that:\n  * is annotated by the [@skill](DevelopingIndexAnnotations#@skill) annotation,\n  * extends the `AbstractArchitecture` class (to get benefits of everything from the `reflex`-based control architecture, the `ReflexArchitecture` class can be extended instead).\n\nThe `AbstractArchitecture` extends the `ISkill` and `IStatement` interfaces and add the 2 following methods:\n  * `public abstract boolean init(IScope scope) throws GamaRuntimeException;`\n  * `public abstract void verifyBehaviors(ISpecies context);`\n\nThe three main methods to implement are thus:\n  * `public void setChildren(final List extends ISymbol> children)`: this method will be called at the compilation of the model. It allows to manage all the embeded statements (in `children`) and for example separate the statements that should be executed at the initialization only from the ones that should be executed at each simulation step. Following example allows to test the name of the all the embedded statements:\n```\nfor ( final ISymbol c : children ) {\n   if( IKeyword.INIT.equals(c.getFacet(IKeyword.KEYWORD).literalValue()) ) {\n```\n  * `public abstract boolean init(IScope scope) throws GamaRuntimeException`: this method is called only once, at the initialization of the agent.\n  * `public Object executeOn(final IScope scope) throws GamaRuntimeException`: this method is executed at each simulation step. It should manage the execution of the various embedded behaviors (e.g. their order or choose which one will be executed...)","url":"wiki/DevelopingControlArchitectures.md"},{"id":"wiki/DevelopingIScope.md","title":" IScope interface","content":"# IScope interface\n\n\n\nAn object of type IScope represents the context of execution of an agent (including experiments, simulations, and \"regular\" agents). Everywhere it is accessible (either passed as a parameter or available as an instance variable in some objects), it provides an easy access to a number of features: the current active agent, the shared random number generator, the global clock, the current simulation and experiment agents, the local variables declared in the current block, etc.\n\nIt also allows modifying this context, like changing values of local variables, adding new variables, although these functions should be reserved to very specific usages. Ordinarily, the scope is simply passed to core methods that allow to evaluate expressions, cast values, and so on.\n\n\n\n\n\n\n## Use of an IScope\n\nA variable `scope` of type `IScope` can be used to:\n  * get the current agent with: `scope.getAgentScope()`\n```\nIAgent agent = scope.getAgentScope();\n```\n  * evaluate an expression in the current scope:\n```\nString mes = Cast.asString(scope, message.value(scope));\n```\n  * know whether the scope has been interrupted:\n```\nboolean b = scope.interrupted();\n```","url":"wiki/DevelopingIScope.md"},{"id":"wiki/DevelopingIndexAnnotations.md","title":" Index of annotations","content":"# Index of annotations\n\n\n\nAnnotations are used to link Java methods and classes to GAML language.\n\n\n\n\n## @action\nThis annotations is used to tag a method that will be considered as an action (or primitive) in GAML.\nThe method must have the following signature: ```\nObject methodName(IScope) throws GamaRuntimeException ``` and be contained in a class annotated with [@species](#species) or [@skill](#skill) (or a related class, like a subclass or an interface).\n\nThis annotation contains:\n  * **name** (String): _the name of the variable as it can be used in GAML_.\n  * **virtual** (boolean, false by default): _if true the action is virtual, i.e. equivalent to abstract method in java_.\n  * **args** (set of [@arg](#arg), empty by default): _the list of arguments passed to this action. Each argument is an instance of arg_.\n  * **doc** (set of [@doc](#doc), empty by default): _the documentation associated to the action_.\n\n\n\n\n\n## @arg\nThis annotations describes an argument passed to an action.\n\nThis annotation contains:\n  * **name** (String, \"\" by default): _the name of the argument as it can be used in GAML_.\n  * **type** (set of ints, empty by default): _An array containing the textual representation of the types that can be taken by the argument (see IType)_.\n  * **optional** (boolean, true by default): _whether this argument is optional or not_.\n  * **doc** (set of [@doc](#doc), empty by default): _the documentation associated to the argument._\n\n## @constant\nThis annotation is used to annotate fields that are used as constants in GAML.\n\nThis annotation contains:\n  * **category** (set of Strings, empty by default): _an array of strings, each representing a category in which this constant can be classified (for documentation indexes)_.\n  * **value** (String): _a string representing the basic keyword for the constant. Does not need to be unique throughout GAML_.\n  * **altNames** (set of Strings, empty by default): _an Array of strings, each representing a possible alternative name for the constant. Does not need to be unique throughout GAML_.\n  * **doc** (set of [@doc](#doc), empty by default): _the documentation attached to this constant_.\n\n\n\n## @doc\nIt provides a unified way of attaching documentation to the various GAML elements tagged by the other annotations. The documentation is automatically assembled at compile time and also used at runtime in GAML editors.\n\nThis annotation contains:\n  * **value** (String, \"\" by default): _a String representing the documentation of a GAML element_.\n  * **masterDoc** (boolean, false by default): _a boolean representing the fact that this instance of the operator is the master one, that is whether its value will subsume the value of all other instances of it_.\n  * **deprecated** (String, \"\" by default): _a String indicating (if it is not empty) that the element is deprecated and defining, if possible, what to use instead_.\n  * **returns** (String, \"\" by default): _the documentation concerning the value(s) returned by this element (if any)._.\n  * **comment** (String, \"\" by default): _an optional comment that will appear differently from the documentation itself_.\n  * **special\\_cases** (set of Strings, empty by default): _an array of String representing the documentation of the \"special cases\" in which the documented element takes part_.\n  * **examples** (set of [@example](#example), empty by default): _an array of String representing some examples or use-cases about how to use this element_.\n  * **usages** (set of [@usage](#usage), empty by default): _An array of usages representing possible usage of the element in GAML_.\n  * **see** (set of Strings, empty by default): _an array of String representing cross-references to other elements in GAML_.\n\n\n## @example\nThis facet describes an example, that can be used either in the documentation, as unit test or as pattern.\n\nThis annotation contains:\n  * **value** (String, \"\" by default): _a String representing the expression as example_.\n  * **var** (String, \"\" by default): _The variable that will be tested in the equals, if it is omitted a default variable will be used_.\n  * **equals** (String, \"\" by default): _The value to which the value will be compared_.\n  * **returnType** (String, \"\" by default): _The type of the value that should be tested_.\n  * **isNot** (String, \"\" by default): _The value to which the value will be compared_.\n  * **raises** (String, \"\" by default): _The exception or warning that the expression could raise_.\n  * **isTestOnly** (boolean, false by default): _specifies that the example should not be included into the documentation_.\n  * **isExecutable** (boolean, true by default): _specifies that the example is correct GAML code that can be executed_.\n  * **test** (boolean, true by default): _specifies that the example is will be tested with the equals_.\n  * **isPattern** (boolean, false by default): _whether or not this example should be treated as part of a pattern (see @usage). If true, the developers might want to consider writing the example line (and its associated lines) using template variables (e.g. ${my_agent})_.\n\t\t\n\n## @facet\nThis facet describes a facet in a list of facets.\n\nThis annotation contains:\n  * **name** (String): _the name of the facet. Must be unique within a symbol_.\n  * **type** (set of int): _the string values of the different types that can be taken by this facet_.\n  * **values** (set of Strings, empty by default): _the values that can be taken by this facet. The value of the facet expression will be chosen among the values described here_.\n  * **optional** (boolean, false by default): _whether or not this facet is optional or mandatory_.\n  * **doc** (set of [@doc](#doc), empty by default): _the documentation associated to the facet_.\n\n\n\n\n\n## @facets\nThis annotation describes a list of facets used by a statement in GAML.\n\nThis annotation contains:\n  * **value** (set of [@facet](#facet)): array of @facet, each representing a facet name, type..\n  * **ommissible** (string): _the facet that can be safely omitted by the modeler (provided its value is the first following the keyword of the statement)_.\n\n\n## @file\nThis annotation is used to define a type of file.\n\nThis annotation contains:\n  * **name** (String): _a (human-understandable) string describing this type of files, suitable for use in composed operator names (e.g. \"shape\", \"image\"...). This name will be used to generate two operators: name+\"_file\" and \"is_\"+name. The first operator may have variants taking one or several arguments, depending on the @builder annotations present on the class_.\n  * **extensions** (set of Strings): _an array of extensions (without the '.' delimiter) or an empty array if no specific extensions are associated to this type of files (e.g. [\"png\",\"jpg\",\"jpeg\"...]). The list of file extensions allowed for this type of files. These extensions will be used to check the validity of the file path, but also to generate the correct type of file when a path is passed to the generic \"file\" operator_.\n  * **buffer\\_content** (int, ITypeProvider.NONE by default): _the type of the content of the buffer. Can be directly a type in IType or one of the constants declared in ITypeProvider (in which case, the content type is searched using this provider)_.\n  * **buffer\\_index** (int, ITypeProvider.NONE by default): _the type of the index of the buffer. Can be directly a type in IType or one of the constants declared in ITypeProvider (in which case, the index type is searched using this provider)_.\n  * **buffer\\_type** (int, ITypeProvider.NONE by default): _the type of the buffer. Can be directly a type in IType or one of the constants declared in ITypeProvider (in which case, the type is searched using this provider)_.\n  * **doc** (set of [@doc](#doc), empty by default): _the documentation attached to this operator_.\n\n\n## @getter\nThis annotations is used to indicate that a method is to be used as a getter for a variable defined in the class. The variable must be defined on its own (in vars).\n\nThis annotation contains:\n  * **value** (String): the name of the variable for which the annotated method is to be considered as a getter.\n  * **initializer** (boolean, false by default): returns whether or not this getter shoud also be used as an initializer\n\n\n\n\n\n## @inside\nThis annotation is used in conjunction with symbol. Provides a way to tell where this symbol should be located in a model (i.e. what its parents should be). Either direct symbol names (in symbols) or generic symbol kinds can be used.\n\nThis annotation contains:\n  * **symbols** (set of Strings, empty by default): _symbol names of the parents_.\n  * **kinds** (set of int, empty by default): _generic symbol kinds of the parents (see [ISymbolKind.java](https://github.com/gama-platform/gama/tree/master/msi.gama.processor/src/msi/gama/precompiler/ISymbolKind.java) for more details)_.\n\n\n\n\n\n## @operator\nThis annotation represents an \"operator\" in GAML, and is used to define its name(s) as well as some meta-data that will be used during the validation process.\n\nThis annotation contains:\n  * **value** (set of Strings, empty by default): _names of the operator_.\n  * **category** (set of string, empty by default): _categories to which the operator belong (for documentation purpose)_.\n  * **iterator** (boolean, false by default): _true if this operator should be treated as an iterator (i.e.requires initializing the special variable \"each\" of WorldSkill within the method)_.\n  * **can\\_be\\_const** (boolean, false by default): _if true: if the operands are constant, returns a constant value_.\n  * **content\\_type** (int, ITypeProvider.NONE by default): _the type of the content if the returned value is a container. Can be directly a type in IType or one of the constants declared in ITypeProvider (in which case, the content type is searched using this provider)_.\n  * **index\\_type** (int, ITypeProvider.NONE by default): _the type of the index if the returned value is a container. Can be directly a type in IType or one of the constants declared in ITypeProvider (in which case, the index type is searched using this provider)_.\n  * **expected\\_content\\_type** (set of int, empty by default): _if the argument is a container, returns the types expected for its contents. Should be an array of IType.XXX_.\n  * **type** (int, ITypeProvider.NONE by default): _the type of the expression if it cannot be determined at compile time (i.e. when the return type is \"Object\"). Can be directly a type in IType or one of the constants declared in ITypeProvider (in which case, the type is searched using this provider)._.\n  * **internal** (boolean, false by default): _returns whether this operator is for internal use only_. \n  * **doc** (set of [@doc](#doc), empty by default): _the documentation attached to this operator._\n\n\n\n\n\n\n## @serializer\nIt allows to declare a custom serializer for Symbols (statements, var declarations, species ,experiments, etc.). This serializer will be called instead of the standard serializer, superseding this last one. Serializers must be subclasses of the SymbolSerializer class.\n  * **value** (Class): _the serializer class_.\n\n\n\n\n\n\n## @setter\nThis annotations is used to indicate that a method is to be used as a setter for a variable defined in the class. The variable must be defined on its own (in vars).\n\nThis annotation contains:\n  * **value** (String): the name of the variable for which the annotated method is to be considered as a setter.\n\n\n\n\n\n\n## @skill\nThis annotations Allows to define a new skill (class grouping variables and actions that can be used by agents).\n\nThis annotation contains:\n  * **name** (String): _a String representing the skill name in GAML (must be unique throughout GAML)_.\n  * **attach\\_to** (set of strings): _an array of species names to which the skill will be automatically added (complements the \"skills\" parameter of species)_.\n  * **internal** (boolean, false by default): _return whether this skill is for internal use only_.\n  * **doc** (set of [@doc](#doc), empty by default): _the documentation associated to the skill_.\n\n\n\n\n\n## @species\nThis annotation represents a \"species\" in GAML. The class annotated with this annotation will be the support of a species of agents.\n\nThis annotation contains:\n  * **name** (string): _the name of the species that will be created with this class as base. Must be unique throughout GAML_.\n  * **skills** (set of strings, empty by default): _An array of skill names that will be automatically attached to this species._ Example: ```\n @species(value=\"animal\" skills={\"moving\"}) ```\n  * **internal** (boolean, false by default): _whether this species is for internal use only_.\n  * **doc** (set of [@doc](#doc), empty by default): _the documentation attached to this operator._\n\n\n\n\n\n\n## @symbol\nThis annotation represents a \"statement\" in GAML, and is used to define its name(s) as well as some meta-data that will be used during the validation process.\n\nThis annotation contains:\n  * **name** (set of string, empty by default): _names of the statement_.\n  * **kind** (int): _the kind of the annotated symbol (see [ISymbolKind.java](https://github.com/gama-platform/gama/tree/master/msi.gama.processor/src/msi/gama/precompiler/ISymbolKind.java) for more details)_.\n  * **with\\_scope** (boolean, true by default): _indicates if the statement (usually a sequence) defines its own scope. Otherwise, all the temporary variables defined in it are actually defined in the super-scope_.\n  * **with\\_sequence** (boolean): _indicates wether or not a sequence can or should follow the symbol denoted by this class_.\n  * **with\\_args** (boolean, false by default): _indicates wether or not the symbol denoted by this class will accept arguments_.\n  * **remote\\_context** (boolean, false by default): _indicates that the context of this statement is actually an hybrid context: although it will be executed in a remote context, any temporary variables declared in the enclosing scopes should be passed on as if the statement was executed in the current context_.\n  * **doc** (set of [@doc](#doc), empty by default): _the documentation attached to this symbol_.\n  * **internal** (boolean, false by default): _returns whether this symbol is for internal use only_.\n  * **unique\\_in\\_context** (boolean, false by default): _Indicates that this statement must be unique in its super context (for example, only one return is allowed in the body of an action)._.\n  * **unique\\_name** (boolean, false by default): _Indicates that only one statement with the same name should be allowed in the same super context_.\n\n\n## @type\nIt provides information necessary to the processor to identify a type.\n\nThis annotation contains:\n  * **name** (String, \"\" by default): _a String representing the type name in GAML_.\n  * **id** (int, 0 by default): _the unique identifier for this type. User-added types can be chosen between IType.AVAILABLE\\_TYPE and IType.SPECIES\\_TYPE (exclusive) (cf. [IType.java](https://github.com/gama-platform/gama/tree/master/msi.gama.core/src/msi/gaml/types/IType.java))_.\n  * **wraps** (tab of Class, null by default): _the list of Java Classes this type is \"wrapping\" (i.e. representing). The first one is the one that will be used preferentially throughout GAMA. The other ones are to ensure compatibility, in operators, with compatible Java classes (for instance, List and GamaList)_.\n  * **kind** (int, ISymbolKind.Variable.REGULAR by default): _the kind of Variable used to store this type. See [ISymbolKind.Variable](https://github.com/gama-platform/gama/tree/master/msi.gama.processor/src/msi/gama/precompiler/ISymbolKind.java)_.\n  * **internal** (boolean, false by default): _whether this type is for internal use only_.\n  * **doc** (set of [@doc](#doc), empty by default): _the documentation associated to the facet_.\n\n\n## @usage\nThis replaces @special_cases and @examples, and unifies the doc for operators, statements and others.\nAn @usage can also be used for defining a template for a GAML structure, and in that case requires the following to be defined:\n  * A name (attribute \"name\"), optional, but better\n  * A description (attribute \"value\"), optional\n  * A menu name (attribute \"menu\"), optional\n  * A hierarchical path within this menu (attribute \"path\"), optional\n  * A pattern (attribute \"pattern\" or concatenation of the @example present in \"examples\" that define \"isPattern\" as true)\n\nThis annotation contains:\n  * **value** (String): _a String representing one usage of the keyword. Note that for usages aiming at defining templates, the description is displayed on a tooltip in the editor. The use of the path allows to remove unecessary explanations. For instance, instead of writing : description=\"This template illustrates the use of a complex form of the \"create\" statement, which reads agents from a shape file and uses the tabular data of the file to initialize their attributes\", choose: name=\"Create agents from shapefile\" menu=STATEMENT; path={\"Create\", \"Complex forms\"} description=\"Read agents from a shape file and initialze their attributes\". If no description is provided, GAMA will try to grab it from the context where the template is defined (in the documentation, for example)_.\n  * **menu** (String, \"\" by default): _Define the top-level menu where this template should appear. Users are free to use other names than the provided constants if necessary (i.e. \"My templates\"). When no menu is defined, GAMA tries to guess it from the context where the template is defined_.\n  * **path** (set of Strings, empty be default): The path indicates where to put this template in the menu. For instance, the following annotation: \" menu = STATEMENT; path = {\"Control\", \"If\"} will put the template in a menu called \"If\", within \"Control\", within the top menu \"Statement\". When no path is defined, GAMA will try to guess it from the context where the template is defined (i.e. keyword of the statement, etc.)\n  * **name** (String, \"\" by default): _The name of the template should be both concise (as it will appear in a menu) and precise (to remove ambiguities between templates)_.\n  * **examples** (set of [@example](#example), empty by default): _An array of String representing some examples or use-cases about how to use this element, related to the particular usage above_.\n  * **pattern** (String, \"\" by default): _Alternatively, the contents of the usage can be descried using a @pattern (rather than an array of [@example](#example)). The formatting of this string depends entirely on the user (e.g. including \\n and \\t for indentation, for instance)_.\n\n\n## @validator\nIt allows to declare a custom validator for Symbols (statements, var declarations, species ,experiments, etc.). This validator, if declared on subclasses of Symbol, will be called after the standard validation is done. The validator must be subclass of IDescriptionValidator.\n  * **value** (Class): _the validator class_.\n\n\n\n\n\n## @var\nThis annotation is used to describe a single variable or field.\n\nThis annotation contains:\n  * **name** (String): _the name of the variable as it can be used in GAML_.\n  * **type** (int): _The textual representation of the type of the variable (see IType)_.\n  * **of** (int, 0 by default): _The textual representation of the content type of the variable (see IType#defaultContentType())_.\n  * **index** (int, 0 by default): _The textual representation of the index type of the variable (see IType#defaultKeyType())_.\n  * **constant** (boolean, false by default): _returns whether or not this variable should be considered as non modifiable_.\n  * **init** (String, \"\" by default): _the initial value of this variable as a String that will be interpreted by GAML_.\n  * **depend\\_on** (set of Strings, empty by default): _an array of String representing the names of the variables on which this variable depends (so that they are computed before)_.\n  * **internal** (boolean, false by default): _return whether this var is for internal use only_.\n  * **doc** (set of [@doc](#doc), empty by default): _the documentation associated to the variable_.\n\n\n\n\n\n\n## @vars\nThis annotation is used to describe a set of variables or fields.\n\nThis annotation contains:\n  * **value** (set of @var): _an Array of var instances, each representing a variable_.","url":"wiki/DevelopingIndexAnnotations.md"},{"id":"wiki/DevelopingOperators.md","title":" Developing Operators","content":"# Developing Operators\n\n\n\n[Operators](Operators) in the GAML language are used to compose complex expressions. An operator performs a function on one, two, or n operands (which are other expressions and thus may be themselves composed of operators) and returns the result of this function. Developing a new operator allows, then, to add a new function to GAML.\n\n\n\n\n\n\n## Implementation\n\nA new operator can be **any Java method** that:\n  * begins by the [@operator](DevelopingIndexAnnotations#@operator) (other fields can be added to the annotation): `@operator(value = \"name_of_the_operator_gaml\")`,\n```\n@operator(value = \"rgb\")\npublic static GamaColor rgb(final int r, final int g, final int b, final double alpha) {\t\n```\n\nThe method:\n  * must return a value (that has to be one of the GAMA Type: Integer, Double, Boolean, String, IShape, IList, IGraph, IAgent...),\n  * can define any number of parameters, defined using Java type,\n  * can be either static or non-static:\n    * in the case it is static, the number of parameters (except an IScope attribute) of the method is equal to the number of operands of the GAML operator.\n    * in the case it is not static, a first operand is added to the operator with the type of the current class.\n  * can have a IScope parameter, that will be taken into account as operand of the operator.\n\n\n\n\n\n\n## Annotations\n### @operator\nThis annotation represents an \"operator\" in GAML, and is used to define its name(s) as well as some meta-data that will be used during the validation process.\n\nThis annotation contains:\n  * **value** (set of string, empty by default): _names of the operator_.\n  * **content\\_type** (integer) : _if the operator returns a container, type of elements contained in the container_\n  * **can\\_be\\_const** (boolean, false by default): _if true: if the operands are constant, returns a constant value_.\n  * **category** (set of string, empty by default): _categories to which the operator belong (for documentation purpose)_.\n  * **doc** (set of @doc, empty by default): _the documentation attached to this operator._\n\n### @doc\nIt provides a unified way of attaching documentation to the various GAML elements tagged by the other annotations. The documentation is automatically assembled at compile time and also used at runtime in GAML editors.\n  * **value** (String, \"\" by default): _a String representing the documentation of a GAML element_.\n  * **deprecated** (String, \"\" by default): _a String indicating (if it is not empty) that the element is deprecated and defining, if possible, what to use instead_.\n  * **returns** (String, \"\" by default): _the documentation concerning the value(s) returned by this element (if any)._.\n  * **comment** (String, \"\" by default): _an optional comment that will appear differently from the documentation itself_.\n  * **special\\_cases** (set of Strings, empty by default): _an array of String representing the documentation of the \"special cases\" in which the documented element takes part_.\n  * **examples** (set of Strings, empty by default): _an array of String representing some examples or use-cases about how to use this element_.\n  * **see** (set of Strings, empty by default): _an array of String representing cross-references to other elements in GAML_.\n\nAll these annotations are defined in the `GamlAnnotations.java` file of the `msi.gama.processor` plug-in.","url":"wiki/DevelopingOperators.md"},{"id":"wiki/DevelopingPlugins.md","title":" Developing Plugins","content":"# Developing Plugins\n\n\n\nThis page details how to create a new plug-in in order to extend the GAML language with new skills, species, displays or operators.\nIt also details how to create a plug-in that can be  uploaded on an update site and can be installed into the GAMA release.\nWe consider here that the developer version of GAMA has been installed (as detailled in [this page](InstallingGitVersion)).\n\n\n\n\n\n\n## Creation of a plug-in\n\nHere are detailled steps to create and configure a new GAMA plug-in.\n\n  * File > New > Project > plug-in project\n  * In the \"New plug-in Project\" / \"Plug-in project\" window:\n    * Choose as **name** « name\\_of\\_the\\_plugin » (or anything else)\n    * Check \"Use défaut location\"\n    * Check \"Create a Java Project\"\n    * The project should be targeted to run with Eclipse\n    * working set is unchecked\n    * Click on \"Next\"\n  * In the \"New plug-in Project\" / \"Content\" window:\n    * Id : could contain the name of your institution and/or your project, e.g. « irit.maelia.gaml.additions »\n    * version 1.0.0.qualifier (this latter mention is important if you plan on distributing the plugin on GAMA update site)\n    * Name « Additions to GAML from Maelia project »\n    * Uncheck \"Generate an activator, a Java class that controls the plug-in's life cycle\" ,\n    * Uncheck \"This plug-in will make contributions to the UI\"\n    * Check \"No\" when its asks \"Would you like to create a rich client application ?\"\n    * Click on \"Next\"\n  * In the \"New plug-in Project\" / \"Templates\" window:\n    * Uncheck \"Create a plug-in using one of the templates\"\n    * Click on \"Finish\"\n\nYour plug-in has been created.\n\n  * Edit the file \"Manifest.MF\":\n    * Overview pane:\n      * check « This plug-in is a singleton »\n    * Dependencies pane:\n      * add (at least minimum) the three plug-ins \"msi.gama.core\", \"msi.gama.ext\" and \"msi.gama.processor\" in the \"Required Plug-ins\". When you click on \"Add\", a new window will appear without any plug-in. Just write the beginning of the plug-in name in the text field under \"Select a plug-in\".\n    * Runtime pane:\n      * In exported Packages: nothing (but when you will have implemented new packages in the plug-in you should add them there)\n      * Add in the classpath all the additional libraries (.jar files) used in the project.\n    * Extensions pane:\n      * \"Add\" \"gaml.extension\"\n    * Save the file. This should create a \"plugin.xml\" file.\n\n  * Select the project and in menu Project > Properties:\n    * Java Compiler  > Annotation Processing: check \"Enable project specific settings\", then in \"Generated Source Directory\", change \".apt\\_generated\" in \"gaml\",\n    * Java Compiler  > Annotation Processing > Factory path: check \"Enable project specific settings\", then \"Add Jars\" and choose \"msi.gama.processor/processor/plugins/msi.gama.processor.1.4.0.jar\"\n    * Close the menu. It should compile the project and create the `gaml` directory.\n    * Return in the Project > Properties Menu.\n    * In Java Buildpath  > Source, check that the gaml directory has been added. Otherwise click on Add Folder and select the gaml directory\n\n\nThe plug-in is ready to accept any addition to the GAML language, e.g. skills, actions, operators.\n\nDo not forget to export the created packages that could be used by \"clients\", especially the packages containing the code of the additions (in the plugin.xml of the new project, tab \"Runtime\").\n\nTo test the plug-in and use it into GAMA, developers have to define a new feature project containing your plugin and its dependencies, and adds this feature to the existing product (or a new .product file of your own).\nThe use of feature is also mandatory to define a plug-in that can be uploaded on the update site and can be installed in the release of GAMA.\n\n\n\n\n\n## Creation of a feature\n\nA feature is an Eclipse project dedicated to gather one or several plug-ins to integrate them into a product or to deploy them on the update site and install them from the GAMA release (a feature is mandatory in this case).\n\nHere are detailled steps to create and configure a new feature.\n\n  * File > New > Feature project (or File > New > Project... then  Plug-in Development > Feature Project)\n  * In Feature properties\n    * Choose a project name (e.g. \"institution.gama.feature.pluginsName\")\n    * Click on \"Next\"\n  * In Referenced Plug-ins and fragments\n    * Check \"Initialize from the plug-ins list:\"\n    * Choose the plug-ins that have to be gathered in the feature\n    * Click on \"Finish\"\n  * A new project has been created. The \"feature.xml\" file will configure the feature.\n    * In \"Information pane\":\n      * You can add description of the various plug-ins of the feature, define the copyright notice and the licence.\n    * In \"Plug-ins and Fragments\"\n      * In the Plug-ins and Fragments, additional plug-ins can be added.\n\n\n\n\n\n## Addition of a feature to the product\n\nIn the product, e.g. `gama.product` in the `ummisco.gama.product` project:\n  * Contents pane\n    * Click on Add button\n    * In the window select the feature\n    * Click on OK.\n\n**Remark:** To check whether the new plug-in has been taken into account by GAMA, after GAMA launch, it should appear in the Eclipse console in a line beginning by \">> GAMA bundle loaded in \".\n\n\n\n\n\n## How to make a plug-in available at GAMA update site for the GAMA release \n\nConsidering a working GAMA plugin named institution.gama.pluginsName\n\n### Configure plugin to be available for Maven\n\na/ Add pom.xml for plugin institution.gama.pluginsName :\n* Right click -> Configure -> Convert to maven project to add pom.xml:\n* Set:\n  * Group id: institution.gama.pluginsName\n  * Artifact id: institution.gama.pluginsName\n  * Version: 1.0.0-SNAPSHOT // must have -SNAPSHOT if the plugin version is x.x.x.qualifier\n  * Packaging: eclipse-plugin\n* Finish\n\nb/ Configure pom.xml to recognize the parent pom.xml for Maven builds\n* Open pom.xml in institution.gama.pluginsName\n* Tab overview, Parent section, type in:\n  * Group id: msi.gama\n  * Artifact id: msi.gama.experimental.parent\n  * Version: 1.7.0-SNAPSHOT\n  * Relative path: ../msi.gama.experimental.parent\n* Save\n\nc/ Update maven cache in eclipse (optional)\nIt will fix this compilation error \"Project configuration is not up-to-date with pom.xml. Select: Maven->Update Project... from the project context menu or use Quick Fix.\"\n* Right click -> Maven -> Update project\n\n\n### Create a feature for the plugin\n\na/ Create new feature\n* New -> Project -> type in : feature -> Select \"Feature Project\"\n* Set:\n  * Project name: institution.gama.feature.pluginsName\n  * Uncheck use default location, type in: {current git repository}\\aaa.bbb.feature.ccc \n  * Feature Version: 1.0.0.qualifier\n  * Update Site URL: http://updates.gama-platform.org/experimental\n  * Update Site Name: GAMA 1.7.x Experimental Plugins Update Site\n* Click Next\n  * Initialize from the plugin list -> check all plugins needed:\n    institution.gama.pluginsName (1.0.0.qualifier)\n* Finish\n\nb/  Add pom.xml for feature institution.gama.feature.pluginsName :\n\n* Right click -> Configure -> Convert to maven project (to add pom.xml)\n* Set:\n  * Group id: institution.gama.feature.pluginsName\n  * Artifact id: institution.gama.feature.pluginsName\n  * Version: 1.0.0-SNAPSHOT \n  * Packaging: eclipse-feature\n* Finish\n\nc/ Configure pom.xml to recognize the parent pom.xml for Maven builds\n* Open pom.xml in institution.gama.pluginsName\n* Tab overview, Parent section, type in:\n  * Group id: msi.gama\n  * Artifact id: msi.gama.experimental.parent\n  * Version: 1.7.0-SNAPSHOT\n  * Relative path: ../msi.gama.experimental.parent\n* Save\n\nd/ Update maven cache in eclipse (optional)\nIt will fix this compilation error \"Project configuration is not up-to-date with pom.xml. Select: Maven->Update Project... from the project context menu or use Quick Fix.\"\n* Right click -> Maven -> Update project\n\n\n### Update p2updatesite category.xml (this step will be done automatically by travis, soon)\nOpen msi.gama.experimental.p2updatesite\n* Tab Managing the Categories -> Add feature -> institution.gama.feature.pluginsName\n\n\n\n\n\n\n\n\n\n\n\n\n\n## How to make a plug-in available as an extension for the GAMA release (obsolete)\n\nOnce the plug-in has been tested in the GAMA SVN version, it can be made available for GAMA release users.\n\nFirst, the `update_site` should be checked out from the SVN repository:\n  * File > New > Other... > SVN > Project from SVN\n  * In Checkout Project from SVN repository\n    * Use existing repository location (it is the same location as for the GAMA code)\n    * Next\n  * In Select resource:\n    * Browse\n      * choose svn > update\\_site\n    * Finish\n  * Finish\n\nNow the update\\_site project is available in the project list (in Package Explorer).\nThe sequel describes how to add a new feature to the update site.\n  * Open the `site.xml` file\n  * In update site Map:\n    * Click on Extensions\n    * click on the Add Feature... button\n      * Choose the feature to be added\n      * It should appear in Extensions\n    * Select the added feature and click on the Synchronize... button\n      * Check Synchronize selected features only\n      * Finish\n    * Select the added feature and click on the Build button\n  * All the files and folder of the update\\_site project have been modified.\n  * Commit all the modifications on the SVN repository\n    * Richt-click on the project, Team > Update\n    * Richt-click on the project, Team > Commit...\n\nThe plug-in is now available as an extension from the GAMA release.\nMore details about the update of the GAMA realease are available [on the dedicated page](Updating).","url":"wiki/DevelopingPlugins.md"},{"id":"wiki/DevelopingSkills.md","title":" Developing a New Skill","content":"# Developing a New Skill\n\n\n\nA skill adds new features (attributes) and new capabilities (actions) to the instances of the species that use it.\n\n\n\n\n\n## Defining the class\n\nA Skill is basically a **singleton** and **stateless** Java class that:\n  * extends the abstract class `Skill`,\n  * begins by the annotation [@skill](DevelopingIndexAnnotations#@skill): `@skill(name = \"name_of_the_skill_in_gaml\")`.\n\nNote: GAMA annotations are classes defined into the `msi.gama.precompiler.GamlAnnotations` class.\n\n\n\n\n\n## Defining new attributes\n\nTo add new attributes to the species that declares this skill, developers have to define them before the class using the [@vars](DevelopingIndexAnnotations#@vars) and `@var` annotations.\nThe `@vars` annotation contains a set of `@var` elements.\n\nIn a [@var](DevelopingIndexAnnotations#@var) element, one has to define the name, the type and the default value of the attribute. For example in MovingSkill:\n```\n@vars({\n  @var(name = IKeyword.SPEED, type = IType.FLOAT, init = \"1.0\"),\n  @var(name = IKeyword.HEADING, type = IType.INT, init = \"rnd(359)\")\n})\n```\n\nIn order to detail how to access these new attributes (if needed), developers have to define a getter (using `@getter`) and a setter (using `@setter`) methods.\nIf no getter (and setter) is defined, the attribute can nevertheless be set and get, using implicit by default getter and setter. But as soon as a getter and/or a setter is defined, they replace the implicit default ones.\nFor example:\n```\n@getter(var = IKeyword.SPEED)\npublic double getSpeed(final IAgent agent) {\n    return (Double) agent.getAttribute(IKeyword.SPEED);\n}\n\n@setter(IKeyword.SPEED)\npublic void setSpeed(final IAgent agent, final double s) {\n    agent.setAttribute(IKeyword.SPEED, s);\n}\n```\n\n\n\n\n\n## Defining new actions\nAn action (also called `primitive`) is basically a Java method that can be called from the GAML language using the same syntax as the one used for calling actions defined in a model. The method should be annotated with `@action`, supplying the name of the action as it will be available in GAML.\n\nThe developer can also define parameters for this action using the annotation `@arg` will a set of parameters names. For example, the action `goto` of the MovingSkill is defined as follows:\n```\n@action(name=\"goto\", args={ \n    @arg(name = \"target\", type = { IType.AGENT, IType.POINT,IType.GEOMETRY }, optional = false),\n    @arg(name = IKeyword.SPEED, type = IType.FLOAT, optional = true),\n    @arg(name = \"on\", type = { IType.GRAPH }, optional = true)\n    }\n)\n\npublic IPath primGoto(final IScope scope) throws GamaRuntimeException {\n...\n}\n```\nIt is called in GAMA models with:\n```\ndo goto (target: the_target, on: the_graph);\n```\nor\n```\npath path_followed ","url":"wiki/DevelopingSkills.md"},{"id":"wiki/DevelopingSpecies.md","title":" Developing Species","content":"# Developing Species\n\n\n\nAdditional [built-in species](BuiltInSpecies) can be defined in Java in order to be used in GAML models. Additional attributes and actions can be defined. It could be very useful in order to define its behavior thanks to external libraries (e.g. [mulit-criteria decision-making](OtherBuiltInSpecies), [database connection](OtherBuiltInSpecies)...).\n\nA new built-in species extends the `GamlAgent` class, which defines the basic GAML agents. As a consequence, new built-in species have all the attributes (`name`, `shape`, ...) and actions (`die`...) of [regular species](AgentBuiltIn).\n\n\n\n\n\n\n## Implementation\n\nA new species can be **any Java class** that:\n  * extends the `GamlAgent` class,\n  * begins by the [@species](DevelopingIndexAnnotations#@species): `@species(name = \"name_of_the_species_gaml\")`,\n```\n@species(name = \"multicriteria_analyzer\")\npublic class MulticriteriaAnalyzer extends GamlAgent {\n```\n\n[Similarly to skills](DevelopingSkills), a species can define additional attributes and actions.\n\n### Additional attributes\n\nDefining new attributes needs:\n  * to add [@vars](DevelopingIndexAnnotations#@vars) (and one embedded [@var](DevelopingIndexAnnotations#@var) per additional attribute) annotation on top of the class,\n  * to define [@setter](DevelopingIndexAnnotations#@setter) and [@getter](DevelopingIndexAnnotations#@getter) annotations to the accessors methods.\n\nFor example, regular species are defined with the following annotation:\n```\n@vars({ @var(name = IKeyword.NAME, type = IType.STRING), @var(name = IKeyword.PEERS, type = IType.LIST),\n\t@var(name = IKeyword.HOST, type = IType.AGENT),\n\t@var(name = IKeyword.LOCATION, type = IType.POINT, depends_on = IKeyword.SHAPE),\n\t@var(name = IKeyword.SHAPE, type = IType.GEOMETRY) })\n```\n\nAnd accessors are defined using:\n```\n@getter(IKeyword.NAME)\npublic abstract String getName();\n\n@setter(IKeyword.NAME)\npublic abstract void setName(String name);\n```\n\n### Additional actions\n\nAn additional action is a method annotated by the [@action](DevelopingIndexAnnotations#@action) annotation.\n```\n@action(name = ISpecies.stepActionName)\npublic Object _step_(final IScope scope) {\n```\n\n\n\n\n\n\n## Annotations\n### @species\nThis annotation represents a \"species\" in GAML. The class annotated with this annotation will be the support of a species of agents.\n\nThis annotation contains:\n  * **name** (string): _the name of the species that will be created with this class as base. Must be unique throughout GAML_.\n  * **skills** (set of strings, empty by default): _An array of skill names that will be automatically attached to this species._ Example: ```\n @species(value=\"animal\" skills={\"moving\"}) ```\n  * **internal** (boolean, false by default): _whether this species is for internal use only_.\n  * **doc** (set of @doc, empty by default): _the documentation attached to this operator._\n\nAll these annotations are defined in the `GamlAnnotations.java` file of the `msi.gama.processor` plug-in.","url":"wiki/DevelopingSpecies.md"},{"id":"wiki/DevelopingStatements.md","title":" Developing Statements","content":"# Developing Statements\n\n\n\nStatements are a fundamental part of GAML, as they represent both commands (imperative programming style) or declarations (declarative programming style). Developing a new statement allows, then, to add a new instruction to GAML.\n\n\n\n\n\n\n## Defining the class\n\nA new statement must be a Java class that:\n  * either implements the interface `IStatement` or extends an existing implementation of this interface (like `AbstractStatement` or `AbstractSequenceStatement`).\n  * begins by the 2 following mandatory annotations:\n    * [@symbol](DevelopingIndexAnnotations#@symbol): `@symbol(name = \"name_of_the_statement_gaml\", kind = \"kind_of_statement\", with_sequence = true/false)`,\n    * [@inside](DevelopingIndexAnnotations#@inside): `@symbol(kinds = {\"kind_of_statement_1\",\"kind_of_statement_2\",\"...\"}`\n\nIn addition the 4 following optional annotations can be added:\n  * [@facets](DevelopingIndexAnnotations#@facets): to describe the set of [@facet](DevelopingIndexAnnotations#@facet) annotations,\n  * [@doc](DevelopingIndexAnnotations#@doc): to document the statement.\n  * [@serializer](DevelopingIndexAnnotations#@serializer): in addition, statements can benefit from a custom serializer, by declaring `@serializer(CustomSerializer.class)`, with a class extending `SymbolSerializer`.\n  * [@validator](DevelopingIndexAnnotations#@validator): in addition, statements can benefit from a custom validation during the validation process, by declaring `@validator(CustomValidator.class)` with a class implementing `IDescriptionValidator` as value. This class will receive the `IDescription` of the statement and be able to execute further validations on the type of expressions, etc. or even to change the `IDescription`  (by adding new information, changing the value of facets, etc.).\n\nNote: GAMA annotations are classes defined into the `msi.gama.precompiler.GamlAnnotations` class.\n\n\n\n\n\n## Examples\n\n### The `write` statement\n\nThe `write` statement is an example of a SINGLE\\_STATEMENT (i.e. statement that does not embed a sequence of statements).\nIt can used inside a BEHAVIOR statement (i.e. `reflex`, `init`...), a SEQUENCE\\_STATEMENT (e.g. `loop`, `ask`, `if`...) or a LAYER statement.\nIt defines a single facet (\"message\") mandatory and omissible.\n```\n@symbol(name = IKeyword.WRITE, kind = ISymbolKind.SINGLE_STATEMENT, with_sequence = false)\n@inside(kinds = { ISymbolKind.BEHAVIOR, ISymbolKind.SEQUENCE_STATEMENT, ISymbolKind.LAYER })\n@facets(value = { \n        @facet(name = IKeyword.MESSAGE, type = IType.NONE, optional = false) \n   }, omissible = IKeyword.MESSAGE)\npublic class WriteStatement extends AbstractStatement {\n```\n\n### The `aspect` statement\n\nThe `aspect` statement defines an example of BEHAVIOR statement (i.e. a statement that can written at the same level as `init`, `reflex`...), containing a sequence of embedded statements. It can only be used inside a `species` statement (i.e. the definition of a new species) and the `global` block. It defines a single facet `name` mandatory and omissible.\n```\n@symbol(name = { IKeyword.ASPECT }, kind = ISymbolKind.BEHAVIOR, with_sequence = true, unique_name = true)\n@inside(kinds = { ISymbolKind.SPECIES, ISymbolKind.MODEL })\n@facets(value = { @facet(name = IKeyword.NAME, type = IType.ID, optional = true) \n   }, omissible = IKeyword.NAME)\npublic class AspectStatement extends AbstractStatementSequence {\n```\n\n### The `action` statement\n\nThe `action` statement defines an example of ACTION statement containing a sequence of embedded statements and that can have arguments.\nIt can be used (to define an action) in any species, experiment or global statement. It defines several facets and uses a custom validator and a custom serializer.\n```\n@symbol(name = IKeyword.ACTION, kind = ISymbolKind.ACTION, with_sequence = true, with_args = true, unique_name = true)\n@inside(kinds = { ISymbolKind.SPECIES, ISymbolKind.EXPERIMENT, ISymbolKind.MODEL })\n@facets(value = {\n\t@facet(name = IKeyword.NAME, type = IType.ID, optional = false),\n\t@facet(name = IKeyword.TYPE, type = IType.TYPE_ID, optional = true, internal = true),\n\t@facet(name = IKeyword.OF, type = IType.TYPE_ID, optional = true, internal = true),\n\t@facet(name = IKeyword.INDEX, type = IType.TYPE_ID, optional = true, internal = true),\n\t@facet(name = IKeyword.VIRTUAL, type = IType.BOOL, optional = true) \n    }, omissible = IKeyword.NAME)\n@validator(ActionValidator.class)\n@serializer(ActionSerializer.class)\npublic class ActionStatement extends AbstractStatementSequenceWithArgs {\n```\n\n\n\n\n\n\n## Implementation\n\nAll the statements inherits from the abstract class `AbstractStatement`. Statements with a sequence of embedded statements inherit from the class `AbstractStatementSequence` (which extends `AbstractStatement`).\n\nThe main methods of a statement class are:\n  * its constructor, that is executed at the compilation of the model.\n  * `executeOn(final IScope scope)`, it executes the statement on a given scope. **This method is executed at each call of the statement in the model**,\n  * `privateExecuteIn(IScope scope)`: the `executeOn(final IScope scope)` method implemented in `AbstractStatement` does some verification and call the `privateExecuteIn(IScope scope)` method to perform the statement. **The execution of any statement should be redefined in this method.**\n\n\n### Define a SINGLE\\_STATEMENT statement\n\nTo define a SINGLE\\_STATEMENT statement that can be executed in any behavior and sequence of statements and with 2 facets, we first define a new Java class that extends `AbstractStatement` such as:\n```\n@symbol(name = \"testStatement\", kind = ISymbolKind.SINGLE_STATEMENT, with_sequence = false)\n@inside(kinds = { ISymbolKind.BEHAVIOR, ISymbolKind.SEQUENCE_STATEMENT})\n@facets(value = { \n        @facet(name = IKeyword.NAME, type = IType.NONE, optional = false),\n        @facet(name = \"test_facet\", type = IType.NONE, optional = true)     \n   }, omissible = IKeyword.NAME)\npublic class SingleStatementExample extends AbstractStatement {\n```\n\nThe class should at least implement:\n  * a **constructor**: the constructor is called at the compilation. It is usually used to get the expressions given to the facets (using the `getFacet(String)` method) and to store it into an attribute of the class.\n```\nfinal IExpression name;\n\npublic SingleStatementExample(final IDescription desc) {\n\tsuper(desc);\n\tname = getFacet(IKeyword.NAME);\n}\n```\n  * the **method privateExecuteIn**: this method is executed each time the statement is called in the model.\n```\nprotected Object privateExecuteIn(IScope scope) throws GamaRuntimeException { \n\tIAgent agent = stack.getAgentScope();\n\tString nameStr = null;\n\tif ( agent != null && !agent.dead() ) {\n\t\tnameStr = Cast.asString(stack, name.value(stack));\n\t\tif ( nameStr == null ) {\n\t\t\tnameStr = \"nil\";\n\t\t}\n\t\tGuiUtils.informConsole(nameStr);\n\t}\n\treturn nameStr;\n}  \n```\nThe variable `scope` of type `IScope` can be used to:\n  * get the current agent with: `scope.getAgentScope()`\n  * evaluate an expression in the current scope: `Cast.asString(scope, message.value(scope))`\n\n\n### Define a statement with sequence\n\nThis kind of statements includes SEQUENCE\\_STATEMENT (e.g. `if`, `loop`,...), BEHAVIOR (e.g. `reflex`,...)...\n\nSuch a statement is defined in a class extending the `AbstractStatementSequence` class, e.g.:\n```\n@symbol(name = { IKeyword.REFLEX, IKeyword.INIT }, kind = ISymbolKind.BEHAVIOR, with_sequence = true, unique_name = true)\n@inside(kinds = { ISymbolKind.SPECIES, ISymbolKind.EXPERIMENT, ISymbolKind.MODEL })\n@facets(value = { @facet(name = IKeyword.WHEN, type = IType.BOOL, optional = true),\n\t@facet(name = IKeyword.NAME, type = IType.ID, optional = true) }, omissible = IKeyword.NAME)\n@validator(ValidNameValidator.class)\n\npublic class ReflexStatement extends AbstractStatementSequence {\n```\n\nThis class should only implement a constructor. The class `AbstractStatementSequence` provides a generic implementation for:\n  * `privateExecuteIn(IScope scope)`: it executes each embedded statement with the scope.\n  * `executeOn(final IScope scope)`: it executes the statement with a given scope.\n\n\n### Additional methods that can implemented\n\nThe following methods have a default implementation, but can be overridden if necessary:\n  * the **`String getTrace(final IScope scope)` method** is called to trace the execution of statements using [trace statement](Statements#trace).\n```\npublic String getTrace(final IScope scope) {\n\t// We dont trace write statements\n\treturn \"\";\n} \n```\n  * the `setChildren(final List extends ISymbol> commands)` is used to define which are the statement children to the sequence statement. By default, all the embedded statements are taken as children\n\n\n\n\n\n## Annotations\n### @symbol\nThis annotation represents a \"statement\" in GAML, and is used to define its name(s) as well as some meta-data that will be used during the validation process.\n\nThis annotation contains:\n  * **name** (set of string, empty by default): _names of the statement_.\n  * **kind** (int): _the kind of the annotated symbol (see [ISymbolKind.java](https://github.com/gama-platform/gama/tree/master/msi.gama.processor/src/msi/gama/precompiler/ISymbolKind.java) for more details)_.\n  * **with\\_scope** (boolean, true by default): _indicates if the statement (usually a sequence) defines its own scope. Otherwise, all the temporary variables defined in it are actually defined in the super-scope_.\n  * **with\\_sequence** (boolean): _indicates wether or not a sequence can or should follow the symbol denoted by this class_.\n  * **with\\_args** (boolean, false by default): _indicates wether or not the symbol denoted by this class will accept arguments_.\n  * **remote\\_context** (boolean, false by default): _indicates that the context of this statement is actually an hybrid context: although it will be executed in a remote context, any temporary variables declared in the enclosing scopes should be passed on as if the statement was executed in the current context_.\n  * **doc** (set of @doc, empty by default): _the documentation attached to this symbol_.\n\n### @inside\nThis annotation is used in conjunction with symbol. Provides a way to tell where this symbol should be located in a model (i.e. what its parents should be). Either direct symbol names (in symbols) or generic symbol kinds can be used.\n\nThis annotation contains:\n  * **symbols** (set of Strings, empty by default): _symbol names of the parents_.\n  * **kinds** (set of int, empty by default): _generic symbol kinds of the parents (see [ISymbolKind.java](https://github.com/gama-platform/gama/tree/master/msi.gama.processor/src/msi/gama/precompiler/ISymbolKind.java) for more details)_.\n\n### @facets\nThis annotation describes a list of facets used by a statement in GAML.\n\nThis annotation contains:\n  * **value** (set of @facet): array of @facet, each representing a facet name, type..\n  * **ommissible** (string): _the facet that can be safely omitted by the modeler (provided its value is the first following the keyword of the statement)_.\n\n### @facet\nThis facet describes a facet in a list of facets.\n\nThis annotation contains:\n  * **name** (String): _the name of the facet. Must be unique within a symbol_.\n  * **type** (set of Strings): _the string values of the different types that can be taken by this facet_.\n  * **values** (set of Strings): _the values that can be taken by this facet. The value of the facet expression will be chosen among the values described here_.\n  * **optional** (boolean, false by default): _whether or not this facet is optional or mandatory_.\n  * **doc** (set of @doc, empty by default): _the documentation associated to the facet_.\n\n### @doc\nIt provides a unified way of attaching documentation to the various GAML elements tagged by the other annotations. The documentation is automatically assembled at compile time and also used at runtime in GAML editors.\n  * **value** (String, \"\" by default): _a String representing the documentation of a GAML element_.\n  * **deprecated** (String, \"\" by default): _a String indicating (if it is not empty) that the element is deprecated and defining, if possible, what to use instead_.\n  * **returns** (String, \"\" by default): _the documentation concerning the value(s) returned by this element (if any)._.\n  * **comment** (String, \"\" by default): _an optional comment that will appear differently from the documentation itself_.\n  * **special\\_cases** (set of Strings, empty by default): _an array of String representing the documentation of the \"special cases\" in which the documented element takes part_.\n  * **examples** (set of Strings, empty by default): _an array of String representing some examples or use-cases about how to use this element_.\n  * **see** (set of Strings, empty by default): _an array of String representing cross-references to other elements in GAML_.\n\n### @serializer\nIt allows to declare a custom serializer for Symbols (statements, var declarations, species ,experiments, etc.). This serializer will be called instead of the standard serializer, superseding this last one. Serializers must be sublasses of the SymbolSerializer class.\n  * **value** (Class): _the serializer class_.\n\n### @validator\nIt allows to declare a custom validator for Symbols (statements, var declarations, species ,experiments, etc.). This validator, if declared on subclasses of Symbol, will be called after the standard validation is done. The validator must be subclass of IDescriptionValidator.\n  * **value** (Class): _the validator class_.\n\nAll these annotations are defined in the `GamlAnnotations.java` file of the `msi.gama.processor` plug-in.","url":"wiki/DevelopingStatements.md"},{"id":"wiki/DevelopingTypes.md","title":" Developing Types","content":"# Developing Types\n\n\n\nGAML provides a given number of built-in simple types (int, bool...) and more complex ones (path, graph...).\nDeveloping a new type allows, then, to add a new data structure to GAML.\n\n\n\n\n\n\n## Implementation\nDeveloping a new type requiers the implementation of 2 Java files:\n  * the first one that describes the data structure (e.g.: `GamaColor.java` to define a type color)\n  * the second one that implements the type itself, wrapping the data structure file (e.g.: `GamaColorType.java`), and providing accessors to data structure attributes.\n\n## The data structure file\n\nThe class representing the data structure is a Java class annotated by:\n  * a [@vars](DevelopingIndexAnnotations#@vars) annotation to describe the attributes of a complex type. The `@vars` annotation contains a set of `@var` elements.\n```\n@vars({ @var(name = IKeyword.COLOR_RED, type = IType.INT), @var(name = IKeyword.COLOR_GREEN, type = IType.INT),\n\t@var(name = IKeyword.COLOR_BLUE, type = IType.INT), @var(name = IKeyword.ALPHA, type = IType.INT),\n\t@var(name = IKeyword.BRIGHTER, type = IType.COLOR), @var(name = IKeyword.DARKER, type = IType.COLOR) })\npublic class GamaColor extends Color implements IValue {\n```\n\nIt can contain setter and/or getter for each of its attributes. Setters and getters are methods annotated by the [@getter](DevelopingIndexAnnotations#@getter) or [@setter](DevelopingIndexAnnotations#@setter) annotations.\n```\n@getter(IKeyword.COLOR_RED)\npublic Integer red() {\n\treturn super.getRed();\n}\n```\n\nIn addition it is recommended that this class implements the `IValue` interface. It provides a clean way to give a string representation of the type and thus eases good serialization of the object.\nTo this purpose the following method needs to be implemented:\n```\npublic abstract String stringValue(IScope scope) throws GamaRuntimeException;\n```\n\n## The type file\n\nThe class representing the type is a Java class such that:\n  * the class should be annotated by the [@type](DevelopingIndexAnnotations#@type) annotation,\n  * the class should extend the class `GamaType` (and thus implement its 3 methods),\n\n\nExample (from [GamaFloatType.java](https://github.com/gama-platform/gama/tree/master/msi.gama.core/src/msi/gaml/types/GamaFloatType.java)):\n```\n@type(name = IKeyword.FLOAT, id = IType.FLOAT, wraps = { Double.class, double.class }, kind = ISymbolKind.Variable.NUMBER)\n```\n\n### Inheritance from the `GamaType` class\nEach java class aiming at implement a type should inherit from the GamaType abstract class.\nExample (from [GamaColorType.java](https://github.com/gama-platform/gama/tree/master/msi.gama.core/src/msi/gaml/types/GamaColorType.java)):\n```\npublic class GamaColorType extends GamaType\n```\n\nThis class imposes to implement the three following methods (with the example of the GamaColorType):\n  * `public boolean canCastToConst()`\n  * `public GamaColor cast(IScope scope, Object obj, Object param)`: the way to cast any object in the type,\n  * `public GamaColor getDefault()`: to define the default value of a variable of the current type.\n\nRemark: for each type, an unary operator is created with the exact name of the type. It can be used to cast any expression in the given type.\nThis operator calls the previous `cast` method.\n\n\n\n\n\n## Annotations\n\n### @type\nIt provides information necessary to the processor to identify a type.\n\nThis annotation contains:\n  * **name** (String, \"\" by default): _a String representing the type name in GAML_.\n  * **id** (int, 0 by default): _the unique identifier for this type. User-added types can be chosen between IType.AVAILABLE\\_TYPE and IType.SPECIES\\_TYPE (exclusive) (cf. [IType.java](https://github.com/gama-platform/gama/tree/master/msi.gama.core/src/msi/gaml/types/IType.java))_.\n  * **wraps** (tab of Class, null by default): _the list of Java Classes this type is \"wrapping\" (i.e. representing). The first one is the one that will be used preferentially throughout GAMA. The other ones are to ensure compatibility, in operators, with compatible Java classes (for instance, List and GamaList)_.\n  * **kind** (int, ISymbolKind.Variable.REGULAR by default): _the kind of Variable used to store this type. See [ISymbolKind.Variable](https://github.com/gama-platform/gama/tree/master/msi.gama.processor/src/msi/gama/precompiler/ISymbolKind.java)_.\n  * **internal** (boolean, false by default): _whether this type is for internal use only_.\n  * **doc** (set of @doc, empty by default): _the documentation associated to the facet_.\n\nAll these annotations are defined in the file [GamlAnnotations.java](https://github.com/gama-platform/gama/tree/master/msi.gama.processor/src/msi/gama/precompiler/GamlAnnotations.java).","url":"wiki/DevelopingTypes.md"},{"id":"wiki/Documentation.md","title":" Table of contents ","content":"## Table of contents \n\n* [Requirements](#requirements)\n\t* [Configuration](#configuration)\n\t* [Generated files location](#generated-files-location)\n* [Workflow to generate wiki files](#workflow-to-generate-wiki-files)\n* [Workflow to generate PDF files](#workflow-to-generate-pdf-files)\n* [Workflow to generate unit tests](#workflow-to-generate-unit-tests)\n* [Main internal steps](#main-internal-steps)\n\t* [Generate wiki files](#generate-wiki-files)\n\t* [Generate pdf files](#generate-pdf-files)\n\t* [Generate unit test files](#generate-unit-test-files)\n* [How to document](#how-to-document)\n\t* [The @doc annotation](#the-doc-annotation)\n\t* [the @example annotation](#the-example-annotation)\n\t* [How to document operators](#how-to-document-operators)\n\t* [How to document statements](#how-to-document-statements)\n\t* [How to document skills](#how-to-document-skills)\n* [How to change the processor](#how-to-change-the-processor)\n* [General workflow of file generation](#general-workflow-of-file-generation)\n\n\n# Documentation\n\nThe GAMA documentation comes in 2 formats: a set of wiki files availaible from the wiki section of the GitHub website and a PDF file. The PDF file is produced from the wiki files.\n\nIn the wiki files, some are hand-written by the GAMA community and some others are generated automatically from the Java code and the associated java annotations.\n\nThe section summarizes:\n* how to generate this wiki files,\n* how to generate the PDF documentation,\n* how to generate the unit tests from the java annotations, \n* how to add documentation in the java code.\n\n\n\n## Requirements\n\nTo generate automatically the documentation, the GAMA Git version is required. See [Install Git version](InstallingGitVersion) for more details. \n\nAmong all the GAMA plugins, the following ones are related to documentation generation:\n* `msi.gama.processor`: the java preprocessor is called during java compilation of the various plugins and extract information from the java code and the java annotations. For each plugin it produces the `docGAMA.xml` file in the `gaml` directory.\n* `msi.gama.documentation`: it contains all the java classes needed to gather all the `docGAMA.xml` files and generate wiki, pdf or unit test files.\n\nIn addition, the folder containing the wiki files is required. In the GitHub architecture, the wiki documentation is stored in a separate Git repository `https://github.com/gama-platform/gama.wiki.git`. A local clone of this repository should thus be created:\n1. Open the Git perspective:\n  * Windows > Open Perspective > Other...\n  * Choose `Git`\n2. Click on \"Clone a Git repository\"\n  * In **Source Git repository** window: \n    * Fill in the URI label with: `https://github.com/gama-platform/gama.wiki.git`\n    * Other fields will be automatically filled in.\n  * In **Branch Selection** windows, \n    * check the master branch \n    * Next\n  * In **Local Destination** windows,\n    * Choose the directory in which the gama Git repository has been cloned\n    * Everything else should be unchecked \n    * Finish\n3. In the **Git perspective** and the **Git Repositories** view, Right-Click on \"Working Directory\" inside the `gama.wiki` repository, and choose \"Import projects\"\n  * In the **Select a wizard to use for importing projects** window:\n    * \"Import existing projects\" should be checked\n    * \"Working Directory\" should be selected\n  * In **Import Projects** window:\n    * **Uncheck « Search for nested project »**\n    * Check the project `gama.wiki`\n    * Finish\n2. Go back to the Java perspective: a `gama.wiki` plugin should have been added.\n\nIn order to generate the PDF file from the wiki files, we use an external application named [Pandoc](http://pandoc.org/).\nFollow the [Pandoc installation instructions to install it](http://pandoc.org/installing.html). Specify the path to the pandoc folder in the file \"Constants.java\", in the static constant `CMD_PANDOC` : \"_yourAbsolutePathToPandoc/pandoc_\".\n\nNote that Latex should be installed in order to be able to generate PDF files. Make sure you have already installed [Miktex](http://miktex.org/download) (for OS Windows and Mac). Specify the path to the miktex folder in the file \"Constants.java\", in the static constant `CMD_PDFLATEX` : \"_yourAbsolutePathToMiktex/pdflatex_\".\n\n\n### Configuration\n\nThe location where the files are generated (and other constants used by the generator) are defined in the file `msi.gama.documentation/src/msi/gama/doc/util/Constants.java`.\n\nThe use of Pandoc (path to the application and so on) is defined in the file `msi.gama.documentation/src/msi/gama/doc/util/ConvertToPDF.java`. *This should be changed in the future...*\n\n\n### Generated files location\nThe generated files are (by default) generated in various locations depending on their type:\n* wiki files: they are generated in the plugin `gama.wiki`.\n* pdf file: they are generated in the plugin `msi.gama.documentation`, in the folder `files/gen/pdf`.\n* unit test files: they are generated in the plugin `msi.gama.models`, in the folder `models/Tests`.\n\n\n\n## Workflow to generate wiki files\n\nThe typical workflow to generate the wiki files is as follow:\n* Clean and Build all the GAMA projects,\n* Run the `MainGenerateWiki.java` file in the `msi.gama.documentation`,\n* The wiki files are generated in the `gama.wiki` plugin.\n\n## Workflow to generate PDF files\n\nThe typical workflow to generate the wiki files is as follow:\n* Clean and Build all the GAMA projects,\n* In the file mytemplate.tex, specify the absolute path to your \"gama_style.tex\" (it should be just next to this file)\n* Run the `MainGeneratePDF.java` file in the `msi.gama.documentation`, accepting all the packages install of latex,\n* The wiki files are generated in the `msi.gama.documentation` plugin.\n\nNote that generating the PDF takes a lot of time. Please be patient !\n\nIf you want to update the file \"gama_style.sty\" (for syntax coloration), you have to turn the flag \"generateGamaStyle\" to \"true\" (and make sure the file \"keywords.xml\" is already generated).\n\n## Workflow to generate unit tests\n\nThe typical workflow to generate the wiki files is as follow:\n* Clean and Build all the GAMA projects,\n* Run the `MainGenerateUnitTest.java` file in the `msi.gama.documentation`,\n* The wiki files are generated in the `msi.gama.models` plugin.\n\n\n## Main internal steps\n\n* Clean and Build all the GAMA projects will create a `docGAMA.xml` file in the `gaml` directory of each plugin,\n* The `MainGenerateXXX.java` files then perform the following preparatory tasks:\n  * they *prepare the gen folder* by deleting the existing folders and create all the folders that may contain intermediary generated folders\n  * they merge all the `docGAMA.xml` files in a `docGAMAglobal.xml` file, created in the `files/gen/java2xml` folder. **Only the plugins that are referred in the product files are merged.**\n  \nAfter these common main first steps, each generator (wiki, pdf or unit test) performs specific tasks.\n  \n### Generate wiki files\n\n* The `docGamaglobal.xml` is parsed in order to generate 1 wiki file per kind of keyword: \n  * operators,\n  * statements,\n  * skills,\n  * architectures,\n  * built-in species,\n  * constants and units.\n  * in addition an index wiki file containing all the GAML keywords is generated.\n* One wiki file is generated for each *extension* plugin, i.e. plugin existing in the Eclipse workspace but not refered in the product.\n\n### Generate pdf files\n\nThe pdf generator uses the table of content (toc) file located in the `files/input/toc` folder (`msi.gama.documetation` plugin) to organize the wiki files in a pdf file.\n\n* `MainGeneratePDF.java` file parsers the toc file and create the associated PDF file using the wiki files associated to each element of the toc. The generation is tuned using files located in the `files/input/pandocPDF` folder.\n\n### Generate unit test files\n\n* `MainGenerateUnitTest.java` creates GAMA model files for each kind of keyword from the `docGAMAglobal.xml` file.\n\n## How to document\n\nThe documentation is generate from the Java code thanks to the Java additional processor, using mainly information from Java classes or methods and from the Java annotations. (see [the list of all annotations](DevelopingIndexAnnotations) for more details about annotations).\n\n### The `@doc` annotation\n\nMost of the annotations can contain a [`@doc`](DevelopingIndexAnnotations#doc) annotation, that can contain the main part of the documentation.\n\nFor example, the `inter` ([inter](Operators#inter)) operator is commented using: \n```\n@doc(\n  value = \"the intersection of the two operands\",\n  comment = \"both containers are transformed into sets (so without duplicated element, cf. remove_deplicates operator) before the set intersection is computed.\",\n  usages = {\n    @usage(value = \"if an operand is a graph, it will be transformed into the set of its nodes\"),\n    @usage(value = \"if an operand is a map, it will be transformed into the set of its values\", examples = {\n      @example(value = \"[1::2, 3::4, 5::6] inter [2,4]\", equals = \"[2,4]\"),\n      @example(value = \"[1::2, 3::4, 5::6] inter [1,3]\", equals = \"[]\") }),\n    @usage(value = \"if an operand is a matrix, it will be transformed into the set of the lines\", examples =\n      @example(value = \"matrix([[1,2,3],[4,5,4]]) inter [3,4]\", equals = \"[3,4]\")) },\n  examples = { \n    @example(value = \"[1,2,3,4,5,6] inter [2,4]\", equals = \"[2,4]\"),\n    @example(value = \"[1,2,3,4,5,6] inter [0,8]\", equals = \"[]\") },\n  see = { \"remove_duplicates\" })\n```\nThis `@doc`annotation contains 5 parts: \n* value: describes the documented element,  \n* comment: a general comment about the documented element,\n* usages: a set of ways to use the documented element, each of them being in a `@usage` annotation. The usage contains mainly a description and and set of examples,\n* examples: a set of examples that are not related to a particular usage, \n* see: other related keywords.\n\n### the `@example` annotation\n\nThis annotation contains a particular use example of the documented element. It is also used to generate unit test and patterns.\n\nThe simplest way to use it:\n```\n@example(value = \"[1::2, 3::4, 5::6] inter [2,4]\", equals = \"[2,4]\")\n```\n\nIn this example:\n* `value` contains an example of use of the operator,\n* `equals` contains the expected results of expression in value.\n\nThis will become in the documentation:\n```\nlist var3  It's ok !\n\n# General workflow of file generation\n\nThis following diagram explains roughly the workflow for the generation of the different files : \n![resources/images/developpingExtension/generationFilesWorkflow.png](resources/images/developpingExtension/generationFilesWorkflow.png)","url":"wiki/Documentation.md"},{"id":"wiki/GamaArchitecture.md","title":" Architecture of GAMA","content":"# Architecture of GAMA\n\n\n\nGAMA is made of a number of Eclipse Java projects, some representing the core projects without which the platform cannot be run, others additional plugins adding functionalities or concepts to the platform.\n\n__Vocabulary:__\nEach project is either designed as a __plugin__ (containing an xml file \"plugin.xml\") or as a __feature__ (containing an xml file \"feature.xml\").\n  * A __plugin__ can be seen as a module (or bundle in the OSGI architecture), which can be necessary (the GAMA platform can't run without it) or optional (providing new functionalities to the platform). This decomposition between several plugins ensure the cohesion between functional blocks, each plugin has to be as independent as he can.\n  * A __feature__ is a group of one or several modules (or plugin), which can be loaded. NB : Unlike a plugin, a feature does not include source code, but only two files : a build.properties and a feature.xml.\n\nTo see how to create a plugin and a feature, please read [this page](InstallingGitVersion).\n\n## Table of contents \n\n* [Architecture of GAMA](#architecture-of-gama)\n\t* [The minimal configuration](#the-minimal-configuration)\n\t* [Optional Plugins](#optional-plugins)\n\t\t* [Plugins present in the release version](#plugins-present-in-the-release-version)\n\t\t* [Plugins not present by default in the release version](#plugins-not-present-by-default-in-the-release-version)\n\t\t* [Plugins not designated to be in the release version](#plugins-not-designated-to-be-in-the-release-version)\n\t* [Unmaintained projects](#unmaintained-projects)\n\t* [Features](#features)\n\t* [Models](#models)\n\t* [Plugins overview](#plugins-overview)\n\n## The minimal configuration\n\nHere is the list of projects which have to be imported in order to run the GAMA platform, and to execute a simple model in gaml language:\n\n  * `msi.gama.core` : Encapsulates the core of the modeling and simulation facilities offered by the platform : runtime, simulation, meta-model, data structures, simulation kernel, scheduling, etc. It contains 2 main packages :\n    * `msi.gama`\n    * `msi.gaml`, wich defines the GAML modeling language: keywords, operators, statements, species, skills�\n  * `msi.gama.application` : Describes the graphical user interface (`msi.gama.gui` package). This project also contains the file gama1.7.Eclipse3_8_2.product, when you can configure the application (and also launch the application). It contains the following sub-packages :\n    * `msi.gama.gui.displays`\n    * `msi.gama.gui.navigator`\n    * `msi.gama.gui.parameters`\n    * `msi.gama.gui.swt`\n    * `msi.gama.gui.views`\n    * `msi.gama.gui.wizards`\n    * `msi.gama.gui.viewers`\n  * `msi.gama.ext` : Gathers all the external libraries upon which GAMA relies upon\n    * `msi.gama.lang.gaml` : Contains the gaml.xtext file which defines the GAML grammar\n    * `msi.gama.lang.gaml.ui` : Contains the GAML Editor (syntax highlighting, code completion�)\n  * `msi.gama.processor` : Is responsible for processing the annotations made in the Java source code and producing additions to GAML (Java, properties and documentation files), which are added into a source package called \"gaml.additions\" (containing two main generated files: GamlAdditions.java and GamlDocumentation.java). These additions are loaded automatically when GAMA launches, allowing extensions made by developers in other plugins to be recognized when their plugin is added to the platform.\n  * `ummisco.gaml.editbox` : Project used to define the edit boxes in the gaml ui.\n\nMinimal configuration projects dependencies:\n\n![Minimal configuration projects dependencies](resources/images/developpingExtension/minimal_configuration.png)\n\n## Optional Plugins\n\n### Plugins present in the release version\nFrom this minimal configuration, it is possible to add some features. Here is the list of the features installed by default in the release version:\n  * `idees.gama.mapcomparison` : Contains some useful tools to do map comparaison\n  * `msi.gaml.extensions.fipa` : Provides some operators for communication between agents, using the FIPA standards\n  * `msi.gama.headless` : Enables to run simulations in console mode\n  * `simtools.gaml.extensions.traffic` : Provides operators and skills for traffic simulation\n  * `simtools.gaml.extensions.physics` : Physics engine, collision modelling, using the library JBullet\n  * `ummisco.gaml.extensions.maths` : Solving differential equation, using Euler methods and Runge Kutta.\n  * `irit.gaml.extensions.database` : Provides database manipulation tools, using SQL requests\n  * `irit.gaml.extensions.test` : Add unitary test statements\n  * `ummisco.gama.opengl` : Provide a 3D visualization using OpenGL.\n  * `simtools.gamanalyzer.fr` : Adding tools for the analysis of several execution result of a simulation (in order to find some correlations).\n  * `dream.gama.opengis` : Used to load some geographic information datas from online GIS server.\n  * `simtools.graphanalysis.fr` : Advanced graph operators\n \n### Plugins not present by default in the release version\nSome other plugins are not present by default in the release version (because their use is very specific), but it's possible to install them through features.\nHere is the list of those plugins:\n  * `idees.gama.weka` : Data-mining operators, using the library Weka.\n  * `msi.gaml.architecture.simplebdi` : Architecture for using the Belief-Desire-Intention software model.\n  * `ummisco.gaml.extensions.sound` : Use of sound in simulations\n  * `ummisco.gaml.extensions.stats` : Advanced statistics operators\n  * `ummisco.gama.communicator` : Communication between several instances of GAMA\n  * `ummisco.gaml.extensions.rjava` : Adding the R language into GAMA for data mining\n \n### Plugins not designated to be in the release version\nOther plugins will never be on the released version, and will never be loaded during the gama execution. They are just used in the \"developer\" version:\n  * `msi.gama.documentation` : Generate automatically the documentation in the wiki form (and also a pdf file)\n \n## Unmaintained projects\n\nSome other projects are still in the git repository in case we need to work on it one day, but they are either unfinished, obsolete, or used in very rare situations (They are not delivered in release versions, of course). Here is the list :\n  * `cenres.gaml.extensions.hydro` : Provide some tools in order to create hydrology models\n  * `msi.gaml.extensions.traffic2d` : Provide some tools for traffic in 2 dimensions (depreciated, now replace by msi.gaml.extensions.traffic)\n  * `msi.gaml.extensions.humainmoving` : Provide a skill to represent human movement\n  * `ummisco.gama.gpu` : Computation directly on the GPU for more efficiency. Results or not concluant, slower than using CPU.\n  * `msi.gama.hpc` : \"High Power Computing\" to execute gama simulation in several computer.\n  * `msi.gaml.extensions.cplex` : Originaly designed to be able to run CPLEX function in GAMA. The CPLEX is a proprietary library, we can't deliver it in the project. Instead, we use a stub, \"cplex.jar\", that you can replace by the real cplex.jar file.\n  * `irit.maelia.gaml.additions` : Used for the project \"Maelia\". Provide the possibility to represent the computing time in a simulation.\n  * `msi.gama.display.web` : Originaly designed to run some GAMA simulation in a browser, inside gama application, using WebGL. Does not work for the moment\n  * `ummisco.miro.extension` : Once used for the \"miro\" project, no longer used.\n  * `ummisco.miro.extension.traffic` : Once used for the \"miro\" project, no longer used.\n \n## Features\n \n  * `ummisco.gama.feature.audio` : sound plugin\n  * `ummisco.feature.stats` : stats plugin\n  * `ummisco.gama.feature.opengl.jogl2` : gathers physics and opengl plugins\n  * `simtools.graphlayout.feature` : gathers core, ext, processor and graphanalysis plugins\n  * `ummisco.gama.feature.core` : gathers mapcomparison, database, test, application, core, ext, headless, gaml, gaml.ui, processor, fipa, traffic and maths plugins\n  * `ummisco.gama.feature.dependencies` : a bunch of libraries and plugins\n  * `other.gama.feature.plugins` gathers hydro, opengis, addition, web, hpc, cplex, traffic2d, communicator, gpu, stats, extensions and traffic plugins\n  * `ummisco.gama.feature.models` : model plugin\n  * `idees.gama.features.weka` : weka plugin\n  * `ummisco.gama.feature.jogl2.product` : gathering of the following features : core, dependencies, models, jogl2\n  * `ummisco.gama.feature.product` : gathering of the following features : core, dependencies, models, jogl1\n \n## Models\n \nBeside those plugins and features, a project dedicated to gather a bunch of examples is also in the git repository. It contains gaml code:\n  * `msi.gama.models`\n\n## Plugins overview\n\nGlobal architecture of GAMA (nb : the features graphlayout, core, dependencies, plugins, jogl2.product and product are not represented here)\n\n![Global architecture of GAMA](resources/images/developpingExtension/plugin_architecture.png)","url":"wiki/GamaArchitecture.md"},{"id":"wiki/InstallingGitVersion.md","title":" Installing the GIT version","content":"# Installing the GIT version\n\nTested on MacOS X (10.9 to 10.11), Windows (8 to 10) and Ubuntu 15.04 (Vivid)\n\n_Important note: the current Git version is **not** compatible with the GAMA 1.6.1 release: if you plan to create plugins for this release, please download the source at revision r11988 (on Google Code) and [Eclipse following this procedure](InstallingSvnOldVersions)_\n\n## Install Eclipse Mars SR2\n\nDownload the [\"Eclipse IDE for Java and DSL Developers\"](http://www.eclipse.org/downloads/packages/eclipse-ide-java-and-dsl-developers/mars2) version (If Java is not installed on your computer you can download it [here](http://www.oracle.com/technetwork/java/javase/downloads/index.html)). \n\nUnpack it and launch it. Please refer to this [link](http://help.eclipse.org/mars/index.jsp?nav=%2F0) for more information on running Eclipse.\n\n**One important step** required for GAMA to correctly produce its supporting files once it will have been installed is to set the default encoding of the workspace to UTF-8. It can be done by selecting, in the Preferences, \"General\", then \"Workspace\", then \"Text file encoding\" and choosing \"UTF-8\" in the drop-down menu available in \"Other:\".\n\n## Install GAMA source code\n\nThe source is to be downloaded from GitHub in two steps: by creating a local clone of the GitHub repository and then importing the different projects that constitute GAMA into the Eclipse workspace.\n\n1. Open the Git perspective:\n  * Windows > Perspective > Open Perspective > Other...\n  * Choose `Git`\n![Open GIT perspective](resources/images/developpingExtension/GIT_open_perspective.png)\n2. Click on \"Clone a Git repository\"\n![Clone Repository](resources/images/developpingExtension/GIT_Clone_Repository.png)\n  * In **Source Git repository** window: \n    * Fill in the URI label with: `https://github.com/gama-platform/gama.git`\n    * Other fields will be automatically filled in.\n![Source GIT repository](resources/images/developpingExtension/GIT_source_git_repository.png)    \n  * In **Branch Selection** windows, \n    * check the master branch \n    * Next\n    * Note: If you are using Ubuntu 16 and you did not find any branch in this windows, may be your eclipse has a bug related with the OS. The workaround should be: \n        * Close eclipse\n        * Open eclipse.ini\n        * Add these 2 lines before **--launcher.appendVmargs**:\n\n        --launcher.GTK_version   \n        2\n        * Change required version of java from : -Dosgi.requiredJavaVersion=1.7 into -Dosgi.requiredJavaVersion=1.8\n        * Remove this line: -XX:MaxPermSize=256m\n        * Save and close eclipse.ini\n        * Start eclipse and redo from step 1\n\n![Git branch selection](resources/images/developpingExtension/GIT_branch_selection.png)\n  * In **Local Destination** windows,\n    * Choose a Directory (where the source files will be downloaded).\n    * Everything else should be unchecked \n    * Finish\n![Local destination](resources/images/developpingExtension/GIT_local_destination.png)\nThis can take a while...\n\n### Import projects into workspace\nYou have now to import projects into the workspace (notice that the folders downloaded during the clone will neither be copied nor moved).\n\n1. In the **Git perspective** and the **Git Repositories** view, Right-Click on \"Working Tree\" inside the `gama` repository, and choose \"Import projects\"\n![Context Working tree](resources/images/developpingExtension/GIT_Context_WorkingDirectory.png)\n  * In the **Select a wizard to use for importing projects** window:\n    * \"Import existing projects\" should be checked\n    * \"Working Tree\" should be selected\n![GIT Import projects](resources/images/developpingExtension/GIT_Import_projects.png)    \n  * In **Import Projects** window:\n    * **Uncheck « Search for nested project »**\n    * Check the projects you want to import\n    * Finish\n![Choose Projects to import](resources/images/developpingExtension/GIT_ChooseProjectToImport.png)\n2. Go back to the Java perspective\n3. Clean project (Project menu > Clean ...)\n\n### If you have errors...\nIf errors continue to show on in the different projects, be sure to correctly set the JDK used in the Eclipse preferences. GAMA is targeting JDK 1.8, and Eclipse will produce errors if it not found in your environment. So, either you set the compatibility to 1.8 by default (in Preferences > Java > Compiler > Compiler Compliance Level) or you change the error produced by Eclipse to a warning only (in Preferences > Java > Compiler > Building > \"No strictly compatible JRE for execution environment available).\n\n### Run GAMA\n1. In the `ummisco.gama.product` plugin, open the `gama.runtime.product` file (`gama.product` is used to produce the release).\n2. Go to \"Contents\" tab and click on \"Add required\"\n3. Go to \"Overview\" tab and click on Synchronize\n4. Click on Launch an Eclipse Application\n\n###GIT Tutorials\nFor those who want learn more about Git and Egit, please consult the following tutorials/papers\n\n1. EGIT/User Guide http://wiki.eclipse.org/EGit/User_Guide\n2. Git version control with Eclipse (EGIT) - Tutorial http://www.vogella.com/tutorials/EclipseGit/article.html\n3. 10 things I hate about Git http://stevebennett.me/2012/02/24/10-things-i-hate-about-git/\n4. Learn Git and GitHub Tutorial https://www.youtube.com/playlist?list=PL1F56EA413018EEE1","url":"wiki/InstallingGitVersion.md"},{"id":"wiki/InstallingSvnOldVersions.md","title":" Installing the SVN version","content":"# Installing the SVN version\n\n\n\nThese installation procedures have been tested on MacOS X 10.6 to 10.9, and Windows 8. On Mac OS X 10.10 (Yosemite), please have a look here: [install Java on Yosemite](Installation) for details about the Java version to use. **Eclipse 3.8.2 is the recommended Eclipse version to install GAMA**. Kepler install is still experimental.\n\n**Important note: the current SVN version is no more compatible with the GAMA 1.6.1 release.**\n  * If you plan to create plugin that should be compatible with the release, please download the GAMA code source at revision r11988 (on Google Code).\n  * If you want to have the last GAMA version (new GUI and APIs), you can download the head revision. The eclipse install should also be updated:\n    * EMF should be updated to the latest release available (2.10.2 in Apr. 2015)\n    * Xtext should be updated to the latest release (2.8.2 in April 2015)\n    * SWT 4.4\n    * ummisco.gaml.editbox plugin is now mandatory.\n\n\n\n\n\n\n## Detailed Instructions for Eclipse 4.4.2 (Luna SR2)\n### Get and configure Eclipse Luna\n  1. Download the Eclipse Modeling Tools version of Luna SR2\n    * https://eclipse.org/downloads/packages/eclipse-modeling-tools/lunasr2\n  1. Unpack it anywhere and run it\n  1. Choose a new workspace\n    * A workspace is a folder in which Eclipse stores all your projects.\n  1. Install the required plugins. � Help � -> � Install new software �\n    * In \"work with\", write \"http://download.eclipse.org/modeling/tmf/xtext/updates/composite/releases/\", click on \"Add\" and choose a name (e.g. Xtext)\n      * In \"Xtext\", install the following one:\n        * Xtext Complete SDK\t2.8.2.v201504100559\n\n### Get code source from GitHub\nIn Eclipse:\n  1. Windows > Open Perspective > Other�\n    * Git\n  1. Click on \"Clone a Git repository\"\n    * First window:\n      * URI: https://github.com/gama-platform/gama.git\n    * Branch Selection:\n      * Check master\n      * Next\n    * Local Destination\n      * Choose a Directory\n      * Finish\n\nYou have then to import projects:\n  1. Right-Click on Working Directory > Import projects\n    * Select a wizard to use for importing projects:\n      * \"Import existing projects\" should be  checked\n      * \"Working Directory\" should be selected\n      * Next\n    * In Import Projects:\n      * Uncheck ��Search for nested project��\n      * Check the projects you want to import\n      * Finish\n\nGo back to the Java perspective\n\n\n\n\n\n## Detailed Instructions for Eclipse 3.7.2 (Indigo)\n**PLEASE NOTE THAT SUPPORT FOR THIS INSTALLATION HAS BEEN STOPPED. IF YOU CANNOT RUN A NEWER VERSION OF ECLIPSE, THEN YOU HAVE TO CHECKOUT THE LATEST VERSION OF GAMA WORKING IN INDIGO (r11438 (on Google Code)).**\n  1. Download the Eclipse Modeling Tools version of Indigo\n    * http://www.eclipse.org/downloads/packages/eclipse-modeling-tools/indigosr2\n  1. Unpack it anywhere and run it\n  1. Choose a new workspace\n    * A workspace is a folder in which Eclipse stores all your projects.\n  1. Install the required plugins. � Help � -> � Install new software �\n    * In \"Work with\", type \"http://download.eclipse.org/technology/subversive/0.7/update-site/\" and install:\n      * In \"Subversive SVN Team Provider Plugin (Incubation)\"\n        * Subversive SVN Team Provider (Incubation)\t0.7.9.I20120520-1700\n    * In \"work with\", write \"http://download.eclipse.org/modeling/tmf/xtext/updates/composite/releases/\", click on \"Add\" and choose a name (e.g. Xtext)\n      * In \"Xtext-2.4.1\"   (to see it, you have to uncheck the \"Show only the latest versions of available software\")\n        * Xtext SDK\t2.4.1.v201304180855\n    * If you plan to build a release version, in \"work with\", write \"http://download.eclipse.org/tools/orbit/downloads/drops/R20110523182458/repository/\", click on \"Add\" and choose a name (e.g. ICU)\n      * Type 'icu' in the text filter.\n      * The site should propose you a list of plugins. Choose (if this version is not available, untick (\"Show only the latest versions\").\n        * International Components for Unicode for Java (ICU4J) Replacement plug-in\t4.4.2.v20110208\n  1. Eclipse proposes to restart -> Restart now\n  1. Add SVN repository exploring perspective\n    * To activate this perspective, choose Window / Open Perspective / Other... and select \"SVN Repository Exploring\"\n    * A popup appears (Discovery of SVN connector)\n    * Choose: SVN Kit 1.7.x\n      * Popup Unsigned content -> ok\n    * Popup -> restart now\n  1. Configure a new repository location:\n    * File > New > Other... > SVN > Repository Location\n    * URL: https://gama-platform.googlecode.com/svn\n    * Finish (& wait)\n  1. Checkout of the GAMA code source\n    * In the SVN repository view, navigate to the directory \"branches/GAMA\\_CURRENT\" and select \"Find/Checkout As...\" from the contectual menu.\n    * Choose \"Find projects in the children of the selected resource\" and follow the indications.\n    * Pop-up \"Check Out projects\", all projects should be selected. Finish.\n    * Once the checkout is finished, switch to Java Perspective.\n\nTo compile and run GAMA properly, you will need to configure your Eclipse IDE and the GAMA `.product` file.\n  1. By default, Eclipse uses Java 7 when it is installed whereas GAMA only needs Java 6. On MacOS X in particular, we may have to change the version of the JDK to ensure that GAMA will run smoothly.\n    * Window->Preferences\n    * In: Java / Compiler: set \"Compiler compliance level\" to 1.6\n    * In: Java / Installed JREs -> Add -> Standard VM -> JRE home -> Directory and choose the directory of a Java 6 JDK (preferable) or a Java 7 JDK (except for MacOS X, see [Installation](Installation)).\n      * Download the JDK 6 (for Windows & Linux) [here](http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase6-419409.html#jdk-6u45-oth-JPR)\n      * Download the JDK 7 (for Windows & Linux) [here](http://www.oracle.com/technetwork/java/javase/downloads/index.html).\n      * Download the JDK 6 (for Mac OS X) [here](http://support.apple.com/kb/DL1572). To switch between 1.7 and 1.6 (if both are installed), look at the use of `java-home` on this [page](http://docs.oracle.com/javase/7/docs/webnotes/install/mac/mac-jdk.html).\n    * In: Java / Installed JREs -> select Java 1.6 (for Mac) or 1.7 (on Windows & Linux).\n  1. You should configure the GAMA `.product` file depending on your OS.\n    * In the `msi.gama.application` project, open the `gama1.6.1.feature_based_release.product` file.\n    * In: the \"Launching\" tab: check whether the launching options are correct\n      * In particular, for a 32bits OS, you have to change in \"VM Arguments\" \"-Xmx1536m\" into \"-Xmx1024m\"\n      * For 64bits OS, check that the option \"-d32\" is not in the \"VM Arguments\" (otherwise delete it) in the \"macosx\" specific tab.\n  1. Compile and Run GAMA\n    * Do a \"Project -> Clean... (clean all projects)\"\n    * In the .product file, in \"Overview\" tab:\n      * click on the � Synchronize � link. This will ensure your product has updated the inclusion of the plugins (from both Eclipse and the new XText). Do not forget to save it.\n      * The product, or some of the included features, may complain about missing plugins (identified by an error icon on the plugin icon in the dependencies view). It is normal for \"fragments\" that apply to another OS than yours and it is harmless in this case. If you are, however, concerned about this, you can install the \"delta-pack\" for Eclipse 3.7.2 or Eclipse 3.8.2 (follow these steps: http://ugosan.org/eclipse-rcp-delta-pack/. The delta pack itself can be downloaded from [here](http://archive.eclipse.org/eclipse/downloads/drops/R-3.7.2-201202080800/download.php?dropFile=eclipse-3.7.2-delta-pack.zip)).\n      * If one of the missing plugins happens to be \"com.ibm.icu.base\" (and you did not want to install it as told above), you can replace it by \"com.ibm.icu\" without worries.\n      * As of GAMA 1.6.1, we use a version of the SWT binary fragments that is not the one shipped with Eclipse Indigo nor Juno. Although it is not mandatory to use it, it is required if you plan to produce release versions of GAMA from your product. To install it, simply download this [file](https://drive.google.com/file/d/0B8DTAk4nDgyNNmN0NkMtX1RDRDA/edit?usp=sharing) and install it like the delta pack above.\n      * click on the � Launch an Eclipse application � link. Note that a run configuration will be automatically created allowing to only click on the run button for future runs.\n\n**If the GAMA launch crashes:**\n  * Open Run configurations....\n  * In Eclipse Application / gama1.6.1.feature\\_based\\_release.product configuration, open the plug-ins pane\n  * After Launch with: , choose \"all workspace and enable plug-ins\".\n\n\n\n\n## Detailed Instructions for Eclipse 3.8.2\n\nFirst note that GAMA will not work with the packaged Juno version (in fact version 4.2 of Eclipse). Instead, you will need to download the core Eclipse package (Eclipse SDK) from http://archive.eclipse.org/eclipse/downloads/drops/R-3.8.2-201301310800/ , and to install additional plugins using this repository: http://download.eclipse.org/releases/juno/ . Among these additional plugins, only the EMF (Eclipse Modeling Framework) components should be necessary. In \"Modeling\":\n  * EMF - Eclipse Modeling Framework SDK\n  * EMF Validation Frameworkd SDK\n\nThe same instructions (than for Eclipse 3.7.2) can then be applied to this installation, with three differences :\n  * The delta-pack for Juno is available [here](http://archive.eclipse.org/eclipse/downloads/drops/R-3.8.2-201301310800/download.php?dropFile=eclipse-3.8.2-delta-pack.zip).\n  * The name of the product to use is  `gama1.6.1.feature_based_Eclipse3_8_2_updatable_release.product`\n  * The version of XText to use is 2.8.2 and it should be obtained from [here](http://download.eclipse.org/modeling/tmf/xtext/updates/composite/releases/), as this site will also provide updates for EMF and other components necessary for XText to work (you may need to install these components first, notably EMF ones, if the installation of XText does not work).\n\n\n\n\n\n## Detailed Instructions for Eclipse 4.3.2 (Kepler)\n  1. Download the Eclipse Modeling Tools version\n  * http://www.eclipse.org/downloads/packages/eclipse-modeling-tools/keplersr2\n    1. Unpack it anywhere and run it\n    1. Choose a new workspace\n      * A workspace is a folder in which Eclipse stores all your projects.\n    1. Install the required plugins. � Help � -> � Install new software �\n      * In \"Work with\", type \"http://download.eclipse.org/technology/subversive/0.7/update-site/\" and install:\n        * In \"Subversive SVN Team Provider Plugin (Incubation)\"\n          * Subversive SVN Team Provider (Incubation)\t0.7.9.I20120520-1700\n      * In \"work with\", write \"http://download.itemis.de/updates/\", click on \"Add\" and choose a name (e.g. Xtext)\n        * In \"Xtext-2.5.3\"\n          * Xtext SDK\t2.5.3.v20140220820\n        * In \"Xtext Antlr-2.1.0\"\n          * Xtext Antlr SDK 2.1.0.v201308291703\n      * If you plan to build a release version, in \"work with\", write \"http://download.eclipse.org/tools/orbit/downloads/drops/R20110523182458/repository/\", click on \"Add\" and choose a name (e.g. ICU)\n        * Type 'icu' in the text filter.\n        * The site should propose you a list of plugins. Choose (if this version is not available, untick (\"Show only the latest versions\").\n          * International Components for Unicode for Java (ICU4J) Replacement plug-in\t4.4.2.v20110208\n    1. Eclipse proposes to restart -> Restart now\n    1. Add SVN repository exploring perspective\n      * To activate this perspective, choose Window / Open Perspective / Other... and select \"SVN Repository Exploring\"\n      * A popup appears (Discovery of SVN connector)\n      * Choose: SVN Kit 1.7.x\n        * Popup Unsigned content -> ok\n      * Popup -> restart now\n    1. New > repository location\n      * https://gama-platform.googlecode.com/svn\n      * Finish (& wait)\n    1. Checkout of the GAMA code source\n      * In the SVN repository view, navigate to the directory \"branches/GAMA\\_CURRENT\" and select \"Find/Checkout As...\" from the contectual menu.\n      * Choose \"Find projects in the children of the selected resource\" and follow the indications.\n      * Pop-up \"Check Out projects\", all projects should be selected. Select \"Check out as a folders into workspace\". Click \"Next\" and then \"Finish\".\n      * Once the checkout is finished, switch to Java Perspective.\n    1. Configure Build path of all projects :\n      * In the Properties of project, Java build path category, Libraries tab, click on JRE System Libray to change Excution environment from Java 1.6 to Java 1.7\n    1. Configure the GAMA `.product` file (gama1.6.1.feature\\_based\\_release.jogl2.product) :\n      * In the `msi.gama.application` project, open the `gama1.6.1.feature_based_release.jogl2.product` file\n      * In the \"Dependencies\" tab:\n        * Choose all `org.eclipse.equinox.*` plugins and remove them.\n      * Click `Add` button, type in `org.eclipse.equinox` and add all displayed packages.\n      * Click `Add` button, type in `org.eclipse.e4`, then select all and click OK.\n      * Click `Add Required` button, this will add two more: `org.eclipse.emf.ecore` and `org.eclipse.emf.common`\n    1. Configure `ummisco.gama.feature.dependencies` project:\n      * In the `ummisco.gama.feature.dependencies` project, open the `feature.xml` file\n      * In: the \"Plugin\" tab:\n        * Click `Add` and type in `org.w3c.dom`, choose `org.w3c.dom.events` and `org.w3c.dom.smil`, click OK.\n    1. Compile and Run GAMA\n      * Do a \"Project -> Clean... (clean all projects)\"\n      * In `gama1.6.1.feature_based_release.jogl2.product` file, in \"Overview\" tab.\n        * click on the � Synchronize � link. This will ensure your product has updated the inclusion of the plugins (from both Eclipse 3.7 and the new XText). Do not forget to save it.\n        * click on the � Launch an Eclipse application � link. Note that a run configuration will be automatically created allowing to only click on the run button for future runs.\nHave fun!\n\n\n\n\n\n## Install additional plug-ins\n\n### Install the Graphical Modeling Framework\n\nThis installation procedure has been tested on a macbook pro with macosx 10.6 64 bits.\n\n**Important note**: for the moment, the plug-in works only with Eclipse Indigo and graphiti 0.8. Some modifications will be made later to make it works with the latest version of Eclipse and graphiti.\n\n#### Details\n\nThe graphical modeling framework is based on the [Graphiti](http://www.eclipse.org/graphiti/) plug-in.\n\n  1. The first step consists in installing the graphiti plug-ins : � Help � -> � Install new software �\nIn \"Work with\", choose \"Indigo - http://download.eclipse.org/releases/indigo\" and install: Graphiti, Graphiti Export, Graphiti SDK and Graphiti SDK Plus.\n  1. Eclipse proposes to restart -> Restart now\n  1. � Help � -> � Check of Updates �\n  1. Install the proposed updates\n  1. Eclipse proposes to restart -> Restart now\n  1. From the GAMA SVN, checkout the idees.gama.graphicalmodeling, idees.gama.emf.metamodel and idees.gama.feature.graphical\\_modeling projects.\n    * In the SVN repository view, navigate to the directory \"branches/GAMA\\_CURRENT\" and select the three mentioned projects and select \"Find/Checkout As...\" from the contectual menu.\n    * Choose \"Find projects in the children of the selected resource\" and follow the indications.\n    * Pop-up \"Check Out projects\", all projects should be selected. Finish.\n    * Once the checkout is finished, switch to Java Perspective.\n  1. You have to add the plugin to the GAMA `.product` file .\n    * In the `msi.gama.application` project, open the `gama1.6.1.feature_based_release.product` file\n    * In: the \"Dependencies\" tab: click on \"Add ...\" and select the idees.gama.feature.graphical\\_modeling plugin\n    * In: the \"Dependencies\" tab: click on \"Add Required plug-ins\" then save the file\n  1. Compile and Run GAMA\n    * Do a \"Project -> Clean... (clean all projects)\"\n    * In `gama1.6.1.feature_based_release.product` file, in \"Overview\" tab.\n      * click on the � Synchronize � link. This will ensure your product has updated the inclusion of the plugins. Do not forget to save it.\n      * click on the � Launch an Eclipse application � link. Note that, a run configuration will be automatically created allowing to only click on the run button for future runs.\n\n#### Note\nIf you have some errors on the META-INF/MANIFEST.MF file (in particular on the line  `org.eclipse.draw2d;bundle-version=\"3.8.3\"`), you can follow next steps.\n\n  1. Fix the MANIFEST.MF error (if any)\n    * In the plug-in idees.gama.graphicalmodeling, open the file : META-INF/MANIFEST.MF\n    * In the 'Dependencies' pane,\n      * Select org.eclipse.draw2d (3.8.1) and click on the 'Properties' button\n      * In 'Available version to match', select the one you have (mine is the v 3.7.2), and click on 'Match' and 'OK'\n    * Save the file\n    * Repeat Step 8 (clean, synchronize...)\n\n\n\n\n\n### Install additional plug-ins to generate the documentation\n  1. A plug-in to use Python should be installed as additional plug-ins: � Help � -> � Install new software �\nIn \"Work with\", choose \"http://pydev.org/updates\" and install: PyDev for Eclipse.\n  1. Configure the Python Interpreters:\nEclipse -> Preferences -> PyDev -> Interpreters -> Python Interpreter: Quick auto-config.","url":"wiki/InstallingSvnOldVersions.md"},{"id":"wiki/SerializeAgents.md","title":" Syntax in GAML","content":"Using SavedAgent kind of GamlAgent, it is now possible to serialize and unserialize agents and simulations as a string. It can be done using the operators: `serializeSimulation`, `unserializeSimulation`, `saveSimulation` of `ummisco.gama.serialize`.\n\nNeed to be improved:\n* serialization of random generator\n* serialization of shapes\n* to allow any agent to be serialized\n\n\nExample of use of the two operators:\n```\nexperiment toto {\n\tlist history ","url":"wiki/SerializeAgents.md"},{"id":"wiki/WebsiteGeneration.md","title":" How to write the Website Content","content":"# How to write the Website Content\n\nIn this page, we will explain all about the convention we use to write and generate the website content and the wiki content.\nSince the release of GAMA 1.7, with the new GAMA website, we have two contents:\n* The _wiki_ content is hosted in github, witch directly interpret the markdown format of the files to display them in a proper way. This wiki, since it is a wiki, can be edited by any user. It is then, in constant changes.\n* The _website_ content is the content of the real GAMA website. It is a verified and fixed version of the documentation (usually a re-generation of the website content is done when there is a new release of the software)\n\n## Index\n\n* [Requirements](#requirements)\n* [gama.wiki tree structure](#gamawiki-tree-structure)\n* [Good practices when writing markdown files](#good-practices-when-writing-markdown-files)\n  * [Title](#title)\n  * [Hypertext Links](#hypertext-links)\n  * [Images Links](#images-links)\n  * [Insert Metadatas](#insert-metadatas)\n* [Website Generation Workflow](#website-generation-workflow)\n  * [Website Database](#website-database)\n  * [Loading the Database](#loading-the-database)\n* [Manage concepts keywords](#manage-concepts-keywords)\n\n## Requirements\n\nTo generate automatically the documentation, the GAMA Git version is required. See [Install Git version](InstallingGitVersion) for more details.\n\nAmong all the GAMA plugins, only one is related to documentation generation:\n* `msi.gama.documentation`: it contains some useful java scripts to help you to write a correct documentation.\n\nIn addition, the folder containing the wiki files is required. In the GitHub architecture, the wiki documentation is stored in a separate Git repository `https://github.com/gama-platform/gama.wiki.git`. A local clone of this repository should thus be created:\n1. Open the Git perspective:\n  * Windows > Open Perspective > Other...\n  * Choose `Git`\n2. Click on \"Clone a Git repository\"\n  * In **Source Git repository** window: \n    * Fill in the URI label with: `https://github.com/gama-platform/gama.wiki.git`\n    * Other fields will be automatically filled in.\n  * In **Branch Selection** windows, \n    * check the master branch \n    * Next\n  * In **Local Destination** windows,\n    * Choose the directory in which the gama Git repository has been cloned\n    * Everything else should be unchecked \n    * Finish\n3. In the **Git perspective** and the **Git Repositories** view, Right-Click on \"Working Directory\" inside the `gama.wiki` repository, and choose \"Import projects\"\n  * In the **Select a wizard to use for importing projects** window:\n    * \"Import existing projects\" should be checked\n    * \"Working Directory\" should be selected\n  * In **Import Projects** window:\n    * **Uncheck « Search for nested project »**\n    * Check the project `gama.wiki`\n    * Finish\n2. Go back to the Java perspective: a `gama.wiki` plugin should have been added.\n\n## gama.wiki tree structure\n\nThe \"gama.wiki\" plugin contains all the wiki content, and almost all the website content. It contains a folder content which contains the following folders:\n* Tutorials\n  * LearnGAMLStepByStep: contains the linear documentation to learn about the concepts of GAML\n  * Recipes: contains short pieces of documentation answering a specific problematic\n  * Tutorials: contains applicative tutorials \n* References\n  * ModelLibrary: contains the model library (only present in the website) \n  * PlatformDocumentation: contains the documentation dealing with how to use the platform\n  * GAMLReferences: contains GAML references\n  * PluginDocumentation: contains the documentation of the additional plugins\n* Community\n  * Projects: contains a presentation of the projects where GAMA is involved (only present in the website)\n  * Training: contains a presentation of the training sessions organized by the GAMA team (only present in the website)\n* WikiOnly: contains the content only present in the wiki, and not in the website\n  * DevelopingExtensions: contains explanations about how to extend the platform\n* resources: contains all the additional resources needed (images, pdf...)\n\nFor the rest of this document, the highest level of tree structure (\"Tutorials\"/\"References\"/\"Community\"/\"WikiOnly\") will be named as **tabs**. The level just under will be named as **sections**, and the level under will be named as **sub-section**.\nAll this content is written using the markdown format.\nAll the images resources are included in the _resources/images_ folder. They are actually under different sub-folders. From the markdown page, you can call the resource with the relative path `resource/images/sub_folder/image_name.png`.\nIf a _section_/_sub-section_ contains one of several sub-division, then those sub-divisions will be stored in a folder with the name of the corresponding _section_/_sub-section_, and this _section_/_sub-section_ folder will be associated with a markdown file with the same name (indeed, a _section_/_sub-section_ has its own page).\nIf a _section_/_sub-section_ has no sub-division, then this _section_/_sub-section_ is simply defined with a markdown file containing the content wanted.\n\n![resources/images/developpingExtension/tree_structure.png](resources/images/developpingExtension/tree_structure.png) \n\nNotice that there is some content which is present only in the wiki (the \"WikiOnly\" content), some content present only in the website (the model library, most of the community content...). In fact, the wiki tree structure is determined by the file _Sidebar, while the website tree structure is determined by the file _WebsiteTreeStructure_.\n\n## Good practices when writing markdown files\n\n### Title\n\nEach markdown files **has to** start with a title in the markdown format (like `# title`). This is this title which will be displayed in the tree structure of the website.\n\n### Hypertext Links\n\nEven if the repository how have a more complexe tree structure, you don't have to (and you must not !) speficy the relative or absolute path to the target page, just naming the page will work : `[text_displayed](the_name_of_the_md_file)`\n\n### Images Links\n\nAs already said in the [previous paragraph](#gamawiki-tree-structure), images have to be in an \"resources/images/folder_name\" folder next to your md file, so that you can write the relative path more easily.\n\n### Insert Metadatas\n\nMetadatas in content files are written as comments, with the following syntax:\n\n```\n[//]: # (name_of_the_medatada|value_of_the_metadata)\n```\n\nMedatadas are not displayed in the wiki and the website content. For the website generation, metadatas are used in order to build the database, most of all to manage the search engine, and the learning graph.\n\nHere is the list of metadata we use in the content files:\n\n* **keyword** : will write an invisible anchor in this exact place in the website. When the user will do a research about this word, he can access directly to this anchor.\n\n* **startConcept**/**endConcept** : used to delimit a concept. The value of those two metadatas is the name of the concept. All the concepts are listed in the file \"DependencyGraph\", in the content folder in your wiki repository.\n\n#### keyword\n\nThe value of the keyword has to have this structure : keyword_category_keyword_name (indeed, several keywords can have the same name ! The type of the keyword has to be specified).\nHere is the list of the several keyword categories : concept, operator, statement, species, architecture, type, constant and skill.\nExample of metadata : `[//]: # (keyword|concept_3D)`, or `[//]: # (keyword|operator_int)`.\n\n#### startConcept/endConcept\n\nThe value of the keyword have to be one of the values defined in the file learningConcept.xml.\n\nNotice that a _concept_ in the meaning of keyword is not the same as a _concept_ (or _learning concept_) in the learning graph ! \nPlease read the part concerning the database to learn more about it.\n\n## Website generation workflow\n\n_This part is not implemented yet, it is under construction._\n\n![resources/images/developpingExtension/website_generation_workflow.png](resources/images/developpingExtension/website_generation_workflow.png)\n\n### The gama.documentation plugin\n\nThis plugin is used to [generate GAML documentation automatically in the markdown format](Documentation), and copy paste the content to the wiki folder.\nThe plugin is also used to generate the model library in the markdown format, with the source code, a quick description, and an image (screenshot). In the same time, the plugin generates a html page (an \"abstract\") and put it directly in the model folder (in order to be loaded directly from GAMA).\n\nThe documentation plugin contains also 2 other scripts which helps to create content:\n\n#### learningGraphDatabaseGenerator\n\nThe **learningGraphDatabaseGenerator** script is used to generate the \"_nodesDatabase.js_\" file, which is read to visualize the learning graph. This script needs the \"learningGraph.xml\" file as input. Each learning concepts has an id, a name, a very short description, a position (position in x and y in %, between 0 and 1. This value is then multiplied by the **coeff** in the learningGraphDatabaseGenerator), and a list of prerequisite learning concepts. A category of learning concept (also defined in the learningGraph.xml file) has an id, a position (position in x and y), a position for the hallow (position in x and y of the big circle displayed when a category is selected), a size for the hallow, a color, a name, and the list of learningConcept associated.\n\n#### modelLibraryGenerator\n\nThe **modelLibraryGenerator** script is used to generate all the markdown files of the model library. This script\n\n* Parse all the models of the model library, and build an \"input\" xml file for a headless execution (this file is deleted at the end of the execution).\n  * By default, this will ask to execute all the experiments for each model, and take a screenshot of the 10th cycle for each display.\n  * You can change this default behavior by changing the file \"**modelScreenshot.xml**\", in the wiki repo (see description below)\n* Execute the headless\n* Copy-paste all the generated images in the write folder, with the write names.\n* Browse a second time all the models, build the md file, including the screenshot computed from the headless execution, and analyzing the header of each model to extract the title, author and tags. Each md files respects the following format : path_from_model_with_underscore_instead_of_slash_without_strange_char + \".md\". (ex : \"Features/3D/3D Visualization/models/3D camera and trajectories.gaml\" becomes \"Features_3D_Visualization_models_3D_camera_and_trajectories.md\".)\n\nFormat of the xml file to \"tune up\" the screenshot generation :\n```\n\n  \n    \n    \n  \n\n```\n\n_TODO_\n\n### The gama.wiki repository\n\nThis repository contains in on hand the content auto generated by the documentation plugin, and in the other hand a handmade content. All the content is in the markdown format, organized through a [specific tree structure](#gamawiki-tree-structure), sometime containing [metadatas](#metadatas).\n\n### The website repository\n\nThis repository contains:\n* A copy of the content of the wiki repo (copy/pasted manually to freeze a specific commit of the wiki)\n* A Database management system\n* A script used to interpret the metadatas from the content, in order to load the database\n* Some pages which are not in the wiki repo, and some heavy resources (such as videos)\n\n\n### Website database\n\n![resources/images/developpingExtension/global_database.png](resources/images/developpingExtension/global_database.png)\n\n#### Keyword\n\nA **keyword** is a keyword that can be used for search, either manually (the user enters the wanted keyword in the searchbar of the website) or automatically (through the search tab in the navigation panel)\nA keyword in attached with a category (among the following names : concept, type, operator, statement, species, architecture, constant, action, attribute, skill, facet).\n\n* A keyword that is a **_concept_** can be linked with other keywords (ex : the keyword \"BDI\" will be linked with the keywords \"eval_when\", \"get_priority\"...)\n* A keyword that is a **_facet_** is linked to a **_statement_** or a **_species_** keyword (ex : the keyword \"torus\" will be linked with the keyword \"global\").\n* A keyword that is an **_action_** or an **_attribute_** is linked either to a **_skill_** keyword (if it is actually an action or an attribute of a skill), an **_architecture_** keyword (if it is an action or a behavior of an architecture), or a **_species_** keyword (if it is a built-in action or attribute).\n* A keyword that is a **_statement_** can be linked to an **_architecture_**.\n\nA keyword is composed of:\n* **id** (unique id)\n* **name** (the word which is searched by the user)\n* **idCategory** (id of the category)\n\nA cagegory is composed of:\n* **id** (unique id)\n* **name** (the name of the category)\n\n![resources/images/developpingExtension/keyword_table.png](resources/images/developpingExtension/keyword_table.png)\n\n#### Alias\n\nAn other database is used to join an **alias** to an existing keyword. Ex : the word \"alias\" will be changed as \"die\".\n\nAn alias is composed of:\n* **id** (unique id)\n* **name** (name of the alias. ex : \"kill\")\n* **attachedKeywordName** (name of the keyword attached. ex : \"die\")\n\nNote that an alias does not know the id of the keyword, but only the name of the attached keyword(s). Indeed, the alias \"integer\" will give the keyword name \"int\", but several keywords correspond to the keyword name \"int\" (it can be the type \"int\", or the cast operator \"int\")\n\n![resources/images/developpingExtension/alias_table.png](resources/images/developpingExtension/alias_table.png)\n\n#### Webpage\n\nA **webpage** can be either a page of the model library, a page of the gaml reference, or an other page of the documentation.\n\nA webpage is composed of:\n* **id** (unique id)\n* **name** (name of the webpage)\n* **webpageCategory** (the name of the category of the webpage, a value among _modelPage_, _docPage_, gamlRefPage_).\n\nThe tables **webpage** and **keyword** are linked through an association table. This association table contains also an anchor (an anchor has an unique value) to the wanted paged.\n\n![resources/images/developpingExtension/webpage_table.png](resources/images/developpingExtension/webpage_table.png)\n\nNote that only the keywords which have the category _concept_, _species_, _type_, _operator_, _skill_ and _constant_ can be attached to a webpage. \n\nThe keywords which have the category _action_, _attribute_ and _facet_ forward to the attached keyword.\n\nThe keywords which have the category _statement_ are attached to a webpage only if they are not attached to another keyword. If they are attached to another keyword (an _architecture_ keyword), then the _statement_ keyword forward to the attached keyword.\n\n#### LearningConcept\n\n**LearningConcept** is used to build the learning graph (notice that a \"learning concept\" and a \"keyword concept\" is not the same thing !)\n\nA LearningConcept is composed with:\n\n* **id** (unique id)\n* **name** (name of the learning concept)\n\nA LearningConcept is linked to a webpage through an association table. This table is composed also with two anchors that are used to delimit the position of the learning concept in a page (the beginning position and the ending position).\n\nA LearningConcept can be associated to other LearningConcepts through an association table, used to spefify the \"prerequisite concepts\".\n\n![resources/images/developpingExtension/learningConcept_table.png](resources/images/developpingExtension/learningConcept_table.png)\n\n### Loading the Database\n\nThe database is loaded from a gathering of independent files. Some of those files are handmade written, other are generated automatically.\n\n#### Role of the documentation generation script in the construction of the database\n\nAs explained in the explication of the [documentation generation pages](Documentation), the documentation generation script is used to generate the gaml references and the model library pages (in the markdown format with metadatas), but also to build two files **category.txt** and **keyword.xml**.\n\nThe file **category.txt** is a very simple file, listing the different keyword categories. This file will be used to build the **Category** table.\n\nFormat of the file:\n```\nconcept, type, statement, species, architecture, operator, skill, constant, action, attribute, facet\n```\n\nThe file **keyword.xml** is an xml file that contains all the possible keywords (all except some keywords written manually directly in the documentation pages). The GAML words can be found directly using the code of GAMA. The concept words can be found using the code of GAMA (thanks to the tag \"category\") and also by using the tags in the header of the model files. This xml file will be used to build the **Keyword** and the **AssociationKeywordCategory** tables.\n\nFormat of the file:\n```\n\n  keywordname\n  keywordcategory\n  \n    keywordId1\n    keywordId2\n  \n\n```\n\nNote that:\n* The list associatedKeywordList contains only one element for the _facet_ keywords, one of no element for the _action_ or _attribute_ keywords (none when the action/attribute is a built-in), several or no elements for the _concept_ keywords, and none for the other type of keywords.\n\n* The id is build with the value of the attribute \"name\" and with the value of the attribute \"category\" for every keywords except the _statement_, _facet_, _action_ and _attribute_ keywords, which need also the value of the associatedKeyword linked. Ex : the id of the facet \"torus\" will be \"facet_torus_statement_global\".\n\n#### Preparation of the repository before the generation of the database\n\nAfter the generation of the markdown content in the wiki repository, two other files have to be built manually : the files **alias.txt** and **learningConcept.xml**.\n\nThe **alias.txt** file contains all the connexions between alias and keyword name. It will be used to build the **Alias** table.\n\nFormat of the file :\n```\naliasName1:remplacedWord1\naliasName2:remplacedWord2\nkill:die\n```\n\nThe **learningConcept.xml** file is used to list the learning concepts, and to connect them to their prerequisite concepts. It will be used to build the **LearningConcept** and the **AssociationLearningConcept** tables.\n\nFormat of the file :\n```\n\n  learningConceptName\n  \n    learningConcept1\n    learningConcept2...\n  \n\n```\nNote that the value of the attribute \"name\" can be used as an unique id.\n\n#### Role of the website content generation script in the construction of the database\n\nAfter copy-paste the content to the website folder, a script is used to build the database and to generate website content.\n\nThe **Category**, **Alias**, **LearningConcept** and **AssociationLearningConcept** tables are loaded easily from the files **category.txt**, **alias.txt**, and **learningConcept.xml**.\n\nThe **Keyword** and **AssociationKeywordCategory** tables are loaded from the **keyword.xml** file. Note that those two tables are not entirely loaded yet, because other keywords can be presents in the header of other files.\n\nThe markdown files are converted one by one into html format.\n\n* When a metadata **startConcept**/**endConcept** is found (syntax : [//]: # (beginAnchor|name_of_learning_concept)), the metadata is replaced with an anchor in the page (with an unique id), and the **AssociationWebpageConcept** table is updated.\n* When a metadata **keyword** is found (syntax :  [//]: # (keyword|name_of_keyword_category_name_of_keyword)), the metadata is replaced with an anchor in the page (with an unique id), and the **AssociationWebpageKeyword** table is updated (the **Keyword** and **AssociationKeywordCategory** are updated if the keyword does not exist yet in the table).\n\n## Manage concepts keywords\n\n**ALL** the concepts must be declared in the \"IConcept\" java class. If you want to add a new concept, please check before if your the concept you want to add cannot be remplaced by one of the existing concept. If it is the case, you can add your word as if it was an **alias**, pointing to the existing concept. Note that all the alias are listed in the alias.txt file. If you realy think that the concept has to be added, please add it to the IConcept file, and also to (one or several) of the lists _CONCEPTS_NOT_FOR_GAML_REF_, _CONCEPTS_NOT_FOR_MODEL_LIBRARY_, _CONCEPTS_DEDICATED_TO_SYNTAX_ in the ConceptManager class if needed.\n\nMost of the keywords of the website (used for the search) are managed automatically. But the \"concepts\" keywords have to be (partially) hand-made managed. You can add the concepts with 3 differents methods :\n\n### In the Documentation\n\"Documentation\" here designs all the content manually written in the wiki. All those pages can contain \"concepts\" through the metadata format :\n\n`[//]: # (keyword|concept_name_of_concept)`\n\nYou can either :\n- place those metadatas anywhere in the page if you want to point directly in this part of the page if the user makes a search\n- place those metadatas **above the title** : doing this, the \"automatic search\" (left navigation panel) will be made with this concept. You have to be really sure this concept is the **main** concept of the page to place it there.\n\n### In the Model library\nDirectly from the gaml files of the model library, you can add the concept you want through the \"Tags\" in the header of the model.\n\nExemple :\n\n```\n/**\n* Name: 3D Display model of differents shapes and a special Object\n* Author: \n* Description: Model presenting a 3D display of differents shapes (pyramid, cone, cylinder, sphere and a teapot object) to represent the same agents but with\n*       different aspects. Five experiments are possible, one for each of the shapes presented previously. In each experiment, the agents move to create a big circle but flee\n*       from their closest neighbour. \n* Tags: 3d, shape, neighbors\n*/\n```\n\nNote that if you don't want this model to have a page in the website, you can name it starting with the character `_`.\n\n### In the GAML References\nYou can add a concept to a gaml word by using the syntax `concept = { IConcept.MY_CONCEPT }`.\n\nExemple :\n\n```\n@operator(value = \"flip\",\n\tconcept = { IConcept.RANDOM }\n```\n\n___________________________________________________________\n\n\n\n\n_The following text has been automatically generated from \"mainCheckConcepts\"_\n\n______________ _last update : 2017/02/28 14:21:42_\n\n**List of concepts to use for model library (except Syntax):**\n\n3d, agent_location, agent_movement, algorithm, architecture, asc, batch, bdi, camera, chart, clustering, color, communication, comodel, comparison, csv, database, date, dem, dgs, diffusion, dxf, edge, elevation, equation, fipa, fsm, geometry, gis, graph, graph_weight, graphic, grid, gui, headless, hydrology, image, inheritance, inspector, light, load_file, math, mirror, monitor, multi_criteria, multi_level, multi_simulation, neighbors, network, nil, node, obj, obstacle, osm, overlay, physics_engine, r, raster, regression, save_file, scheduler, serialize, shape, shapefile, shortest_path, skill, sound, spatial_computation, spatial_relation, spatial_transformation, sport, statistic, svg, system, task_based, test, text, texture, tif, topology, transport, txt, xml\n\n**List of concepts to use exclusively in Syntax models:**\n\narithmetic, attribute, cast, condition, container, filter, list, logical, loop, map, matrix, string, ternary\n\n**List of concepts to use for GAML worlds:**\n\n3d, action, agent_location, agent_movement, algorithm, architecture, arithmetic, asc, attribute, batch, bdi, behavior, camera, cast, chart, clustering, color, communication, comodel, comparison, condition, constant, container, csv, cycle, database, date, dem, dgs, diffusion, dimension, display, dxf, edge, elevation, equation, experiment, file, filter, fipa, fsm, geometry, gis, graph, graph_weight, graphic, graphic_unit, grid, gui, headless, hydrology, image, inspector, length_unit, light, list, load_file, logical, loop, map, math, matrix, mirror, monitor, multi_criteria, multi_level, multi_simulation, neighbors, network, nil, node, obj, obstacle, optimization, osm, overlay, parameter, physics_engine, point, r, random, random_operator, raster, regression, save_file, scheduler, serialize, shape, shapefile, shortest_path, skill, sound, spatial_computation, spatial_relation, spatial_transformation, species, statistic, string, surface_unit, svg, system, task_based, ternary, test, text, texture, tif, time, time_unit, topology, transport, txt, type, volume_unit, weight_unit, xml\n\n| **Concept name** | **in Doc** | **in GAML Ref** | **in Model Lib** | **TOTAL** |\n|:----------------------------|:-------------|:-------------|:-------------|:-------------|\n| 3d | 2 | 17 | 39 | 58 |\n| action | 3 | 5 | _ | 9 |\n| agent_location | 1 | 21 | 0 | 22 |\n| agent_movement | 0 | 2 | 23 | 25 |\n| algorithm | 1 | 8 | 2 | 11 |\n| architecture | 2 | 11 | 1 | 14 |\n| arithmetic | 0 | 33 | 0 | 33 |\n| asc | 0 | 2 | 2 | 4 |\n| attribute | 2 | 6 | _ | 9 |\n| autosave | 2 | _ | _ | 2 |\n| background | 1 | _ | _ | 1 |\n| batch | 3 | 8 | 4 | 15 |\n| bdi | 1 | 51 | 0 | 52 |\n| behavior | 3 | 7 | _ | 10 |\n| camera | 1 | 1 | 2 | 4 |\n| cast | 1 | 17 | 1 | 19 |\n| chart | 0 | 5 | 5 | 10 |\n| clustering | 0 | 5 | 3 | 8 |\n| color | 1 | 17 | 4 | 22 |\n| communication | 0 | 3 | 0 | 3 |\n| comodel | 0 | 0 | 8 | 8 |\n| comparison | 0 | 6 | 2 | 8 |\n| condition | 1 | 7 | 0 | 8 |\n| constant | 0 | 13 | _ | 13 |\n| container | 1 | 60 | 1 | 62 |\n| csv | 2 | 4 | 3 | 9 |\n| cycle | 2 | 2 | _ | 4 |\n| database | 1 | 3 | 17 | 21 |\n| date | 1 | 48 | 2 | 51 |\n| dem | 0 | 0 | 1 | 1 |\n| dgs | 0 | 0 | 1 | 1 |\n| diffusion | 1 | 1 | 14 | 16 |\n| dimension | 2 | 35 | _ | 37 |\n| display | 2 | 25 | _ | 29 |\n| distribution | 1 | _ | _ | 1 |\n| dxf | 0 | 2 | 1 | 3 |\n| edge | 1 | 15 | 1 | 17 |\n| elevation | 0 | 0 | 7 | 7 |\n| enumeration | 1 | _ | _ | 1 |\n| equation | 2 | 7 | 15 | 24 |\n| experiment | 2 | 3 | _ | 5 |\n| facet | 1 | _ | _ | 1 |\n| file | 1 | 44 | _ | 47 |\n| filter | 1 | 12 | 0 | 13 |\n| fipa | 1 | 4 | 11 | 16 |\n| fsm | 1 | 0 | 0 | 1 |\n| geometry | 2 | 96 | 0 | 98 |\n| gis | 0 | 5 | 24 | 29 |\n| global | 1 | _ | _ | 1 |\n| graph | 1 | 55 | 32 | 88 |\n| graph_weight | 1 | 3 | 0 | 4 |\n| graphic | 1 | 10 | 1 | 12 |\n| graphic_unit | 1 | 6 | _ | 7 |\n| grid | 4 | 10 | 33 | 47 |\n| gui | 3 | 9 | 24 | 36 |\n| halt | 1 | _ | _ | 1 |\n| headless | 0 | 1 | 0 | 1 |\n| hydrology | 0 | 0 | 1 | 1 |\n| image | 0 | 4 | 0 | 4 |\n| import | 1 | _ | _ | 1 |\n| inheritance | 1 | _ | 1 | 2 |\n| init | 3 | _ | _ | 3 |\n| inspector | 1 | 2 | 1 | 4 |\n| layer | 1 | _ | _ | 1 |\n| length_unit | 0 | 9 | _ | 9 |\n| light | 2 | 1 | 4 | 7 |\n| list | 0 | 9 | 2 | 11 |\n| load_file | 4 | 1 | 18 | 23 |\n| logical | 1 | 7 | 0 | 8 |\n| loop | 1 | 2 | 2 | 5 |\n| map | 0 | 15 | 1 | 16 |\n| math | 1 | 41 | 20 | 62 |\n| matrix | 2 | 22 | 8 | 32 |\n| mirror | 1 | 0 | 2 | 3 |\n| model | 1 | _ | _ | 1 |\n| monitor | 1 | 1 | 1 | 3 |\n| multi_criteria | 0 | 4 | 1 | 5 |\n| multi_level | 1 | 3 | 9 | 13 |\n| multi_simulation | 1 | 0 | 2 | 3 |\n| neighbors | 1 | 5 | 1 | 7 |\n| network | 0 | 1 | 0 | 1 |\n| nil | 1 | 0 | 0 | 1 |\n| node | 1 | 20 | 1 | 22 |\n| obj | 0 | 0 | 2 | 2 |\n| obstacle | 0 | 1 | 3 | 4 |\n| opengl | 3 | _ | _ | 3 |\n| operator | 1 | _ | _ | 1 |\n| optimization | 3 | 1 | _ | 4 |\n| osm | 1 | 2 | 2 | 5 |\n| output | 2 | _ | _ | 7 |\n| overlay | 0 | 0 | 1 | 1 |\n| parameter | 2 | 1 | _ | 3 |\n| pause | 1 | _ | _ | 1 |\n| permanent | 1 | _ | _ | 1 |\n| physics_engine | 0 | 0 | 4 | 4 |\n| point | 0 | 29 | _ | 29 |\n| probability | 1 | _ | _ | 1 |\n| pseudo_variable | 1 | _ | _ | 1 |\n| r | 1 | 2 | 0 | 3 |\n| random | 3 | 10 | _ | 13 |\n| random_operator | 0 | 0 | _ | 0 |\n| raster | 0 | 0 | 4 | 4 |\n| reflex | 1 | _ | _ | 1 |\n| refresh | 2 | _ | _ | 2 |\n| regression | 0 | 2 | 1 | 3 |\n| save_file | 0 | 2 | 8 | 10 |\n| scheduler | 2 | 2 | 0 | 4 |\n| serialize | 0 | 0 | 0 | 0 |\n| shape | 3 | 21 | 1 | 25 |\n| shapefile | 2 | 2 | 34 | 38 |\n| shortest_path | 1 | 6 | 4 | 11 |\n| skill | 2 | 17 | 42 | 61 |\n| sound | 0 | 4 | 0 | 4 |\n| spatial_computation | 0 | 73 | 7 | 80 |\n| spatial_relation | 0 | 32 | 0 | 32 |\n| spatial_transformation | 0 | 24 | 2 | 26 |\n| species | 1 | 20 | _ | 21 |\n| sport | 0 | _ | 2 | 2 |\n| statistic | 0 | 66 | 5 | 71 |\n| string | 0 | 27 | 0 | 27 |\n| surface_unit | 0 | 4 | _ | 4 |\n| svg | 0 | 2 | 0 | 2 |\n| system | 1 | 11 | 0 | 12 |\n| task_based | 1 | 4 | 0 | 5 |\n| ternary | 1 | 2 | 1 | 4 |\n| test | 0 | 4 | 2 | 6 |\n| text | 2 | 10 | 0 | 12 |\n| texture | 0 | 1 | 3 | 4 |\n| tif | 0 | 2 | 1 | 3 |\n| time | 2 | 20 | _ | 22 |\n| time_unit | 0 | 13 | _ | 13 |\n| topology | 3 | 9 | 4 | 16 |\n| torus | 1 | _ | _ | 1 |\n| transport | 1 | 5 | 6 | 12 |\n| txt | 0 | 0 | 1 | 1 |\n| type | 0 | 53 | _ | 53 |\n| update | 1 | _ | _ | 1 |\n| volume_unit | 0 | 5 | _ | 5 |\n| weight_unit | 0 | 8 | _ | 8 |\n| world | 1 | _ | _ | 1 |\n| write | 1 | _ | _ | 1 |\n| xml | 0 | 4 | 0 | 4 |\n","url":"wiki/WebsiteGeneration.md"},{"id":"wiki/Event__CC15_Reorganization.md","title":" Introduction","content":"# Introduction\n\nLe but est de proposer une réorganisation des plug-ins de Gama\n\nCf. page Google Doc: https://docs.google.com/document/d/1gd4nlJH8ns4_iKqiIdw3LSa__Sk9yUccX9TEbzr2PW0/edit?usp=sharing","url":"wiki/Event__CC15_Reorganization.md"},{"id":"wiki/Event__CP12Archi.md","title":" GAMA Architecture","content":"# GAMA Architecture","url":"wiki/Event__CP12Archi.md"},{"id":"wiki/Event__CP12Batch.md","title":" Batch Experiments","content":"# Batch Experiments\n\nBy the Batch People\n\nPhilippe Caillou,\nThomas Louail,\nNicolas Marilleau,\nHuynh Quang Nghi,\nSerge Stinckwich,\nPatrick Taillandier,\nJean-Daniel Zucker\n\n\n## What do we have?\n\nDefine an experiment, batch mode (but same capabilities as GUI mode)\n\n·         Parameter exploration:  Param element\n\no   Explicit\n\no   List with step\n\n·         Method Element\n\no   Exhaustive\n\no   Hill climbing\n\no   Simulated annealing\n\no   Tabu Search\n\no   Reactive Tabu Search\n\no   Genetic Algorithm\n\n·         File export\n\no   File\n\n## How does it work?\n\n·         The experiment (the plan) creates the simulation (future: Headless mode)\n\n\n## What would be great in Gama 12.4?\n\n·         Export agent/simulation data in the file\n\no   =>Define code in the experiment (loop over agents)\n\n·         Put rules for variable exploration\n\no   Ex: explore b={1,2,3}. if a=2 explore b={2,3} only\n\no   How? Put code in the exploring loop => put real GAML code in the agent\n\no   => reflex \"method\" or \"explore\"\n\no   Some existing exploration actions can be used with a ParameterSet (Map?) parameter\n\n·         Show plots in batch\n\no   Define output with the code/variable of the experiment agent\n\no   Require a getVariable() operator that gets the last simulation variables values\n\n·         Compare agent trajectories\n\no   Stats a posteriori\n\no   (not possible inside a simulation because there is no end)\n\no   => action « aftersimulation » défined by the user\n\no   Require a getVariable() operator that gets the last simulation variables values (to be able to loop on agents)\n\n·         Define more parameters/variables in the file (CSV)\n\no   => use of the Save already working\n\n·         Launch parallel simulation on multicore/clusters\n\no   => special action \"runSimulation\" parameter to launch 4 in parallel?\n\n·         \"Generate\" agents\n\no   Define agent parameters by using global/previous variables/files\n\no   Use of an \"initSimulation\" action before the \"runSimulation\" to  be able to change manually the simulation parameters\n\n·         Définition graphique de l’espace de valeur, éventuellement en 2D et disjoint\n\no   Specific OutPut\n\n## The Solution\n\nDefine a new **Experimenter** agent and put real code/reflexes/actions... GAML code inside the Experimenter.\n\n## One simple example of what would be great:\n```\nexperiment InteliExplore type: batch repeat: 2 keep_seed: true until: ( time > 200 ) {\n      int nbprey init:0;\n      int nbpredator init:0;\n\n      init\n      {\n            //for example read experiment plan from file\n           \n      }\n     \n\n      reflex method\n      {\n            loop prm over:prey_max\n            {\n                   do: createsimulation\n                   setParameter(\"nb_preys_init\",pr)\n\n                   do: initsimulation\n\n                   if (prey_max<100)\n                   setParameter(\"nb_predators_init\",200)\n                   if (prey_max>100)\n                   setParameter(\"nb_predators_init\",200)\n\n                   do: runsimulation;\n\n                   do: aftersimulation;\n                  \n            }\n      }\n\n      action aftersimulation\n      {\n            loop over getVariable(agents)\n            {\n                   log(\"everything dans file\");      //with the save function?\n            }     \n      }\n\n      chart name: 'Species evolution' type: series background: rgb('white') size: {1,0.4} position: {0, 0.05}\n      {\n      data initial_number_of_preys value: getValue(\"nb_preys_init\") color: rgb('blue') ;\n        data final_number_of_predator value: getValue(\"nb_predators\") color: rgb('red') ;\n      }\n    file name: 'logsimple' type: text data: 'simulation: '+ step\n                                  +'; allparams' + getAllParamters // PROBLEME comment sauver tous les parametres?\n                                   + '; nbPreys: ' + getValue(\"nb_preys_init\")\n                                    + '; finalPredators: ' + getValue(\"nb_preys\") ;\n}\n\n```\n\n## TODO\n\nAnd Alexis did almost all this in less than a day....... But how does he do that??\n\n- A new type of Custom Experiment\n\n- In this experiment block, an ExperimenterAgent manages the simulations\n\n- Init() may have to create a Simulation to get a Scheduler (?) and/or a World(?)\n\n- He must have a Scheduler to be able to stop/wait in a loop for the end of a Simulation (contradiction with previous point...)\n\n- Its most important function is to be able to call Simulation.step()\n\n=>Create a Simulation Type which has a Step() operator\n\n- Create a ExperimentatorSkill with a lot of usefull actions (Step(int), ...)\n\n- Check that it is possible to define plots, logs, ...","url":"wiki/Event__CP12Batch.md"},{"id":"wiki/Event__CP12Development.md","title":" GAMA Development","content":"# GAMA Development","url":"wiki/Event__CP12Development.md"},{"id":"wiki/Event__CP12Doc.md","title":" Online & Local Documentation","content":"# Online & Local Documentation","url":"wiki/Event__CP12Doc.md"},{"id":"wiki/Event__CP12FIPA.md","title":" FIPA-ACL Skill","content":"# FIPA-ACL Skill","url":"wiki/Event__CP12FIPA.md"},{"id":"wiki/Event__CP12Git.md","title":" Gama on Git","content":"# Gama on Git\n\nhttp://eclipselabs.org/p/gama\n\n# Details","url":"wiki/Event__CP12Git.md"},{"id":"wiki/Event__CP12Graph.md","title":" Graph operators and indicators","content":"# Graph operators and indicators\n\n## goals\n\n**load graphs from files** generate graphs using generators\n**operators for graph manipulation (including stats)** graphs display\n\n## done\n\n### load graphs from file\n\nFor parsing network files, we use the graphstream library which supports the top- 10 file formats. All these formats are supported by GAMA now.\n\nTill now, the GAML langage does not enables an easy way to create primitives that both take more than 3 args as an input and return an object. Thus loading a graph is defined as an action of a skill; one has to create an instance of agent with this skill for loading the network.\n\n```\nglobal {  \n\tvar mongraphe type:graph;\n\tgraph_manager graph_util;\n\n\tinit { \n\t\tcreate graph_manager returns: graph_util;\n\t\task graph_util {\n\t\t\t\n\t\t\tset mongraphe value:load_graph_from_dgs_old(self, [edge_species::edgeSpecy, vertex_species::nodeSpecy,file::\"../includes/BarabasiGenerated.dgs\"]);\n\t\t\n\t\t}\n\t}  \n}\n\n```\n\n### graph manipulators\n\nThe structure for the manipulation of graphs is based on the existing GAMA graph type. As a consequence, novel algorithms, operators and visualizations will be usable for both spatial graphs (loading from GIS for instance, like roads) and more abstract graphs (not spatialized).\n\nPatrick did some interesting work for searching shortest pathes and so on.\n\nNovel operators should still be defined.\n\n### graph visualization\n\nFirst of all, we had to disturb many GAMA-gurus for undertanding how to create a novel View (that is, another tab in the simulation perspective) from GAML. A novel display is defined for displaying a network.\n\n```\noutput {\n\tgraphdisplay nameOfMyDisplay graph: mongraphe {\t \n\t}\n}\n```\n\nThis line indicates that we would like to display a graph defined in the variable \"mongraphe\". This simple line will open the display.\n\n\n\n## Roadmap\n\n**provide another (simpler !) syntax for loading networks** visu:\n  * implement prefuse instead of graphstream for the visualisation\n  * map GAML aspects to the view of the network\n**implement operators for graph manipulation** add generators for simple graphs generation (with a simple syntax as well)","url":"wiki/Event__CP12Graph.md"},{"id":"wiki/Event__CP12Headless.md","title":" Headless operation","content":"# Headless operation\n\nBe able to launch a simulation without any interface.\n\nBasic example:\n```\n$gama.jar test.gaml input.xml\n```","url":"wiki/Event__CP12Headless.md"},{"id":"wiki/Event__CP12IDE.md","title":" Enhancement of the IDE","content":"# Enhancement of the IDE","url":"wiki/Event__CP12IDE.md"},{"id":"wiki/Event__CP12Library.md","title":" Library of models","content":"# Library of models","url":"wiki/Event__CP12Library.md"},{"id":"wiki/Event__CP12MultiScale.md","title":" Improvement of the Multi-scale framework","content":"# Improvement of the Multi-scale framework","url":"wiki/Event__CP12MultiScale.md"},{"id":"wiki/Event__CP12OpenGL.md","title":" OpenGL Display","content":"# OpenGL Display\n\nIntegrate OpenGL (jogl) view in Gama.\n\nHave a display using OpenGL (Jogl: http://jogamp.org/jogl/www/) libraries implement as a gama plug-ins.\n\nplugin name: ` msi.gama.jogl`\n\n`msi.gama.jogl` will depend on `msi.gama.application` and `msi.gama.core`\n\nCurrent work:\n  * A new output symbol has been defined in order to call a new display in gaml\n\n# Definition of the symbol in `msi.gama.core/src/msi/gama/opengl/GLOutput.java`\n```\n@symbol(name = IKeyword.DISPLAY_GL, kind = ISymbolKind.OUTPUT)\n@facets(value = {\n\t//@facet(name = IKeyword.DISPLAY_GRAPH, type = IType.STRING_STR, optional = false),\n\t@facet(name = IKeyword.NAME, type = IType.STRING_STR, optional = true)\n\t}, omissible = IKeyword.NAME)\n@with_sequence\n@inside(symbols = IKeyword.OUTPUT)\n```\n\n\n# Use of the symbol in `msi.gama.models/models/graph/model/testSIG.gaml` :\n```\noutput {\n\tgraphdisplaygl {\t\t\n\t}\n```\n  * A new view in msi.gama.jogl plugin.xml\n\n```\n    \n           \n          \n    \n```\n\nThis view is implemented in `/Users/macbookpro/Projects/GamaDev/msi.gama.jogl/src/msi/gama/jogl/GLView.java`\n\nThe view ID must also be defined `src/msi/gama/common/util/GuiUtils.java`\n```\npublic static final String GL_VIEW_ID = \"msi.gama.jogl.GLView\";\n```\n\n\n","url":"wiki/Event__CP12OpenGL.md"},{"id":"wiki/Event__CP12SLD.md","title":" SLD-based aspects","content":"# SLD-based aspects\n\nNot chosen as a work theme for the coding camp...","url":"wiki/Event__CP12SLD.md"},{"id":"wiki/Event__CP12Stats.md","title":" Statistical Tools in GAMA","content":"# Statistical Tools in GAMA","url":"wiki/Event__CP12Stats.md"},{"id":"wiki/Event__CP12Test.md","title":" Test Models & Language","content":"# Test Models & Language\n\n  * A Coding Dojo (5 people) was organized in order to sensibilize developpers about unit tests.\nThe produced code is available here: https://github.com/SergeStinckwich/TennisKataTamCoc\nThe usual retrospective done after a Dojo is here: https://github.com/SergeStinckwich/TennisKataTamCoc/tree/master/README\n\n  * Some very simple models has been done in the \"multi-scale\" group with An. At that occasion, we didn't define real tests, but the idea was the same: define models as simple as possible that illustrate some basic concepts. The same work should be done for all aspects (skills, operators, actions, GAML architecture, ...).\n\n  * Difficult and boring to introduce tests in the GAMA platform at the moment. It is easier to introduce tests in ongoing developments. For example, Serge and Samuel do some unit tests for the new GraphSkill based on GraphStream.","url":"wiki/Event__CP12Test.md"},{"id":"wiki/Event__CP12Water.md","title":" Water-management tutorial","content":"# Water-management tutorial\n\nWe did not work on this theme, but we made some decisions :\n- Plenary talk 1h10 : 1h : introduction to agent-based modeling; 20 minutes : MAELIA\n- a meeting will be organized just after the WAT-GAME training (the 26th of April at Toulouse).\n\nDeadlines :\n- 30 march: Biographies\n- 13 april: short synopsis of the plenary talk (5 to 10 lines)\n- 13 april: short synopsis of the workshop (5 to 10 lines)\n- 25 may: final synopsis of the plenary talk\n- 25 may: presentation (ppt) of the plenary talk\n- 25 may (if translated) (optional) : paper concerning the plenary talk (max 10 pages, text longer in English - not translated into vietnamese)\n- 25 may (if translated) (optional) : paper concerning the workshop (max 10 pages, text longer in English - not translated into vietnamese)\n- 8 june: final synopsis of the workshop\n- 8 june: presentation (ppt) of the workshop","url":"wiki/Event__CP12Water.md"},{"id":"wiki/Event__CP12traffic.md","title":" Traffic simulation and Physics constraints operators","content":"# Traffic simulation and Physics constraints operators\n\n**Traffic simulation**\n\nA first task that we done was to define a new plug-in in order to take into account the fact that a road has a limited number of lanes.\n\nWe propose a plug-in that contains the driving plug-in. This plug-in extends the moving skill. In particular, it proposes a new primitive \"gotoTraffic\" that integrates a collision avoiding algorithm.\n2 models (in \"models/experimental models\") were proposed to illustrate the use of our plug-in.\n\nDrivingSkill.java implements a new skill in `package msi.gaml.extensions.traffic`\n```\n@skill(\"driving\")\npublic class DrivingSkill extends MovingSkill{\n...\n}\n```\n\nNew model in `msi.gama.models/experimental_models/traffic`\n\n**Physics constraints operators**\n\nA second plugin is under development concerning physic computation. In particular, it allows to handle collisions between two convex polygons. A first toy model concerning pool game was developed.\nLibrary used: http://www.jbox2d.org/\n\n`src/msi/gaml/extensions/physics/PhysicsSkill.java` implements a new skill in `package msi.gaml.extensions.physics`\n```\n@skill(\"physical\")\npublic class PhysicsSkill extends Skill{\n        @setter(\"physical_world\")\n        public void setWorldAgent(final IAgent _agent, final IAgent _world){\n                if(_world == null)\n                        return;\n                        \n                PhysicalWorldAgent pwa = (PhysicalWorldAgent)_world;\n                pwa.registerAgent(_agent);\n        }\n\n\n```","url":"wiki/Event__CP12traffic.md"},{"id":"wiki/Event__CodingCamp2012.md","title":" Coding Activities Summary","content":"March 19-24th 2012\n\n# Coding Activities Summary\n\n|[Physics constraints operators](Event__CP12traffic) | [Water-management tutorial](Event__CP12Water) | [Test Models & Language](Event__CP12Test)|\n|:------------------------------------------------------|:-------------------------------------------------|:--------------------------------------------|\n|[Library of models](Event__CP12Library)             | [FIPA-ACL Skill](Event__CP12FIPA)             | [Git repository](Event__CP12Git)         |\n|[SLD-based aspects](Event__CP12SLD)                 | [Headless operation](Event__CP12Headless)     | [Batch Experiments](Event__CP12Batch)    |\n|[OpenGL Display](Event__CP12OpenGL)                 | [Enhancement of the IDE](Event__CP12IDE)      | [GAMA Architecture](Event__CP12Archi)    |\n|[Improvement of the Multi-scale framework](Event__CP12MultiScale) | [GAMA Development](Event__CP12Development)    | [Online & Local Documentation](Event__CP12Doc)|\n|[Statistical Tools in GAMA](Event__CP12Stats)       | [Graph operators and indicators](Event__CP12Graph)|                                             |\n\n[and some \"working\" images...](https://picasaweb.google.com/114770356492687537213/Hanoiwiki?authuser=0&authkey=Gv1sRgCIKj0ITH_KOyiwE&feat=directlink)\n\n","url":"wiki/Event__CodingCamp2012.md"},{"id":"wiki/Event__CodingCampFall2012.md","title":" Introduction","content":"# Introduction\n\nThe Fall GAMA Coding Camp 2012 will take place from the 17th to the 19th of November in the hotel called \"Hon Trem Resort & Spa \". You can find more information about it here : http://www.hontremresort-spa.com.\n\nDeparture will take place from Ninh Kieu 3 hotel in Can Tho at 3:30 PM, Friday the 16th of November, and we expect to arrive in Hon Trem resort at around 9:00 PM (dinner will be taken on the road).\n\nA summary of the Spring GAMA Coding Camp 2012 can be found [here](Event__CodingCamp2012).\n\n# Work\n\n**The use of the last version of GAMA will be necessary, the development version should thus be installed. [See the documentation for the Installation procedure](G__InstallingSvnVersion).**\n\nSome ideas of tasks that could be investigated during the camp (feel free to add anything you think about)\n\n## [COUPLING GAMA WITH OTHER TOOLS](Event__CodingCampFall2012_coupling)\n  * **Coupling GAMA with hydrodynamics simulators (for water flows, etc.)**\n    * Participants: Thanh, Tuu, Benoit, Nghi, Quang, M.Thai\n  * **Integration of EDP solver into GAMA**\n    * Participants: Benoit\n    * Plug-in needed: maps.gama.extensions\n  * **Calling statistical libraries of R in GAMA: Basic statistics, geostatistics (maptools, gstat), Gaussian process (tgp, gptk)**\n    * Participants: M.Thai, Viet\n  * **Integration of `SimAnalyzer`**\n    * Participants: Philippe, Javier\n  * **Improving SQL features in GAMA**\n    * Participants: M.Thai\n  * **Improving the physics engine**\n    * Participants: Javier, Philippe, Arnaud, Patrick\n    * Plug-in needed: simtools.gaml.extensions.physics\n## [IMPROVEMENTS / ENHANCEMENTS](Event__CodingCampFall2012_improvements)\n  * **Improving and simplifying the syntax of GAML**\n    * Participants: Nicolas, Alexis, Nghi\n  * **Documenting and enhancing the command line version**\n    * Participants: Nicolas, Nghi\n    * Plug-in needed: msi.gama.headless\n  * **Improving the user interaction possibilities**\n    * Participants: Nghi, Nicolas, Arnaud\n  * **Torus environment (at least, grid)**\n    * Participants: Patrick, Viet\n  * **Enhancement of the IDE**\n    * Participants: Nghi (implement first-step of GUI-GAML)\n  * **Communication Skill**\n    * Participants: Benoit, An, Philippe\n    * Plugin-needed: msi.gaml.extensions.fipa\n  * **Update of the Trust Skill to Gama 1.5**\n    * Participants: Quang Anh\n  * **Multicore runner in Headless Mode to Gama 1.5**\n    * Participants: Nicolas, Nhan, Nghi\n  * **Driving skill in 2D (skill: driving2d)**\n    * Participants: Minh\n## [BUG FIXES](Event__CodingCampFall2012_bug)\n  * **Eliminating bugs found in the 1.5 version**\n    * Participants: Benoit, Patrick (for spatial/geometry related bugs). Arnaud for Opengl bug\n## [MODELS](Event__CodingCampFall2012_models)\n  * **Adding 3D to the models**\n    * Participants: Arnaud, Patrick, Nghi\n## OTHER\n  * **Documentation**\n    * Participants: (Benoit)\n    * Plug-in needed: msi.gama.documentation\n    * Requirements: Python (CPython) and PyDev Eclipse plugin: [see this page](Documentation15) for details about the installation","url":"wiki/Event__CodingCampFall2012.md"},{"id":"wiki/Event__CodingCampFall2012_bug.md","title":" Eliminating bugs found in the 1.5 version","content":"# Eliminating bugs found in the 1.5 version\n  * Arnaud: Opengl is now working with Java2D (possibility to define n opengl display and n java2D display in the same output)\nhttp://code.google.com/p/gama-platform/issues/detail?id=190\n\nno more seg fault when running a simulation with opengl while the update is done on the all model\nhttp://code.google.com/p/gama-platform/issues/detail?id=233\n\n  * Communication Skills http://code.google.com/p/gama-platform/issues/detail?id=271","url":"wiki/Event__CodingCampFall2012_bug.md"},{"id":"wiki/Event__CodingCampFall2012_coupling.md","title":" Coupling GAMA with hydrodynamics simulators","content":"# Coupling GAMA with hydrodynamics simulators\n\n# Integration of EDP solver into GAMA\n\nThe maps.gaml.extensions has been extended in order to allow modeler to write its own equation systems (as simple strings), specify parameters with their values and variables and \"solve\"/integrate them either step by step or N steps by N steps.\n\nAn example has been implemented on the Lokta-Voltera equation system.\n\nPossible extension:\n  * parse the equations to detect errors\n  * rename the skill has EDO, because we consider only variables depending on time\n  * extends to solve EDP\n  * add some methods/algorithms in order to \"resolve\" the system, in a sense of finding some equilibria (asymptots or oscillation equilibrium...)\n\n\n# R in GAMA\n**Results**: Verifying the old operators (A simple example \"CallingR\" is uploaded in the model list); Applying these statistical operators on the data loaded from RDBMS.\n\n# SQL features in GAMA\nResults:\n  * 1.Added PostgresSQL driver into SQSKILL and AgentDB.\n  * 2.Wrote example models for testing.\n  * Now,GAMA supported query features for MySQL, MSSQL, PostgresSQL and SQLite.\n\n# Physics engine\n\nIntegration of a 3D Physics Engine Library (http://jbullet.advel.cz/) in `simtools.gaml.extensions.physics`\nThis has been implemented as a new skill.\n\n```\nspecies myPhysicsAgent skills: [physical3D]\n```\n\nMore details: [3D Physics Engine](Event__CodingCampFall2012_models)","url":"wiki/Event__CodingCampFall2012_coupling.md"},{"id":"wiki/Event__CodingCampFall2012_improvements.md","title":" Possibility to directly create agents from a CSV file","content":"Improvements and Enhancements\n\n\n\n\n# Possibility to directly create agents from a CSV file\nThe create statement has been extended in order to let the possibility to create agents of specified species directly from a CSV file.\nAn agent is created by line of the CSV file. It is also possible to read the different column of the file using the read operator: **read (column\\_index) (start at 0)**\n\n```\nread(1)\n```\n\nFor example:\n```\ncreate people from: \"data_file.csv\" with: [speed::read(0), age:: read(1)];\n```\n\nIt is also possible to specify that the CSV file has a header that can give the name of the different column using the **header** facet (**boolean**). It this case, it is possible to directly use this name to read the column value: **read(\"attribute1\")**.\n\nFor example:\n```\ncreate people from: \"data_file.csv\" with: [speed::read(\"SPEED\"), age:: read(\"AGE\")] header: true;\n```\n\n# Improving and simplifying the syntax of GAML\nNew features:\n  * Possibility to define 3D points with the **{x,y,z}** syntax:\n```\nlet pt type: point  continuous\\_torus.\n\n\n![http://gama-platform.googlecode.com/files/toroidalEnv.png](http://gama-platform.googlecode.com/files/toroidalEnv.png)\n\n# Communication Skill\nPlugin-needed: msi.gaml.extensions.fipa\n\nThe communicating skill now re-works on GAMA 1.5. Sample toy models are found in \"models/fipa\".\n\n# Update of the Trust Skill to Gama 1.5\n\n# Hexgonal geometry and grid\nIt is now possible to create a hexagon of with the given width and height (point) thanks to the operator **hexagon({width, height})**\n\n```\nhexagon({3,4})\n```\n\nIn the same way, an operator has been defined in order to decomposed a geometry into a set of hexagons of a given a number of columns and rows. This operator returns a set of hexagons: geometry as\\_hexagonal\\_grid({nb\\_cols, nb\\_rows})\n\n```\nshape as_hexagonal_grid({50, 40})\n```\n\nAt last, it is now possible to define a hexagonal grid. To do so, the neighbors should is set to **6**. It is possible to use torus environment with hexagonal grid.\n\n```\ngrid cell width: 20 height: 20 neighbours: 6 torus: true;\n```\n\n\n![http://gama-platform.googlecode.com/files/imageHexGrid.png](http://gama-platform.googlecode.com/files/imageHexGrid.png)\n\n# Using HSB color\n\nAdd [HSB](http://en.wikipedia.org/wiki/HSL_and_HSV) color to be able to iterate through colors and use it to represent qualitative data.\n\nExample:\n\nThe association of the orientation of agents is enhanced by mapping the orientation of the agent to a hue.\n\n```\ncolor hsb_to_rgb ([heading/360,1.0,1.0]);\n```\n\nIn the following example boids are represented by a triangle with the colors depending on their heading. [![](http://gama-platform.googlecode.com/files/HSB_Color.png)](http://gama-platform.googlecode.com/files/Dynamic_Color_HSB.mov)\n\n\n# Multicore runner in Headless Mode\nResults: distribution of command-line version on multicore machine, integration with GAMA interface, visualisation of outputs.\n\n\n\n\n# Defining interaction in a model\n\nOne statement have been added to facilitate the proposal of serious game on which user could interact through a map. It is now possible to catch event done on 2D display in order to do an action and to modify clicked agent attributes.\n\n## Attributes\n  * **name** (omissible) ` [mouse_down , mouse_up] `\n  * **action** name of the action to be run\n\n## Definition\nAllows to interact with the simulation by capturing mouse event and do an action. This action could apply a change on environment or on agents, according to the goal.\n\nEvents are determine for a display. Thus, they can be play a different behavior\n\n```\nevent [event_type] action: myAction\n```\n  * event\\_type (mouse\\_down or mouse\\_up\n  * myAction is an action written in the global block. This action have to follow the specification below.\n\n```\n\n global\n {\n   ...\n   action myAction \n   {\n     arg location type: point; // contains le location of the click in the environment\n     arg selected_agents type: list; // contains agents clicked by the event\n    \n    ... //code written by the authors ...\n   } \n }\n\n experiment Simple type:gui {\n\tparameter 'Evaporation Rate:' var: evaporation_rate;\n\tparameter 'Diffusion Rate:' var: diffusion_rate;\n\toutput { \n\t\tdisplay Ants refresh_every: 2 { \n\t\t\tgrid ant_grid;\n\t\t\tspecies ant aspect: default;\n\t\t\ttext tt value: string ( food_remaining ) size: 24.0 position: { 20 , 20 } color: rgb ( 'white' );\n\t\t\tevent mouse_up action: myAction;\n\t\t}  \n\n...\n\n```\n\n# Driving skill in 2D (skill: driving2d)\n\nA skill (inherited from moving skill) permits agent to move to the target and avoid the others.\n\n## Attributes\n  * **heading** initial heading of agent\n  * **obstacle\\_species** list of species to avoid\n  * **background\\_species** list of species on which agent move\n\n## Action\nThe action inherits the \"goto\" action of moving skill.\n\n```\ndo vehicle_goto target: target on: the_graph speed: speed target_type: true returns: moving_status;\n```\n\n  * **target** the goal (in type of location) for agent to go\n  * **speed** maximum of moving distance for each step\n  * **on** the topology on which agent moves. By default, the topology is the graph and agent uses the shortest path algorithm to move\n  * **target\\_type** if \"true\", agent goes to the exact location of the target. Otherwise (in the case of false target), agent go to an point on the topology that is nearest to the target.\n  * **returns** the action returns an integer with the meaning: -1: failed to move; 0: success to move closer and closer to the target; 1: arrive the false target; 2: arrive the target\n\n```\n\n reflex move_with_vehicle_goto when: target != nil{\n\t\t\tlet moving_status type: int  0){\n\t\t\t\tlet temp_targets ","url":"wiki/Event__CodingCampFall2012_improvements.md"},{"id":"wiki/Event__CodingCampFall2012_models.md","title":" 3D River morphology display","content":"# 3D River morphology display\n\nDisplay the channel bed of a river in 3D from synthetic data and can be applied directly to real data.\n\n\n# Models using the 3D Physics Engine\n\nIntegration of a 3D Physics Engine Library (http://jbullet.advel.cz/) in `simtools.gaml.extensions.physics`\n\nThis has been implemented as a new skill.\n\n```\nspecies myPhysicsAgent skills: [physical3D]\n```\n\nSome toy model has been added in\n\n```\nmsi.gama.models/models/3D/3D_Engine\n```\n\n**hello\\_World\\_falling\n> Ball falling (due to the gravity) on a floor.**\n\n**pool3D.gaml**\n\n[![](http://gama-platform.googlecode.com/files/Pool_3D.png)](http://gama-platform.googlecode.com/files/Pool_3D.mov)","url":"wiki/Event__CodingCampFall2012_models.md"},{"id":"wiki/Event__Events.md","title":" Coding Camps","content":"# Coding Camps\nList of GAMA Coding Camps :\n  * [Coding Camp March 2012](Event__CodingCamp2012)\n  * [Fall Coding Camp 2012](Event__CodingCampFall2012)\n  * [Programme doctoral internationale 2012](Event__PDI2012)","url":"wiki/Event__Events.md"},{"id":"wiki/Event__MIMSCOP2012.md","title":" Introduction","content":"# Introduction\n\nThe MIMSCOP Summer school 2012 (Modélisation Informatique et Mathématique des Systèmes Complexes de Pêcherie took place from the 16th to the 21th of July in the AIMS-IRD Campus at Mbour (Senegal).\n\n![http://gama-platform.googlecode.com/files/affiche_reduite.png](http://gama-platform.googlecode.com/files/affiche_reduite.png)\n\n# Developed models\n\n  * _Baye Cheikh MBAYE and Fatou Nene DIOP_ **Modélisation de l'impat de l'environnement sur la migration de sardinella aurita le long de la côte sénégalo-mauritanienne : outil de suivi et de prévision du stock pour la pêche** ([Slidehow](http://gama-platform.googlecode.com/files/Presentation_model_migration_poisson.pdf))\n  * _Macire Thieba TOURE and ￼Harouna DIOUF_ **Impact de la gestion sur la biomasse de la thonine pêchée au Sénégal** [(Slideshow)](http://gama-platform.googlecode.com/files/biomass.pdf)\n  * _Mansour NDOUR and Thierno DIOP_ **Modélisation Impacts des AMP sur la biomasse et les captures en fonction du site et du mode de gestion** [(Slideshow)](http://gama-platform.googlecode.com/files/simulationtp_final_AMP_mansourthierno.pdf)\n  * _Sidy DIOP and Papa Baba FALL_ **L'impact de la pollution sur les espèces halieutiques** [(slideshow)](http://gama-platform.googlecode.com/files/ImpactPollutionEspecesHalieutiques.pdf)\n  * _Sana KEITA and  Serigne Mbacke GUEYE_ **Comparaison de la pêche sélective et non sélective sur la petite côte** [(Slideshow](http://gama-platform.googlecode.com/files/serine-sana.pdf)\n  * _Siny NDOYE and Erick FARGEAS_  **Une alternative à la baisse de la biomasse : « l’aquaculture, solution de développement durable »** [(Slideshow)](http://gama-platform.googlecode.com/files/siny_fargeas.pdf)\n  * _Abdoulaye THIAM and Mouhamadou Baidy DIA_ **Evolution de poissons dans les AMP et dans l’aquaculture** [(Slideshow)](http://gama-platform.googlecode.com/files/thiam_Dia.pdf)\n\n# Trainers\n\n  * **Auger** Pierre - UMMISCO, IRD-UCAD\n  * **Bah** Alassane - UMMISCO, ESP, UCAD\n  * **Diouf** Niokhor - IUPA, UCAD\n  * **Guy** Gohier - CRAMS\n  * **Marilleau** Nicolas - UMMISCO, IRD-UPMC\n  * **Ndiaye**\t Samba - UMMISCO, FST, UCAD\n  * **Seck** Diaraf - UMMISCO, FAESG, UCAD\n\n\n# Learners\n\n  * **Badji** Insa - AIMS\n  * **Dia** Mouhamadou Baidy - AIMS\n  * **Diop** Sidy -  AIMS\n  * **Diop** Thierno - \tAIMS\n  * **Diouf** Harouna - IUPA, UCAD\n  * **Fall** Papa Baba - LTI, FST, UCAD\n  * **Fargeas** Eric - LTI, FST, UCAD\n  * **Gueye** Serigne Mbacké - LID, FST, UCAD\n  * **Keita** Sana - AIMS\n  * **Ly** Sidy - LGA, FST, UCAD\n  * **Mansal** Fulgurence - LGA, FST, UCAD\n  * **Mbaye** Baye Cheikh - LPAO-SF, ESP, UCAD\n  * **Ndour** Mansour - IUPA, UCAD\n  * **Ndoye** Siny - LPAO-SF, ESP, UCAD\n  * **Thiam** Abdoulaye - AIMS\n  * **Touré** Macire Thieba - AIMS\n\n# The participants\n\n![http://gama-platform.googlecode.com/files/photo.png](http://gama-platform.googlecode.com/files/photo.png)","url":"wiki/Event__MIMSCOP2012.md"},{"id":"wiki/Event__PDI2012.md","title":" Introduction","content":"# Introduction\n\nDuring the [PDI2012](http://www.ummisco.ird.fr/pdi/) nearly 50 PhD students were working together on different topic related to complex system modeling.\nAt the end of the formation, each student (by groups of 2 or 3) had to present a model in a mini-projet. The purpose of this mii-project was to use a platform and to create a model related to their respective research topics. Here is an overview of the model that has been implemented with Gama. Some of those projects has been presenting in [COMMISCO 2012](http://www.ummisco.ird.fr/pdi/spip.php?rubrique6)\n\n\n# Projects\n\n## First year (promo2012)\n**Siny  Ndoye - Quang Truong Chi** _Modelisation of the land use applied to the commune of My An-Ben Tre in the Delta Mekong._\n\nSince 1999, Vietnam has transformed 380 000 ha of rice agriculture into aquaculture. It has different impact like the fall of the rice agriculture, forest destruction and demographic increase near aqua farm. The shrimp culture is responsible of the destruction of the mangrove swamp since the 90's. The aim of this model was to study the impact of a government aid for rice producer on this problem.\n\n**Cedrigue Djiongo - Abdelkarim Ed-Darraz** _Modelisation of the different  land use in the forest._\n\nThe model study the dynamic of forest parcel over the time according to the activity of nomad paysans. The parcel can have different state such as primary forest, chromolaena forest, bush fallow, forest crop field or secondary forest).\n\n**Souleymane Sy - Nghi Huynh Quang** _Impact of the dynamic of the vegetation of the rain in west africa_\n\nWest africa is one of the part of the world that faced the most climate variability during the second half of the 20th century. To understand the origin on the variability on the amount of rain Gama is used to study the impact of the vegetation dynamic on the rain using a retroactivity between vegetation and atmosphere\n\n**Hédia Zardi - Tran Thi Cam Giang** _Modelisation of the SEIR model by GAMA_\n\nUntil today, many infectious diseases in the world such as measles, tuberculosis, dengue ... still exist. These diseases are one of the main causes of infant mortality in most countries of Asis, Africa, etc.\nTherefore, we want to present these infectious diseases in the computer models, after we want to find the periods of diseases to provide positive solutions that allow us to turn them off.\n\n## Second year (promo2011)\n\n**Ahmed Tidjane Cisse - Arnaud Grignard** _Vector disease modélisation- Multi point of view approach and visualization._\n\nPropose a meta-model applied to vector disease. Gama has been used to study the rift valley fever disease according to a meta-model previously defined. The idea is to define basic or macro behavior for host, environment and  infectious agent on which a vector is moving and then to implement those meta-agent for a specific vector disease (in this case the rift valey fever).\n\n## Third year (promo2010)\n\n**Moussa Gueye - Inès Hassoumi - Zineb Belarbi** _Impact of the dispersion of air pollutants: applied to the city of Tunis_\n\nThis project study the impact of pollutants on the environment on the health. The goal is to identify where new urban zone can be created by taking in account the concentration of each pollutants in the city. The main interest of the model is the coupling of the data coming from numerical equation of the advection-diffusion process using finite element method and then include those results on a grid created in Gama on which the value of each pollutants is extrapolated.","url":"wiki/Event__PDI2012.md"},{"id":"wiki/Event__TraininSessionPDI2011.md","title":" <font color='blue'>Context</font>","content":"# Context\nTraining session on GAMA 1.4 at IRD Bondy (France) the 5th of December, 2011.\n\n# List of presentations\nHere, the list of the different presentations (in French) given during the training session:\n\n  1. [Introduction to GAMA](http://gama-platform.googlecode.com/files/Intro_GAMA14_PDI2011.pdf)\n  1. [GAMA and GIS](http://gama-platform.googlecode.com/files/GAMA14_and_GIS_PDI2011.pdf)\n  1. Multi-scale Modeling\n\n\n# Models\nthe models used during the training session are all provided with the last version of GAMA (1.4)","url":"wiki/Event__TraininSessionPDI2011.md"},{"id":"wiki/Event__TrainingSessionHanoi2009.md","title":" <font color='blue'>Context</font>","content":"# Context\nTraining session on agent-based modeling and a tutorial on GAMA 1.1 organized at the IFI from the 26th to the 28th of October, 2009\n\n# List of presentations\nHere the list of the different presentations given during the training session:\n\n  1. [Introduction to Agent Based Modeling](http://gama-platform.googlecode.com/files/1. Introduction to Agent Based Modeling.pdf)\n  1. [An introduction to GAMA](http://gama-platform.googlecode.com/files/2. Introduction to GAMA.pdf)\n  1. [Tutorial: Forest fires](http://gama-platform.googlecode.com/files/3. Tutorial Forest Fire.pdf)\n  1. [Tutorial: Segregation](http://gama-platform.googlecode.com/files/4. Tutorial Segregation.pdf)\n  1. [GIS in GAMA: part1](http://code.google.com/p/gama-platform/downloads/detail?name=5. GIS in GAMA Part 1.pdf&can=1&q=)\n  1. [GIS in GAMA: part2](http://code.google.com/p/gama-platform/downloads/detail?name=6. GIS in GAMA Part 2.pdf&can=1&q=)\n  1. [Exploring Models](http://code.google.com/p/gama-platform/downloads/detail?name=7. Exploring Models in GAMA.pdf&can=1&q=)","url":"wiki/Event__TrainingSessionHanoi2009.md"},{"id":"wiki/DevelopingExtensions.md","title":" Developing Extensions","content":"# Developing Extensions\n\n\n\nGAMA accepts _extensions_ to the GAML language, defined by external programmers and dynamically loaded by the platform each time it is run. Extensions can represent new built-in species, types, file-types, skills, operators, statements, new control architectures or even types of displays. Other internal structures of GAML will be progressively \"opened\" to this mechanism in the future: display layers (hardwired for the moment), new types of outputs (hardwired for the moment), scheduling policies (hardwired for the moment), random number generators (hardwired for the moment).\nThe extension mechanism relies on two complementary techniques:\n  * the first one consists in defining the GAML extensions [in a plug-in](DevelopingPlugins) (in the OSGI sense, see [here](http://www.eclipse.org/equinox/)) that will be loaded by GAMA at runtime and must \"declare\" that it is contributing to the platform.\n  * the second one is to indicate to GAMA where to look for extensions, using Java annotations that are gathered at compile time (some being also used at runtime) and directly compiled into GAML structures.\n\nThe following sections describe this extension process.\n\n  * 1. [Installing the GIT version](InstallingGitVersion)\n  * 2. [Architecture of GAMA](GamaArchitecture)\n  * 3. [Developing a Plugin](DevelopingPlugins)\n  * 4. [Developing a Skill](DevelopingSkills)\n  * 5. [Developing a Statement](DevelopingStatements)\n  * 6. [Developing an Operator](DevelopingOperators)\n  * 7. [Developing a Type](DevelopingTypes)\n  * 8. [Developing a Species](DevelopingSpecies)\n  * 9. [Developing a Control Architecture](DevelopingControlArchitectures)\n  * 10. [Index of annotations](DevelopingIndexAnnotations)\n  * 11. [IScope](DevelopingIScope)","url":"wiki/DevelopingExtensions.md"},{"id":"wiki/Download.md","title":" Download GAMA","content":"# Download GAMA\n\n## GAMA 1.7 [Continuous Release](https://github.com/gama-platform/gama/releases)\n\n\n## GAMA 1.6.1 (Archived)\n* GAMA for Windows 64 bits [Download](http://51.255.46.42/releases/gama1_6_1_win64.zip ) \n* GAMA for Windows 32 bits [Download](http://51.255.46.42/releases/gama1_6_1_win32.zip )  \n* GAMA for OSX 64 bits  [Download](http://51.255.46.42/releases/gama1_6_1_osx64.zip ) \n* GAMA for OSX 32 bits [Download](http://51.255.46.42/releases/gama1_6_1_osx32.zip) \n* GAMA for Linux 64 bits [Download](http://51.255.46.42/releases/gama1_6_1_linux64.zip) \n* GAMA for Linux 32 bits [Download](http://51.255.46.42/releases/gama1_6_1_linux32.zip) \n","url":"wiki/Download.md"},{"id":"wiki/Events.md","title":" References","content":"# References\n\n\n\nThis page references the events that are linked to GAMA.\n\nIf you happen to participate to an event linked to GAMA, please let us know, so that we can include it in this list.\n\n\n\n\n\n\n## Events linked to GAMA\n\nList of GAMA Coding Camps :\n  * [Coding Camp March 2014 (photos)](https://plus.google.com/u/0/photos/103876396184641904282/albums/5997643312439563137)\n  * [Coding Camp March 2012](Event__CodingCamp2012)\n  * [Fall Coding Camp 2012](Event__CodingCampFall2012)\n  * [Programme doctoral internationale 2012](Event__PDI2012)","url":"wiki/Events.md"},{"id":"wiki/GamlLanguage.md","title":" GAML","content":"# GAML\n\n\n\nModels that users want to simulate in GAMA have to be written in a special language, called **GAML** (short for **GA**ma **M**odeling **L**anguage)\n\nGAML is born from the necessity to have a high-level declarative way of defining and reusing structures found in almost all agent-based models. See [here](Introduction) for more information about its background.\n\nAlthough this choice requires users to learn a new programming (or better, _modeling_) language, everything has been made in GAMA to support a short learning curve, so that they can become almost autonomous in a limited time (informal measures taken at the different [events centered on GAMA](Events) have shown that one day is enough to acquire sufficient skills in writing complete models in GAML).\n\nThe documentation on GAML is organized in 5 main points:\n\n  * Description of the general structure of a model: see [this page](ModelOrganization)\n  * Description of the declaration of species (and all their components): see [this page](ManipulateBasicSpecies) and all its subpages\n  * Description of the declaration of experiments: see [this page](DefiningGUIExperiment) for regular experiments and [this one](BatchExperiments) for batch experiments.\n  * Reference of the [language](GamlReference) regarding all the structures provided to modelers\n  * Recipes of how to use special or advanced features offered in GAML: see this [page](Recipes).\n\nIn addition, some of the fundamental concepts behind GAML are also described in detail, both on the [modeling infrastructure](Introduction) and the [runtime infrastructure](RuntimeConcepts) on which GAML is relying to run experiments on models.","url":"wiki/GamlLanguage.md"},{"id":"wiki/Index.md","title":" Exhaustive list of GAMA Keywords","content":"# Exhaustive list of GAMA Keywords\n\n----\n\n**This file is automatically generated from java files. Do Not Edit It.**\n\n----\n\n## Operators\n[-](OperatorsAC#-), [:](OperatorsAC#:), [::](OperatorsAC#::), [!](OperatorsAC#!), [!=](OperatorsAC#!=), [?](OperatorsAC#?), [/](OperatorsAC#/), [.](OperatorsAC#.), [^](OperatorsAC#^), [@](OperatorsAC#@), [*](OperatorsAC#*), [+](OperatorsAC#+), [](OperatorsAC#<>), [=](OperatorsAC#=), [>](OperatorsAC#>), [>=](OperatorsAC#>=), [abs](OperatorsAC#abs), [accumulate](OperatorsAC#accumulate), [acos](OperatorsAC#acos), [action](OperatorsAC#action), [add_days](OperatorsAC#add_days), [add_edge](OperatorsAC#add_edge), [add_hours](OperatorsAC#add_hours), [add_minutes](OperatorsAC#add_minutes), [add_months](OperatorsAC#add_months), [add_ms](OperatorsAC#add_ms), [add_node](OperatorsAC#add_node), [add_point](OperatorsAC#add_point), [add_seconds](OperatorsAC#add_seconds), [add_weeks](OperatorsAC#add_weeks), [add_years](OperatorsAC#add_years), [adjacency](OperatorsAC#adjacency), [after](OperatorsAC#after), [agent](OperatorsAC#agent), [agent_closest_to](OperatorsAC#agent_closest_to), [agent_farthest_to](OperatorsAC#agent_farthest_to), [agent_from_geometry](OperatorsAC#agent_from_geometry), [agents_at_distance](OperatorsAC#agents_at_distance), [agents_inside](OperatorsAC#agents_inside), [agents_overlapping](OperatorsAC#agents_overlapping), [all_pairs_shortest_path](OperatorsAC#all_pairs_shortest_path), [alpha_index](OperatorsAC#alpha_index), [among](OperatorsAC#among), [and](OperatorsAC#and), [and](OperatorsAC#and), [angle_between](OperatorsAC#angle_between), [any](OperatorsAC#any), [any_location_in](OperatorsAC#any_location_in), [any_point_in](OperatorsAC#any_point_in), [append_horizontally](OperatorsAC#append_horizontally), [append_vertically](OperatorsAC#append_vertically), [arc](OperatorsAC#arc), [around](OperatorsAC#around), [as](OperatorsAC#as), [as_4_grid](OperatorsAC#as_4_grid), [as_distance_graph](OperatorsAC#as_distance_graph), [as_driving_graph](OperatorsAC#as_driving_graph), [as_edge_graph](OperatorsAC#as_edge_graph), [as_grid](OperatorsAC#as_grid), [as_hexagonal_grid](OperatorsAC#as_hexagonal_grid), [as_int](OperatorsAC#as_int), [as_intersection_graph](OperatorsAC#as_intersection_graph), [as_map](OperatorsAC#as_map), [as_matrix](OperatorsAC#as_matrix), [as_path](OperatorsAC#as_path), [asin](OperatorsAC#asin), [at](OperatorsAC#at), [at_distance](OperatorsAC#at_distance), [at_location](OperatorsAC#at_location), [atan](OperatorsAC#atan), [atan2](OperatorsAC#atan2), [attributes](OperatorsAC#attributes), [BDIPlan](OperatorsAC#BDIPlan), [before](OperatorsAC#before), [beta_index](OperatorsAC#beta_index), [between](OperatorsAC#between), [betweenness_centrality](OperatorsAC#betweenness_centrality), [biggest_cliques_of](OperatorsAC#biggest_cliques_of), [binomial](OperatorsAC#binomial), [blend](OperatorsAC#blend), [bool](OperatorsAC#bool), [box](OperatorsAC#box), [brewer_colors](OperatorsAC#brewer_colors), [brewer_palettes](OperatorsAC#brewer_palettes), [buffer](OperatorsAC#buffer), [build](OperatorsAC#build), [ceil](OperatorsAC#ceil), [centroid](OperatorsAC#centroid), [char](OperatorsAC#char), [circle](OperatorsAC#circle), [clean](OperatorsAC#clean), [closest_points_with](OperatorsAC#closest_points_with), [closest_to](OperatorsAC#closest_to), [collect](OperatorsAC#collect), [column_at](OperatorsAC#column_at), [columns_list](OperatorsAC#columns_list), [command](OperatorsAC#command), [cone](OperatorsAC#cone), [cone3D](OperatorsAC#cone3D), [connected_components_of](OperatorsAC#connected_components_of), [connectivity_index](OperatorsAC#connectivity_index), [container](OperatorsAC#container), [contains](OperatorsAC#contains), [contains_all](OperatorsAC#contains_all), [contains_any](OperatorsAC#contains_any), [contains_edge](OperatorsAC#contains_edge), [contains_vertex](OperatorsAC#contains_vertex), [conversation](OperatorsAC#conversation), [convex_hull](OperatorsAC#convex_hull), [copy](OperatorsAC#copy), [copy_between](OperatorsAC#copy_between), [corR](OperatorsAC#corR), [cos](OperatorsAC#cos), [cos_rad](OperatorsAC#cos_rad), [count](OperatorsAC#count), [covers](OperatorsAC#covers), [cross](OperatorsAC#cross), [crosses](OperatorsAC#crosses), [crs](OperatorsAC#crs), [CRS_transform](OperatorsAC#CRS_transform), [csv_file](OperatorsAC#csv_file), [cube](OperatorsAC#cube), [curve](OperatorsAC#curve), [cylinder](OperatorsAC#cylinder), [date](OperatorsDM#date), [dbscan](OperatorsDM#dbscan), [dead](OperatorsDM#dead), [degree_of](OperatorsDM#degree_of), [dem](OperatorsDM#dem), [det](OperatorsDM#det), [determinant](OperatorsDM#determinant), [diff](OperatorsDM#diff), [diff2](OperatorsDM#diff2), [directed](OperatorsDM#directed), [direction_between](OperatorsDM#direction_between), [direction_to](OperatorsDM#direction_to), [disjoint_from](OperatorsDM#disjoint_from), [distance_between](OperatorsDM#distance_between), [distance_to](OperatorsDM#distance_to), [distinct](OperatorsDM#distinct), [distribution_of](OperatorsDM#distribution_of), [distribution2d_of](OperatorsDM#distribution2d_of), [div](OperatorsDM#div), [dxf_file](OperatorsDM#dxf_file), [edge](OperatorsDM#edge), [edge_between](OperatorsDM#edge_between), [edge_betweenness](OperatorsDM#edge_betweenness), [edges](OperatorsDM#edges), [eigenvalues](OperatorsDM#eigenvalues), [electre_DM](OperatorsDM#electre_DM), [ellipse](OperatorsDM#ellipse), [emotion](OperatorsDM#emotion), [empty](OperatorsDM#empty), [enlarged_by](OperatorsDM#enlarged_by), [envelope](OperatorsDM#envelope), [eval_gaml](OperatorsDM#eval_gaml), [eval_when](OperatorsDM#eval_when), [even](OperatorsDM#even), [every](OperatorsDM#every), [every_cycle](OperatorsDM#every_cycle), [evidence_theory_DM](OperatorsDM#evidence_theory_DM), [exp](OperatorsDM#exp), [fact](OperatorsDM#fact), [farthest_point_to](OperatorsDM#farthest_point_to), [farthest_to](OperatorsDM#farthest_to), [file](OperatorsDM#file), [file_exists](OperatorsDM#file_exists), [first](OperatorsDM#first), [first_of](OperatorsDM#first_of), [first_with](OperatorsDM#first_with), [flip](OperatorsDM#flip), [float](OperatorsDM#float), [floor](OperatorsDM#floor), [folder](OperatorsDM#folder), [font](OperatorsDM#font), [frequency_of](OperatorsDM#frequency_of), [from](OperatorsDM#from), [fuzzy_kappa](OperatorsDM#fuzzy_kappa), [fuzzy_kappa_sim](OperatorsDM#fuzzy_kappa_sim), [gaml_file](OperatorsDM#gaml_file), [gamma_index](OperatorsDM#gamma_index), [gamma_rnd](OperatorsDM#gamma_rnd), [gauss](OperatorsDM#gauss), [generate_barabasi_albert](OperatorsDM#generate_barabasi_albert), [generate_complete_graph](OperatorsDM#generate_complete_graph), [generate_watts_strogatz](OperatorsDM#generate_watts_strogatz), [geojson_file](OperatorsDM#geojson_file), [geometric_mean](OperatorsDM#geometric_mean), [geometry](OperatorsDM#geometry), [geometry_collection](OperatorsDM#geometry_collection), [get](OperatorsDM#get), [get_about](OperatorsDM#get_about), [get_agent](OperatorsDM#get_agent), [get_agent_cause](OperatorsDM#get_agent_cause), [get_decay](OperatorsDM#get_decay), [get_dominance](OperatorsDM#get_dominance), [get_familiarity](OperatorsDM#get_familiarity), [get_intensity](OperatorsDM#get_intensity), [get_lifetime](OperatorsDM#get_lifetime), [get_liking](OperatorsDM#get_liking), [get_praiseworthiness](OperatorsDM#get_praiseworthiness), [get_priority](OperatorsDM#get_priority), [get_solidarity](OperatorsDM#get_solidarity), [get_super_intention](OperatorsDM#get_super_intention), [gif_file](OperatorsDM#gif_file), [gini](OperatorsDM#gini), [graph](OperatorsDM#graph), [grayscale](OperatorsDM#grayscale), [grid_at](OperatorsDM#grid_at), [grid_cells_to_graph](OperatorsDM#grid_cells_to_graph), [grid_file](OperatorsDM#grid_file), [group_by](OperatorsDM#group_by), [harmonic_mean](OperatorsDM#harmonic_mean), [hexagon](OperatorsDM#hexagon), [hierarchical_clustering](OperatorsDM#hierarchical_clustering), [hsb](OperatorsDM#hsb), [hypot](OperatorsDM#hypot), [IDW](OperatorsAC#IDW), [image_file](OperatorsDM#image_file), [in](OperatorsDM#in), [in_degree_of](OperatorsDM#in_degree_of), [in_edges_of](OperatorsDM#in_edges_of), [indented_by](OperatorsDM#indented_by), [index_by](OperatorsDM#index_by), [index_of](OperatorsDM#index_of), [inside](OperatorsDM#inside), [int](OperatorsDM#int), [inter](OperatorsDM#inter), [interleave](OperatorsDM#interleave), [internal_at](OperatorsDM#internal_at), [internal_integrated_value](OperatorsDM#internal_integrated_value), [internal_zero_order_equation](OperatorsDM#internal_zero_order_equation), [intersection](OperatorsDM#intersection), [intersects](OperatorsDM#intersects), [inverse](OperatorsDM#inverse), [inverse_distance_weighting](OperatorsDM#inverse_distance_weighting), [is](OperatorsDM#is), [is_csv](OperatorsDM#is_csv), [is_dxf](OperatorsDM#is_dxf), [is_finite](OperatorsDM#is_finite), [is_gaml](OperatorsDM#is_gaml), [is_geojson](OperatorsDM#is_geojson), [is_gif](OperatorsDM#is_gif), [is_grid](OperatorsDM#is_grid), [is_image](OperatorsDM#is_image), [is_json](OperatorsDM#is_json), [is_number](OperatorsDM#is_number), [is_obj](OperatorsDM#is_obj), [is_osm](OperatorsDM#is_osm), [is_pgm](OperatorsDM#is_pgm), [is_property](OperatorsDM#is_property), [is_R](OperatorsDM#is_R), [is_shape](OperatorsDM#is_shape), [is_skill](OperatorsDM#is_skill), [is_svg](OperatorsDM#is_svg), [is_text](OperatorsDM#is_text), [is_threeds](OperatorsDM#is_threeds), [is_URL](OperatorsDM#is_URL), [is_xml](OperatorsDM#is_xml), [json_file](OperatorsDM#json_file), [kappa](OperatorsDM#kappa), [kappa_sim](OperatorsDM#kappa_sim), [kmeans](OperatorsDM#kmeans), [kurtosis](OperatorsDM#kurtosis), [last](OperatorsDM#last), [last_index_of](OperatorsDM#last_index_of), [last_of](OperatorsDM#last_of), [last_with](OperatorsDM#last_with), [layout](OperatorsDM#layout), [length](OperatorsDM#length), [line](OperatorsDM#line), [link](OperatorsDM#link), [list](OperatorsDM#list), [list_with](OperatorsDM#list_with), [ln](OperatorsDM#ln), [load_graph_from_file](OperatorsDM#load_graph_from_file), [load_shortest_paths](OperatorsDM#load_shortest_paths), [log](OperatorsDM#log), [lower_case](OperatorsDM#lower_case), [map](OperatorsDM#map), [masked_by](OperatorsDM#masked_by), [material](OperatorsDM#material), [matrix](OperatorsDM#matrix), [matrix_with](OperatorsDM#matrix_with), [max](OperatorsDM#max), [max_of](OperatorsDM#max_of), [maximal_cliques_of](OperatorsDM#maximal_cliques_of), [mean](OperatorsDM#mean), [mean_deviation](OperatorsDM#mean_deviation), [mean_of](OperatorsDM#mean_of), [meanR](OperatorsDM#meanR), [median](OperatorsDM#median), [message](OperatorsDM#message), [milliseconds_between](OperatorsDM#milliseconds_between), [min](OperatorsDM#min), [min_of](OperatorsDM#min_of), [minus_days](OperatorsDM#minus_days), [minus_hours](OperatorsDM#minus_hours), [minus_minutes](OperatorsDM#minus_minutes), [minus_months](OperatorsDM#minus_months), [minus_ms](OperatorsDM#minus_ms), [minus_seconds](OperatorsDM#minus_seconds), [minus_weeks](OperatorsDM#minus_weeks), [minus_years](OperatorsDM#minus_years), [mod](OperatorsDM#mod), [months_between](OperatorsDM#months_between), [moran](OperatorsDM#moran), [mul](OperatorsDM#mul), [nb_cycles](OperatorsNZ#nb_cycles), [neighbors_at](OperatorsNZ#neighbors_at), [neighbors_of](OperatorsNZ#neighbors_of), [new_emotion](OperatorsNZ#new_emotion), [new_folder](OperatorsNZ#new_folder), [new_predicate](OperatorsNZ#new_predicate), [new_social_link](OperatorsNZ#new_social_link), [node](OperatorsNZ#node), [nodes](OperatorsNZ#nodes), [norm](OperatorsNZ#norm), [not](OperatorsNZ#not), [obj_file](OperatorsNZ#obj_file), [of](OperatorsNZ#of), [of_generic_species](OperatorsNZ#of_generic_species), [of_species](OperatorsNZ#of_species), [one_of](OperatorsNZ#one_of), [or](OperatorsNZ#or), [or](OperatorsNZ#or), [osm_file](OperatorsNZ#osm_file), [out_degree_of](OperatorsNZ#out_degree_of), [out_edges_of](OperatorsNZ#out_edges_of), [overlapping](OperatorsNZ#overlapping), [overlaps](OperatorsNZ#overlaps), [pair](OperatorsNZ#pair), [partially_overlaps](OperatorsNZ#partially_overlaps), [path](OperatorsNZ#path), [path_between](OperatorsNZ#path_between), [path_to](OperatorsNZ#path_to), [paths_between](OperatorsNZ#paths_between), [percent_absolute_deviation](OperatorsNZ#percent_absolute_deviation), [pgm_file](OperatorsNZ#pgm_file), [plan](OperatorsNZ#plan), [plus_days](OperatorsNZ#plus_days), [plus_hours](OperatorsNZ#plus_hours), [plus_minutes](OperatorsNZ#plus_minutes), [plus_months](OperatorsNZ#plus_months), [plus_ms](OperatorsNZ#plus_ms), [plus_seconds](OperatorsNZ#plus_seconds), [plus_weeks](OperatorsNZ#plus_weeks), [plus_years](OperatorsNZ#plus_years), [point](OperatorsNZ#point), [points_along](OperatorsNZ#points_along), [points_at](OperatorsNZ#points_at), [points_on](OperatorsNZ#points_on), [poisson](OperatorsNZ#poisson), [polygon](OperatorsNZ#polygon), [polyhedron](OperatorsNZ#polyhedron), [polyline](OperatorsNZ#polyline), [polyplan](OperatorsNZ#polyplan), [predecessors_of](OperatorsNZ#predecessors_of), [predicate](OperatorsNZ#predicate), [predict](OperatorsNZ#predict), [product](OperatorsNZ#product), [product_of](OperatorsNZ#product_of), [promethee_DM](OperatorsNZ#promethee_DM), [property_file](OperatorsNZ#property_file), [pyramid](OperatorsNZ#pyramid), [R_correlation](OperatorsAC#R_correlation), [R_file](OperatorsAC#R_file), [R_mean](OperatorsAC#R_mean), [range](OperatorsNZ#range), [read](OperatorsNZ#read), [rectangle](OperatorsNZ#rectangle), [reduced_by](OperatorsNZ#reduced_by), [regression](OperatorsNZ#regression), [remove_duplicates](OperatorsNZ#remove_duplicates), [remove_node_from](OperatorsNZ#remove_node_from), [replace](OperatorsNZ#replace), [replace_regex](OperatorsNZ#replace_regex), [reverse](OperatorsNZ#reverse), [rewire_n](OperatorsNZ#rewire_n), [rgb](OperatorsNZ#rgb), [rgb_to_xyz](OperatorsNZ#rgb_to_xyz), [rnd](OperatorsNZ#rnd), [rnd_choice](OperatorsNZ#rnd_choice), [rnd_color](OperatorsNZ#rnd_color), [rotated_by](OperatorsNZ#rotated_by), [round](OperatorsNZ#round), [row_at](OperatorsNZ#row_at), [rows_list](OperatorsNZ#rows_list), [sample](OperatorsNZ#sample), [scaled_by](OperatorsNZ#scaled_by), [scaled_to](OperatorsNZ#scaled_to), [select](OperatorsNZ#select), [set_about](OperatorsNZ#set_about), [set_agent](OperatorsNZ#set_agent), [set_agent_cause](OperatorsNZ#set_agent_cause), [set_decay](OperatorsNZ#set_decay), [set_dominance](OperatorsNZ#set_dominance), [set_familiarity](OperatorsNZ#set_familiarity), [set_intensity](OperatorsNZ#set_intensity), [set_liking](OperatorsNZ#set_liking), [set_solidarity](OperatorsNZ#set_solidarity), [set_truth](OperatorsNZ#set_truth), [set_z](OperatorsNZ#set_z), [shape_file](OperatorsNZ#shape_file), [shuffle](OperatorsNZ#shuffle), [signum](OperatorsNZ#signum), [simple_clustering_by_distance](OperatorsNZ#simple_clustering_by_distance), [simple_clustering_by_envelope_distance](OperatorsNZ#simple_clustering_by_envelope_distance), [simplification](OperatorsNZ#simplification), [sin](OperatorsNZ#sin), [sin_rad](OperatorsNZ#sin_rad), [since](OperatorsNZ#since), [skeletonize](OperatorsNZ#skeletonize), [skew_gauss](OperatorsNZ#skew_gauss), [skewness](OperatorsNZ#skewness), [skill](OperatorsNZ#skill), [smooth](OperatorsNZ#smooth), [social_link](OperatorsNZ#social_link), [solid](OperatorsNZ#solid), [sort](OperatorsNZ#sort), [sort_by](OperatorsNZ#sort_by), [source_of](OperatorsNZ#source_of), [spatial_graph](OperatorsNZ#spatial_graph), [species](OperatorsNZ#species), [species_of](OperatorsNZ#species_of), [sphere](OperatorsNZ#sphere), [split_at](OperatorsNZ#split_at), [split_geometry](OperatorsNZ#split_geometry), [split_lines](OperatorsNZ#split_lines), [split_with](OperatorsNZ#split_with), [sqrt](OperatorsNZ#sqrt), [square](OperatorsNZ#square), [squircle](OperatorsNZ#squircle), [standard_deviation](OperatorsNZ#standard_deviation), [string](OperatorsNZ#string), [subtract_days](OperatorsNZ#subtract_days), [subtract_hours](OperatorsNZ#subtract_hours), [subtract_minutes](OperatorsNZ#subtract_minutes), [subtract_months](OperatorsNZ#subtract_months), [subtract_ms](OperatorsNZ#subtract_ms), [subtract_seconds](OperatorsNZ#subtract_seconds), [subtract_weeks](OperatorsNZ#subtract_weeks), [subtract_years](OperatorsNZ#subtract_years), [successors_of](OperatorsNZ#successors_of), [sum](OperatorsNZ#sum), [sum_of](OperatorsNZ#sum_of), [svg_file](OperatorsNZ#svg_file), [tan](OperatorsNZ#tan), [tan_rad](OperatorsNZ#tan_rad), [tanh](OperatorsNZ#tanh), [target_of](OperatorsNZ#target_of), [teapot](OperatorsNZ#teapot), [text_file](OperatorsNZ#text_file), [TGauss](OperatorsAC#TGauss), [threeds_file](OperatorsNZ#threeds_file), [to](OperatorsNZ#to), [to_GAMA_CRS](OperatorsNZ#to_GAMA_CRS), [to_gaml](OperatorsNZ#to_gaml), [to_rectangles](OperatorsNZ#to_rectangles), [to_squares](OperatorsNZ#to_squares), [to_triangles](OperatorsNZ#to_triangles), [tokenize](OperatorsNZ#tokenize), [topology](OperatorsNZ#topology), [touches](OperatorsNZ#touches), [towards](OperatorsNZ#towards), [trace](OperatorsNZ#trace), [transformed_by](OperatorsNZ#transformed_by), [translated_by](OperatorsNZ#translated_by), [translated_to](OperatorsNZ#translated_to), [transpose](OperatorsNZ#transpose), [triangle](OperatorsNZ#triangle), [triangulate](OperatorsNZ#triangulate), [truncated_gauss](OperatorsNZ#truncated_gauss), [undirected](OperatorsNZ#undirected), [union](OperatorsNZ#union), [unknown](OperatorsNZ#unknown), [until](OperatorsNZ#until), [upper_case](OperatorsNZ#upper_case), [URL_file](OperatorsAC#URL_file), [use_cache](OperatorsNZ#use_cache), [user_input](OperatorsNZ#user_input), [using](OperatorsNZ#using), [variance](OperatorsNZ#variance), [variance_of](OperatorsNZ#variance_of), [voronoi](OperatorsNZ#voronoi), [weight_of](OperatorsNZ#weight_of), [weighted_means_DM](OperatorsNZ#weighted_means_DM), [where](OperatorsNZ#where), [with_lifetime](OperatorsNZ#with_lifetime), [with_max_of](OperatorsNZ#with_max_of), [with_min_of](OperatorsNZ#with_min_of), [with_optimizer_type](OperatorsNZ#with_optimizer_type), [with_praiseworthiness](OperatorsNZ#with_praiseworthiness), [with_precision](OperatorsNZ#with_precision), [with_priority](OperatorsNZ#with_priority), [with_values](OperatorsNZ#with_values), [with_weights](OperatorsNZ#with_weights), [without_holes](OperatorsNZ#without_holes), [writable](OperatorsNZ#writable), [xml_file](OperatorsNZ#xml_file), [years_between](OperatorsNZ#years_between), \n\t\t\t  \t\n----\n\n## Statements \n[=](Statements#=), [action](Statements#action), [add](Statements#add), [agents](Statements#agents), [annealing](Statements#annealing), [ask](Statements#ask), [aspect](Statements#aspect), [assert](Statements#assert), [benchmark](Statements#benchmark), [break](Statements#break), [camera](Statements#camera), [capture](Statements#capture), [chart](Statements#chart), [conscious_contagion](Statements#conscious_contagion), [create](Statements#create), [data](Statements#data), [datalist](Statements#datalist), [default](Statements#default), [diffuse](Statements#diffuse), [display](Statements#display), [display_grid](Statements#display_grid), [display_population](Statements#display_population), [do](Statements#do), [draw](Statements#draw), [else](Statements#else), [emotional_contagion](Statements#emotional_contagion), [enter](Statements#enter), [equation](Statements#equation), [error](Statements#error), [event](Statements#event), [exhaustive](Statements#exhaustive), [exit](Statements#exit), [experiment](Statements#experiment), [export](Statements#export), [focus](Statements#focus), [focus_on](Statements#focus_on), [genetic](Statements#genetic), [graphics](Statements#graphics), [highlight](Statements#highlight), [hill_climbing](Statements#hill_climbing), [if](Statements#if), [image](Statements#image), [inspect](Statements#inspect), [let](Statements#let), [light](Statements#light), [loop](Statements#loop), [match](Statements#match), [migrate](Statements#migrate), [monitor](Statements#monitor), [output](Statements#output), [output_file](Statements#output_file), [overlay](Statements#overlay), [parameter](Statements#parameter), [perceive](Statements#perceive), [permanent](Statements#permanent), [plan](Statements#plan), [put](Statements#put), [reactive_tabu](Statements#reactive_tabu), [reflex](Statements#reflex), [release](Statements#release), [remove](Statements#remove), [return](Statements#return), [rule](Statements#rule), [run](Statements#run), [save](Statements#save), [save_batch](Statements#save_batch), [set](Statements#set), [setup](Statements#setup), [simulate](Statements#simulate), [socialize](Statements#socialize), [solve](Statements#solve), [species](Statements#species), [state](Statements#state), [status](Statements#status), [switch](Statements#switch), [tabu](Statements#tabu), [task](Statements#task), [test](Statements#test), [trace](Statements#trace), [transition](Statements#transition), [unconscious_contagion](Statements#unconscious_contagion), [user_command](Statements#user_command), [user_init](Statements#user_init), [user_input](Statements#user_input), [user_panel](Statements#user_panel), [using](Statements#using), [Variable_container](Statements#Variable_container), [Variable_number](Statements#Variable_number), [Variable_regular](Statements#Variable_regular), [warn](Statements#warn), [write](Statements#write), \n\n----\n\n## Architectures\n[fsm](BuiltInControlArchitectures#fsm), [parallel_bdi](BuiltInControlArchitectures#parallel_bdi), [probabilistic_tasks](BuiltInControlArchitectures#probabilistic_tasks), [reflex](BuiltInControlArchitectures#reflex), [simple_bdi](BuiltInControlArchitectures#simple_bdi), [sorted_tasks](BuiltInControlArchitectures#sorted_tasks), [user_first](BuiltInControlArchitectures#user_first), [user_last](BuiltInControlArchitectures#user_last), [user_only](BuiltInControlArchitectures#user_only), [weighted_tasks](BuiltInControlArchitectures#weighted_tasks), \n\n----\n\n## Constants and colors\n[#aliceblue](UnitsAndConstants), [#antiquewhite](UnitsAndConstants), [#aqua](UnitsAndConstants), [#aquamarine](UnitsAndConstants), [#azure](UnitsAndConstants), [#beige](UnitsAndConstants), [#bisque](UnitsAndConstants), [#black](UnitsAndConstants), [#blanchedalmond](UnitsAndConstants), [#blue](UnitsAndConstants), [#blueviolet](UnitsAndConstants), [#bold](UnitsAndConstants), [#brown](UnitsAndConstants), [#burlywood](UnitsAndConstants), [#cadetblue](UnitsAndConstants), [#camera_location](UnitsAndConstants), [#camera_orientation](UnitsAndConstants), [#camera_target](UnitsAndConstants), [#chartreuse](UnitsAndConstants), [#chocolate](UnitsAndConstants), [#cl](UnitsAndConstants) (#centiliter,#centiliters), [#cm](UnitsAndConstants) (#centimeter,#centimeters), [#coral](UnitsAndConstants), [#cornflowerblue](UnitsAndConstants), [#cornsilk](UnitsAndConstants), [#crimson](UnitsAndConstants), [#custom](UnitsAndConstants), [#cyan](UnitsAndConstants), [#cycle](UnitsAndConstants) (#cycles), [#darkblue](UnitsAndConstants), [#darkcyan](UnitsAndConstants), [#darkgoldenrod](UnitsAndConstants), [#darkgray](UnitsAndConstants), [#darkgreen](UnitsAndConstants), [#darkgrey](UnitsAndConstants), [#darkkhaki](UnitsAndConstants), [#darkmagenta](UnitsAndConstants), [#darkolivegreen](UnitsAndConstants), [#darkorange](UnitsAndConstants), [#darkorchid](UnitsAndConstants), [#darkred](UnitsAndConstants), [#darksalmon](UnitsAndConstants), [#darkseagreen](UnitsAndConstants), [#darkslateblue](UnitsAndConstants), [#darkslategray](UnitsAndConstants), [#darkslategrey](UnitsAndConstants), [#darkturquoise](UnitsAndConstants), [#darkviolet](UnitsAndConstants), [#day](UnitsAndConstants) (#days), [#deeppink](UnitsAndConstants), [#deepskyblue](UnitsAndConstants), [#dimgray](UnitsAndConstants), [#dimgrey](UnitsAndConstants), [#display_height](UnitsAndConstants), [#display_width](UnitsAndConstants), [#dl](UnitsAndConstants) (#deciliter,#deciliters), [#dm](UnitsAndConstants) (#decimeter,#decimeters), [#dodgerblue](UnitsAndConstants), [#e](UnitsAndConstants), [#epoch](UnitsAndConstants), [#firebrick](UnitsAndConstants), [#flat](UnitsAndConstants), [#floralwhite](UnitsAndConstants), [#foot](UnitsAndConstants) (#feet,#ft), [#forestgreen](UnitsAndConstants), [#fuchsia](UnitsAndConstants), [#gainsboro](UnitsAndConstants), [#ghostwhite](UnitsAndConstants), [#gold](UnitsAndConstants), [#goldenrod](UnitsAndConstants), [#gram](UnitsAndConstants) (#grams), [#gray](UnitsAndConstants), [#green](UnitsAndConstants), [#greenyellow](UnitsAndConstants), [#grey](UnitsAndConstants), [#h](UnitsAndConstants) (#hour,#hours), [#hl](UnitsAndConstants) (#hectoliter,#hectoliters), [#honeydew](UnitsAndConstants), [#horizontal](UnitsAndConstants), [#hotpink](UnitsAndConstants), [#inch](UnitsAndConstants) (#inches), [#indianred](UnitsAndConstants), [#indigo](UnitsAndConstants), [#infinity](UnitsAndConstants), [#iso_local](UnitsAndConstants), [#iso_offset](UnitsAndConstants), [#iso_zoned](UnitsAndConstants), [#italic](UnitsAndConstants), [#ivory](UnitsAndConstants), [#kg](UnitsAndConstants) (#kilo,#kilogram,#kilos), [#khaki](UnitsAndConstants), [#km](UnitsAndConstants) (#kilometer,#kilometers), [#l](UnitsAndConstants) (#liter,#liters,#dm3), [#lavender](UnitsAndConstants), [#lavenderblush](UnitsAndConstants), [#lawngreen](UnitsAndConstants), [#lemonchiffon](UnitsAndConstants), [#lightblue](UnitsAndConstants), [#lightcoral](UnitsAndConstants), [#lightcyan](UnitsAndConstants), [#lightgoldenrodyellow](UnitsAndConstants), [#lightgray](UnitsAndConstants), [#lightgreen](UnitsAndConstants), [#lightgrey](UnitsAndConstants), [#lightpink](UnitsAndConstants), [#lightsalmon](UnitsAndConstants), [#lightseagreen](UnitsAndConstants), [#lightskyblue](UnitsAndConstants), [#lightslategray](UnitsAndConstants), [#lightslategrey](UnitsAndConstants), [#lightsteelblue](UnitsAndConstants), [#lightyellow](UnitsAndConstants), [#lime](UnitsAndConstants), [#limegreen](UnitsAndConstants), [#linen](UnitsAndConstants), [#longton](UnitsAndConstants) (#lton), [#m](UnitsAndConstants) (#meter,#meters), [#m2](UnitsAndConstants), [#m3](UnitsAndConstants), [#magenta](UnitsAndConstants), [#maroon](UnitsAndConstants), [#max_float](UnitsAndConstants), [#max_int](UnitsAndConstants), [#mediumaquamarine](UnitsAndConstants), [#mediumblue](UnitsAndConstants), [#mediumorchid](UnitsAndConstants), [#mediumpurple](UnitsAndConstants), [#mediumseagreen](UnitsAndConstants), [#mediumslateblue](UnitsAndConstants), [#mediumspringgreen](UnitsAndConstants), [#mediumturquoise](UnitsAndConstants), [#mediumvioletred](UnitsAndConstants), [#midnightblue](UnitsAndConstants), [#mile](UnitsAndConstants) (#miles), [#min_float](UnitsAndConstants), [#min_int](UnitsAndConstants), [#mintcream](UnitsAndConstants), [#minute](UnitsAndConstants) (#minutes,#mn), [#mistyrose](UnitsAndConstants), [#mm](UnitsAndConstants) (#milimeter,#milimeters), [#moccasin](UnitsAndConstants), [#month](UnitsAndConstants) (#months), [#msec](UnitsAndConstants) (#millisecond,#milliseconds,#ms), [#nan](UnitsAndConstants), [#navajowhite](UnitsAndConstants), [#navy](UnitsAndConstants), [#none](UnitsAndConstants), [#now](UnitsAndConstants), [#oldlace](UnitsAndConstants), [#olive](UnitsAndConstants), [#olivedrab](UnitsAndConstants), [#orange](UnitsAndConstants), [#orangered](UnitsAndConstants), [#orchid](UnitsAndConstants), [#ounce](UnitsAndConstants) (#oz,#ounces), [#palegoldenrod](UnitsAndConstants), [#palegreen](UnitsAndConstants), [#paleturquoise](UnitsAndConstants), [#palevioletred](UnitsAndConstants), [#papayawhip](UnitsAndConstants), [#peachpuff](UnitsAndConstants), [#peru](UnitsAndConstants), [#pi](UnitsAndConstants), [#pink](UnitsAndConstants), [#pixels](UnitsAndConstants) (#px), [#plain](UnitsAndConstants), [#plum](UnitsAndConstants), [#pound](UnitsAndConstants) (#lb,#pounds,#lbm), [#powderblue](UnitsAndConstants), [#purple](UnitsAndConstants), [#red](UnitsAndConstants), [#rosybrown](UnitsAndConstants), [#round](UnitsAndConstants), [#royalblue](UnitsAndConstants), [#saddlebrown](UnitsAndConstants), [#salmon](UnitsAndConstants), [#sandybrown](UnitsAndConstants), [#seagreen](UnitsAndConstants), [#seashell](UnitsAndConstants), [#sec](UnitsAndConstants) (#second,#seconds,#s), [#shortton](UnitsAndConstants) (#ston), [#sienna](UnitsAndConstants), [#silver](UnitsAndConstants), [#skyblue](UnitsAndConstants), [#slateblue](UnitsAndConstants), [#slategray](UnitsAndConstants), [#slategrey](UnitsAndConstants), [#snow](UnitsAndConstants), [#split](UnitsAndConstants), [#springgreen](UnitsAndConstants), [#sqft](UnitsAndConstants) (#square_foot,#square_feet), [#sqin](UnitsAndConstants) (#square_inch,#square_inches), [#sqmi](UnitsAndConstants) (#square_mile,#square_miles), [#square](UnitsAndConstants), [#stack](UnitsAndConstants), [#steelblue](UnitsAndConstants), [#stone](UnitsAndConstants) (#st), [#tan](UnitsAndConstants), [#teal](UnitsAndConstants), [#thistle](UnitsAndConstants), [#to_deg](UnitsAndConstants), [#to_rad](UnitsAndConstants), [#tomato](UnitsAndConstants), [#ton](UnitsAndConstants) (#tons), [#transparent](UnitsAndConstants), [#turquoise](UnitsAndConstants), [#user_location](UnitsAndConstants), [#vertical](UnitsAndConstants), [#violet](UnitsAndConstants), [#week](UnitsAndConstants) (#weeks), [#wheat](UnitsAndConstants), [#white](UnitsAndConstants), [#whitesmoke](UnitsAndConstants), [#yard](UnitsAndConstants) (#yards), [#year](UnitsAndConstants) (#years,#y), [#yellow](UnitsAndConstants), [#yellowgreen](UnitsAndConstants), [#zoom](UnitsAndConstants), \n\n----\n\n## Skills\n[advanced_driving](BuiltInSkills#advanced_driving), [driving](BuiltInSkills#driving), [fipa](BuiltInSkills#fipa), [GAMASQL](BuiltInSkills#GAMASQL), [grid](BuiltInSkills#grid), [MDXSKILL](BuiltInSkills#MDXSKILL), [messaging](BuiltInSkills#messaging), [moving](BuiltInSkills#moving), [moving3D](BuiltInSkills#moving3D), [network](BuiltInSkills#network), [physics](BuiltInSkills#physics), [skill_road](BuiltInSkills#skill_road), [skill_road_node](BuiltInSkills#skill_road_node), [SQLSKILL](BuiltInSkills#SQLSKILL), \t\n\n----\n\n## Species\n[agent](BuiltInSpecies#agent), [AgentDB](BuiltInSpecies#AgentDB), [base_edge](BuiltInSpecies#base_edge), [experiment](BuiltInSpecies#experiment), [graph_edge](BuiltInSpecies#graph_edge), [graph_node](BuiltInSpecies#graph_node), [model](BuiltInSpecies#model), [physical_world](BuiltInSpecies#physical_world), \n   \t[world](BuiltInSpecies#model )\n\n----\n\n## Actions\n[_init_](BuiltInSpecies#_init_), [_step_](BuiltInSpecies#_step_), [isConnected](BuiltInSpecies#isConnected), [close](BuiltInSpecies#close), [timeStamp](BuiltInSpecies#timeStamp), [connect](BuiltInSpecies#connect), [testConnection](BuiltInSpecies#testConnection), [select](BuiltInSpecies#select), [executeUpdate](BuiltInSpecies#executeUpdate), [getParameter](BuiltInSpecies#getParameter), [setParameter](BuiltInSpecies#setParameter), [insert](BuiltInSpecies#insert), [update_outputs](BuiltInSpecies#update_outputs), [related_to](BuiltInSpecies#related_to), [pause](BuiltInSpecies#pause), [halt](BuiltInSpecies#halt), [compute_forces](BuiltInSpecies#compute_forces), [advanced_follow_driving](BuiltInSkills#advanced_follow_driving), [is_ready_next_road](BuiltInSkills#is_ready_next_road), [test_next_road](BuiltInSkills#test_next_road), [compute_path](BuiltInSkills#compute_path), [path_from_nodes](BuiltInSkills#path_from_nodes), [drive_random](BuiltInSkills#drive_random), [drive](BuiltInSkills#drive), [external_factor_impact](BuiltInSkills#external_factor_impact), [speed_choice](BuiltInSkills#speed_choice), [lane_choice](BuiltInSkills#lane_choice), [follow_driving](BuiltInSkills#follow_driving), [goto_driving](BuiltInSkills#goto_driving), [start_conversation](BuiltInSkills#start_conversation), [send](BuiltInSkills#send), [reply](BuiltInSkills#reply), [accept_proposal](BuiltInSkills#accept_proposal), [agree](BuiltInSkills#agree), [cancel](BuiltInSkills#cancel), [cfp](BuiltInSkills#cfp), [end_conversation](BuiltInSkills#end_conversation), [failure](BuiltInSkills#failure), [inform](BuiltInSkills#inform), [propose](BuiltInSkills#propose), [query](BuiltInSkills#query), [refuse](BuiltInSkills#refuse), [reject_proposal](BuiltInSkills#reject_proposal), [request](BuiltInSkills#request), [subscribe](BuiltInSkills#subscribe), [testConnection](BuiltInSkills#testConnection), [read](BuiltInSkills#read), [SqlObject](BuiltInSkills#SqlObject), [timeStamp](BuiltInSkills#timeStamp), [testConnection](BuiltInSkills#testConnection), [select](BuiltInSkills#select), [send](BuiltInSkills#send), [wander](BuiltInSkills#wander), [move](BuiltInSkills#move), [follow](BuiltInSkills#follow), [goto](BuiltInSkills#goto), [move](BuiltInSkills#move), [execute](BuiltInSkills#execute), [connect](BuiltInSkills#connect), [fetch_message](BuiltInSkills#fetch_message), [has_more_message](BuiltInSkills#has_more_message), [leave_the_group](BuiltInSkills#leave_the_group), [register](BuiltInSkills#register), [unregister](BuiltInSkills#unregister), [timeStamp](BuiltInSkills#timeStamp), [getCurrentDateTime](BuiltInSkills#getCurrentDateTime), [getDateOffset](BuiltInSkills#getDateOffset), [testConnection](BuiltInSkills#testConnection), [executeUpdate](BuiltInSkills#executeUpdate), [insert](BuiltInSkills#insert), [select](BuiltInSkills#select), [list2Matrix](BuiltInSkills#list2Matrix),    \t\n\n----\n\n## Variables\n[speed](BuiltInSkills), [real_speed](BuiltInSkills), [current_path](BuiltInSkills), [final_target](BuiltInSkills), [current_target](BuiltInSkills), [current_index](BuiltInSkills), [targets](BuiltInSkills), [security_distance_coeff](BuiltInSkills), [current_lane](BuiltInSkills), [vehicle_length](BuiltInSkills), [speed_coeff](BuiltInSkills), [max_acceleration](BuiltInSkills), [current_road](BuiltInSkills), [on_linked_road](BuiltInSkills), [proba_lane_change_up](BuiltInSkills), [proba_lane_change_down](BuiltInSkills), [proba_respect_priorities](BuiltInSkills), [proba_respect_stops](BuiltInSkills), [proba_block_node](BuiltInSkills), [proba_use_linked_road](BuiltInSkills), [right_side_driving](BuiltInSkills), [max_speed](BuiltInSkills), [distance_to_goal](BuiltInSkills), [segment_index_on_road](BuiltInSkills), [living_space](BuiltInSkills), [lanes_attribute](BuiltInSkills), [tolerance](BuiltInSkills), [obstacle_species](BuiltInSkills), [speed](BuiltInSkills), [conversations](BuiltInSkills), [accept_proposals](BuiltInSkills), [agrees](BuiltInSkills), [cancels](BuiltInSkills), [cfps](BuiltInSkills), [failures](BuiltInSkills), [informs](BuiltInSkills), [proposes](BuiltInSkills), [queries](BuiltInSkills), [refuses](BuiltInSkills), [reject_proposals](BuiltInSkills), [requests](BuiltInSkills), [requestWhens](BuiltInSkills), [subscribes](BuiltInSkills), [color](BuiltInSkills), [neighbors](BuiltInSkills), [grid_value](BuiltInSkills), [bands](BuiltInSkills), [grid_x](BuiltInSkills), [grid_y](BuiltInSkills), [mailbox](BuiltInSkills), [location](BuiltInSkills), [speed](BuiltInSkills), [heading](BuiltInSkills), [current_path](BuiltInSkills), [current_edge](BuiltInSkills), [real_speed](BuiltInSkills), [destination](BuiltInSkills), [speed](BuiltInSkills), [heading](BuiltInSkills), [pitch](BuiltInSkills), [roll](BuiltInSkills), [destination](BuiltInSkills), [network_name](BuiltInSkills), [network_groups](BuiltInSkills), [network_server](BuiltInSkills), [space](BuiltInSkills), [density](BuiltInSkills), [mass](BuiltInSkills), [velocity](BuiltInSkills), [collisionBound](BuiltInSkills), [motor](BuiltInSkills), [agents_on](BuiltInSkills), [all_agents](BuiltInSkills), [source_node](BuiltInSkills), [target_node](BuiltInSkills), [lanes](BuiltInSkills), [linked_road](BuiltInSkills), [maxspeed](BuiltInSkills), [roads_in](BuiltInSkills), [priority_roads](BuiltInSkills), [roads_out](BuiltInSkills), [stop](BuiltInSkills), [block](BuiltInSkills),    \t\n\n----\n\n## Pseudo-Variables\n\n[self](PseudoVariables#self ), [myself](PseudoVariables#myself ), [each](PseudoVariables#each)\n\n----\n\n## Types\n[bool](DataTypes#bool), [float](DataTypes#float), [int](DataTypes#int), [string](DataTypes#string), [agent](DataTypes#agent), [container](DataTypes#container)\n, [file](DataTypes#file), [geometry](DataTypes#geometry), [graph](DataTypes#graph), [list](DataTypes#list), [map](DataTypes#map), [matrix](DataTypes#matrix)\n, [pair](DataTypes#pair), [path](DataTypes#path), [point](DataTypes#point), [rgb](DataTypes#rgb), [color](DataTypes#rgb), [species](DataTypes#species), [topology](DataTypes#topology)\n\n----\n\n## [the world](GlobalSpecies)\n[torus](GlobalSpecies), [Environment Size](GlobalSpecies#Environment_Size), [world](GlobalSpecies#world), [time](GlobalSpecies#time)\n[cycle](GlobalSpecies#cycle ), [step](GlobalSpecies#step), [time](GlobalSpecies#time), [duration](GlobalSpecies#duration), [total_duration](GlobalSpecies#total_duration)\n[average_duration](GlobalSpecies#average_duration), [machine_time](GlobalSpecies#machine_time), [agents](GlobalSpecies#agents), [stop](GlobalSpecies#halt), [halt](GlobalSpecies#halt), [pause](GlobalSpecies#pause), [scheduling](GlobalSpecies#scheduling)\n\n----\n\n## Grid\n[grid_x](GridSpecies#grid_x), [grid_y](GridSpecies#grid_y), [agents](GridSpecies#agents), [color](GridSpecies#color), [grid_value](GridSpecies#grid_value) \n\n----\n\n## Other concepts\n[scheduling](RuntimeConcepts#Scheduling_of_Agents ), [step](RuntimeConcepts#Agents_Step), [Key concepts](KeyConcepts), [KeyConcepts#Vocabulary_correspondance_with_the_agent-based_paradigm_as_in_Ne correspondance GAMA Netlogo], [operators statements type species](KeyConcepts#Translation_into_a_concrete_syntax)\n\n","url":"wiki/Index.md"},{"id":"wiki/NewVersionChanges.md","title":" Java version","content":"# Java version\n\nDue to changes in the libraries used by GAMA 1.7, this version now **requires JDK/JVM 1.8** to run.\n\n# Changes between 1.6.1 and 1.7 that can influence the dynamics of models\n\n* Initialization order between the initialization of variables and the execution of the `init` block in grids\ninit -> vars in 1.6.1 / vars -> init in 1.7\n* Initialization order of agents -> now, the init block of the agents are not executed at the end of the global init, but during it.\nput a sample model to explain the order of creation and its differences\n* Initialization of vars to their default value\nmap ? list ? \n* Systematic casting and verification of types\ngive examples\n* header of CSV files: be careful, in GAMA 1.7, if the first line is detected as a header, it is not read when the file is casted as a matrix (so the first row of the matrix is not the header, but the first line of data)\ngives examples\n* the step of batch experiments is now executed after all repetitions of simulations are done (not after each one). They can however be still accessed using the attributes `simulations` (see Batch.gaml in Models Library)\n* signal and diffuse have been merged into a single statement\n* facets do not accept a space between their identifier and the `:` anymore.\n* simplification of equation/solve statements and deprecation of old facets\n* in FIPA skill, `content`is replaced everywhere with `contents`\n* in FIPA skill, `receivers` is replaced everywhere with `to`\n* in FIPA skill, `messages` is replaced by `mailbox`\n* The pseudo-attribute `user_location` has been removed (not deprecated, unfortunately) and replaced by the \"unit\" `#user_location`.\n* The actions called by an `event` layer do not need anymore to define `point` and `list` arguments to receive the mouse location and the list of agents selected. Instead, they can now use `#user_location` and they have to compute the selected agents by themselves (using an arbitrary function).\n* The random number generators now better handle seeding (larger range), but it can change the series of values previously obtained from a given seed in 1.6.1\n* all models now have a starting_date and a current_date. They then dont begin at an hypothetical \"zero\" date, but at the epoch date defined by ISO 8601 (1970/1/1). It should not change models that dont rely on dates, except that:\n* #year (and its nicknames #y, #years) and #month (and its nickname #month) do not longer have a default value (of resp. 30 days and 360 days). Instead, they are always evaluated against the current_date of the model. If no starting_date is defined, the values of #month and #year will then depend on the sequence of months and year since epoch day.\n* `as_time`, `as_system_time`, `as_date` and `as_system_date` have been removed\n\n# Enhancements in 1.7\n\n* Simulations\n * simulations can now be run in parallel withing an experiment (with their outputs, displays, etc.)\n * batch experiments inherit from this possibility and can now run their repetitions in parallel too.\n * concurrency between agents is now possible and can be controlled on a species/grid/ask basis (from multi-threaded concurrency to complete parallelism within a species/grid or between the targets of an `ask` statement)\n\n* Language\n * `gama` : a new immutable agent that can be invoked to change preferences or access to platform-only properties (like `machine-time`)\n * `date` : new data type that offers the possibility to use a real calendar, to define a `starting_date` and to query a `current_date` from a simulation, to parse dates from date files or to output them in custom formats. Dates can be added, subtracted, compared. Various new operators (`minus_months`, etc.) allow for a fine manipulation of their data. Time units (`#sec`, `#s`, `#mn`, `#minute`, `#h`, `#hour`, `#day`, etc.) can be used in conjunction with them. Interval of dates (date1 to date2) can be created and used as a basis for loops, etc. Various simple operators allow for defining conditions based on the current_date (after(date1), before(date2), since(date1), etc.).\n * font in draw\n * BDI control architecture for agents\n * file management, new operators, new statements, new skills(?), new built-in variables, files can now download their contents from the web by using standard http: https: addresses instead of file paths.\n * The `save` can now directly manipulate files and ... save them. So something like `save shape_file(\"bb.shp\", my_agents collect each.shape);` is possible. \n * `status` statement (to manipulate the status line from GAML)\n * new operators (`sum_of`, `product_of`, etc.)\n * casting of files works\n * co-modeling (importation of micro-models that can be managed within a macro-model)\n * populations of agents can now be easily exported to CSV files using the `save` statement \n * Simple `messaging` skill between agents  \n * Terminal commands can now be issued from within GAMA using the `console` operator\n * New `status` statement allows to change the text of the status.\n * light statement in 3D display provides the possibility to custom your lights (point lights, direction lights, spot lights)\n * `on_change:` facet for attributes/parameters allows to define a sequence of statements to run whenever the value changes. \n\n* Data importation\n * draw of complex shapes through obj file\n * new types fo files are taken into account: geotiff and dxf\n * viewers for common files\n * navigator: better overview of model files and their support files, addition of plugin models \n\n* Editor\n * doc on built-in elements, templates, shortcuts to common tasks, hyperlinks to files used\n * improvement in time, gathering of infos/todos\n * warnings can be removed from model files\n\n\n* Models library: \n * New models (make a list)\n\n* Preferences\n * For performances and bug fixes in displays\n * OpenGL displays should be up to 3 times faster in rendering\n\n* Simulation displays\n * fullscreen mode for displays (ESC key)\n * CTRL+O for overlay and CTRL+L for layers side controls\n * cleaner OpenGL displays (less garbage, better drawing of lines, rotation helper, sticky ROI, etc.)\n * possibility to use a new OpenGl pipeline and to define keystoning parameters (for projections)\n * faster java2D displays (esp. on zoom)\n * better user interaction (mouse move, hover, key listener)\n * a whole new set of charts\n * getting values when moving the mouse on charts\n * possibility to declare `permanent layout: ` + `#splitted`, `#horizontal`, `#vertical`, `#stacked` in the `output` section to automatically layout the display view.\n * Changing simulation names is reflected in their display titles (and it can be dynamic)\n * OpenGL displays now handle rotations of 2D and 3D shapes, combinations of textures and colours, and keystoning\n\n* Error view\n * Much faster (up to 100x !) display of errors\n * Contextual menu to copy the text of errors to clipboard or open the editor on it\n\n* Validation\n * Faster validation of multi-file models (x2 approx.)\n * Much less memory used compared to 1.6.1 (/10 approx.)\n * No more \"false positive\" errors\n\n* Console\n * Interactive console allows to directly interact with agents (experiments, simulations and any agent) and get a direct feedback on the impact of code execution using a new interpreter integrated with the console. Available in the modeling perspective (to interact with the new `gama` agent) as well as the simulation perspective (to interact with the current `experiment` agent).\n * Console now accepts colored text output \n\n* Monitor view\n * monitors can have colors\n\n* GAMA-wide online help on the language\n * A global search engine is now available in the top-right corner of the GAMA window to look for GAML idioms\n\n* Serialization\n * Serialize simulations and replay them (to come)\n * Serialization and deserialization of agents between simulations (to come)\n\n* Allow TCP, UDP and MQQT communications between agents in different simulations (to come)","url":"wiki/NewVersionChanges.md"},{"id":"wiki/OlderVersions.md","title":" Versions of GAMA","content":"# Versions of GAMA\n\n\n\nGAMA exists since 2007 and has undergone a number of changes since its first release, materialized by different versions of the platform. Although we do not maintain these versions anymore, some are still used in lectures or specific projects. This page provides a list of these versions and, for each of them, a summary of its features and a link to its documentation in PDF format.\n\n\n\n\n\n\n\n\n## GAMA 1.6.1 (June 2014)\n\nVersion 1.6.1 is the current version of GAMA. It improves many features over version 1.6 :\n\n  * OpenGL displays improvements\n  * Various enhancements for displays (overlay, focus, light, trace, DEM, colors with alpha, addition of CSS colors..)\n  * Compilation of models (errors tracked, memory, report of errors, etc.)\n  * Validation of stochastic models (random now extended to every areas of a model, incl. the operations on HashSets)\n  * GIS file handling (esp. with the possibility to pass a custom CRS)\n  * Handling of OSM data\n  * Comparison of raster and vectorial maps\n  * Traffic moving skill improvement\n  * Handling of various other file types (uniform constructors, ...)\n  * Documentation itself (both online and on the website)\n  * Testing framework and debugging tools (trace, sample)\n  * Speed of computation of several spatial operators\n  * Experiments (permanent output, access to the duration of cycles)\n  * Type system (complete parametric definitions of types)\n  * Addition of several 3D operations\n  * Auto-update mechanism of plugins\n  * Automatic importation of files/projects when double-clicked in the OS (or transmitted by command line arguments)\n  * Definition of charts (dynamic data lists, marker type, range, etc.)\n\nDocumentation:\n  * Available [online](Overview)\n\n\n![images/splash_1_61.png](resources/images/splash_1_61.png)\n\n\n\n## GAMA 1.6 (July 2013)\nThis version introduced many features over 1.5.1 :\n\n  * correction of bugs (in particular, freeze, memory consumption)\n  * performance improvement (in particular for \"big\" models)\n  * further simplification of the GAML language (assignments, manipulation of containers)\n  * integration of an agent browser\n  * improvement of the 3D integration (new operators, new display facet bug corrections...)\n  * removing of the environment block\n  * more user/simulation interaction (event statement)\n\nDocumentation:\n  * [Documentation in PDF](https://github.com/gama-platform/gama/wiki/Content/ressources/pdf/GAMAv16.pdf)\n\n\n![images/splash_1_6.png](resources/images/splash_1_6.png)\n\n\n\n## GAMA 1.5 / 1.5.1 (July & November 2012)\nKey points :\n  * Improvement of the performance and stability\n  * Simplification of the modeling language (omissible facets, types as declarations, etc.)\n  * Integration of non-spatial graphs\n  * Introduction of OpenGL displays\n  * Improvement of the user interaction in the simulation perspective\n  * Generalization of the notion of experiment\n\nVersion 1.5.1 improved some features of 1.5 :\n\n  * correction of bugs (in particular, no more freezes when reloading an experiment)\n  * performance improvement (in particular for \"big\" models)\n  * improvement of the 3D integration (new operators to add a \"z\" to geometries, bug corrections...)\n  * new models (driving\\_traffic, Vote, 3D models)\n\nDocumentation:\n  * [Documentation in PDF](https://github.com/gama-platform/gama/wiki/Content/ressources/pdf/GAMAv151.pdf)\n\n\n![images/splash_1_5.png](resources/images/splash_1_5.png)\n\n\n\n\n\n## GAMA 1.4 (December 2011)\nThis versions introduced the new integrated development environment based on XText, as well as a completely revamped modeling language, not based on XML anymore, and much easier to read and write. It also introduced new important types such as geometry, graph, path and topology in order to ease the spatial manipulation of agents.\n\nKey points :\n  * Deep refactoring of the source code\n  * New programming language (based on XText)\n  * Integration of a true IDE based on Eclipse/Xtext\n  * Deep refactoring of the meta-model\n  * Better integration of multi-level species\n  * New important notion: topology\n  * New variable types: geometry, graph, path, topology\n  * Many more novelties/improvements/enrichments...\n\nDocumentation:\n  * [Documentation in PDF](https://github.com/gama-platform/gama/wiki/Content/ressources/pdf/GAMAv14.pdf)\n\n\n![images/splash_1_4.png](resources/images/splash_1_4.png)\n\n\n\n\n## GAMA 1.3 (August 2010)\nVersion 1.3 added numerous operators to manipulate GIS data. Moreover, it integrated new features like the possibility to define custom displays and to define multi-level models. It allowed to use clustering and decision-making methods. And it greatly improved the performances of the platform.\n\nKey points :\n  * Important improvement of the performance of the platform\n  * Improvement of the simulation display\n  * Enrichment of the spatial operators/actions\n  * Integration of multi-level models\n  * Integration of clustering algorithms\n  * Integration of decision-making algorithms\n\nDocumentation:\n  * [Documentation in PDF](https://github.com/gama-platform/gama/wiki/Content/ressources/pdf/GAMAv13.pdf)\n\n\n![images/splash_1_3.png](resources/images/splash_1_3.png)\n\n\n\n\n## GAMA 1.1 (October 2009)\nThe first \"real\" release of GAMA, which incorporated several changes, including an XML editor coupled with the simulator, the possibility to take snapshots of every graphical window, save parameters and monitors for future reuse, save charts as CSV files, and definitely fixed the memory leaks observed in previous internal versions.\n\nKey points :\n  * Transformation into a more complete and versatile platform\n  * Addition of batch controllers\n  * Integration of a true modeling language (based on XML)\n  * First release as an open-source project\n\nDocumentation:\n  * [Guidebook of GAMA 1.1](https://github.com/gama-platform/gama/wiki/Content/ressources/pdf/GAMAv11.pdf)\n  * [Training session on GAMA 1.1 (Hanoi)](TrainingSessionHanoi2009)\n\n\n![images/splash_1_1.png](resources/images/splash_1_1.png)","url":"wiki/OlderVersions.md"},{"id":"wiki/OperatorsAC.md","title":" Operators (A to C)","content":"#Operators (A to C)\n \t\n----\n\n**This file is automatically generated from java files. Do Not Edit It.**\n\n----\n\n## Definition \n\nOperators in the GAML language are used to compose complex expressions. An operator performs a function on one, two, or n operands (which are other expressions and thus may be themselves composed of operators) and returns the result of this function. \n\nMost of them use a classical prefixed functional syntax (i.e. `operator_name(operand1, operand2, operand3)`, see below), with the exception of arithmetic (e.g. `+`, `/`), logical (`and`, `or`), comparison (e.g. `>`, `\n----\n\n## Priority between operators\n\nThe priority of operators determines, in the case of complex expressions composed of several operators, which one(s) will be evaluated first.\n\nGAML follows in general the traditional priorities attributed to arithmetic, boolean, comparison operators, with some twists. Namely:\n* the constructor operators, like `::`, used to compose pairs of operands, have the lowest priority of all operators (e.g. `a > b :: b > c` will return a pair of boolean values, which means that the two comparisons are evaluated before the operator applies. Similarly, `[a > 10, b > 5]` will return a list of boolean values.\n* it is followed by the `?:` operator, the functional if-else (e.g. ` a > b ? a + 10 : a - 10` will return the result of the if-else).\n* next are the logical operators, `and` and `or` (e.g. `a > b or b > c` will return the value of the test)\n* next are the comparison operators (i.e. `>`, `=`, `=`, `!=`)\n* next the arithmetic operators in their logical order (multiplicative operators have a higher priority than additive operators)\n* next the unary operators `-` and `!`\n* next the access operators `.` and `[]` (e.g. `{1,2,3}.x > 20 + {4,5,6}.y` will return the result of the comparison between the x and y ordinates of the two points)\n* and finally the functional operators, which have the highest priority of all.\n\n----\n\n## Using actions as operators\n\nActions defined in species can be used as operators, provided they are called on the correct agent. The syntax is that of normal functional operators, but the agent that will perform the action must be added as the first operand.\n\nFor instance, if the following species is defined:\n\n```\nspecies spec1 {\n        int min(int x, int y) {\n                return x > y ? x : y;\n        }\n}\n```\n\nAny agent instance of spec1 can use `min` as an operator (if the action conflicts with an existing operator, a warning will be emitted). For instance, in the same model, the following line is perfectly acceptable:\n\n```\nglobal {\n        init {\n                create spec1;\n                spec1 my_agent ](OperatorsAC#>), [>=](OperatorsAC#>=), [between](OperatorsAC#between), \n\n----\n\n### Containers-related operators\n[-](OperatorsAC#-), [::](OperatorsAC#::), [+](OperatorsAC#+), [accumulate](OperatorsAC#accumulate), [among](OperatorsAC#among), [at](OperatorsAC#at), [collect](OperatorsAC#collect), [contains](OperatorsAC#contains), [contains_all](OperatorsAC#contains_all), [contains_any](OperatorsAC#contains_any), [count](OperatorsAC#count), [distinct](OperatorsDM#distinct), [empty](OperatorsDM#empty), [every](OperatorsDM#every), [first](OperatorsDM#first), [first_with](OperatorsDM#first_with), [get](OperatorsDM#get), [group_by](OperatorsDM#group_by), [in](OperatorsDM#in), [index_by](OperatorsDM#index_by), [inter](OperatorsDM#inter), [interleave](OperatorsDM#interleave), [internal_at](OperatorsDM#internal_at), [internal_integrated_value](OperatorsDM#internal_integrated_value), [last](OperatorsDM#last), [last_with](OperatorsDM#last_with), [length](OperatorsDM#length), [max](OperatorsDM#max), [max_of](OperatorsDM#max_of), [mean](OperatorsDM#mean), [mean_of](OperatorsDM#mean_of), [median](OperatorsDM#median), [min](OperatorsDM#min), [min_of](OperatorsDM#min_of), [mul](OperatorsDM#mul), [one_of](OperatorsNZ#one_of), [product_of](OperatorsNZ#product_of), [range](OperatorsNZ#range), [reverse](OperatorsNZ#reverse), [shuffle](OperatorsNZ#shuffle), [sort_by](OperatorsNZ#sort_by), [sum](OperatorsNZ#sum), [sum_of](OperatorsNZ#sum_of), [union](OperatorsNZ#union), [variance_of](OperatorsNZ#variance_of), [where](OperatorsNZ#where), [with_max_of](OperatorsNZ#with_max_of), [with_min_of](OperatorsNZ#with_min_of), \n\n----\n\n### Date-related operators\n[-](OperatorsAC#-), [!=](OperatorsAC#!=), [+](OperatorsAC#+), [](OperatorsAC#>), [>=](OperatorsAC#>=), [after](OperatorsAC#after), [before](OperatorsAC#before), [between](OperatorsAC#between), [every](OperatorsDM#every), [milliseconds_between](OperatorsDM#milliseconds_between), [minus_days](OperatorsDM#minus_days), [minus_hours](OperatorsDM#minus_hours), [minus_minutes](OperatorsDM#minus_minutes), [minus_months](OperatorsDM#minus_months), [minus_ms](OperatorsDM#minus_ms), [minus_weeks](OperatorsDM#minus_weeks), [minus_years](OperatorsDM#minus_years), [months_between](OperatorsDM#months_between), [plus_days](OperatorsNZ#plus_days), [plus_hours](OperatorsNZ#plus_hours), [plus_minutes](OperatorsNZ#plus_minutes), [plus_months](OperatorsNZ#plus_months), [plus_ms](OperatorsNZ#plus_ms), [plus_weeks](OperatorsNZ#plus_weeks), [plus_years](OperatorsNZ#plus_years), [since](OperatorsNZ#since), [to](OperatorsNZ#to), [until](OperatorsNZ#until), [years_between](OperatorsNZ#years_between), \n\n----\n\n### Dates\n\n\n----\n\n### Driving operators\n[as_driving_graph](OperatorsAC#as_driving_graph), \n\n----\n\n### edge\n[edge_between](OperatorsDM#edge_between), \n\n----\n\n### EDP-related operators\n[diff](OperatorsDM#diff), [diff2](OperatorsDM#diff2), [internal_zero_order_equation](OperatorsDM#internal_zero_order_equation), \n\n----\n\n### Files-related operators\n[crs](OperatorsAC#crs), [file](OperatorsDM#file), [file_exists](OperatorsDM#file_exists), [folder](OperatorsDM#folder), [get](OperatorsDM#get), [new_folder](OperatorsNZ#new_folder), [osm_file](OperatorsNZ#osm_file), [read](OperatorsNZ#read), [writable](OperatorsNZ#writable), \n\n----\n\n### FIPA-related operators\n[conversation](OperatorsAC#conversation), [message](OperatorsDM#message), \n\n----\n\n### Graphs-related operators\n[add_edge](OperatorsAC#add_edge), [add_node](OperatorsAC#add_node), [adjacency](OperatorsAC#adjacency), [agent_from_geometry](OperatorsAC#agent_from_geometry), [all_pairs_shortest_path](OperatorsAC#all_pairs_shortest_path), [alpha_index](OperatorsAC#alpha_index), [as_distance_graph](OperatorsAC#as_distance_graph), [as_edge_graph](OperatorsAC#as_edge_graph), [as_intersection_graph](OperatorsAC#as_intersection_graph), [as_path](OperatorsAC#as_path), [beta_index](OperatorsAC#beta_index), [betweenness_centrality](OperatorsAC#betweenness_centrality), [biggest_cliques_of](OperatorsAC#biggest_cliques_of), [connected_components_of](OperatorsAC#connected_components_of), [connectivity_index](OperatorsAC#connectivity_index), [contains_edge](OperatorsAC#contains_edge), [contains_vertex](OperatorsAC#contains_vertex), [degree_of](OperatorsDM#degree_of), [directed](OperatorsDM#directed), [edge](OperatorsDM#edge), [edge_between](OperatorsDM#edge_between), [edge_betweenness](OperatorsDM#edge_betweenness), [edges](OperatorsDM#edges), [gamma_index](OperatorsDM#gamma_index), [generate_barabasi_albert](OperatorsDM#generate_barabasi_albert), [generate_complete_graph](OperatorsDM#generate_complete_graph), [generate_watts_strogatz](OperatorsDM#generate_watts_strogatz), [grid_cells_to_graph](OperatorsDM#grid_cells_to_graph), [in_degree_of](OperatorsDM#in_degree_of), [in_edges_of](OperatorsDM#in_edges_of), [layout](OperatorsDM#layout), [load_graph_from_file](OperatorsDM#load_graph_from_file), [load_shortest_paths](OperatorsDM#load_shortest_paths), [maximal_cliques_of](OperatorsDM#maximal_cliques_of), [nb_cycles](OperatorsNZ#nb_cycles), [neighbors_of](OperatorsNZ#neighbors_of), [node](OperatorsNZ#node), [nodes](OperatorsNZ#nodes), [out_degree_of](OperatorsNZ#out_degree_of), [out_edges_of](OperatorsNZ#out_edges_of), [path_between](OperatorsNZ#path_between), [paths_between](OperatorsNZ#paths_between), [predecessors_of](OperatorsNZ#predecessors_of), [remove_node_from](OperatorsNZ#remove_node_from), [rewire_n](OperatorsNZ#rewire_n), [source_of](OperatorsNZ#source_of), [spatial_graph](OperatorsNZ#spatial_graph), [successors_of](OperatorsNZ#successors_of), [sum](OperatorsNZ#sum), [target_of](OperatorsNZ#target_of), [undirected](OperatorsNZ#undirected), [use_cache](OperatorsNZ#use_cache), [weight_of](OperatorsNZ#weight_of), [with_optimizer_type](OperatorsNZ#with_optimizer_type), [with_weights](OperatorsNZ#with_weights), \n\n----\n\n### Grid-related operators\n[as_4_grid](OperatorsAC#as_4_grid), [as_grid](OperatorsAC#as_grid), [as_hexagonal_grid](OperatorsAC#as_hexagonal_grid), [grid_at](OperatorsDM#grid_at), [path_between](OperatorsNZ#path_between), \n\n----\n\n### Iterator operators\n[accumulate](OperatorsAC#accumulate), [as_map](OperatorsAC#as_map), [collect](OperatorsAC#collect), [count](OperatorsAC#count), [distribution_of](OperatorsDM#distribution_of), [distribution_of](OperatorsDM#distribution_of), [distribution_of](OperatorsDM#distribution_of), [distribution2d_of](OperatorsDM#distribution2d_of), [distribution2d_of](OperatorsDM#distribution2d_of), [distribution2d_of](OperatorsDM#distribution2d_of), [first_with](OperatorsDM#first_with), [frequency_of](OperatorsDM#frequency_of), [group_by](OperatorsDM#group_by), [index_by](OperatorsDM#index_by), [last_with](OperatorsDM#last_with), [max_of](OperatorsDM#max_of), [mean_of](OperatorsDM#mean_of), [min_of](OperatorsDM#min_of), [product_of](OperatorsNZ#product_of), [sort_by](OperatorsNZ#sort_by), [sum_of](OperatorsNZ#sum_of), [variance_of](OperatorsNZ#variance_of), [where](OperatorsNZ#where), [with_max_of](OperatorsNZ#with_max_of), [with_min_of](OperatorsNZ#with_min_of), \n\n----\n\n### List-related operators\n[copy_between](OperatorsAC#copy_between), [index_of](OperatorsDM#index_of), [last_index_of](OperatorsDM#last_index_of), \n\n----\n\n### Logical operators\n[:](OperatorsAC#:), [!](OperatorsAC#!), [?](OperatorsAC#?), [and](OperatorsAC#and), [or](OperatorsNZ#or), \n\n----\n\n### Map comparaison operators\n[fuzzy_kappa](OperatorsDM#fuzzy_kappa), [fuzzy_kappa_sim](OperatorsDM#fuzzy_kappa_sim), [kappa](OperatorsDM#kappa), [kappa_sim](OperatorsDM#kappa_sim), [percent_absolute_deviation](OperatorsNZ#percent_absolute_deviation), \n\n----\n\n### Map-related operators\n[as_map](OperatorsAC#as_map), [index_of](OperatorsDM#index_of), [last_index_of](OperatorsDM#last_index_of), \n\n----\n\n### Material\n[material](OperatorsDM#material), \n\n----\n\n### Matrix-related operators\n[-](OperatorsAC#-), [/](OperatorsAC#/), [.](OperatorsAC#.), [*](OperatorsAC#*), [+](OperatorsAC#+), [append_horizontally](OperatorsAC#append_horizontally), [append_vertically](OperatorsAC#append_vertically), [column_at](OperatorsAC#column_at), [columns_list](OperatorsAC#columns_list), [determinant](OperatorsDM#determinant), [eigenvalues](OperatorsDM#eigenvalues), [index_of](OperatorsDM#index_of), [inverse](OperatorsDM#inverse), [last_index_of](OperatorsDM#last_index_of), [row_at](OperatorsNZ#row_at), [rows_list](OperatorsNZ#rows_list), [shuffle](OperatorsNZ#shuffle), [trace](OperatorsNZ#trace), [transpose](OperatorsNZ#transpose), \n\n----\n\n### multicriteria operators\n[electre_DM](OperatorsDM#electre_dm), [evidence_theory_DM](OperatorsDM#evidence_theory_dm), [promethee_DM](OperatorsNZ#promethee_dm), [weighted_means_DM](OperatorsNZ#weighted_means_dm), \n\n----\n\n### Path-related operators\n[agent_from_geometry](OperatorsAC#agent_from_geometry), [all_pairs_shortest_path](OperatorsAC#all_pairs_shortest_path), [as_path](OperatorsAC#as_path), [load_shortest_paths](OperatorsDM#load_shortest_paths), [path_between](OperatorsNZ#path_between), [path_to](OperatorsNZ#path_to), [paths_between](OperatorsNZ#paths_between), [use_cache](OperatorsNZ#use_cache), \n\n----\n\n### Points-related operators\n[-](OperatorsAC#-), [/](OperatorsAC#/), [*](OperatorsAC#*), [+](OperatorsAC#+), [](OperatorsAC#>), [>=](OperatorsAC#>=), [add_point](OperatorsAC#add_point), [angle_between](OperatorsAC#angle_between), [any_location_in](OperatorsAC#any_location_in), [centroid](OperatorsAC#centroid), [closest_points_with](OperatorsAC#closest_points_with), [farthest_point_to](OperatorsDM#farthest_point_to), [grid_at](OperatorsDM#grid_at), [norm](OperatorsNZ#norm), [point](OperatorsNZ#point), [points_along](OperatorsNZ#points_along), [points_at](OperatorsNZ#points_at), [points_on](OperatorsNZ#points_on), \n\n----\n\n### Random operators\n[binomial](OperatorsAC#binomial), [flip](OperatorsDM#flip), [gauss](OperatorsDM#gauss), [poisson](OperatorsNZ#poisson), [rnd](OperatorsNZ#rnd), [rnd_choice](OperatorsNZ#rnd_choice), [sample](OperatorsNZ#sample), [shuffle](OperatorsNZ#shuffle), [skew_gauss](OperatorsNZ#skew_gauss), [truncated_gauss](OperatorsNZ#truncated_gauss), \n\n----\n\n### ReverseOperators\n\n\n----\n\n### Shape\n[arc](OperatorsAC#arc), [box](OperatorsAC#box), [circle](OperatorsAC#circle), [cone](OperatorsAC#cone), [cone3D](OperatorsAC#cone3d), [cross](OperatorsAC#cross), [cube](OperatorsAC#cube), [curve](OperatorsAC#curve), [cylinder](OperatorsAC#cylinder), [ellipse](OperatorsDM#ellipse), [envelope](OperatorsDM#envelope), [geometry_collection](OperatorsDM#geometry_collection), [hexagon](OperatorsDM#hexagon), [line](OperatorsDM#line), [link](OperatorsDM#link), [plan](OperatorsNZ#plan), [polygon](OperatorsNZ#polygon), [polyhedron](OperatorsNZ#polyhedron), [pyramid](OperatorsNZ#pyramid), [rectangle](OperatorsNZ#rectangle), [sphere](OperatorsNZ#sphere), [square](OperatorsNZ#square), [squircle](OperatorsNZ#squircle), [teapot](OperatorsNZ#teapot), [triangle](OperatorsNZ#triangle), \n\n----\n\n### Spatial operators\n[-](OperatorsAC#-), [*](OperatorsAC#*), [+](OperatorsAC#+), [add_point](OperatorsAC#add_point), [agent_closest_to](OperatorsAC#agent_closest_to), [agent_farthest_to](OperatorsAC#agent_farthest_to), [agents_at_distance](OperatorsAC#agents_at_distance), [agents_inside](OperatorsAC#agents_inside), [agents_overlapping](OperatorsAC#agents_overlapping), [angle_between](OperatorsAC#angle_between), [any_location_in](OperatorsAC#any_location_in), [arc](OperatorsAC#arc), [around](OperatorsAC#around), [as_4_grid](OperatorsAC#as_4_grid), [as_grid](OperatorsAC#as_grid), [as_hexagonal_grid](OperatorsAC#as_hexagonal_grid), [at_distance](OperatorsAC#at_distance), [at_location](OperatorsAC#at_location), [box](OperatorsAC#box), [centroid](OperatorsAC#centroid), [circle](OperatorsAC#circle), [clean](OperatorsAC#clean), [closest_points_with](OperatorsAC#closest_points_with), [closest_to](OperatorsAC#closest_to), [cone](OperatorsAC#cone), [cone3D](OperatorsAC#cone3d), [convex_hull](OperatorsAC#convex_hull), [covers](OperatorsAC#covers), [cross](OperatorsAC#cross), [crosses](OperatorsAC#crosses), [crs](OperatorsAC#crs), [CRS_transform](OperatorsAC#crs_transform), [cube](OperatorsAC#cube), [curve](OperatorsAC#curve), [cylinder](OperatorsAC#cylinder), [dem](OperatorsDM#dem), [direction_between](OperatorsDM#direction_between), [disjoint_from](OperatorsDM#disjoint_from), [distance_between](OperatorsDM#distance_between), [distance_to](OperatorsDM#distance_to), [ellipse](OperatorsDM#ellipse), [envelope](OperatorsDM#envelope), [farthest_point_to](OperatorsDM#farthest_point_to), [farthest_to](OperatorsDM#farthest_to), [geometry_collection](OperatorsDM#geometry_collection), [gini](OperatorsDM#gini), [hexagon](OperatorsDM#hexagon), [hierarchical_clustering](OperatorsDM#hierarchical_clustering), [IDW](OperatorsAC#idw), [inside](OperatorsDM#inside), [inter](OperatorsDM#inter), [intersects](OperatorsDM#intersects), [line](OperatorsDM#line), [link](OperatorsDM#link), [masked_by](OperatorsDM#masked_by), [moran](OperatorsDM#moran), [neighbors_at](OperatorsNZ#neighbors_at), [neighbors_of](OperatorsNZ#neighbors_of), [overlapping](OperatorsNZ#overlapping), [overlaps](OperatorsNZ#overlaps), [partially_overlaps](OperatorsNZ#partially_overlaps), [path_between](OperatorsNZ#path_between), [path_to](OperatorsNZ#path_to), [plan](OperatorsNZ#plan), [points_along](OperatorsNZ#points_along), [points_at](OperatorsNZ#points_at), [points_on](OperatorsNZ#points_on), [polygon](OperatorsNZ#polygon), [polyhedron](OperatorsNZ#polyhedron), [pyramid](OperatorsNZ#pyramid), [rectangle](OperatorsNZ#rectangle), [rgb_to_xyz](OperatorsNZ#rgb_to_xyz), [rotated_by](OperatorsNZ#rotated_by), [round](OperatorsNZ#round), [scaled_to](OperatorsNZ#scaled_to), [set_z](OperatorsNZ#set_z), [simple_clustering_by_distance](OperatorsNZ#simple_clustering_by_distance), [simplification](OperatorsNZ#simplification), [skeletonize](OperatorsNZ#skeletonize), [smooth](OperatorsNZ#smooth), [sphere](OperatorsNZ#sphere), [split_at](OperatorsNZ#split_at), [split_geometry](OperatorsNZ#split_geometry), [split_lines](OperatorsNZ#split_lines), [square](OperatorsNZ#square), [squircle](OperatorsNZ#squircle), [teapot](OperatorsNZ#teapot), [to_GAMA_CRS](OperatorsNZ#to_gama_crs), [to_rectangles](OperatorsNZ#to_rectangles), [to_squares](OperatorsNZ#to_squares), [touches](OperatorsNZ#touches), [towards](OperatorsNZ#towards), [transformed_by](OperatorsNZ#transformed_by), [translated_by](OperatorsNZ#translated_by), [triangle](OperatorsNZ#triangle), [triangulate](OperatorsNZ#triangulate), [union](OperatorsNZ#union), [using](OperatorsNZ#using), [voronoi](OperatorsNZ#voronoi), [with_precision](OperatorsNZ#with_precision), [without_holes](OperatorsNZ#without_holes), \n\n----\n\n### Spatial properties operators\n[covers](OperatorsAC#covers), [crosses](OperatorsAC#crosses), [intersects](OperatorsDM#intersects), [partially_overlaps](OperatorsNZ#partially_overlaps), [touches](OperatorsNZ#touches), \n\n----\n\n### Spatial queries operators\n[agent_closest_to](OperatorsAC#agent_closest_to), [agent_farthest_to](OperatorsAC#agent_farthest_to), [agents_at_distance](OperatorsAC#agents_at_distance), [agents_inside](OperatorsAC#agents_inside), [agents_overlapping](OperatorsAC#agents_overlapping), [at_distance](OperatorsAC#at_distance), [closest_to](OperatorsAC#closest_to), [farthest_to](OperatorsDM#farthest_to), [inside](OperatorsDM#inside), [neighbors_at](OperatorsNZ#neighbors_at), [neighbors_of](OperatorsNZ#neighbors_of), [overlapping](OperatorsNZ#overlapping), \n\n----\n\n### Spatial relations operators\n[direction_between](OperatorsDM#direction_between), [distance_between](OperatorsDM#distance_between), [distance_to](OperatorsDM#distance_to), [path_between](OperatorsNZ#path_between), [path_to](OperatorsNZ#path_to), [towards](OperatorsNZ#towards), \n\n----\n\n### Spatial statistical operators\n[hierarchical_clustering](OperatorsDM#hierarchical_clustering), [simple_clustering_by_distance](OperatorsNZ#simple_clustering_by_distance), \n\n----\n\n### Spatial transformations operators\n[-](OperatorsAC#-), [*](OperatorsAC#*), [+](OperatorsAC#+), [as_4_grid](OperatorsAC#as_4_grid), [as_grid](OperatorsAC#as_grid), [as_hexagonal_grid](OperatorsAC#as_hexagonal_grid), [at_location](OperatorsAC#at_location), [clean](OperatorsAC#clean), [convex_hull](OperatorsAC#convex_hull), [CRS_transform](OperatorsAC#crs_transform), [rotated_by](OperatorsNZ#rotated_by), [scaled_to](OperatorsNZ#scaled_to), [simplification](OperatorsNZ#simplification), [skeletonize](OperatorsNZ#skeletonize), [smooth](OperatorsNZ#smooth), [split_geometry](OperatorsNZ#split_geometry), [split_lines](OperatorsNZ#split_lines), [to_GAMA_CRS](OperatorsNZ#to_gama_crs), [to_rectangles](OperatorsNZ#to_rectangles), [to_squares](OperatorsNZ#to_squares), [transformed_by](OperatorsNZ#transformed_by), [translated_by](OperatorsNZ#translated_by), [triangulate](OperatorsNZ#triangulate), [voronoi](OperatorsNZ#voronoi), [without_holes](OperatorsNZ#without_holes), \n\n----\n\n### Species-related operators\n[index_of](OperatorsDM#index_of), [last_index_of](OperatorsDM#last_index_of), [of_generic_species](OperatorsNZ#of_generic_species), [of_species](OperatorsNZ#of_species), \n\n----\n\n### Statistical operators\n[build](OperatorsAC#build), [corR](OperatorsAC#corr), [dbscan](OperatorsDM#dbscan), [distribution_of](OperatorsDM#distribution_of), [distribution2d_of](OperatorsDM#distribution2d_of), [frequency_of](OperatorsDM#frequency_of), [gamma_rnd](OperatorsDM#gamma_rnd), [geometric_mean](OperatorsDM#geometric_mean), [gini](OperatorsDM#gini), [harmonic_mean](OperatorsDM#harmonic_mean), [hierarchical_clustering](OperatorsDM#hierarchical_clustering), [kmeans](OperatorsDM#kmeans), [kurtosis](OperatorsDM#kurtosis), [max](OperatorsDM#max), [mean](OperatorsDM#mean), [mean_deviation](OperatorsDM#mean_deviation), [meanR](OperatorsDM#meanr), [median](OperatorsDM#median), [min](OperatorsDM#min), [moran](OperatorsDM#moran), [mul](OperatorsDM#mul), [predict](OperatorsNZ#predict), [simple_clustering_by_distance](OperatorsNZ#simple_clustering_by_distance), [skewness](OperatorsNZ#skewness), [standard_deviation](OperatorsNZ#standard_deviation), [sum](OperatorsNZ#sum), [variance](OperatorsNZ#variance), \n\n----\n\n### Strings-related operators\n[+](OperatorsAC#+), [](OperatorsAC#>), [>=](OperatorsAC#>=), [at](OperatorsAC#at), [char](OperatorsAC#char), [contains](OperatorsAC#contains), [contains_all](OperatorsAC#contains_all), [contains_any](OperatorsAC#contains_any), [copy_between](OperatorsAC#copy_between), [date](OperatorsDM#date), [empty](OperatorsDM#empty), [first](OperatorsDM#first), [in](OperatorsDM#in), [indented_by](OperatorsDM#indented_by), [index_of](OperatorsDM#index_of), [is_number](OperatorsDM#is_number), [last](OperatorsDM#last), [last_index_of](OperatorsDM#last_index_of), [length](OperatorsDM#length), [lower_case](OperatorsDM#lower_case), [replace](OperatorsNZ#replace), [replace_regex](OperatorsNZ#replace_regex), [reverse](OperatorsNZ#reverse), [sample](OperatorsNZ#sample), [shuffle](OperatorsNZ#shuffle), [split_with](OperatorsNZ#split_with), [string](OperatorsNZ#string), [upper_case](OperatorsNZ#upper_case), \n\n----\n\n### System\n[.](OperatorsAC#.), [command](OperatorsAC#command), [copy](OperatorsAC#copy), [dead](OperatorsDM#dead), [eval_gaml](OperatorsDM#eval_gaml), [every](OperatorsDM#every), [user_input](OperatorsNZ#user_input), \n\n----\n\n### Time-related operators\n[date](OperatorsDM#date), [string](OperatorsNZ#string), \n\n----\n\n### Types-related operators\n\n\n----\n\n### User control operators\n[user_input](OperatorsNZ#user_input), \n\t\n----\n\n## Operators\n\t\n    \t\n----\n\n[//]: # (keyword|operator_-)\n### `-`\n\n#### Possible use: \n  *  **`-`** (`int`) --->  `int`\n  *  **`-`** (`point`) --->  `point`\n  *  **`-`** (`float`) --->  `float`\n  * `int` **`-`** `float` --->  `float`\n  *  **`-`** (`int` , `float`) --->  `float`\n  * `int` **`-`** `int` --->  `int`\n  *  **`-`** (`int` , `int`) --->  `int`\n  * `matrix` **`-`** `float` --->  `matrix`\n  *  **`-`** (`matrix` , `float`) --->  `matrix`\n  * `float` **`-`** `matrix` --->  `matrix`\n  *  **`-`** (`float` , `matrix`) --->  `matrix`\n  * `date` **`-`** `float` --->  `date`\n  *  **`-`** (`date` , `float`) --->  `date`\n  * `species` **`-`** `agent` --->  `container`\n  *  **`-`** (`species` , `agent`) --->  `container`\n  * `date` **`-`** `date` --->  `float`\n  *  **`-`** (`date` , `date`) --->  `float`\n  * `matrix` **`-`** `matrix` --->  `matrix`\n  *  **`-`** (`matrix` , `matrix`) --->  `matrix`\n  * `point` **`-`** `int` --->  `point`\n  *  **`-`** (`point` , `int`) --->  `point`\n  * `date` **`-`** `int` --->  `date`\n  *  **`-`** (`date` , `int`) --->  `date`\n  * `point` **`-`** `float` --->  `point`\n  *  **`-`** (`point` , `float`) --->  `point`\n  * `float` **`-`** `float` --->  `float`\n  *  **`-`** (`float` , `float`) --->  `float`\n  * `rgb` **`-`** `rgb` --->  `rgb`\n  *  **`-`** (`rgb` , `rgb`) --->  `rgb`\n  * `int` **`-`** `matrix` --->  `matrix`\n  *  **`-`** (`int` , `matrix`) --->  `matrix`\n  * `container` **`-`** `container` --->  `container`\n  *  **`-`** (`container` , `container`) --->  `container`\n  * `rgb` **`-`** `int` --->  `rgb`\n  *  **`-`** (`rgb` , `int`) --->  `rgb`\n  * `container` **`-`** `unknown` --->  `container`\n  *  **`-`** (`container` , `unknown`) --->  `container`\n  * `point` **`-`** `point` --->  `point`\n  *  **`-`** (`point` , `point`) --->  `point`\n  * `float` **`-`** `int` --->  `float`\n  *  **`-`** (`float` , `int`) --->  `float`\n  * `geometry` **`-`** `geometry` --->  `geometry`\n  *  **`-`** (`geometry` , `geometry`) --->  `geometry`\n  * `matrix` **`-`** `int` --->  `matrix`\n  *  **`-`** (`matrix` , `int`) --->  `matrix`\n  * `geometry` **`-`** `float` --->  `geometry`\n  *  **`-`** (`geometry` , `float`) --->  `geometry`\n  * `map` **`-`** `map` --->  `map`\n  *  **`-`** (`map` , `map`) --->  `map`\n  * `map` **`-`** `pair` --->  `map`\n  *  **`-`** (`map` , `pair`) --->  `map`\n  * `geometry` **`-`** `container` --->  `geometry`\n  *  **`-`** (`geometry` , `container`) --->  `geometry` \n\n#### Result: \nReturns the difference of the two operands.\nIf it is used as an unary operator, it returns the opposite of the operand.  \n\n#### Comment: \nThe behavior of the operator depends on the type of the operands.\n\n#### Special cases:     \n  * if the left operand is a species and the right operand is an agent of the species, - returns a list containing all the agents of the species minus this agent    \n  * if both operands are containers and the right operand is empty, - returns the left operand    \n  * if both operands are numbers, performs a normal arithmetic difference and returns a float if one of them is a float. \n  \n```\nint var7  var17  var18  var20  var21   `unknown`\n  *  **`:`** (`unknown` , `unknown`) --->  `unknown`    \n\n#### See also: \n[?](OperatorsAC#?), \n    \t\n----\n\n[//]: # (keyword|operator_::)\n### `::`\n\n#### Possible use: \n  * `any expression` **`::`** `any expression` --->  `pair`\n  *  **`::`** (`any expression` , `any expression`) --->  `pair` \n\n#### Result: \nproduces a new pair combining the left and the right operands\n\n#### Special cases:     \n  * nil is not acceptable as a key (although it is as a value). If such a case happens, :: will throw an appropriate error\n    \t\n----\n\n[//]: # (keyword|operator_!)\n### `!`\n\n#### Possible use: \n  *  **`!`** (`bool`) --->  `bool` \n\n#### Result: \nopposite boolean value.\n\n#### Special cases:     \n  * if the parameter is not boolean, it is casted to a boolean value.\n\n#### Examples: \n```\nbool var0   `bool`\n  *  **`!=`** (`float` , `float`) --->  `bool`\n  * `unknown` **`!=`** `unknown` --->  `bool`\n  *  **`!=`** (`unknown` , `unknown`) --->  `bool`\n  * `date` **`!=`** `date` --->  `bool`\n  *  **`!=`** (`date` , `date`) --->  `bool`\n  * `float` **`!=`** `int` --->  `bool`\n  *  **`!=`** (`float` , `int`) --->  `bool`\n  * `int` **`!=`** `float` --->  `bool`\n  *  **`!=`** (`int` , `float`) --->  `bool` \n\n#### Result: \ntrue if both operands are different, false otherwise\n\n#### Examples: \n```\nbool var0 ](OperatorsAC#>), [=](OperatorsAC#>=), [<=](OperatorsAC#<=), \n    \t\n----\n\n[//]: # (keyword|operator_?)\n### `?`\n\n#### Possible use: \n  * `bool` **`?`** `any expression` --->  `unknown`\n  *  **`?`** (`bool` , `any expression`) --->  `unknown` \n\n#### Result: \nIt is used in combination with the : operator: if the left-hand operand evaluates to true, returns the value of the left-hand operand of the :, otherwise that of the right-hand operand of the :  \n\n#### Comment: \nThese functional tests can be combined together.\n\n#### Examples: \n```\nlist var0  20) ? 'above' : 'below'); \t// var0 equals ['below', 'below', 'above', 'below', 'below', 'above']\nrgb color   `rgb`\n  *  **`/`** (`rgb` , `float`) --->  `rgb`\n  * `float` **`/`** `int` --->  `float`\n  *  **`/`** (`float` , `int`) --->  `float`\n  * `point` **`/`** `float` --->  `point`\n  *  **`/`** (`point` , `float`) --->  `point`\n  * `int` **`/`** `int` --->  `float`\n  *  **`/`** (`int` , `int`) --->  `float`\n  * `int` **`/`** `float` --->  `float`\n  *  **`/`** (`int` , `float`) --->  `float`\n  * `matrix` **`/`** `float` --->  `matrix`\n  *  **`/`** (`matrix` , `float`) --->  `matrix`\n  * `point` **`/`** `int` --->  `point`\n  *  **`/`** (`point` , `int`) --->  `point`\n  * `matrix` **`/`** `matrix` --->  `matrix`\n  *  **`/`** (`matrix` , `matrix`) --->  `matrix`\n  * `matrix` **`/`** `int` --->  `matrix`\n  *  **`/`** (`matrix` , `int`) --->  `matrix`\n  * `float` **`/`** `float` --->  `float`\n  *  **`/`** (`float` , `float`) --->  `float`\n  * `rgb` **`/`** `int` --->  `rgb`\n  *  **`/`** (`rgb` , `int`) --->  `rgb` \n\n#### Result: \nReturns the division of the two operands.\n\n#### Special cases:     \n  * if the right-hand operand is equal to zero, raises a \"Division by zero\" exception    \n  * if one operand is a color and the other a double, returns a new color resulting from the division of each component of the color by the right operand. The result on each component is then truncated. \n  \n```\nrgb var0   `matrix`\n  *  **`.`** (`matrix` , `matrix`) --->  `matrix`\n  * `agent` **`.`** `any expression` --->  `unknown`\n  *  **`.`** (`agent` , `any expression`) --->  `unknown` \n\n#### Result: \nIt has two different uses: it can be the dot product between 2 matrices or return an evaluation of the expression (right-hand operand) in the scope the given agent.\n\n#### Special cases:     \n  * if the agent is nil or dead, throws an exception    \n  * if both operands are matrix, returns the dot product of them \n  \n```\nmatrix var0   `float`\n  *  **`^`** (`int` , `float`) --->  `float`\n  * `float` **`^`** `float` --->  `float`\n  *  **`^`** (`float` , `float`) --->  `float`\n  * `int` **`^`** `int` --->  `float`\n  *  **`^`** (`int` , `int`) --->  `float`\n  * `float` **`^`** `int` --->  `float`\n  *  **`^`** (`float` , `int`) --->  `float` \n\n#### Result: \nReturns the value (always a float) of the left operand raised to the power of the right operand.\n\n#### Special cases:     \n  * if the right-hand operand is equal to 0, returns 1    \n  * if it is equal to 1, returns the left-hand operand.    \n  * Various examples of power \n  \n```\nfloat var1   `int`\n  *  **`*`** (`int` , `int`) --->  `int`\n  * `matrix` **`*`** `int` --->  `matrix`\n  *  **`*`** (`matrix` , `int`) --->  `matrix`\n  * `point` **`*`** `point` --->  `float`\n  *  **`*`** (`point` , `point`) --->  `float`\n  * `int` **`*`** `float` --->  `float`\n  *  **`*`** (`int` , `float`) --->  `float`\n  * `float` **`*`** `float` --->  `float`\n  *  **`*`** (`float` , `float`) --->  `float`\n  * `matrix` **`*`** `matrix` --->  `matrix`\n  *  **`*`** (`matrix` , `matrix`) --->  `matrix`\n  * `point` **`*`** `int` --->  `point`\n  *  **`*`** (`point` , `int`) --->  `point`\n  * `float` **`*`** `matrix` --->  `matrix`\n  *  **`*`** (`float` , `matrix`) --->  `matrix`\n  * `geometry` **`*`** `point` --->  `geometry`\n  *  **`*`** (`geometry` , `point`) --->  `geometry`\n  * `point` **`*`** `float` --->  `point`\n  *  **`*`** (`point` , `float`) --->  `point`\n  * `int` **`*`** `matrix` --->  `matrix`\n  *  **`*`** (`int` , `matrix`) --->  `matrix`\n  * `float` **`*`** `int` --->  `float`\n  *  **`*`** (`float` , `int`) --->  `float`\n  * `rgb` **`*`** `int` --->  `rgb`\n  *  **`*`** (`rgb` , `int`) --->  `rgb`\n  * `matrix` **`*`** `float` --->  `matrix`\n  *  **`*`** (`matrix` , `float`) --->  `matrix`\n  * `geometry` **`*`** `float` --->  `geometry`\n  *  **`*`** (`geometry` , `float`) --->  `geometry` \n\n#### Result: \nReturns the product of the two operands.\n\n#### Special cases:     \n  * if both operands are numbers (float or int), performs a normal arithmetic product and returns a float if one of them is a float. \n  \n```\nint var1  m   `string`\n  *  **`+`** (`string` , `string`) --->  `string`\n  * `date` **`+`** `float` --->  `date`\n  *  **`+`** (`date` , `float`) --->  `date`\n  * `map` **`+`** `pair` --->  `map`\n  *  **`+`** (`map` , `pair`) --->  `map`\n  * `int` **`+`** `matrix` --->  `matrix`\n  *  **`+`** (`int` , `matrix`) --->  `matrix`\n  * `point` **`+`** `int` --->  `point`\n  *  **`+`** (`point` , `int`) --->  `point`\n  * `rgb` **`+`** `rgb` --->  `rgb`\n  *  **`+`** (`rgb` , `rgb`) --->  `rgb`\n  * `geometry` **`+`** `float` --->  `geometry`\n  *  **`+`** (`geometry` , `float`) --->  `geometry`\n  * `matrix` **`+`** `float` --->  `matrix`\n  *  **`+`** (`matrix` , `float`) --->  `matrix`\n  * `geometry` **`+`** `geometry` --->  `geometry`\n  *  **`+`** (`geometry` , `geometry`) --->  `geometry`\n  * `map` **`+`** `map` --->  `map`\n  *  **`+`** (`map` , `map`) --->  `map`\n  * `float` **`+`** `float` --->  `float`\n  *  **`+`** (`float` , `float`) --->  `float`\n  * `float` **`+`** `int` --->  `float`\n  *  **`+`** (`float` , `int`) --->  `float`\n  * `matrix` **`+`** `matrix` --->  `matrix`\n  *  **`+`** (`matrix` , `matrix`) --->  `matrix`\n  * `date` **`+`** `string` --->  `string`\n  *  **`+`** (`date` , `string`) --->  `string`\n  * `matrix` **`+`** `int` --->  `matrix`\n  *  **`+`** (`matrix` , `int`) --->  `matrix`\n  * `int` **`+`** `int` --->  `int`\n  *  **`+`** (`int` , `int`) --->  `int`\n  * `string` **`+`** `unknown` --->  `string`\n  *  **`+`** (`string` , `unknown`) --->  `string`\n  * `point` **`+`** `point` --->  `point`\n  *  **`+`** (`point` , `point`) --->  `point`\n  * `float` **`+`** `matrix` --->  `matrix`\n  *  **`+`** (`float` , `matrix`) --->  `matrix`\n  * `int` **`+`** `float` --->  `float`\n  *  **`+`** (`int` , `float`) --->  `float`\n  * `point` **`+`** `float` --->  `point`\n  *  **`+`** (`point` , `float`) --->  `point`\n  * `rgb` **`+`** `int` --->  `rgb`\n  *  **`+`** (`rgb` , `int`) --->  `rgb`\n  * `date` **`+`** `int` --->  `date`\n  *  **`+`** (`date` , `int`) --->  `date`\n  * `container` **`+`** `container` --->  `container`\n  *  **`+`** (`container` , `container`) --->  `container`\n  * `container` **`+`** `unknown` --->  `container`\n  *  **`+`** (`container` , `unknown`) --->  `container`\n  *  **`+`** (`geometry`, `float`, `int`) --->  `geometry`\n  *  **`+`** (`geometry`, `float`, `int`, `int`) --->  `geometry` \n\n#### Result: \nReturns the sum, union or concatenation of the two operands.\n\n#### Special cases:     \n  * if one of the operands is nil, + throws an error    \n  * if both operands are species, returns a special type of list called meta-population    \n  * if the left-hand operand is a geometry and the right-hand operands a float and an integer, returns a geometry corresponding to the left-hand operand (geometry, agent, point) enlarged by the first right-hand operand (distance), using a number of segments equal to the second right-hand operand \n  \n```\ngeometry var4  var19  var20  var21  var22   `bool`\n  *  **`  `bool`\n  * `int` **`  `bool`\n  *  **`  `bool`\n  * `point` **`  `bool`\n  *  **`  `bool`\n  * `int` **`  `bool`\n  *  **`  `bool`\n  * `date` **`  `bool`\n  *  **`  `bool`\n  * `float` **`  `bool`\n  *  **`  `bool`\n  * `string` **`  `bool`\n  *  **`  `bool` \n\n#### Result: \ntrue if the left-hand operand is less than the right-hand operand, false otherwise.\n\n#### Special cases:     \n  * if one of the operands is nil, returns false    \n  * if both operands are points, returns true if and only if the left component (x) of the left operand if less than or equal to x of the right one and if the right component (y) of the left operand is greater than or equal to y of the right one. \n  \n```\nbool var5 ](OperatorsAC#>), [>=](OperatorsAC#>=), [<=](OperatorsAC#<=), [=](OperatorsAC#=), [!=](OperatorsAC#!=), \n    \t\n----\n\n[//]: # (keyword|operator_<=)\n### `<=`\n\n#### Possible use: \n  * `string` **`<=`** `string` --->  `bool`\n  *  **`<=`** (`string` , `string`) --->  `bool`\n  * `date` **`<=`** `date` --->  `bool`\n  *  **`<=`** (`date` , `date`) --->  `bool`\n  * `float` **`<=`** `float` --->  `bool`\n  *  **`<=`** (`float` , `float`) --->  `bool`\n  * `int` **`<=`** `int` --->  `bool`\n  *  **`<=`** (`int` , `int`) --->  `bool`\n  * `int` **`<=`** `float` --->  `bool`\n  *  **`<=`** (`int` , `float`) --->  `bool`\n  * `float` **`<=`** `int` --->  `bool`\n  *  **`<=`** (`float` , `int`) --->  `bool`\n  * `point` **`<=`** `point` --->  `bool`\n  *  **`<=`** (`point` , `point`) --->  `bool` \n\n#### Result: \ntrue if the left-hand operand is less or equal than the right-hand operand, false otherwise.\n\n#### Special cases:     \n  * if one of the operands is nil, returns false    \n  * if both operands are String, uses a lexicographic comparison of two strings \n  \n```\nbool var5 ](OperatorsAC#>), [=](OperatorsAC#>=), [=](OperatorsAC#=), [!=](OperatorsAC#!=), \n    \t\n----\n\n[//]: # (keyword|operator_<>)\n### `<>`\nSame signification as [!=](OperatorsAC#!=)\n    \t\n----\n\n[//]: # (keyword|operator_=)\n### `=`\n\n#### Possible use: \n  * `date` **`=`** `date` --->  `bool`\n  *  **`=`** (`date` , `date`) --->  `bool`\n  * `int` **`=`** `float` --->  `bool`\n  *  **`=`** (`int` , `float`) --->  `bool`\n  * `unknown` **`=`** `unknown` --->  `bool`\n  *  **`=`** (`unknown` , `unknown`) --->  `bool`\n  * `float` **`=`** `float` --->  `bool`\n  *  **`=`** (`float` , `float`) --->  `bool`\n  * `float` **`=`** `int` --->  `bool`\n  *  **`=`** (`float` , `int`) --->  `bool`\n  * `int` **`=`** `int` --->  `bool`\n  *  **`=`** (`int` , `int`) --->  `bool` \n\n#### Result: \nreturns true if both operands are equal, false otherwise\nreturns true if both operands are equal, false otherwise\n\n#### Special cases:     \n  * if both operands are any kind of objects, returns true if they are identical (i.e., the same object) or equal (comparisons between nil values are permitted) \n  \n```\nbool var0 ](OperatorsAC#>), [=](OperatorsAC#>=), [<=](OperatorsAC#<=), \n    \t\n----\n\n[//]: # (keyword|operator_>)\n### `>`\n\n#### Possible use: \n  * `int` **`>`** `float` --->  `bool`\n  *  **`>`** (`int` , `float`) --->  `bool`\n  * `float` **`>`** `float` --->  `bool`\n  *  **`>`** (`float` , `float`) --->  `bool`\n  * `string` **`>`** `string` --->  `bool`\n  *  **`>`** (`string` , `string`) --->  `bool`\n  * `int` **`>`** `int` --->  `bool`\n  *  **`>`** (`int` , `int`) --->  `bool`\n  * `date` **`>`** `date` --->  `bool`\n  *  **`>`** (`date` , `date`) --->  `bool`\n  * `point` **`>`** `point` --->  `bool`\n  *  **`>`** (`point` , `point`) --->  `bool`\n  * `float` **`>`** `int` --->  `bool`\n  *  **`>`** (`float` , `int`) --->  `bool` \n\n#### Result: \ntrue if the left-hand operand is greater than the right-hand operand, false otherwise.\n\n#### Special cases:     \n  * if one of the operands is nil, returns false    \n  * if both operands are String, uses a lexicographic comparison of two strings \n  \n```\nbool var0  'aeb'; \t// var0 equals false\n\n``` \n\n    \n  * if both operands are points, returns true if and only if the left component (x) of the left operand if greater than x of the right one and if the right component (y) of the left operand is greater than y of the right one. \n  \n```\nbool var1  {4,6}; \t// var1 equals true\nbool var2  {4,8}; \t// var2 equals false\n\n``` \n\n\n\n#### Examples: \n```\nbool var3  2.5; \t// var3 equals true\nbool var4  7.6; \t// var4 equals false\nbool var5  7; \t// var5 equals false\n#now > #now minus_hours 1 :- true\nbool var7  7; \t// var7 equals false\n```\n      \n\n#### See also: \n[=](OperatorsAC#>=), [<=](OperatorsAC#<=), [=](OperatorsAC#=), [!=](OperatorsAC#!=), \n    \t\n----\n\n[//]: # (keyword|operator_>=)\n### `>=`\n\n#### Possible use: \n  * `float` **`>=`** `int` --->  `bool`\n  *  **`>=`** (`float` , `int`) --->  `bool`\n  * `int` **`>=`** `int` --->  `bool`\n  *  **`>=`** (`int` , `int`) --->  `bool`\n  * `int` **`>=`** `float` --->  `bool`\n  *  **`>=`** (`int` , `float`) --->  `bool`\n  * `string` **`>=`** `string` --->  `bool`\n  *  **`>=`** (`string` , `string`) --->  `bool`\n  * `date` **`>=`** `date` --->  `bool`\n  *  **`>=`** (`date` , `date`) --->  `bool`\n  * `float` **`>=`** `float` --->  `bool`\n  *  **`>=`** (`float` , `float`) --->  `bool`\n  * `point` **`>=`** `point` --->  `bool`\n  *  **`>=`** (`point` , `point`) --->  `bool` \n\n#### Result: \ntrue if the left-hand operand is greater or equal than the right-hand operand, false otherwise.\n\n#### Special cases:     \n  * if one of the operands is nil, returns false    \n  * if both operands are string, uses a lexicographic comparison of the two strings \n  \n```\nbool var5 = 'aeb'; \t// var5 equals false\nbool var6 = 'abc'; \t// var6 equals true\n\n``` \n\n    \n  * if both operands are points, returns true if and only if the left component (x) of the left operand if greater or equal than x of the right one and if the right component (y) of the left operand is greater than or equal to y of the right one. \n  \n```\nbool var7 = {4,6}; \t// var7 equals true\nbool var8 = {4,8}; \t// var8 equals false\n\n``` \n\n\n\n#### Examples: \n```\nbool var0 = 7; \t// var0 equals false\nbool var1 = 7; \t// var1 equals false\nbool var2 = 2.5; \t// var2 equals true\n#now >= #now minus_hours 1 :- true\nbool var4 = 3.5; \t// var4 equals true\n```\n      \n\n#### See also: \n[>](OperatorsAC#>), [  `int`\n  *  **`abs`** (`float`) --->  `float` \n\n#### Result: \nReturns the absolute value of the operand (so a positive int or float depending on the type of the operand).\n\n#### Examples: \n```\nint var0   `container`\n  *  **`accumulate`** (`container` , `any expression`) --->  `container` \n\n#### Result: \nreturns a new flat list, in which each element is the evaluation of the right-hand operand. If this evaluation returns a list, the elements of this result are added directly to the list returned  \n\n#### Comment: \naccumulate is dedicated to the application of a same computation on each element of a container (and returns a list). In the right-hand operand, the keyword each can be used to represent, in turn, each of the left-hand operand elements.\n\n#### Examples: \n```\ncontainer var0  var1  var2   `float`\n  *  **`acos`** (`int`) --->  `float` \n\n#### Result: \nReturns the value (in the interval [0,180], in decimal degrees) of the arccos of the operand (which should be in [-1,1]).\n\n#### Special cases:     \n  * if the right-hand operand is outside of the [-1,1] interval, returns NaN\n\n#### Examples: \n```\nfloat var0   `action` \n\n#### Result: \nCasts the operand into the type action\n    \t\n----\n\n[//]: # (keyword|operator_add_days)\n### `add_days`\nSame signification as [plus_days](OperatorsNZ#plus_days)\n    \t\n----\n\n[//]: # (keyword|operator_add_edge)\n### `add_edge`\n\n#### Possible use: \n  * `graph` **`add_edge`** `pair` --->  `graph`\n  *  **`add_edge`** (`graph` , `pair`) --->  `graph` \n\n#### Result: \nadd an edge between a source vertex and a target vertex (resp. the left and the right element of the pair operand)  \n\n#### Comment: \nif the edge already exists, the graph is unchanged\n\n#### Examples: \n```\ngraph   `graph`\n  *  **`add_node`** (`graph` , `geometry`) --->  `graph` \n\n#### Result: \nadds a node in a graph.\n\n#### Examples: \n```\ngraph var0   `geometry`\n  *  **`add_point`** (`geometry` , `point`) --->  `geometry` \n\n#### Result: \nA new geometry resulting from the addition of the right point (coordinate) to the left-hand geometry. Note that adding a point to a line or polyline will always return a closed contour. Also note that the position at which the added point will appear in the geometry is not necessarily the last one, as points are always ordered in a clockwise fashion in geometries\n\n#### Examples: \n```\ngeometry var0   `matrix` \n\n#### Result: \nadjacency matrix of the given graph.\n    \t\n----\n\n[//]: # (keyword|operator_after)\n### `after`\n\n#### Possible use: \n  *  **`after`** (`date`) --->  `bool`\n  * `any expression` **`after`** `date` --->  `bool`\n  *  **`after`** (`any expression` , `date`) --->  `bool` \n\n#### Result: \nReturns true if the current_date of the model is strictly after the date passed in argument. Synonym of 'current_date > argument'. Can be used in its composed form with 2 arguments to express the lower boundary for the computation of a frequency. Note that only dates strictly after this one will be tested against the frequency\n\n#### Examples: \n```\nreflex when: after(starting_date) {} -: will always be run after the first step\nreflex when: false after(starting date + #10days) {} -: will not be run after this date. Better to use 'until' or 'before' in that case\nevery(2#days) after (starting_date + 1#day) // the computation will return true every two days (using the starting_date of the model as the starting point) only for the dates strictly after this starting_date + 1#day\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_agent)\n### `agent`\n\n#### Possible use: \n  *  **`agent`** (`any`) --->  `agent` \n\n#### Result: \nCasts the operand into the type agent\n    \t\n----\n\n[//]: # (keyword|operator_agent_closest_to)\n### `agent_closest_to`\n\n#### Possible use: \n  *  **`agent_closest_to`** (`unknown`) --->  `agent` \n\n#### Result: \nAn agent, the closest to the operand (casted as a geometry).  \n\n#### Comment: \nthe distance is computed in the topology of the calling agent (the agent in which this operator is used), with the distance algorithm specific to the topology.\n\n#### Examples: \n```\nagent var0   `agent` \n\n#### Result: \nAn agent, the farthest to the operand (casted as a geometry).  \n\n#### Comment: \nthe distance is computed in the topology of the calling agent (the agent in which this operator is used), with the distance algorithm specific to the topology.\n\n#### Examples: \n```\nagent var0   `agent`\n  *  **`agent_from_geometry`** (`path` , `geometry`) --->  `agent` \n\n#### Result: \nreturns the agent corresponding to given geometry (right-hand operand) in the given path (left-hand operand).\n\n#### Special cases:     \n  * if the left-hand operand is nil, returns nil\n\n#### Examples: \n```\ngeometry line   `container` \n\n#### Result: \nA list of agents situated at a distance lower than the right argument.\n\n#### Examples: \n```\ncontainer var0   `list` \n\n#### Result: \nA list of agents covered by the operand (casted as a geometry).\n\n#### Examples: \n```\nlist var0   `list` \n\n#### Result: \nA list of agents overlapping the operand (casted as a geometry).\n\n#### Examples: \n```\nlist var0   `matrix` \n\n#### Result: \nreturns the successor matrix of shortest paths between all node pairs (rows: source, columns: target): a cell (i,j) will thus contains the next node in the shortest path between i and j.\n\n#### Examples: \n```\nmatrix var0   `float` \n\n#### Result: \nreturns the alpha index of the graph (measure of connectivity which evaluates the number of cycles in a graph in comparison with the maximum number of cycles. The higher the alpha index, the more a network is connected: alpha = nb_cycles / (2`*`S-5) - planar graph)\n\n#### Examples: \n```\nfloat var1   `container`\n  *  **`among`** (`int` , `container`) --->  `container` \n\n#### Result: \nReturns a list of length the value of the left-hand operand, containing random elements from the right-hand operand. As of GAMA 1.6, the order in which the elements are returned can be different than the order in which they appear in the right-hand container\n\n#### Special cases:     \n  * if the right-hand operand is empty, among returns a new empty list. If it is nil, it throws an error.    \n  * if the left-hand operand is greater than the length of the right-hand operand, among returns the right-hand operand (converted as a list). If it is smaller or equal to zero, it returns an empty list\n\n#### Examples: \n```\nlist var0  var3   `bool`\n  *  **`and`** (`bool` , `any expression`) --->  `bool` \n\n#### Result: \na bool value, equal to the logical and between the left-hand operand and the right-hand operand.  \n\n#### Comment: \nboth operands are always casted to bool before applying the operator. Thus, an expression like (1 and 0) is accepted and returns false.    \n\n#### See also: \n[bool](OperatorsAC#bool), [or](OperatorsNZ#or), [!](OperatorsAC#!), \n    \t\n----\n\n[//]: # (keyword|operator_and)\n### `and`\n\n#### Possible use: \n  * `predicate` **`and`** `predicate` --->  `predicate`\n  *  **`and`** (`predicate` , `predicate`) --->  `predicate` \n\n#### Result: \ncreate a new predicate from two others by including them as subintentions\n\n#### Examples: \n```\npredicate1 and predicate2\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_angle_between)\n### `angle_between`\n\n#### Possible use: \n  *  **`angle_between`** (`point`, `point`, `point`) --->  `int` \n\n#### Result: \nthe angle between vectors P0P1 and P0P2 (P0, P1, P2 being the three point operands)\n\n#### Examples: \n```\nint var0   `point` \n\n#### Result: \nA point inside (or touching) the operand-geometry.\n\n#### Examples: \n```\npoint var0   `matrix`\n  *  **`append_horizontally`** (`matrix` , `matrix`) --->  `matrix`\n  * `matrix` **`append_horizontally`** `matrix` --->  `matrix`\n  *  **`append_horizontally`** (`matrix` , `matrix`) --->  `matrix` \n\n#### Result: \nA matrix resulting from the concatenation of the rows of the two given matrices. If not both numerical or both object matrices, returns the first matrix.\n\n#### Examples: \n```\nmatrix var0   `matrix`\n  *  **`append_vertically`** (`matrix` , `matrix`) --->  `matrix`\n  * `matrix` **`append_vertically`** `matrix` --->  `matrix`\n  *  **`append_vertically`** (`matrix` , `matrix`) --->  `matrix` \n\n#### Result: \nA matrix resulting from the concatenation of the columns  of the two given matrices. If not both numerical or both object matrices, returns the first matrix.\n\n#### Examples: \n```\nmatrix var0   `geometry`\n  *  **`arc`** (`float`, `float`, `float`, `bool`) --->  `geometry` \n\n#### Result: \nAn arc, which radius is equal to the first operand, heading to the second and amplitude the third\nAn arc, which radius is equal to the first operand, heading to the second, amplitude to the third and a boolean indicating whether to return a linestring or a polygon to the fourth  \n\n#### Comment: \nthe center of the arc is by default the location of the current agent in which has been called this operator. This operator returns a polygon by default.the center of the arc is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns a point if the radius operand is lower or equal to 0.    \n  * returns a point if the radius operand is lower or equal to 0.\n\n#### Examples: \n```\ngeometry var0   `geometry`\n  *  **`around`** (`float` , `unknown`) --->  `geometry` \n\n#### Result: \nA geometry resulting from the difference between a buffer around the right-operand casted in geometry at a distance left-operand (right-operand buffer left-operand) and the right-operand casted as geometry.\n\n#### Special cases:     \n  * returns a circle geometry of radius right-operand if the left-operand is nil\n\n#### Examples: \n```\ngeometry var0   `unknown`\n  *  **`as`** (`unknown` , `any expression`) --->  `unknown` \n\n#### Result: \ncasting of the first argument into a given type  \n\n#### Comment: \nIt is equivalent to the application of the type operator on the left operand.\n\n#### Examples: \n```\nint var0   `matrix`\n  *  **`as_4_grid`** (`geometry` , `point`) --->  `matrix` \n\n#### Result: \nA matrix of square geometries (grid with 4-neighborhood) with dimension given by the right-hand operand ({nb_cols, nb_lines}) corresponding to the square tessellation of the left-hand operand geometry (geometry, agent)\n\n#### Examples: \n```\nmatrix var0   `graph`\n  *  **`as_distance_graph`** (`container` , `map`) --->  `graph`\n  * `container` **`as_distance_graph`** `float` --->  `graph`\n  *  **`as_distance_graph`** (`container` , `float`) --->  `graph`\n  *  **`as_distance_graph`** (`container`, `float`, `species`) --->  `graph` \n\n#### Result: \ncreates a graph from a list of vertices (left-hand operand). An edge is created between each pair of vertices close enough (less than a distance, right-hand operand).  \n\n#### Comment: \nas_distance_graph is more efficient for a list of points than as_intersection_graph.\n\n#### Examples: \n```\nlist(ant) as_distance_graph 3.0\n```\n      \n\n#### See also: \n[as_intersection_graph](OperatorsAC#as_intersection_graph), [as_edge_graph](OperatorsAC#as_edge_graph), \n    \t\n----\n\n[//]: # (keyword|operator_as_driving_graph)\n### `as_driving_graph`\n\n#### Possible use: \n  * `container` **`as_driving_graph`** `container` --->  `graph`\n  *  **`as_driving_graph`** (`container` , `container`) --->  `graph` \n\n#### Result: \ncreates a graph from the list/map of edges given as operand and connect the node to the edge\n\n#### Examples: \n```\nas_driving_graph(road,node)  --:  build a graph while using the road agents as edges and the node agents as nodes\n```\n      \n\n#### See also: \n[as_intersection_graph](OperatorsAC#as_intersection_graph), [as_distance_graph](OperatorsAC#as_distance_graph), [as_edge_graph](OperatorsAC#as_edge_graph), \n    \t\n----\n\n[//]: # (keyword|operator_as_edge_graph)\n### `as_edge_graph`\n\n#### Possible use: \n  *  **`as_edge_graph`** (`map`) --->  `graph`\n  *  **`as_edge_graph`** (`container`) --->  `graph`\n  * `container` **`as_edge_graph`** `float` --->  `graph`\n  *  **`as_edge_graph`** (`container` , `float`) --->  `graph` \n\n#### Result: \ncreates a graph from the list/map of edges given as operand\n\n#### Special cases:     \n  * if the operand is a map, the graph will be built by creating edges from pairs of the map \n  \n```\ngraph var0   `matrix`\n  *  **`as_grid`** (`geometry` , `point`) --->  `matrix` \n\n#### Result: \nA matrix of square geometries (grid with 8-neighborhood) with dimension given by the right-hand operand ({nb_cols, nb_lines}) corresponding to the square tessellation of the left-hand operand geometry (geometry, agent)\n\n#### Examples: \n```\nmatrix var0   `list`\n  *  **`as_hexagonal_grid`** (`geometry` , `point`) --->  `list` \n\n#### Result: \nA list of geometries (hexagonal) corresponding to the hexagonal tesselation of the first operand geometry\n\n#### Examples: \n```\nlist var0   `int`\n  *  **`as_int`** (`string` , `int`) --->  `int` \n\n#### Result: \nparses the string argument as a signed integer in the radix specified by the second argument.\n\n#### Special cases:     \n  * if the left operand is nil or empty, as_int returns 0    \n  * if the left operand does not represent an integer in the specified radix, as_int throws an exception \n\n#### Examples: \n```\nint var0   `graph`\n  *  **`as_intersection_graph`** (`container` , `float`) --->  `graph` \n\n#### Result: \ncreates a graph from a list of vertices (left-hand operand). An edge is created between each pair of vertices with an intersection (with a given tolerance).  \n\n#### Comment: \nas_intersection_graph is more efficient for a list of geometries (but less accurate) than as_distance_graph.\n\n#### Examples: \n```\nlist(ant) as_intersection_graph 0.5\n```\n      \n\n#### See also: \n[as_distance_graph](OperatorsAC#as_distance_graph), [as_edge_graph](OperatorsAC#as_edge_graph), \n    \t\n----\n\n[//]: # (keyword|operator_as_map)\n### `as_map`\n\n#### Possible use: \n  * `container` **`as_map`** `any expression` --->  `map`\n  *  **`as_map`** (`container` , `any expression`) --->  `map` \n\n#### Result: \nproduces a new map from the evaluation of the right-hand operand for each element of the left-hand operand  \n\n#### Comment: \nthe right-hand operand should be a pair\n\n#### Special cases:     \n  * if the left-hand operand is nil, as_map throws an error.\n\n#### Examples: \n```\nmap var0  var1   `matrix`\n  *  **`as_matrix`** (`unknown` , `point`) --->  `matrix` \n\n#### Result: \ncasts the left operand into a matrix with right operand as preferred size  \n\n#### Comment: \nThis operator is very useful to cast a file containing raster data into a matrix.Note that both components of the right operand point should be positive, otherwise an exception is raised.The operator as_matrix creates a matrix of preferred size. It fills in it with elements of the left operand until the matrix is full If the size is to short, some elements will be omitted. Matrix remaining elements will be filled in by nil.\n\n#### Special cases:     \n  * if the right operand is nil, as_matrix is equivalent to the matrix operator    \n\n#### See also: \n[matrix](OperatorsDM#matrix), \n    \t\n----\n\n[//]: # (keyword|operator_as_path)\n### `as_path`\n\n#### Possible use: \n  * `list` **`as_path`** `graph` --->  `path`\n  *  **`as_path`** (`list` , `graph`) --->  `path` \n\n#### Result: \ncreate a graph path from the list of shape\n\n#### Examples: \n```\npath var0 road2->road3 of my_graph\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_asin)\n### `asin`\n\n#### Possible use: \n  *  **`asin`** (`float`) --->  `float`\n  *  **`asin`** (`int`) --->  `float` \n\n#### Result: \nthe arcsin of the operand\n\n#### Special cases:     \n  * if the right-hand operand is outside of the [-1,1] interval, returns NaN\n\n#### Examples: \n```\nfloat var0   `string`\n  *  **`at`** (`string` , `int`) --->  `string`\n  * `container` **`at`** `KeyType` --->  `ValueType`\n  *  **`at`** (`container` , `KeyType`) --->  `ValueType` \n\n#### Result: \nthe element at the right operand index of the container  \n\n#### Comment: \nThe first element of the container is located at the index 0. In addition, if the user tries to get the element at an index higher or equals than the length of the container, he will get an IndexOutOfBoundException.The at operator behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a file, at returns the element of the file content at the index specified by the right operand    \n  * if it is a population, at returns the agent at the index specified by the right operand    \n  * if it is a graph and if the right operand is a node, at returns the in and out edges corresponding to that node    \n  * if it is a graph and if the right operand is an edge, at returns the pair node_out::node_in of the edge    \n  * if it is a graph and if the right operand is a pair node1::node2, at returns the edge from node1 to node2 in the graph    \n  * if it is a list or a matrix, at returns the element at the index specified by the right operand \n  \n```\nint var1 ` **`at_distance`** `float` --->  `list`\n  *  **`at_distance`** (`container` , `float`) --->  `list` \n\n#### Result: \nA list of agents or geometries among the left-operand list that are located at a distance <= the right operand from the caller agent (in its topology)\n\n#### Examples: \n```\nlist var0   `geometry`\n  *  **`at_location`** (`geometry` , `point`) --->  `geometry` \n\n#### Result: \nA geometry resulting from the tran of a translation to the right-hand operand point of the left-hand operand (geometry, agent, point)\n\n#### Examples: \n```\ngeometry var0   `float`\n  *  **`atan`** (`int`) --->  `float` \n\n#### Result: \nReturns the value (in the interval [-90,90], in decimal degrees) of the arctan of the operand (which can be any real number).\n\n#### Examples: \n```\nfloat var0   `float`\n  *  **`atan2`** (`float` , `float`) --->  `float` \n\n#### Result: \nthe atan2 value of the two operands.  \n\n#### Comment: \nThe function atan2 is the arctangent function with two arguments. The purpose of using two arguments instead of one is to gather information on the signs of the inputs in order to return the appropriate quadrant of the computed angle, which is not possible for the single-argument arctangent function.\n\n#### Examples: \n```\nfloat var0   `attributes` \n\n#### Result: \nCasts the operand into the type attributes\n    \t\n----\n\n[//]: # (keyword|operator_BDIPlan)\n### `BDIPlan`\n\n#### Possible use: \n  *  **`BDIPlan`** (`any`) --->  `BDIPlan` \n\n#### Result: \nCasts the operand into the type BDIPlan\n    \t\n----\n\n[//]: # (keyword|operator_before)\n### `before`\n\n#### Possible use: \n  *  **`before`** (`date`) --->  `bool`\n  * `any expression` **`before`** `date` --->  `bool`\n  *  **`before`** (`any expression` , `date`) --->  `bool` \n\n#### Result: \nReturns true if the current_date of the model is strictly before the date passed in argument. Synonym of 'current_date < argument'\n\n#### Examples: \n```\nreflex when: before(starting_date) {} -: will never be run\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_beta_index)\n### `beta_index`\n\n#### Possible use: \n  *  **`beta_index`** (`graph`) --->  `float` \n\n#### Result: \nreturns the beta index of the graph (Measures the level of connectivity in a graph and is expressed by the relationship between the number of links (e) over the number of nodes (v) : beta = e/v.\n\n#### Examples: \n```\ngraph graphEpidemio   `bool`\n  *  **`between`** (`date` , `date`) --->  `bool`\n  *  **`between`** (`int`, `int`, `int`) --->  `bool`\n  *  **`between`** (`any expression`, `date`, `date`) --->  `bool`\n  *  **`between`** (`float`, `float`, `float`) --->  `bool`\n  *  **`between`** (`date`, `date`, `date`) --->  `bool` \n\n#### Result: \nreturns true the first integer operand is bigger than the second integer operand and smaller than the third integer operand\nreturns true if the first float operand is bigger than the second float operand and smaller than the third float operand\n\n#### Special cases:     \n  * returns true if the first operand is between the two dates passed in arguments (both exclusive). Can be combined with 'every' to express a frequency between two dates \n  \n```\n(date('2016-01-01') between(date('2000-01-01'), date('2020-02-02') -: true\nevery #day between(date('2000-01-01'), date('2020-02-02') // will return true every new day between these two dates, taking the first one as the starting point\n\n``` \n\n    \n  * returns true if the first operand is between the two dates passed in arguments (both exclusive). The version with 2 arguments compares the current_date with the 2 others \n  \n```\n(date('2016-01-01') between(date('2000-01-01'), date('2020-02-02') -: true\nbetween(date('2000-01-01'), date('2020-02-02') // will return true if the current_date of the model is in_between the 2\n\n``` \n\n\n\n#### Examples: \n```\nbool var0   `map` \n\n#### Result: \nreturns a map containing for each vertex (key), its betweenness centrality (value): number of shortest paths passing through each vertex\n\n#### Examples: \n```\ngraph graphEpidemio   `list` \n\n#### Result: \nreturns the biggest cliques of a graph using the Bron-Kerbosch clique detection algorithm\n\n#### Examples: \n```\ngraph my_graph  var1   `int`\n  *  **`binomial`** (`int` , `float`) --->  `int` \n\n#### Result: \nA value from a random variable following a binomial distribution. The operands represent the number of experiments n and the success probability p.  \n\n#### Comment: \nThe binomial distribution is the discrete probability distribution of the number of successes in a sequence of n independent yes/no experiments, each of which yields success with probability p, cf. Binomial distribution on Wikipedia.\n\n#### Examples: \n```\nint var0   `rgb`\n  *  **`blend`** (`rgb` , `rgb`) --->  `rgb`\n  *  **`blend`** (`rgb`, `rgb`, `float`) --->  `rgb` \n\n#### Result: \nBlend two colors with an optional ratio (c1 `*` r + c2 `*` (1 - r)) between 0 and 1\n\n#### Special cases:     \n  * If the ratio is omitted, an even blend is done \n  \n```\nrgb var3   `bool` \n\n#### Result: \nCasts the operand into the type bool\n    \t\n----\n\n[//]: # (keyword|operator_box)\n### `box`\n\n#### Possible use: \n  *  **`box`** (`point`) --->  `geometry`\n  *  **`box`** (`float`, `float`, `float`) --->  `geometry` \n\n#### Result: \nA box geometry which side sizes are given by the operands.  \n\n#### Comment: \nthe center of the box is by default the location of the current agent in which has been called this operator.the center of the box is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns nil if the operand is nil.    \n  * returns nil if the operand is nil.\n\n#### Examples: \n```\ngeometry var0   `list`\n  * `string` **`brewer_colors`** `int` --->  `list`\n  *  **`brewer_colors`** (`string` , `int`) --->  `list` \n\n#### Result: \nBuild a list of colors of a given type (see website http://colorbrewer2.org/)\nBuild a list of colors of a given type (see website http://colorbrewer2.org/) with a given number of classes\n\n#### Examples: \n```\nlist var0  colors  var1  colors   `list`\n  * `int` **`brewer_palettes`** `int` --->  `list`\n  *  **`brewer_palettes`** (`int` , `int`) --->  `list` \n\n#### Result: \nreturns the list a palette with a given min number of classes and max number of classes)\nreturns the list a palette with a given min number of classes and max number of classes)\n\n#### Examples: \n```\nlist var0  colors  var1  colors `) --->  `regression`\n  * `matrix` **`build`** `string` --->  `regression`\n  *  **`build`** (`matrix` , `string`) --->  `regression` \n\n#### Result: \nreturns the regression build from the matrix data (a row = an instance, the last value of each line is the y value) while using the given ordinary least squares method. Usage: build(data)\nreturns the regression build from the matrix data (a row = an instance, the last value of each line is the y value) while using the given method (\"GLS\" or \"OLS\"). Usage: build(data,method)\n\n#### Examples: \n```\nmatrix([[1,2,3,4],[2,3,4,2]])\nbuild(matrix([[1,2,3,4],[2,3,4,2]]),\"GLS\")\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_ceil)\n### `ceil`\n\n#### Possible use: \n  *  **`ceil`** (`float`) --->  `float` \n\n#### Result: \nMaps the operand to the smallest following integer, i.e. the smallest integer not less than x.\n\n#### Examples: \n```\nfloat var0   `point` \n\n#### Result: \nCentroid (weighted sum of the centroids of a decomposition of the area into triangles) of the operand-geometry. Can be different to the location of the geometry\n\n#### Examples: \n```\npoint var0   `string`\n\n#### Special cases:     \n  * converts ACSII integer value to character \n  \n```\nstring var0   `geometry`\n  * `float` **`circle`** `point` --->  `geometry`\n  *  **`circle`** (`float` , `point`) --->  `geometry` \n\n#### Result: \nA circle geometry which radius is equal to the first operand, and the center has the location equal to the second operand.\nA circle geometry which radius is equal to the operand.  \n\n#### Comment: \nthe center of the circle is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns a point if the operand is lower or equal to 0.    \n  * returns a point if the operand is lower or equal to 0.\n\n#### Examples: \n```\ngeometry var0   `geometry` \n\n#### Result: \nA geometry corresponding to the cleaning of the operand (geometry, agent, point)  \n\n#### Comment: \nThe cleaning corresponds to a buffer with a distance of 0.0\n\n#### Examples: \n```\ngeometry var0   `list`\n  *  **`closest_points_with`** (`geometry` , `geometry`) --->  `list` \n\n#### Result: \nA list of two closest points between the two geometries.\n\n#### Examples: \n```\nlist var0 ` **`closest_to`** `geometry` --->  `geometry`\n  *  **`closest_to`** (`container` , `geometry`) --->  `geometry` \n\n#### Result: \nAn agent or a geometry among the left-operand list of agents, species or meta-population (addition of species), the closest to the operand (casted as a geometry).  \n\n#### Comment: \nthe distance is computed in the topology of the calling agent (the agent in which this operator is used), with the distance algorithm specific to the topology.\n\n#### Examples: \n```\ngeometry var0   `container`\n  *  **`collect`** (`container` , `any expression`) --->  `container` \n\n#### Result: \nreturns a new list, in which each element is the evaluation of the right-hand operand.  \n\n#### Comment: \ncollect is similar to accumulate except that accumulate always produces flat lists if the right-hand operand returns a list.In addition, collect can be applied to any container.\n\n#### Special cases:     \n  * if the left-hand operand is nil, collect throws an error\n\n#### Examples: \n```\ncontainer var0   `list`\n  *  **`column_at`** (`matrix` , `int`) --->  `list` \n\n#### Result: \nreturns the column at a num_col (right-hand operand)\n\n#### Examples: \n```\nlist var0   `list` \n\n#### Result: \nreturns a list of the columns of the matrix, with each column as a list of elements\n\n#### Examples: \n```\nlist var0   `string` \n\n#### Result: \ncommand allows GAMA to issue a system command using the system terminal or shell and to receive a string containing the outcome of the command or script executed. By default, commands are blocking the agent calling them, unless the sequence ' &' is used at the end. In this case, the result of the operator is an empty string\n    \t\n----\n\n[//]: # (keyword|operator_cone)\n### `cone`\n\n#### Possible use: \n  *  **`cone`** (`point`) --->  `geometry`\n  * `int` **`cone`** `int` --->  `geometry`\n  *  **`cone`** (`int` , `int`) --->  `geometry` \n\n#### Result: \nA cone geometry which min and max angles are given by the operands.\nA cone geometry which min and max angles are given by the operands.  \n\n#### Comment: \nthe center of the cone is by default the location of the current agent in which has been called this operator.the center of the cone is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns nil if the operand is nil.    \n  * returns nil if the operand is nil.\n\n#### Examples: \n```\ngeometry var0   `geometry`\n  *  **`cone3D`** (`float` , `float`) --->  `geometry` \n\n#### Result: \nA cone geometry which base radius size is equal to the first operand, and which the height is equal to the second operand.  \n\n#### Comment: \nthe center of the cone is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns a point if the operand is lower or equal to 0.\n\n#### Examples: \n```\ngeometry var0   `list` \n\n#### Result: \nreturns the connected components of of a graph, i.e. the list of all vertices that are in the maximally connected component together with the specified vertex.\n\n#### Examples: \n```\ngraph my_graph  var1   `float` \n\n#### Result: \nreturns a simple connectivity index. This number is estimated through the number of nodes (v) and of sub-graphs (p) : IC = (v - p) /(v - 1).\n\n#### Examples: \n```\ngraph graphEpidemio   `container` \n\n#### Result: \nCasts the operand into the type container\n    \t\n----\n\n[//]: # (keyword|operator_contains)\n### `contains`\n\n#### Possible use: \n  * `container` **`contains`** `unknown` --->  `bool`\n  *  **`contains`** (`container` , `unknown`) --->  `bool`\n  * `string` **`contains`** `string` --->  `bool`\n  *  **`contains`** (`string` , `string`) --->  `bool` \n\n#### Result: \ntrue, if the container contains the right operand, false otherwise  \n\n#### Comment: \nthe contains operator behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a map, contains returns true if the operand is a key of the map    \n  * if it is a file, contains returns true it the operand is contained in the file content    \n  * if it is a population, contains returns true if the operand is an agent of the population, false otherwise    \n  * if it is a graph, contains returns true if the operand is a node or an edge of the graph, false otherwise    \n  * if both operands are strings, returns true if the right-hand operand contains the right-hand pattern;    \n  * if it is a list or a matrix, contains returns true if the list or matrix contains the right operand \n  \n```\nbool var0   `bool`\n  *  **`contains_all`** (`container` , `container`) --->  `bool`\n  * `string` **`contains_all`** `list` --->  `bool`\n  *  **`contains_all`** (`string` , `list`) --->  `bool` \n\n#### Result: \ntrue if the left operand contains all the elements of the right operand, false otherwise  \n\n#### Comment: \nthe definition of contains depends on the container\n\n#### Special cases:     \n  * if the right operand is nil or empty, contains_all returns true    \n  * if the left-operand is a string, test whether the string contains all the element of the list; \n  \n```\nbool var4   `bool`\n  *  **`contains_any`** (`container` , `container`) --->  `bool`\n  * `string` **`contains_any`** `list` --->  `bool`\n  *  **`contains_any`** (`string` , `list`) --->  `bool` \n\n#### Result: \ntrue if the left operand contains one of the elements of the right operand, false otherwise  \n\n#### Comment: \nthe definition of contains depends on the container\n\n#### Special cases:     \n  * if the right operand is nil or empty, contains_any returns false\n\n#### Examples: \n```\nbool var0   `bool`\n  *  **`contains_edge`** (`graph` , `unknown`) --->  `bool`\n  * `graph` **`contains_edge`** `pair` --->  `bool`\n  *  **`contains_edge`** (`graph` , `pair`) --->  `bool` \n\n#### Result: \nreturns true if the graph(left-hand operand) contains the given edge (righ-hand operand), false otherwise\n\n#### Special cases:     \n  * if the left-hand operand is nil, returns false    \n  * if the right-hand operand is a pair, returns true if it exists an edge between the two elements of the pair in the graph \n  \n```\nbool var2   `bool`\n  *  **`contains_vertex`** (`graph` , `unknown`) --->  `bool` \n\n#### Result: \nreturns true if the graph(left-hand operand) contains the given vertex (righ-hand operand), false otherwise\n\n#### Special cases:     \n  * if the left-hand operand is nil, returns false\n\n#### Examples: \n```\ngraph graphFromMap  `conversation`\n    \t\n----\n\n[//]: # (keyword|operator_convex_hull)\n### `convex_hull`\n\n#### Possible use: \n  *  **`convex_hull`** (`geometry`) --->  `geometry` \n\n#### Result: \nA geometry corresponding to the convex hull of the operand.\n\n#### Examples: \n```\ngeometry var0   `unknown` \n\n#### Result: \nreturns a copy of the operand.\n    \t\n----\n\n[//]: # (keyword|operator_copy_between)\n### `copy_between`\n\n#### Possible use: \n  *  **`copy_between`** (`string`, `int`, `int`) --->  `string`\n  *  **`copy_between`** (`container`, `int`, `int`) --->  `container` \n\n#### Result: \nReturns a copy of the first operand between the indexes determined by the second (inclusive) and third operands (exclusive)\n\n#### Special cases:     \n  * If the first operand is empty, returns an empty object of the same type    \n  * If the second operand is greater than or equal to the third operand, return an empty object of the same type    \n  * If the first operand is nil, raises an error\n\n#### Examples: \n```\nstring var0   `unknown`\n  *  **`corR`** (`container` , `container`) --->  `unknown` \n\n#### Result: \nreturns the Pearson correlation coefficient of two given vectors (right-hand operands) in given variable  (left-hand operand).\n\n#### Special cases:     \n  * if the lengths of two vectors in the right-hand aren't equal, returns 0\n\n#### Examples: \n```\nlist X   `float`\n  *  **`cos`** (`float`) --->  `float` \n\n#### Result: \nReturns the value (in [-1,1]) of the cosinus of the operand (in decimal degrees).  The argument is casted to an int before being evaluated.\n\n#### Special cases:     \n  * Operand values out of the range [0-359] are normalized.\n\n#### Examples: \n```\nfloat var0   `float` \n\n#### Result: \nReturns the value (in [-1,1]) of the cosinus of the operand (in decimal degrees).  The argument is casted to an int before being evaluated.\n\n#### Special cases:     \n  * Operand values out of the range [0-359] are normalized.    \n\n#### See also: \n[sin](OperatorsNZ#sin), [tan](OperatorsNZ#tan), \n    \t\n----\n\n[//]: # (keyword|operator_count)\n### `count`\n\n#### Possible use: \n  * `container` **`count`** `any expression` --->  `int`\n  *  **`count`** (`container` , `any expression`) --->  `int` \n\n#### Result: \nreturns an int, equal to the number of elements of the left-hand operand that make the right-hand operand evaluate to true.  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the elements.\n\n#### Special cases:     \n  * if the left-hand operand is nil, count throws an error\n\n#### Examples: \n```\nint var0  3); \t// var0 equals 5\n// Number of nodes of graph g2 without any out edge\ngraph g2  32\nint n  32);\nint var6  4); \t// var6 equals 1\n```\n      \n\n#### See also: \n[group_by](OperatorsDM#group_by), \n    \t\n----\n\n[//]: # (keyword|operator_covers)\n### `covers`\n\n#### Possible use: \n  * `geometry` **`covers`** `geometry` --->  `bool`\n  *  **`covers`** (`geometry` , `geometry`) --->  `bool` \n\n#### Result: \nA boolean, equal to true if the left-geometry (or agent/point) covers the right-geometry (or agent/point).\n\n#### Special cases:     \n  * if one of the operand is null, returns false.\n\n#### Examples: \n```\nbool var0   `geometry`\n  * `float` **`cross`** `float` --->  `geometry`\n  *  **`cross`** (`float` , `float`) --->  `geometry` \n\n#### Result: \nA cross, which radius is equal to the first operand\nA cross, which radius is equal to the first operand and the width of the lines for the second\n\n#### Examples: \n```\ngeometry var0   `bool`\n  *  **`crosses`** (`geometry` , `geometry`) --->  `bool` \n\n#### Result: \nA boolean, equal to true if the left-geometry (or agent/point) crosses the right-geometry (or agent/point).\n\n#### Special cases:     \n  * if one of the operand is null, returns false.    \n  * if one operand is a point, returns false.\n\n#### Examples: \n```\nbool var0   `string` \n\n#### Result: \nthe Coordinate Reference System (CRS) of the GIS file\n\n#### Examples: \n```\nstring var0   `geometry`\n  * `geometry` **`CRS_transform`** `string` --->  `geometry`\n  *  **`CRS_transform`** (`geometry` , `string`) --->  `geometry`\n\n#### Special cases:     \n  * returns the geometry corresponding to the transformation of the given geometry by the left operand CRS (Coordinate Reference System) \n  \n```\ngeometry var0   `file` \n\n#### Result: \nConstructs a file of type csv. Allowed extensions are limited to csv, tsv\n    \t\n----\n\n[//]: # (keyword|operator_cube)\n### `cube`\n\n#### Possible use: \n  *  **`cube`** (`float`) --->  `geometry` \n\n#### Result: \nA cube geometry which side size is equal to the operand.  \n\n#### Comment: \nthe center of the cube is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns nil if the operand is nil.\n\n#### Examples: \n```\ngeometry var0   `geometry`\n  *  **`curve`** (`point`, `point`, `point`, `int`) --->  `geometry`\n  *  **`curve`** (`point`, `point`, `point`, `point`) --->  `geometry`\n  *  **`curve`** (`point`, `point`, `point`, `point`, `int`) --->  `geometry` \n\n#### Result: \nA quadratic Bezier curve geometry built from the three given points composed of a given numnber of points.\nA quadratic Bezier curve geometry built from the three given points composed of 10 points.\nA cubic Bezier curve geometry built from the four given points composed of a given number of points.\nA cubic Bezier curve geometry built from the four given points composed of 10 points.\n\n#### Special cases:     \n  * if the operand is nil, returns nil    \n  * if the last operand (number of points) is inferior to 2, returns nil    \n  * if the operand is nil, returns nil    \n  * if the operand is nil, returns nil    \n  * if the last operand (number of points) is inferior to 2, returns nil    \n  * if the operand is nil, returns nil\n\n#### Examples: \n```\ngeometry var0   `geometry`\n  *  **`cylinder`** (`float` , `float`) --->  `geometry` \n\n#### Result: \nA cylinder geometry which radius is equal to the operand.  \n\n#### Comment: \nthe center of the cylinder is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns a point if the operand is lower or equal to 0.\n\n#### Examples: \n```\ngeometry var0 `, `map`, `int`) --->  `map` \n\n#### Result: \nInverse Distance Weighting (IDW) is a type of deterministic method for multivariate interpolation with a known scattered set of points. The assigned values to each geometry are calculated with a weighted average of the values available at the known points. See: http://en.wikipedia.org/wiki/Inverse_distance_weighting Usage: IDW (list of geometries, map of points (key: point, value: value), power parameter)\n\n#### Examples: \n```\nmap var0   `file` \n\n#### Result: \nConstructs a file of type R. Allowed extensions are limited to r\n    \t\n----\n\n[//]: # (keyword|operator_R_mean)\n### `R_mean`\nSame signification as [meanR](OperatorsDM#meanR)\n    \t\n----\n\n[//]: # (keyword|operator_TGauss)\n### `TGauss`\nSame signification as [truncated_gauss](OperatorsNZ#truncated_gauss)\n    \t\n----\n\n[//]: # (keyword|operator_URL_file)\n### `URL_file`\n\n#### Possible use: \n  *  **`URL_file`** (`string`) --->  `file` \n\n#### Result: \nConstructs a file of type URL. Allowed extensions are limited to url","url":"wiki/OperatorsAC.md"},{"id":"wiki/OperatorsDM.md","title":" Operators (D to M)","content":"#Operators (D to M)\n \t\n----\n\n**This file is automatically generated from java files. Do Not Edit It.**\n\n----\n\n## Definition \n\nOperators in the GAML language are used to compose complex expressions. An operator performs a function on one, two, or n operands (which are other expressions and thus may be themselves composed of operators) and returns the result of this function. \n\nMost of them use a classical prefixed functional syntax (i.e. `operator_name(operand1, operand2, operand3)`, see below), with the exception of arithmetic (e.g. `+`, `/`), logical (`and`, `or`), comparison (e.g. `>`, `\n----\n\n## Priority between operators\n\nThe priority of operators determines, in the case of complex expressions composed of several operators, which one(s) will be evaluated first.\n\nGAML follows in general the traditional priorities attributed to arithmetic, boolean, comparison operators, with some twists. Namely:\n* the constructor operators, like `::`, used to compose pairs of operands, have the lowest priority of all operators (e.g. `a > b :: b > c` will return a pair of boolean values, which means that the two comparisons are evaluated before the operator applies. Similarly, `[a > 10, b > 5]` will return a list of boolean values.\n* it is followed by the `?:` operator, the functional if-else (e.g. ` a > b ? a + 10 : a - 10` will return the result of the if-else).\n* next are the logical operators, `and` and `or` (e.g. `a > b or b > c` will return the value of the test)\n* next are the comparison operators (i.e. `>`, `=`, `=`, `!=`)\n* next the arithmetic operators in their logical order (multiplicative operators have a higher priority than additive operators)\n* next the unary operators `-` and `!`\n* next the access operators `.` and `[]` (e.g. `{1,2,3}.x > 20 + {4,5,6}.y` will return the result of the comparison between the x and y ordinates of the two points)\n* and finally the functional operators, which have the highest priority of all.\n\n----\n\n## Using actions as operators\n\nActions defined in species can be used as operators, provided they are called on the correct agent. The syntax is that of normal functional operators, but the agent that will perform the action must be added as the first operand.\n\nFor instance, if the following species is defined:\n\n```\nspecies spec1 {\n        int min(int x, int y) {\n                return x > y ? x : y;\n        }\n}\n```\n\nAny agent instance of spec1 can use `min` as an operator (if the action conflicts with an existing operator, a warning will be emitted). For instance, in the same model, the following line is perfectly acceptable:\n\n```\nglobal {\n        init {\n                create spec1;\n                spec1 my_agent ](OperatorsAC#>), [>=](OperatorsAC#>=), [between](OperatorsAC#between), \n\n----\n\n### Containers-related operators\n[-](OperatorsAC#-), [::](OperatorsAC#::), [+](OperatorsAC#+), [accumulate](OperatorsAC#accumulate), [among](OperatorsAC#among), [at](OperatorsAC#at), [collect](OperatorsAC#collect), [contains](OperatorsAC#contains), [contains_all](OperatorsAC#contains_all), [contains_any](OperatorsAC#contains_any), [count](OperatorsAC#count), [distinct](OperatorsDM#distinct), [empty](OperatorsDM#empty), [every](OperatorsDM#every), [first](OperatorsDM#first), [first_with](OperatorsDM#first_with), [get](OperatorsDM#get), [group_by](OperatorsDM#group_by), [in](OperatorsDM#in), [index_by](OperatorsDM#index_by), [inter](OperatorsDM#inter), [interleave](OperatorsDM#interleave), [internal_at](OperatorsDM#internal_at), [internal_integrated_value](OperatorsDM#internal_integrated_value), [last](OperatorsDM#last), [last_with](OperatorsDM#last_with), [length](OperatorsDM#length), [max](OperatorsDM#max), [max_of](OperatorsDM#max_of), [mean](OperatorsDM#mean), [mean_of](OperatorsDM#mean_of), [median](OperatorsDM#median), [min](OperatorsDM#min), [min_of](OperatorsDM#min_of), [mul](OperatorsDM#mul), [one_of](OperatorsNZ#one_of), [product_of](OperatorsNZ#product_of), [range](OperatorsNZ#range), [reverse](OperatorsNZ#reverse), [shuffle](OperatorsNZ#shuffle), [sort_by](OperatorsNZ#sort_by), [sum](OperatorsNZ#sum), [sum_of](OperatorsNZ#sum_of), [union](OperatorsNZ#union), [variance_of](OperatorsNZ#variance_of), [where](OperatorsNZ#where), [with_max_of](OperatorsNZ#with_max_of), [with_min_of](OperatorsNZ#with_min_of), \n\n----\n\n### Date-related operators\n[-](OperatorsAC#-), [!=](OperatorsAC#!=), [+](OperatorsAC#+), [](OperatorsAC#>), [>=](OperatorsAC#>=), [after](OperatorsAC#after), [before](OperatorsAC#before), [between](OperatorsAC#between), [every](OperatorsDM#every), [milliseconds_between](OperatorsDM#milliseconds_between), [minus_days](OperatorsDM#minus_days), [minus_hours](OperatorsDM#minus_hours), [minus_minutes](OperatorsDM#minus_minutes), [minus_months](OperatorsDM#minus_months), [minus_ms](OperatorsDM#minus_ms), [minus_weeks](OperatorsDM#minus_weeks), [minus_years](OperatorsDM#minus_years), [months_between](OperatorsDM#months_between), [plus_days](OperatorsNZ#plus_days), [plus_hours](OperatorsNZ#plus_hours), [plus_minutes](OperatorsNZ#plus_minutes), [plus_months](OperatorsNZ#plus_months), [plus_ms](OperatorsNZ#plus_ms), [plus_weeks](OperatorsNZ#plus_weeks), [plus_years](OperatorsNZ#plus_years), [since](OperatorsNZ#since), [to](OperatorsNZ#to), [until](OperatorsNZ#until), [years_between](OperatorsNZ#years_between), \n\n----\n\n### Dates\n\n\n----\n\n### Driving operators\n[as_driving_graph](OperatorsAC#as_driving_graph), \n\n----\n\n### edge\n[edge_between](OperatorsDM#edge_between), \n\n----\n\n### EDP-related operators\n[diff](OperatorsDM#diff), [diff2](OperatorsDM#diff2), [internal_zero_order_equation](OperatorsDM#internal_zero_order_equation), \n\n----\n\n### Files-related operators\n[crs](OperatorsAC#crs), [file](OperatorsDM#file), [file_exists](OperatorsDM#file_exists), [folder](OperatorsDM#folder), [get](OperatorsDM#get), [new_folder](OperatorsNZ#new_folder), [osm_file](OperatorsNZ#osm_file), [read](OperatorsNZ#read), [writable](OperatorsNZ#writable), \n\n----\n\n### FIPA-related operators\n[conversation](OperatorsAC#conversation), [message](OperatorsDM#message), \n\n----\n\n### Graphs-related operators\n[add_edge](OperatorsAC#add_edge), [add_node](OperatorsAC#add_node), [adjacency](OperatorsAC#adjacency), [agent_from_geometry](OperatorsAC#agent_from_geometry), [all_pairs_shortest_path](OperatorsAC#all_pairs_shortest_path), [alpha_index](OperatorsAC#alpha_index), [as_distance_graph](OperatorsAC#as_distance_graph), [as_edge_graph](OperatorsAC#as_edge_graph), [as_intersection_graph](OperatorsAC#as_intersection_graph), [as_path](OperatorsAC#as_path), [beta_index](OperatorsAC#beta_index), [betweenness_centrality](OperatorsAC#betweenness_centrality), [biggest_cliques_of](OperatorsAC#biggest_cliques_of), [connected_components_of](OperatorsAC#connected_components_of), [connectivity_index](OperatorsAC#connectivity_index), [contains_edge](OperatorsAC#contains_edge), [contains_vertex](OperatorsAC#contains_vertex), [degree_of](OperatorsDM#degree_of), [directed](OperatorsDM#directed), [edge](OperatorsDM#edge), [edge_between](OperatorsDM#edge_between), [edge_betweenness](OperatorsDM#edge_betweenness), [edges](OperatorsDM#edges), [gamma_index](OperatorsDM#gamma_index), [generate_barabasi_albert](OperatorsDM#generate_barabasi_albert), [generate_complete_graph](OperatorsDM#generate_complete_graph), [generate_watts_strogatz](OperatorsDM#generate_watts_strogatz), [grid_cells_to_graph](OperatorsDM#grid_cells_to_graph), [in_degree_of](OperatorsDM#in_degree_of), [in_edges_of](OperatorsDM#in_edges_of), [layout](OperatorsDM#layout), [load_graph_from_file](OperatorsDM#load_graph_from_file), [load_shortest_paths](OperatorsDM#load_shortest_paths), [maximal_cliques_of](OperatorsDM#maximal_cliques_of), [nb_cycles](OperatorsNZ#nb_cycles), [neighbors_of](OperatorsNZ#neighbors_of), [node](OperatorsNZ#node), [nodes](OperatorsNZ#nodes), [out_degree_of](OperatorsNZ#out_degree_of), [out_edges_of](OperatorsNZ#out_edges_of), [path_between](OperatorsNZ#path_between), [paths_between](OperatorsNZ#paths_between), [predecessors_of](OperatorsNZ#predecessors_of), [remove_node_from](OperatorsNZ#remove_node_from), [rewire_n](OperatorsNZ#rewire_n), [source_of](OperatorsNZ#source_of), [spatial_graph](OperatorsNZ#spatial_graph), [successors_of](OperatorsNZ#successors_of), [sum](OperatorsNZ#sum), [target_of](OperatorsNZ#target_of), [undirected](OperatorsNZ#undirected), [use_cache](OperatorsNZ#use_cache), [weight_of](OperatorsNZ#weight_of), [with_optimizer_type](OperatorsNZ#with_optimizer_type), [with_weights](OperatorsNZ#with_weights), \n\n----\n\n### Grid-related operators\n[as_4_grid](OperatorsAC#as_4_grid), [as_grid](OperatorsAC#as_grid), [as_hexagonal_grid](OperatorsAC#as_hexagonal_grid), [grid_at](OperatorsDM#grid_at), [path_between](OperatorsNZ#path_between), \n\n----\n\n### Iterator operators\n[accumulate](OperatorsAC#accumulate), [as_map](OperatorsAC#as_map), [collect](OperatorsAC#collect), [count](OperatorsAC#count), [distribution_of](OperatorsDM#distribution_of), [distribution_of](OperatorsDM#distribution_of), [distribution_of](OperatorsDM#distribution_of), [distribution2d_of](OperatorsDM#distribution2d_of), [distribution2d_of](OperatorsDM#distribution2d_of), [distribution2d_of](OperatorsDM#distribution2d_of), [first_with](OperatorsDM#first_with), [frequency_of](OperatorsDM#frequency_of), [group_by](OperatorsDM#group_by), [index_by](OperatorsDM#index_by), [last_with](OperatorsDM#last_with), [max_of](OperatorsDM#max_of), [mean_of](OperatorsDM#mean_of), [min_of](OperatorsDM#min_of), [product_of](OperatorsNZ#product_of), [sort_by](OperatorsNZ#sort_by), [sum_of](OperatorsNZ#sum_of), [variance_of](OperatorsNZ#variance_of), [where](OperatorsNZ#where), [with_max_of](OperatorsNZ#with_max_of), [with_min_of](OperatorsNZ#with_min_of), \n\n----\n\n### List-related operators\n[copy_between](OperatorsAC#copy_between), [index_of](OperatorsDM#index_of), [last_index_of](OperatorsDM#last_index_of), \n\n----\n\n### Logical operators\n[:](OperatorsAC#:), [!](OperatorsAC#!), [?](OperatorsAC#?), [and](OperatorsAC#and), [or](OperatorsNZ#or), \n\n----\n\n### Map comparaison operators\n[fuzzy_kappa](OperatorsDM#fuzzy_kappa), [fuzzy_kappa_sim](OperatorsDM#fuzzy_kappa_sim), [kappa](OperatorsDM#kappa), [kappa_sim](OperatorsDM#kappa_sim), [percent_absolute_deviation](OperatorsNZ#percent_absolute_deviation), \n\n----\n\n### Map-related operators\n[as_map](OperatorsAC#as_map), [index_of](OperatorsDM#index_of), [last_index_of](OperatorsDM#last_index_of), \n\n----\n\n### Material\n[material](OperatorsDM#material), \n\n----\n\n### Matrix-related operators\n[-](OperatorsAC#-), [/](OperatorsAC#/), [.](OperatorsAC#.), [*](OperatorsAC#*), [+](OperatorsAC#+), [append_horizontally](OperatorsAC#append_horizontally), [append_vertically](OperatorsAC#append_vertically), [column_at](OperatorsAC#column_at), [columns_list](OperatorsAC#columns_list), [determinant](OperatorsDM#determinant), [eigenvalues](OperatorsDM#eigenvalues), [index_of](OperatorsDM#index_of), [inverse](OperatorsDM#inverse), [last_index_of](OperatorsDM#last_index_of), [row_at](OperatorsNZ#row_at), [rows_list](OperatorsNZ#rows_list), [shuffle](OperatorsNZ#shuffle), [trace](OperatorsNZ#trace), [transpose](OperatorsNZ#transpose), \n\n----\n\n### multicriteria operators\n[electre_DM](OperatorsDM#electre_dm), [evidence_theory_DM](OperatorsDM#evidence_theory_dm), [promethee_DM](OperatorsNZ#promethee_dm), [weighted_means_DM](OperatorsNZ#weighted_means_dm), \n\n----\n\n### Path-related operators\n[agent_from_geometry](OperatorsAC#agent_from_geometry), [all_pairs_shortest_path](OperatorsAC#all_pairs_shortest_path), [as_path](OperatorsAC#as_path), [load_shortest_paths](OperatorsDM#load_shortest_paths), [path_between](OperatorsNZ#path_between), [path_to](OperatorsNZ#path_to), [paths_between](OperatorsNZ#paths_between), [use_cache](OperatorsNZ#use_cache), \n\n----\n\n### Points-related operators\n[-](OperatorsAC#-), [/](OperatorsAC#/), [*](OperatorsAC#*), [+](OperatorsAC#+), [](OperatorsAC#>), [>=](OperatorsAC#>=), [add_point](OperatorsAC#add_point), [angle_between](OperatorsAC#angle_between), [any_location_in](OperatorsAC#any_location_in), [centroid](OperatorsAC#centroid), [closest_points_with](OperatorsAC#closest_points_with), [farthest_point_to](OperatorsDM#farthest_point_to), [grid_at](OperatorsDM#grid_at), [norm](OperatorsNZ#norm), [point](OperatorsNZ#point), [points_along](OperatorsNZ#points_along), [points_at](OperatorsNZ#points_at), [points_on](OperatorsNZ#points_on), \n\n----\n\n### Random operators\n[binomial](OperatorsAC#binomial), [flip](OperatorsDM#flip), [gauss](OperatorsDM#gauss), [poisson](OperatorsNZ#poisson), [rnd](OperatorsNZ#rnd), [rnd_choice](OperatorsNZ#rnd_choice), [sample](OperatorsNZ#sample), [shuffle](OperatorsNZ#shuffle), [skew_gauss](OperatorsNZ#skew_gauss), [truncated_gauss](OperatorsNZ#truncated_gauss), \n\n----\n\n### ReverseOperators\n\n\n----\n\n### Shape\n[arc](OperatorsAC#arc), [box](OperatorsAC#box), [circle](OperatorsAC#circle), [cone](OperatorsAC#cone), [cone3D](OperatorsAC#cone3d), [cross](OperatorsAC#cross), [cube](OperatorsAC#cube), [curve](OperatorsAC#curve), [cylinder](OperatorsAC#cylinder), [ellipse](OperatorsDM#ellipse), [envelope](OperatorsDM#envelope), [geometry_collection](OperatorsDM#geometry_collection), [hexagon](OperatorsDM#hexagon), [line](OperatorsDM#line), [link](OperatorsDM#link), [plan](OperatorsNZ#plan), [polygon](OperatorsNZ#polygon), [polyhedron](OperatorsNZ#polyhedron), [pyramid](OperatorsNZ#pyramid), [rectangle](OperatorsNZ#rectangle), [sphere](OperatorsNZ#sphere), [square](OperatorsNZ#square), [squircle](OperatorsNZ#squircle), [teapot](OperatorsNZ#teapot), [triangle](OperatorsNZ#triangle), \n\n----\n\n### Spatial operators\n[-](OperatorsAC#-), [*](OperatorsAC#*), [+](OperatorsAC#+), [add_point](OperatorsAC#add_point), [agent_closest_to](OperatorsAC#agent_closest_to), [agent_farthest_to](OperatorsAC#agent_farthest_to), [agents_at_distance](OperatorsAC#agents_at_distance), [agents_inside](OperatorsAC#agents_inside), [agents_overlapping](OperatorsAC#agents_overlapping), [angle_between](OperatorsAC#angle_between), [any_location_in](OperatorsAC#any_location_in), [arc](OperatorsAC#arc), [around](OperatorsAC#around), [as_4_grid](OperatorsAC#as_4_grid), [as_grid](OperatorsAC#as_grid), [as_hexagonal_grid](OperatorsAC#as_hexagonal_grid), [at_distance](OperatorsAC#at_distance), [at_location](OperatorsAC#at_location), [box](OperatorsAC#box), [centroid](OperatorsAC#centroid), [circle](OperatorsAC#circle), [clean](OperatorsAC#clean), [closest_points_with](OperatorsAC#closest_points_with), [closest_to](OperatorsAC#closest_to), [cone](OperatorsAC#cone), [cone3D](OperatorsAC#cone3d), [convex_hull](OperatorsAC#convex_hull), [covers](OperatorsAC#covers), [cross](OperatorsAC#cross), [crosses](OperatorsAC#crosses), [crs](OperatorsAC#crs), [CRS_transform](OperatorsAC#crs_transform), [cube](OperatorsAC#cube), [curve](OperatorsAC#curve), [cylinder](OperatorsAC#cylinder), [dem](OperatorsDM#dem), [direction_between](OperatorsDM#direction_between), [disjoint_from](OperatorsDM#disjoint_from), [distance_between](OperatorsDM#distance_between), [distance_to](OperatorsDM#distance_to), [ellipse](OperatorsDM#ellipse), [envelope](OperatorsDM#envelope), [farthest_point_to](OperatorsDM#farthest_point_to), [farthest_to](OperatorsDM#farthest_to), [geometry_collection](OperatorsDM#geometry_collection), [gini](OperatorsDM#gini), [hexagon](OperatorsDM#hexagon), [hierarchical_clustering](OperatorsDM#hierarchical_clustering), [IDW](OperatorsAC#idw), [inside](OperatorsDM#inside), [inter](OperatorsDM#inter), [intersects](OperatorsDM#intersects), [line](OperatorsDM#line), [link](OperatorsDM#link), [masked_by](OperatorsDM#masked_by), [moran](OperatorsDM#moran), [neighbors_at](OperatorsNZ#neighbors_at), [neighbors_of](OperatorsNZ#neighbors_of), [overlapping](OperatorsNZ#overlapping), [overlaps](OperatorsNZ#overlaps), [partially_overlaps](OperatorsNZ#partially_overlaps), [path_between](OperatorsNZ#path_between), [path_to](OperatorsNZ#path_to), [plan](OperatorsNZ#plan), [points_along](OperatorsNZ#points_along), [points_at](OperatorsNZ#points_at), [points_on](OperatorsNZ#points_on), [polygon](OperatorsNZ#polygon), [polyhedron](OperatorsNZ#polyhedron), [pyramid](OperatorsNZ#pyramid), [rectangle](OperatorsNZ#rectangle), [rgb_to_xyz](OperatorsNZ#rgb_to_xyz), [rotated_by](OperatorsNZ#rotated_by), [round](OperatorsNZ#round), [scaled_to](OperatorsNZ#scaled_to), [set_z](OperatorsNZ#set_z), [simple_clustering_by_distance](OperatorsNZ#simple_clustering_by_distance), [simplification](OperatorsNZ#simplification), [skeletonize](OperatorsNZ#skeletonize), [smooth](OperatorsNZ#smooth), [sphere](OperatorsNZ#sphere), [split_at](OperatorsNZ#split_at), [split_geometry](OperatorsNZ#split_geometry), [split_lines](OperatorsNZ#split_lines), [square](OperatorsNZ#square), [squircle](OperatorsNZ#squircle), [teapot](OperatorsNZ#teapot), [to_GAMA_CRS](OperatorsNZ#to_gama_crs), [to_rectangles](OperatorsNZ#to_rectangles), [to_squares](OperatorsNZ#to_squares), [touches](OperatorsNZ#touches), [towards](OperatorsNZ#towards), [transformed_by](OperatorsNZ#transformed_by), [translated_by](OperatorsNZ#translated_by), [triangle](OperatorsNZ#triangle), [triangulate](OperatorsNZ#triangulate), [union](OperatorsNZ#union), [using](OperatorsNZ#using), [voronoi](OperatorsNZ#voronoi), [with_precision](OperatorsNZ#with_precision), [without_holes](OperatorsNZ#without_holes), \n\n----\n\n### Spatial properties operators\n[covers](OperatorsAC#covers), [crosses](OperatorsAC#crosses), [intersects](OperatorsDM#intersects), [partially_overlaps](OperatorsNZ#partially_overlaps), [touches](OperatorsNZ#touches), \n\n----\n\n### Spatial queries operators\n[agent_closest_to](OperatorsAC#agent_closest_to), [agent_farthest_to](OperatorsAC#agent_farthest_to), [agents_at_distance](OperatorsAC#agents_at_distance), [agents_inside](OperatorsAC#agents_inside), [agents_overlapping](OperatorsAC#agents_overlapping), [at_distance](OperatorsAC#at_distance), [closest_to](OperatorsAC#closest_to), [farthest_to](OperatorsDM#farthest_to), [inside](OperatorsDM#inside), [neighbors_at](OperatorsNZ#neighbors_at), [neighbors_of](OperatorsNZ#neighbors_of), [overlapping](OperatorsNZ#overlapping), \n\n----\n\n### Spatial relations operators\n[direction_between](OperatorsDM#direction_between), [distance_between](OperatorsDM#distance_between), [distance_to](OperatorsDM#distance_to), [path_between](OperatorsNZ#path_between), [path_to](OperatorsNZ#path_to), [towards](OperatorsNZ#towards), \n\n----\n\n### Spatial statistical operators\n[hierarchical_clustering](OperatorsDM#hierarchical_clustering), [simple_clustering_by_distance](OperatorsNZ#simple_clustering_by_distance), \n\n----\n\n### Spatial transformations operators\n[-](OperatorsAC#-), [*](OperatorsAC#*), [+](OperatorsAC#+), [as_4_grid](OperatorsAC#as_4_grid), [as_grid](OperatorsAC#as_grid), [as_hexagonal_grid](OperatorsAC#as_hexagonal_grid), [at_location](OperatorsAC#at_location), [clean](OperatorsAC#clean), [convex_hull](OperatorsAC#convex_hull), [CRS_transform](OperatorsAC#crs_transform), [rotated_by](OperatorsNZ#rotated_by), [scaled_to](OperatorsNZ#scaled_to), [simplification](OperatorsNZ#simplification), [skeletonize](OperatorsNZ#skeletonize), [smooth](OperatorsNZ#smooth), [split_geometry](OperatorsNZ#split_geometry), [split_lines](OperatorsNZ#split_lines), [to_GAMA_CRS](OperatorsNZ#to_gama_crs), [to_rectangles](OperatorsNZ#to_rectangles), [to_squares](OperatorsNZ#to_squares), [transformed_by](OperatorsNZ#transformed_by), [translated_by](OperatorsNZ#translated_by), [triangulate](OperatorsNZ#triangulate), [voronoi](OperatorsNZ#voronoi), [without_holes](OperatorsNZ#without_holes), \n\n----\n\n### Species-related operators\n[index_of](OperatorsDM#index_of), [last_index_of](OperatorsDM#last_index_of), [of_generic_species](OperatorsNZ#of_generic_species), [of_species](OperatorsNZ#of_species), \n\n----\n\n### Statistical operators\n[build](OperatorsAC#build), [corR](OperatorsAC#corr), [dbscan](OperatorsDM#dbscan), [distribution_of](OperatorsDM#distribution_of), [distribution2d_of](OperatorsDM#distribution2d_of), [frequency_of](OperatorsDM#frequency_of), [gamma_rnd](OperatorsDM#gamma_rnd), [geometric_mean](OperatorsDM#geometric_mean), [gini](OperatorsDM#gini), [harmonic_mean](OperatorsDM#harmonic_mean), [hierarchical_clustering](OperatorsDM#hierarchical_clustering), [kmeans](OperatorsDM#kmeans), [kurtosis](OperatorsDM#kurtosis), [max](OperatorsDM#max), [mean](OperatorsDM#mean), [mean_deviation](OperatorsDM#mean_deviation), [meanR](OperatorsDM#meanr), [median](OperatorsDM#median), [min](OperatorsDM#min), [moran](OperatorsDM#moran), [mul](OperatorsDM#mul), [predict](OperatorsNZ#predict), [simple_clustering_by_distance](OperatorsNZ#simple_clustering_by_distance), [skewness](OperatorsNZ#skewness), [standard_deviation](OperatorsNZ#standard_deviation), [sum](OperatorsNZ#sum), [variance](OperatorsNZ#variance), \n\n----\n\n### Strings-related operators\n[+](OperatorsAC#+), [](OperatorsAC#>), [>=](OperatorsAC#>=), [at](OperatorsAC#at), [char](OperatorsAC#char), [contains](OperatorsAC#contains), [contains_all](OperatorsAC#contains_all), [contains_any](OperatorsAC#contains_any), [copy_between](OperatorsAC#copy_between), [date](OperatorsDM#date), [empty](OperatorsDM#empty), [first](OperatorsDM#first), [in](OperatorsDM#in), [indented_by](OperatorsDM#indented_by), [index_of](OperatorsDM#index_of), [is_number](OperatorsDM#is_number), [last](OperatorsDM#last), [last_index_of](OperatorsDM#last_index_of), [length](OperatorsDM#length), [lower_case](OperatorsDM#lower_case), [replace](OperatorsNZ#replace), [replace_regex](OperatorsNZ#replace_regex), [reverse](OperatorsNZ#reverse), [sample](OperatorsNZ#sample), [shuffle](OperatorsNZ#shuffle), [split_with](OperatorsNZ#split_with), [string](OperatorsNZ#string), [upper_case](OperatorsNZ#upper_case), \n\n----\n\n### System\n[.](OperatorsAC#.), [command](OperatorsAC#command), [copy](OperatorsAC#copy), [dead](OperatorsDM#dead), [eval_gaml](OperatorsDM#eval_gaml), [every](OperatorsDM#every), [user_input](OperatorsNZ#user_input), \n\n----\n\n### Time-related operators\n[date](OperatorsDM#date), [string](OperatorsNZ#string), \n\n----\n\n### Types-related operators\n\n\n----\n\n### User control operators\n[user_input](OperatorsNZ#user_input), \n\t\n----\n\n## Operators\n\t\n    \t\n----\n\n[//]: # (keyword|operator_date)\n### `date`\n\n#### Possible use: \n  * `string` **`date`** `string` --->  `date`\n  *  **`date`** (`string` , `string`) --->  `date` \n\n#### Result: \nconverts a string to a date following a custom pattern. The pattern can use \"%Y %M %N %D %E %h %m %s %z\" for outputting years, months, name of month, days, name of days, hours, minutes, seconds and the time-zone. A null or empty pattern will parse the date using one of the ISO date & time formats (similar to date('...') in that case). The pattern can also follow the pattern definition found here, which gives much more control over what will be parsed: https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#patterns. Different patterns are available by default as constant: #iso_local, #iso_simple, #iso_offset, #iso_zoned and #custom, which can be changed in the preferences\n\n#### Examples: \n```\ndate(\"1999-12-30\", 'yyyy-MM-dd')\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_dbscan)\n### `dbscan`\n\n#### Possible use: \n  *  **`dbscan`** (`list`, `float`, `int`) --->  `list` \n\n#### Result: \nreturns the list of clusters (list of instance indices) computed with the dbscan (density-based spatial clustering of applications with noise) algorithm from the first operand data according to the maximum radius of the neighborhood to be considered (eps) and the minimum number of points needed for a cluster (minPts). Usage: dbscan(data,eps,minPoints)\n\n#### Special cases:     \n  * if the lengths of two vectors in the right-hand aren't equal, returns 0\n\n#### Examples: \n```\ndbscan ([[2,4,5], [3,8,2], [1,1,3], [4,3,4]],10,2)\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_dead)\n### `dead`\n\n#### Possible use: \n  *  **`dead`** (`agent`) --->  `bool` \n\n#### Result: \ntrue if the agent is dead (or null), false otherwise.\n\n#### Examples: \n```\nbool var0   `int`\n  *  **`degree_of`** (`graph` , `unknown`) --->  `int` \n\n#### Result: \nreturns the degree (in+out) of a vertex (right-hand operand) in the graph given as left-hand operand.\n\n#### Examples: \n```\nint var1   `geometry`\n  * `file` **`dem`** `file` --->  `geometry`\n  *  **`dem`** (`file` , `file`) --->  `geometry`\n  * `file` **`dem`** `float` --->  `geometry`\n  *  **`dem`** (`file` , `float`) --->  `geometry`\n  *  **`dem`** (`file`, `file`, `float`) --->  `geometry` \n\n#### Result: \nA polygon that is equivalent to the surface of the texture\n\n#### Examples: \n```\ngeometry var0   `float` \n\n#### Result: \nThe determinant of the given matrix\n\n#### Examples: \n```\nfloat var0   `float`\n  *  **`diff`** (`float` , `float`) --->  `float`\n    \t\n----\n\n[//]: # (keyword|operator_diff2)\n### `diff2`\n\n#### Possible use: \n  * `float` **`diff2`** `float` --->  `float`\n  *  **`diff2`** (`float` , `float`) --->  `float`\n    \t\n----\n\n[//]: # (keyword|operator_directed)\n### `directed`\n\n#### Possible use: \n  *  **`directed`** (`graph`) --->  `graph` \n\n#### Result: \nthe operand graph becomes a directed graph.  \n\n#### Comment: \nthe operator alters the operand graph, it does not create a new one.    \n\n#### See also: \n[undirected](OperatorsNZ#undirected), \n    \t\n----\n\n[//]: # (keyword|operator_direction_between)\n### `direction_between`\n\n#### Possible use: \n  * `topology` **`direction_between`** `container` --->  `int`\n  *  **`direction_between`** (`topology` , `container`) --->  `int` \n\n#### Result: \nA direction (in degree) between a list of two geometries (geometries, agents, points) considering a topology.\n\n#### Examples: \n```\nint var0   `bool`\n  *  **`disjoint_from`** (`geometry` , `geometry`) --->  `bool` \n\n#### Result: \nA boolean, equal to true if the left-geometry (or agent/point) is disjoints from the right-geometry (or agent/point).\n\n#### Special cases:     \n  * if one of the operand is null, returns true.    \n  * if one operand is a point, returns false if the point is included in the geometry.\n\n#### Examples: \n```\nbool var0 ` --->  `float`\n  *  **`distance_between`** (`topology` , `container`) --->  `float` \n\n#### Result: \nA distance between a list of geometries (geometries, agents, points) considering a topology.\n\n#### Examples: \n```\nfloat var0   `float`\n  *  **`distance_to`** (`geometry` , `geometry`) --->  `float`\n  * `point` **`distance_to`** `point` --->  `float`\n  *  **`distance_to`** (`point` , `point`) --->  `float` \n\n#### Result: \nA distance between two geometries (geometries, agents or points) considering the topology of the agent applying the operator.\n\n#### Examples: \n```\nfloat var0   `container` \n\n#### Result: \nproduces a set from the elements of the operand (i.e. a list without duplicated elements)\n\n#### Special cases:     \n  * if the operand is nil, remove_duplicates returns nil    \n  * if the operand is a graph, remove_duplicates returns the set of nodes    \n  * if the operand is a matrix, remove_duplicates returns a matrix without duplicated row    \n  * if the operand is a map, remove_duplicates returns the set of values without duplicate \n  \n```\ncontainer var1   `map`\n  * `container` **`distribution_of`** `int` --->  `map`\n  *  **`distribution_of`** (`container` , `int`) --->  `map`\n  *  **`distribution_of`** (`container`, `int`, `float`, `float`) --->  `map` \n\n#### Result: \nDiscretize a list of values into n bins (computes the bins from a numerical variable into n (default 10) bins. Returns a distribution map with the values (values key), the interval legends (legend key), the distribution parameters (params keys, for cumulative charts). Parameters can be (list), (list, nbbins) or (list,nbbins,valmin,valmax)\n\n#### Examples: \n```\nmap var0   `map`\n  *  **`distribution2d_of`** (`container` , `container`) --->  `map`\n  *  **`distribution2d_of`** (`container`, `container`, `int`, `int`) --->  `map`\n  *  **`distribution2d_of`** (`container`, `container`, `int`, `float`, `float`, `int`, `float`, `float`) --->  `map` \n\n#### Result: \nDiscretize two lists of values into n bins (computes the bins from a numerical variable into n (default 10) bins. Returns a distribution map with the values (values key), the interval legends (legend key), the distribution parameters (params keys, for cumulative charts). Parameters can be (list), (list, nbbins) or (list,nbbins,valmin,valmax)\n\n#### Examples: \n```\nmap var0   `int`\n  *  **`div`** (`float` , `float`) --->  `int`\n  * `int` **`div`** `int` --->  `int`\n  *  **`div`** (`int` , `int`) --->  `int`\n  * `float` **`div`** `int` --->  `int`\n  *  **`div`** (`float` , `int`) --->  `int`\n  * `int` **`div`** `float` --->  `int`\n  *  **`div`** (`int` , `float`) --->  `int` \n\n#### Result: \nReturns the truncation of the division of the left-hand operand by the right-hand operand.\n\n#### Special cases:     \n  * if the right-hand operand is equal to zero, raises an exception.    \n  * if the right-hand operand is equal to zero, raises an exception.    \n  * if the right-hand operand is equal to zero, raises an exception.\n\n#### Examples: \n```\nint var0   `file` \n\n#### Result: \nConstructs a file of type dxf. Allowed extensions are limited to dxf\n    \t\n----\n\n[//]: # (keyword|operator_edge)\n### `edge`\n\n#### Possible use: \n  *  **`edge`** (`pair`) --->  `unknown`\n  *  **`edge`** (`unknown`) --->  `unknown`\n  * `unknown` **`edge`** `unknown` --->  `unknown`\n  *  **`edge`** (`unknown` , `unknown`) --->  `unknown`\n  * `pair` **`edge`** `float` --->  `unknown`\n  *  **`edge`** (`pair` , `float`) --->  `unknown`\n  * `unknown` **`edge`** `float` --->  `unknown`\n  *  **`edge`** (`unknown` , `float`) --->  `unknown`\n  *  **`edge`** (`unknown`, `unknown`, `unknown`) --->  `unknown`\n  *  **`edge`** (`unknown`, `unknown`, `float`) --->  `unknown`\n  *  **`edge`** (`pair`, `unknown`, `float`) --->  `unknown`\n  *  **`edge`** (`unknown`, `unknown`, `unknown`, `float`) --->  `unknown`\n    \t\n----\n\n[//]: # (keyword|operator_edge_between)\n### `edge_between`\n\n#### Possible use: \n  * `graph` **`edge_between`** `pair` --->  `unknown`\n  *  **`edge_between`** (`graph` , `pair`) --->  `unknown` \n\n#### Result: \nreturns the edge linking two nodes\n\n#### Examples: \n```\nunknown var0   `map` \n\n#### Result: \nreturns a map containing for each edge (key), its betweenness centrality (value): number of shortest paths passing through each edge\n\n#### Examples: \n```\ngraph graphEpidemio   `container`\n    \t\n----\n\n[//]: # (keyword|operator_eigenvalues)\n### `eigenvalues`\n\n#### Possible use: \n  *  **`eigenvalues`** (`matrix`) --->  `list` \n\n#### Result: \nThe eigen values (matrix) of the given matrix\n\n#### Examples: \n```\nlist var0 `, `list>`, `float`) --->  `int` \n\n#### Result: \nThe index of the best candidate according to a method based on the ELECTRE methods. The principle of the ELECTRE methods is to compare the possible candidates by pair. These methods analyses the possible outranking relation existing between two candidates. An candidate outranks another if this one is at least as good as the other one. The ELECTRE methods are based on two concepts: the concordance and the discordance. The concordance characterizes the fact that, for an outranking relation to be validated, a sufficient majority of criteria should be in favor of this assertion. The discordance characterizes the fact that, for an outranking relation to be validated, none of the criteria in the minority should oppose too strongly this assertion. These two conditions must be true for validating the outranking assertion. More information about the ELECTRE methods can be found in [http://www.springerlink.com/content/g367r44322876223/\tFigueira,  J., Mousseau, V., Roy, B.: ELECTRE Methods. In: Figueira, J., Greco, S., and Ehrgott, M., (Eds.), Multiple Criteria Decision Analysis: State of the Art Surveys, Springer, New York, 133--162 (2005)]. The first operand is the list of candidates (a candidate is a list of criterion values); the second operand the list of criterion: A criterion is a map that contains fives elements: a name, a weight, a preference value (p), an indifference value (q) and a veto value (v). The preference value represents the threshold from which the difference between two criterion values allows to prefer one vector of values over another. The indifference value represents the threshold from which the difference between two criterion values is considered significant. The veto value represents the threshold from which the difference between two criterion values disqualifies the candidate that obtained the smaller value; the last operand is the fuzzy cut.\n\n#### Special cases:     \n  * returns -1 is the list of candidates is nil or empty\n\n#### Examples: \n```\nint var0   `geometry`\n  *  **`ellipse`** (`float` , `float`) --->  `geometry` \n\n#### Result: \nAn ellipse geometry which x-radius is equal to the first operand and y-radius is equal to the second operand  \n\n#### Comment: \nthe center of the ellipse is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns a point if both operands are lower or equal to 0, a line if only one is.\n\n#### Examples: \n```\ngeometry var0   `emotion` \n\n#### Result: \nCasts the operand into the type emotion\n    \t\n----\n\n[//]: # (keyword|operator_empty)\n### `empty`\n\n#### Possible use: \n  *  **`empty`** (`container`) --->  `bool`\n  *  **`empty`** (`string`) --->  `bool` \n\n#### Result: \ntrue if the operand is empty, false otherwise.  \n\n#### Comment: \nthe empty operator behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a map, empty returns true if the map contains no key-value mappings, and false otherwise    \n  * if it is a file, empty returns true if the content of the file (that is also a container) is empty, and false otherwise    \n  * if it is a population, empty returns true if there is no agent in the population, and false otherwise    \n  * if it is a graph, empty returns true if it contains no vertex and no edge, and false otherwise    \n  * if it is a matrix of int, float or object, it will return true if all elements are respectively 0, 0.0 or null, and false otherwise    \n  * if it is a matrix of geometry, it will return true if the matrix contains no cell, and false otherwise    \n  * if it is a list, empty returns true if there is no element in the list, and false otherwise \n  \n```\nbool var0   `geometry` \n\n#### Result: \nA 3D geometry that represents the box that surrounds the geometries or the surface described by the arguments. More general than geometry(arguments).envelope, as it allows to pass int, double, point, image files, shape files, asc files, or any list combining these arguments, in which case the envelope will be correctly expanded. If an envelope cannot be determined from the arguments, a default one of dimensions (0,100, 0, 100, 0, 100) is returned\n    \t\n----\n\n[//]: # (keyword|operator_eval_gaml)\n### `eval_gaml`\n\n#### Possible use: \n  *  **`eval_gaml`** (`string`) --->  `unknown` \n\n#### Result: \nevaluates the given GAML string.\n\n#### Examples: \n```\nunknown var0   `bool` \n\n#### Result: \nevaluate the facet when of a given plan\n\n#### Examples: \n```\neval_when(plan1)\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_even)\n### `even`\n\n#### Possible use: \n  *  **`even`** (`int`) --->  `bool` \n\n#### Result: \nReturns true if the operand is even and false if it is odd.\n\n#### Special cases:     \n  * if the operand is equal to 0, it returns true.    \n  * if the operand is a float, it is truncated before\n\n#### Examples: \n```\nbool var0   `bool`\n  *  **`every`** (`any expression`) --->  `bool`\n  * `msi.gama.util.GamaDateInterval` **`every`** `any expression` --->  `msi.gama.util.IList`\n  *  **`every`** (`msi.gama.util.GamaDateInterval` , `any expression`) --->  `msi.gama.util.IList`\n  * `container` **`every`** `int` --->  `container`\n  *  **`every`** (`container` , `int`) --->  `container` \n\n#### Result: \ntrue every operand * cycle, false otherwise\napplies a step to an interval of dates defined by 'date1 to date2'\nexpects a frequency (expressed in seconds of simulated time) as argument. Will return true every time the current_date matches with this frequency\nRetrieves elements from the first argument every `step` (second argument) elements. Raises an error if the step is negative or equal to zero  \n\n#### Comment: \nthe value of the every operator depends on the cycle. It can be used to do something every x cycle.Used to do something at regular intervals of time. Can be used in conjunction with 'since', 'after', 'before', 'until' or 'between', so that this computation only takes place in the temporal segment defined by these operators. In all cases, the starting_date of the model is used as a reference starting point\n\n#### Examples: \n```\nif every(2) {write \"the cycle number is even\";}\n\t     else {write \"the cycle number is odd\";}\n(date('2000-01-01') to date('2010-01-01')) every (#month) // builds an interval between these two dates which contains all the monthly dates starting from the beginning of the interval\nreflex when: every(2#days) since date('2000-01-01') { .. }\nstate a { transition to: b when: every(2#mn);} state b { transition to: a when: every(30#s);} // This oscillatory behavior will use the starting_date of the model as its starting point in time\n```\n      \n\n#### See also: \n[to](OperatorsNZ#to), [since](OperatorsNZ#since), [after](OperatorsAC#after), \n    \t\n----\n\n[//]: # (keyword|operator_every_cycle)\n### `every_cycle`\nSame signification as [every](OperatorsDM#every)\n    \t\n----\n\n[//]: # (keyword|operator_evidence_theory_DM)\n### `evidence_theory_DM`\n\n#### Possible use: \n  * `list` **`evidence_theory_DM`** `list>` --->  `int`\n  *  **`evidence_theory_DM`** (`list` , `list>`) --->  `int`\n  *  **`evidence_theory_DM`** (`list`, `list>`, `bool`) --->  `int` \n\n#### Result: \nThe index of the best candidate according to a method based on the Evidence theory. This theory, which was proposed by Shafer ([http://www.glennshafer.com/books/amte.html Shafer G (1976) A mathematical theory of evidence, Princeton University Press]), is based on the work of Dempster ([http://projecteuclid.org/DPubS?service=UI&version=1.0&verb=Display&handle=euclid.aoms/1177698950 Dempster A (1967) Upper and lower probabilities induced by multivalued mapping. Annals of Mathematical Statistics, vol.  38, pp. 325--339]) on lower and upper probability distributions. The first operand is the list of candidates (a candidate is a list of criterion values); the second operand the list of criterion: A criterion is a map that contains seven elements: a name, a first threshold s1, a second threshold s2, a value for the assertion \"this candidate is the best\" at threshold s1 (v1p), a value for the assertion \"this candidate is the best\" at threshold s2 (v2p), a value for the assertion \"this candidate is not the best\" at threshold s1 (v1c), a value for the assertion \"this candidate is not the best\" at threshold s2 (v2c). v1p, v2p, v1c and v2c have to been defined in order that: v1p + v1c <= 1.0; v2p + v2c <= 1.0.; the last operand allows to use a simple version of this multi-criteria decision making method (simple if true)\n\n#### Special cases:     \n  * if the operator is used with only 2 operands (the candidates and the criteria), the last parameter (use simple method) is set to true    \n  * returns -1 is the list of candidates is nil or empty\n\n#### Examples: \n```\nint var0   `float`\n  *  **`exp`** (`int`) --->  `float` \n\n#### Result: \nReturns Euler's number e raised to the power of the operand.\n\n#### Special cases:     \n  * the operand is casted to a float before being evaluated.    \n  * the operand is casted to a float before being evaluated.\n\n#### Examples: \n```\nfloat var0   `float` \n\n#### Result: \nReturns the factorial of the operand.\n\n#### Special cases:     \n  * if the operand is less than 0, fact returns 0.\n\n#### Examples: \n```\nfloat var0   `point`\n  *  **`farthest_point_to`** (`geometry` , `point`) --->  `point` \n\n#### Result: \nthe farthest point of the left-operand to the left-point.\n\n#### Examples: \n```\npoint var0 ` **`farthest_to`** `geometry` --->  `geometry`\n  *  **`farthest_to`** (`container` , `geometry`) --->  `geometry` \n\n#### Result: \nAn agent or a geometry among the left-operand list of agents, species or meta-population (addition of species), the farthest to the operand (casted as a geometry).  \n\n#### Comment: \nthe distance is computed in the topology of the calling agent (the agent in which this operator is used), with the distance algorithm specific to the topology.\n\n#### Examples: \n```\ngeometry var0   `file`\n  * `string` **`file`** `container` --->  `file`\n  *  **`file`** (`string` , `container`) --->  `file` \n\n#### Result: \nopens a file in read only mode, creates a GAML file object, and tries to determine and store the file content in the contents attribute.\nCreates a file in read/write mode, setting its contents to the container passed in parameter  \n\n#### Comment: \nThe file should have a supported extension, see file type definition for supported file extensions.The type of container to pass will depend on the type of file (see the management of files in the documentation). Can be used to copy files since files are considered as containers. For example: save file('image_copy.png', file('image.png')); will copy image.png to image_copy.png\n\n#### Special cases:     \n  * If the specified string does not refer to an existing file, an exception is risen when the variable is used.\n\n#### Examples: \n```\nlet fileT type: file value: file(\"../includes/Stupid_Cell.Data\"); \n\t\t\t// fileT represents the file \"../includes/Stupid_Cell.Data\"\n\t\t\t// fileT.contents here contains a matrix storing all the data of the text file\n```\n      \n\n#### See also: \n[folder](OperatorsDM#folder), [new_folder](OperatorsNZ#new_folder), \n    \t\n----\n\n[//]: # (keyword|operator_file_exists)\n### `file_exists`\n\n#### Possible use: \n  *  **`file_exists`** (`string`) --->  `bool` \n\n#### Result: \nTest whether the parameter is the path to an existing file.\n    \t\n----\n\n[//]: # (keyword|operator_first)\n### `first`\n\n#### Possible use: \n  *  **`first`** (`string`) --->  `string`\n  *  **`first`** (`container`) --->  `ValueType`\n  * `int` **`first`** `container` --->  `container`\n  *  **`first`** (`int` , `container`) --->  `container` \n\n#### Result: \nthe first value of the operand  \n\n#### Comment: \nthe first operator behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a map, first returns the first value of the first pair (in insertion order)    \n  * if it is a file, first returns the first element of the content of the file (that is also a container)    \n  * if it is a population, first returns the first agent of the population    \n  * if it is a graph, first returns the first edge (in creation order)    \n  * if it is a matrix, first returns the element at {0,0} in the matrix    \n  * for a matrix of int or float, it will return 0 if the matrix is empty    \n  * for a matrix of object or geometry, it will return nil if the matrix is empty    \n  * if it is a string, first returns a string composed of its first character \n  \n```\nstring var0   `unknown`\n  *  **`first_with`** (`container` , `any expression`) --->  `unknown` \n\n#### Result: \nthe first element of the left-hand operand that makes the right-hand operand evaluate to true.  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.\n\n#### Special cases:     \n  * if the left-hand operand is nil, first_with throws an error. If there is no element that satisfies the condition, it returns nil    \n  * if the left-operand is a map, the keyword each will contain each value \n  \n```\nunknown var4 = 4); \t// var4 equals 4\nunknown var5 = 4); \t// var5 equals 3::4\n\n``` \n\n\n\n#### Examples: \n```\nunknown var0  3); \t// var0 equals 4\nunknown var2  32); \t// var3 equals node2\n```\n      \n\n#### See also: \n[group_by](OperatorsDM#group_by), [last_with](OperatorsDM#last_with), [where](OperatorsNZ#where), \n    \t\n----\n\n[//]: # (keyword|operator_flip)\n### `flip`\n\n#### Possible use: \n  *  **`flip`** (`float`) --->  `bool` \n\n#### Result: \ntrue or false given the probability represented by the operand\n\n#### Special cases:     \n  * flip 0 always returns false, flip 1 true\n\n#### Examples: \n```\nbool var0   `float` \n\n#### Result: \nCasts the operand into the type float\n    \t\n----\n\n[//]: # (keyword|operator_floor)\n### `floor`\n\n#### Possible use: \n  *  **`floor`** (`float`) --->  `float` \n\n#### Result: \nMaps the operand to the largest previous following integer, i.e. the largest integer not greater than x.\n\n#### Examples: \n```\nfloat var0   `file` \n\n#### Result: \nopens an existing repository\n\n#### Special cases:     \n  * If the specified string does not refer to an existing repository, an exception is risen.\n\n#### Examples: \n```\nfolder(\"../includes/\")\nfile dirT   `font` \n\n#### Result: \nCreates a new font, by specifying its name (either a font face name like 'Lucida Grande Bold' or 'Helvetica', or a logical name like 'Dialog', 'SansSerif', 'Serif', etc.), a size in points and a style, either #bold, #italic or #plain or a combination (addition) of them.\n\n#### Examples: \n```\nfont var0   `map`\n  *  **`frequency_of`** (`container` , `any expression`) --->  `map` \n\n#### Result: \nReturns a map with keys equal to the application of the right-hand argument (like collect) and values equal to the frequency of this key (i.e. how many times it has been obtained)\n\n#### Examples: \n```\nmap var0 `, `list`, `list`, `list`, `list`, `matrix`, `float`) --->  `float`\n  *  **`fuzzy_kappa`** (`list`, `list`, `list`, `list`, `list`, `matrix`, `float`, `list`) --->  `float` \n\n#### Result: \nfuzzy kappa indicator for 2 map comparisons: fuzzy_kappa(agents_list,list_vals1,list_vals2, output_similarity_per_agents,categories,fuzzy_categories_matrix, fuzzy_distance, weights). Reference: Visser, H., and T. de Nijs, 2006. The map comparison kit, Environmental Modelling & Software, 21\nfuzzy kappa indicator for 2 map comparisons: fuzzy_kappa(agents_list,list_vals1,list_vals2, output_similarity_per_agents,categories,fuzzy_categories_matrix, fuzzy_distance). Reference: Visser, H., and T. de Nijs, 2006. The map comparison kit, Environmental Modelling & Software, 21\n\n#### Examples: \n```\nfuzzy_kappa([ag1, ag2, ag3, ag4, ag5],[cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0],[0,1,0],[0,0,1]], 2, [1.0,3.0,2.0,2.0,4.0])\nfuzzy_kappa([ag1, ag2, ag3, ag4, ag5],[cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0],[0,1,0],[0,0,1]], 2)\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_fuzzy_kappa_sim)\n### `fuzzy_kappa_sim`\n\n#### Possible use: \n  *  **`fuzzy_kappa_sim`** (`list`, `list`, `list`, `list`, `list`, `list`, `matrix`, `float`) --->  `float`\n  *  **`fuzzy_kappa_sim`** (`list`, `list`, `list`, `list`, `list`, `list`, `matrix`, `float`, `list`) --->  `float` \n\n#### Result: \nfuzzy kappa simulation indicator for 2 map comparisons: fuzzy_kappa_sim(agents_list,list_vals1,list_vals2, output_similarity_per_agents,fuzzy_transitions_matrix, fuzzy_distance). Reference: Jasper van Vliet, Alex Hagen-Zanker, Jelle Hurkens, Hedwig van Delden, A fuzzy set approach to assess the predictive accuracy of land use simulations, Ecological Modelling, 24 July 2013, Pages 32-42, ISSN 0304-3800, \nfuzzy kappa simulation indicator for 2 map comparisons: fuzzy_kappa_sim(agents_list,list_vals1,list_vals2, output_similarity_per_agents,fuzzy_transitions_matrix, fuzzy_distance, weights). Reference: Jasper van Vliet, Alex Hagen-Zanker, Jelle Hurkens, Hedwig van Delden, A fuzzy set approach to assess the predictive accuracy of land use simulations, Ecological Modelling, 24 July 2013, Pages 32-42, ISSN 0304-3800,\n\n#### Examples: \n```\nfuzzy_kappa_sim([ag1, ag2, ag3, ag4, ag5], [cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,1]], 2)\nfuzzy_kappa_sim([ag1, ag2, ag3, ag4, ag5], [cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2], similarity_per_agents,[cat1,cat2,cat3],[[1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,1]], 2,[1.0,3.0,2.0,2.0,4.0])\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_gaml_file)\n### `gaml_file`\n\n#### Possible use: \n  *  **`gaml_file`** (`string`) --->  `file` \n\n#### Result: \nConstructs a file of type gaml. Allowed extensions are limited to gaml, experiment\n    \t\n----\n\n[//]: # (keyword|operator_gamma_index)\n### `gamma_index`\n\n#### Possible use: \n  *  **`gamma_index`** (`graph`) --->  `float` \n\n#### Result: \nreturns the gamma index of the graph (A measure of connectivity that considers the relationship between the number of observed links and the number of possible links: gamma = e/(3 `*` (v - 2)) - for planar graph.\n\n#### Examples: \n```\ngraph graphEpidemio   `float`\n  *  **`gamma_rnd`** (`float` , `float`) --->  `float` \n\n#### Result: \nreturns a random value from a gamma distribution with specified values of the shape and scale parameters\n\n#### Examples: \n```\ngamma_rnd(10.0,5.0)\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_gauss)\n### `gauss`\n\n#### Possible use: \n  *  **`gauss`** (`point`) --->  `float`\n  * `float` **`gauss`** `float` --->  `float`\n  *  **`gauss`** (`float` , `float`) --->  `float` \n\n#### Result: \nA value from a normally distributed random variable with expected value (mean) and variance (standardDeviation). The probability density function of such a variable is a Gaussian.\nA value from a normally distributed random variable with expected value (mean) and variance (standardDeviation). The probability density function of such a variable is a Gaussian.\n\n#### Special cases:     \n  * when the operand is a point, it is read as {mean, standardDeviation}    \n  * when standardDeviation value is 0.0, it always returns the mean value    \n  * when the operand is a point, it is read as {mean, standardDeviation}    \n  * when standardDeviation value is 0.0, it always returns the mean value\n\n#### Examples: \n```\nfloat var0 `, `species`, `int`, `bool`) --->  `graph`\n  *  **`generate_barabasi_albert`** (`species`, `species`, `int`, `int`, `bool`) --->  `graph` \n\n#### Result: \nreturns a random scale-free network (following Barabasi-Albert (BA) model).\nreturns a random scale-free network (following Barabasi-Albert (BA) model).  \n\n#### Comment: \nThe Barabasi-Albert (BA) model is an algorithm for generating random scale-free networks using a preferential attachment mechanism. A scale-free network is a network whose degree distribution follows a power law, at least asymptotically.Such networks are widely observed in natural and human-made systems, including the Internet, the world wide web, citation networks, and some social networks. [From Wikipedia article]The map operand should includes following elements:The Barabasi-Albert (BA) model is an algorithm for generating random scale-free networks using a preferential attachment mechanism. A scale-free network is a network whose degree distribution follows a power law, at least asymptotically.Such networks are widely observed in natural and human-made systems, including the Internet, the world wide web, citation networks, and some social networks. [From Wikipedia article]The map operand should includes following elements:\n\n#### Special cases:     \n  * \"vertices_specy\": the species of vertices    \n  * \"edges_species\": the species of edges    \n  * \"size\": the graph will contain (size + 1) nodes    \n  * \"m\": the number of edges added per novel node    \n  * \"synchronized\": is the graph and the species of vertices and edges synchronized?    \n  * \"agents\": list of existing node agents    \n  * \"edges_species\": the species of edges    \n  * \"size\": the graph will contain (size + 1) nodes    \n  * \"m\": the number of edges added per novel node    \n  * \"synchronized\": is the graph and the species of vertices and edges synchronized?\n\n#### Examples: \n```\ngraph graphEpidemio  graphEpidemio `, `species`, `bool`) --->  `graph`\n  *  **`generate_complete_graph`** (`container`, `species`, `float`, `bool`) --->  `graph`\n  *  **`generate_complete_graph`** (`species`, `species`, `int`, `bool`) --->  `graph`\n  *  **`generate_complete_graph`** (`species`, `species`, `int`, `float`, `bool`) --->  `graph` \n\n#### Result: \nreturns a fully connected graph.\nreturns a fully connected graph.\nreturns a fully connected graph.\nreturns a fully connected graph.  \n\n#### Comment: \nArguments should include following elements:Arguments should include following elements:Arguments should include following elements:Arguments should include following elements:\n\n#### Special cases:     \n  * \"agents\": list of existing node agents    \n  * \"edges_species\": the species of edges    \n  * \"layoutRadius\": nodes of the graph will be located on a circle with radius layoutRadius and centered in the environment.    \n  * \"synchronized\": is the graph and the species of vertices and edges synchronized?    \n  * \"vertices_specy\": the species of vertices    \n  * \"edges_species\": the species of edges    \n  * \"size\": the graph will contain size nodes.    \n  * \"layoutRadius\": nodes of the graph will be located on a circle with radius layoutRadius and centered in the environment.    \n  * \"synchronized\": is the graph and the species of vertices and edges synchronized?    \n  * \"vertices_specy\": the species of vertices    \n  * \"edges_species\": the species of edges    \n  * \"size\": the graph will contain size nodes.    \n  * \"synchronized\": is the graph and the species of vertices and edges synchronized?    \n  * \"agents\": list of existing node agents    \n  * \"edges_species\": the species of edges    \n  * \"synchronized\": is the graph and the species of vertices and edges synchronized?\n\n#### Examples: \n```\ngraph myGraph  myGraph  myGraph  myGraph `, `species`, `float`, `int`, `bool`) --->  `graph`\n  *  **`generate_watts_strogatz`** (`species`, `species`, `int`, `float`, `int`, `bool`) --->  `graph` \n\n#### Result: \nreturns a random small-world network (following Watts-Strogatz model).\nreturns a random small-world network (following Watts-Strogatz model).  \n\n#### Comment: \nThe Watts-Strogatz model is a random graph generation model that produces graphs with small-world properties, including short average path lengths and high clustering.A small-world network is a type of graph in which most nodes are not neighbors of one another, but most nodes can be reached from every other by a small number of hops or steps. [From Wikipedia article]The map operand should includes following elements:The Watts-Strogatz model is a random graph generation model that produces graphs with small-world properties, including short average path lengths and high clustering.A small-world network is a type of graph in which most nodes are not neighbors of one another, but most nodes can be reached from every other by a small number of hops or steps. [From Wikipedia article]The map operand should includes following elements:\n\n#### Special cases:     \n  * \"vertices_specy\": the species of vertices    \n  * \"edges_species\": the species of edges    \n  * \"size\": the graph will contain (size + 1) nodes. Size must be greater than k.    \n  * \"p\": probability to \"rewire\" an edge. So it must be between 0 and 1. The parameter is often called beta in the literature.    \n  * \"k\": the base degree of each node. k must be greater than 2 and even.    \n  * \"synchronized\": is the graph and the species of vertices and edges synchronized?    \n  * \"agents\": list of existing node agents    \n  * \"edges_species\": the species of edges    \n  * \"p\": probability to \"rewire\" an edge. So it must be between 0 and 1. The parameter is often called beta in the literature.    \n  * \"k\": the base degree of each node. k must be greater than 2 and even.    \n  * \"synchronized\": is the graph and the species of vertices and edges synchronized?\n\n#### Examples: \n```\ngraph myGraph  myGraph   `file` \n\n#### Result: \nConstructs a file of type geojson. Allowed extensions are limited to json, geojson, geo.json\n    \t\n----\n\n[//]: # (keyword|operator_geometric_mean)\n### `geometric_mean`\n\n#### Possible use: \n  *  **`geometric_mean`** (`container`) --->  `float` \n\n#### Result: \nthe geometric mean of the elements of the operand. See Geometric_mean for more details.  \n\n#### Comment: \nThe operator casts all the numerical element of the list into float. The elements that are not numerical are discarded.\n\n#### Examples: \n```\nfloat var0   `geometry` \n\n#### Result: \nCasts the operand into the type geometry\n    \t\n----\n\n[//]: # (keyword|operator_geometry_collection)\n### `geometry_collection`\n\n#### Possible use: \n  *  **`geometry_collection`** (`container`) --->  `geometry` \n\n#### Result: \nA geometry collection (multi-geometry) composed of the given list of geometries.\n\n#### Special cases:     \n  * if the operand is nil, returns the point geometry {0,0}    \n  * if the operand is composed of a single geometry, returns a copy of the geometry.\n\n#### Examples: \n```\ngeometry var0   `unknown`\n  *  **`get`** (`geometry` , `string`) --->  `unknown`\n  * `agent` **`get`** `string` --->  `unknown`\n  *  **`get`** (`agent` , `string`) --->  `unknown` \n\n#### Result: \nReads an attribute of the specified geometry (left operand). The attribute name is specified by the right operand.\nReads an attribute of the specified agent (left operand). The attribute name is specified by the right operand.\n\n#### Special cases:     \n  * Reading the attribute of a geometry \n  \n```\nstring geom_area   `predicate` \n\n#### Result: \nget the about value of the given emotion\n\n#### Examples: \n```\nget_about(emotion)\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_get_agent)\n### `get_agent`\n\n#### Possible use: \n  *  **`get_agent`** (`msi.gaml.architecture.simplebdi.SocialLink`) --->  `agent` \n\n#### Result: \nget the agent value of the given social link\n\n#### Examples: \n```\nget_agent(social_link1)\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_get_agent_cause)\n### `get_agent_cause`\n\n#### Possible use: \n  *  **`get_agent_cause`** (`emotion`) --->  `agent`\n  *  **`get_agent_cause`** (`predicate`) --->  `agent` \n\n#### Result: \nget the agent cause value of the given emotion\n\n#### Examples: \n```\nget_agent_cause(emotion)\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_get_decay)\n### `get_decay`\n\n#### Possible use: \n  *  **`get_decay`** (`emotion`) --->  `float` \n\n#### Result: \nget the decay value of the given emotion\n\n#### Examples: \n```\nget_decay(emotion)\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_get_dominance)\n### `get_dominance`\n\n#### Possible use: \n  *  **`get_dominance`** (`msi.gaml.architecture.simplebdi.SocialLink`) --->  `float` \n\n#### Result: \nget the dominance value of the given social link\n\n#### Examples: \n```\nget_dominance(social_link1)\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_get_familiarity)\n### `get_familiarity`\n\n#### Possible use: \n  *  **`get_familiarity`** (`msi.gaml.architecture.simplebdi.SocialLink`) --->  `float` \n\n#### Result: \nget the familiarity value of the given social link\n\n#### Examples: \n```\nget_familiarity(social_link1)\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_get_intensity)\n### `get_intensity`\n\n#### Possible use: \n  *  **`get_intensity`** (`emotion`) --->  `float` \n\n#### Result: \nget the intensity value of the given emotion\n\n#### Examples: \n```\nemotion set_intensity 12\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_get_lifetime)\n### `get_lifetime`\n\n#### Possible use: \n  *  **`get_lifetime`** (`predicate`) --->  `int`\n    \t\n----\n\n[//]: # (keyword|operator_get_liking)\n### `get_liking`\n\n#### Possible use: \n  *  **`get_liking`** (`msi.gaml.architecture.simplebdi.SocialLink`) --->  `float` \n\n#### Result: \nget the liking value of the given social link\n\n#### Examples: \n```\nget_liking(social_link1)\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_get_praiseworthiness)\n### `get_praiseworthiness`\n\n#### Possible use: \n  *  **`get_praiseworthiness`** (`predicate`) --->  `float`\n    \t\n----\n\n[//]: # (keyword|operator_get_priority)\n### `get_priority`\n\n#### Possible use: \n  *  **`get_priority`** (`predicate`) --->  `float`\n    \t\n----\n\n[//]: # (keyword|operator_get_solidarity)\n### `get_solidarity`\n\n#### Possible use: \n  *  **`get_solidarity`** (`msi.gaml.architecture.simplebdi.SocialLink`) --->  `float` \n\n#### Result: \nget the solidarity value of the given social link\n\n#### Examples: \n```\nget_solidarity(social_link1)\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_get_super_intention)\n### `get_super_intention`\n\n#### Possible use: \n  *  **`get_super_intention`** (`predicate`) --->  `predicate`\n    \t\n----\n\n[//]: # (keyword|operator_gif_file)\n### `gif_file`\n\n#### Possible use: \n  *  **`gif_file`** (`string`) --->  `file` \n\n#### Result: \nConstructs a file of type gif. Allowed extensions are limited to gif\n    \t\n----\n\n[//]: # (keyword|operator_gini)\n### `gini`\n\n#### Possible use: \n  *  **`gini`** (`list`) --->  `float`\n\n#### Special cases:     \n  * return the Gini Index of the given list of values (list of floats) \n  \n```\nfloat var0   `graph` \n\n#### Result: \nCasts the operand into the type graph\n    \t\n----\n\n[//]: # (keyword|operator_grayscale)\n### `grayscale`\n\n#### Possible use: \n  *  **`grayscale`** (`rgb`) --->  `rgb` \n\n#### Result: \nConverts rgb color to grayscale value  \n\n#### Comment: \nr=red, g=green, b=blue. Between 0 and 255 and gray = 0.299 `*` red + 0.587 `*` green + 0.114 `*` blue (Photoshop value)\n\n#### Examples: \n```\nrgb var0   `agent`\n  *  **`grid_at`** (`species` , `point`) --->  `agent` \n\n#### Result: \nreturns the cell of the grid (right-hand operand) at the position given by the right-hand operand  \n\n#### Comment: \nIf the left-hand operand is a point of floats, it is used as a point of ints.\n\n#### Special cases:     \n  * if the left-hand operand is not a grid cell species, returns nil\n\n#### Examples: \n```\nagent var0   `graph` \n\n#### Result: \ncreates a graph from a list of cells (operand). An edge is created between neighbors.\n\n#### Examples: \n```\nmy_cell_graph  `file` \n\n#### Result: \nConstructs a file of type grid. Allowed extensions are limited to asc, tif\n    \t\n----\n\n[//]: # (keyword|operator_group_by)\n### `group_by`\n\n#### Possible use: \n  * `container` **`group_by`** `any expression` --->  `map`\n  *  **`group_by`** (`container` , `any expression`) --->  `map` \n\n#### Result: \nReturns a map, where the keys take the possible values of the right-hand operand and the map values are the list of elements of the left-hand operand associated to the key value  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.\n\n#### Special cases:     \n  * if the left-hand operand is nil, group_by throws an error\n\n#### Examples: \n```\nmap var0  3); \t// var0 equals [false::[1, 2, 3], true::[4, 5, 6, 7, 8]]\nmap var1  4); \t// var3 equals [false::[2, 4], true::[6]]\n```\n      \n\n#### See also: \n[first_with](OperatorsDM#first_with), [last_with](OperatorsDM#last_with), [where](OperatorsNZ#where), \n    \t\n----\n\n[//]: # (keyword|operator_harmonic_mean)\n### `harmonic_mean`\n\n#### Possible use: \n  *  **`harmonic_mean`** (`container`) --->  `float` \n\n#### Result: \nthe harmonic mean of the elements of the operand. See Harmonic_mean for more details.  \n\n#### Comment: \nThe operator casts all the numerical element of the list into float. The elements that are not numerical are discarded.\n\n#### Examples: \n```\nfloat var0   `geometry`\n  *  **`hexagon`** (`float`) --->  `geometry` \n\n#### Result: \nA hexagon geometry which the given with and height  \n\n#### Comment: \nthe center of the hexagon is by default the location of the current agent in which has been called this operator.the center of the hexagon is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns nil if the operand is nil.    \n  * returns nil if the operand is nil.\n\n#### Examples: \n```\ngeometry var0 ` **`hierarchical_clustering`** `float` --->  `container`\n  *  **`hierarchical_clustering`** (`container` , `float`) --->  `container` \n\n#### Result: \nA tree (list of list) contained groups of agents clustered by distance considering a distance min between two groups.  \n\n#### Comment: \nuse of hierarchical clustering with Minimum for linkage criterion between two groups of agents.\n\n#### Examples: \n```\ncontainer var0   `rgb`\n  *  **`hsb`** (`float`, `float`, `float`, `int`) --->  `rgb`\n  *  **`hsb`** (`float`, `float`, `float`, `float`) --->  `rgb` \n\n#### Result: \nConverts hsb (h=hue, s=saturation, b=brightness) value to Gama color  \n\n#### Comment: \nh,s and b components should be floating-point values between 0.0 and 1.0 and when used alpha should be an integer (between 0 and 255) or a float (between 0 and 1) . Examples: Red=(0.0,1.0,1.0), Yellow=(0.16,1.0,1.0), Green=(0.33,1.0,1.0), Cyan=(0.5,1.0,1.0), Blue=(0.66,1.0,1.0), Magenta=(0.83,1.0,1.0)\n\n#### Examples: \n```\nrgb var0   `float` \n\n#### Result: \nReturns sqrt(x2 +y2) without intermediate overflow or underflow.\n\n#### Special cases:     \n  * If either argument is infinite, then the result is positive infinity. If either argument is NaN and neither argument is infinite, then the result is NaN.\n\n#### Examples: \n```\nfloat var0   `file` \n\n#### Result: \nConstructs a file of type image. Allowed extensions are limited to tiff, jpg, jpeg, png, pict, bmp\n    \t\n----\n\n[//]: # (keyword|operator_in)\n### `in`\n\n#### Possible use: \n  * `unknown` **`in`** `container` --->  `bool`\n  *  **`in`** (`unknown` , `container`) --->  `bool`\n  * `string` **`in`** `string` --->  `bool`\n  *  **`in`** (`string` , `string`) --->  `bool` \n\n#### Result: \ntrue if the right operand contains the left operand, false otherwise  \n\n#### Comment: \nthe definition of in depends on the container\n\n#### Special cases:     \n  * if the right operand is nil or empty, in returns false    \n  * if both operands are strings, returns true if the left-hand operand patterns is included in to the right-hand string;\n\n#### Examples: \n```\nbool var0   `int`\n  *  **`in_degree_of`** (`graph` , `unknown`) --->  `int` \n\n#### Result: \nreturns the in degree of a vertex (right-hand operand) in the graph given as left-hand operand.\n\n#### Examples: \n```\nint var1   `container`\n  *  **`in_edges_of`** (`graph` , `unknown`) --->  `container` \n\n#### Result: \nreturns the list of the in-edges of a vertex (right-hand operand) in the graph given as left-hand operand.\n\n#### Examples: \n```\ncontainer var1   `string`\n  *  **`indented_by`** (`string` , `int`) --->  `string` \n\n#### Result: \nConverts a (possibly multiline) string by indenting it by a number -- specified by the second operand -- of tabulations to the right\n    \t\n----\n\n[//]: # (keyword|operator_index_by)\n### `index_by`\n\n#### Possible use: \n  * `container` **`index_by`** `any expression` --->  `map`\n  *  **`index_by`** (`container` , `any expression`) --->  `map` \n\n#### Result: \nproduces a new map from the evaluation of the right-hand operand for each element of the left-hand operand\n\n#### Special cases:     \n  * if the left-hand operand is nil, index_by throws an error. If the operation results in duplicate keys, only the first value corresponding to the key is kept\n\n#### Examples: \n```\nmap var0   `int`\n  *  **`index_of`** (`container` , `unknown`) --->  `int`\n  * `map` **`index_of`** `unknown` --->  `unknown`\n  *  **`index_of`** (`map` , `unknown`) --->  `unknown`\n  * `matrix` **`index_of`** `unknown` --->  `point`\n  *  **`index_of`** (`matrix` , `unknown`) --->  `point`\n  * `string` **`index_of`** `string` --->  `int`\n  *  **`index_of`** (`string` , `string`) --->  `int`\n  * `species` **`index_of`** `unknown` --->  `int`\n  *  **`index_of`** (`species` , `unknown`) --->  `int` \n\n#### Result: \nthe index of the first occurence of the right operand in the left operand container\nthe index of the first occurence of the right operand in the left operand container  \n\n#### Comment: \nThe definition of index_of and the type of the index depend on the container\n\n#### Special cases:     \n  * if the left operand is a map, index_of returns the index of a value or nil if the value is not mapped    \n  * if the left operator is a species, returns the index of an agent in a species. If the argument is not an agent of this species, returns -1. Use int(agent) instead    \n  * if the left operand is a list, index_of returns the index as an integer \n  \n```\nint var1 ` **`inside`** `geometry` --->  `list`\n  *  **`inside`** (`container` , `geometry`) --->  `list` \n\n#### Result: \nA list of agents or geometries among the left-operand list, species or meta-population (addition of species), covered by the operand (casted as a geometry).\n\n#### Examples: \n```\nlist var0  var1   `int` \n\n#### Result: \nCasts the operand into the type int\n    \t\n----\n\n[//]: # (keyword|operator_inter)\n### `inter`\n\n#### Possible use: \n  * `container` **`inter`** `container` --->  `container`\n  *  **`inter`** (`container` , `container`) --->  `container`\n  * `geometry` **`inter`** `geometry` --->  `geometry`\n  *  **`inter`** (`geometry` , `geometry`) --->  `geometry` \n\n#### Result: \nthe intersection of the two operands\nA geometry resulting from the intersection between the two geometries  \n\n#### Comment: \nboth containers are transformed into sets (so without duplicated element, cf. remove_deplicates operator) before the set intersection is computed.\n\n#### Special cases:     \n  * if an operand is a graph, it will be transformed into the set of its nodes    \n  * returns nil if one of the operands is nil    \n  * if an operand is a map, it will be transformed into the set of its values \n  \n```\ncontainer var0   `container` \n\n#### Result: \na new list containing the interleaved elements of the containers contained in the operand  \n\n#### Comment: \nthe operand should be a list of lists of elements. The result is a list of elements.\n\n#### Examples: \n```\ncontainer var0   `unknown`\n  *  **`internal_at`** (`agent` , `container`) --->  `unknown`\n  * `geometry` **`internal_at`** `container` --->  `unknown`\n  *  **`internal_at`** (`geometry` , `container`) --->  `unknown`\n  * `container` **`internal_at`** `list` --->  `ValueType`\n  *  **`internal_at`** (`container` , `list`) --->  `ValueType` \n\n#### Result: \nFor internal use only. Corresponds to the implementation, for agents, of the access to containers with [index]\nFor internal use only. Corresponds to the implementation, for geometries, of the access to containers with [index]\nFor internal use only. Corresponds to the implementation of the access to containers with [index]    \n\n#### See also: \n[at](OperatorsAC#at), \n    \t\n----\n\n[//]: # (keyword|operator_internal_integrated_value)\n### `internal_integrated_value`\n\n#### Possible use: \n  * `any expression` **`internal_integrated_value`** `any expression` --->  `container`\n  *  **`internal_integrated_value`** (`any expression` , `any expression`) --->  `container` \n\n#### Result: \nFor internal use only. Corresponds to the implementation, for agents, of the access to containers with [index]\n    \t\n----\n\n[//]: # (keyword|operator_internal_zero_order_equation)\n### `internal_zero_order_equation`\n\n#### Possible use: \n  *  **`internal_zero_order_equation`** (`any expression`) --->  `float`\n    \t\n----\n\n[//]: # (keyword|operator_intersection)\n### `intersection`\nSame signification as [inter](OperatorsDM#inter)\n    \t\n----\n\n[//]: # (keyword|operator_intersects)\n### `intersects`\n\n#### Possible use: \n  * `geometry` **`intersects`** `geometry` --->  `bool`\n  *  **`intersects`** (`geometry` , `geometry`) --->  `bool` \n\n#### Result: \nA boolean, equal to true if the left-geometry (or agent/point) intersects the right-geometry (or agent/point).\n\n#### Special cases:     \n  * if one of the operand is null, returns false.\n\n#### Examples: \n```\nbool var0   `matrix` \n\n#### Result: \nThe inverse matrix of the given matrix. If no inverse exists, returns a matrix that has properties that resemble that of an inverse.\n\n#### Examples: \n```\nmatrix var0   `bool`\n  *  **`is`** (`unknown` , `any expression`) --->  `bool` \n\n#### Result: \nreturns true if the left operand is of the right operand type, false otherwise\n\n#### Examples: \n```\nbool var0   `bool` \n\n#### Result: \nTests whether the operand is a csv file.\n    \t\n----\n\n[//]: # (keyword|operator_is_dxf)\n### `is_dxf`\n\n#### Possible use: \n  *  **`is_dxf`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a dxf file.\n    \t\n----\n\n[//]: # (keyword|operator_is_finite)\n### `is_finite`\n\n#### Possible use: \n  *  **`is_finite`** (`float`) --->  `bool` \n\n#### Result: \nReturns whether the argument is a finite number or not\n\n#### Examples: \n```\nbool var0   `bool` \n\n#### Result: \nTests whether the operand is a gaml file.\n    \t\n----\n\n[//]: # (keyword|operator_is_geojson)\n### `is_geojson`\n\n#### Possible use: \n  *  **`is_geojson`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a geojson file.\n    \t\n----\n\n[//]: # (keyword|operator_is_gif)\n### `is_gif`\n\n#### Possible use: \n  *  **`is_gif`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a gif file.\n    \t\n----\n\n[//]: # (keyword|operator_is_grid)\n### `is_grid`\n\n#### Possible use: \n  *  **`is_grid`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a grid file.\n    \t\n----\n\n[//]: # (keyword|operator_is_image)\n### `is_image`\n\n#### Possible use: \n  *  **`is_image`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a image file.\n    \t\n----\n\n[//]: # (keyword|operator_is_json)\n### `is_json`\n\n#### Possible use: \n  *  **`is_json`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a json file.\n    \t\n----\n\n[//]: # (keyword|operator_is_number)\n### `is_number`\n\n#### Possible use: \n  *  **`is_number`** (`string`) --->  `bool`\n  *  **`is_number`** (`float`) --->  `bool` \n\n#### Result: \ntests whether the operand represents a numerical value\nReturns whether the argument is a real number or not  \n\n#### Comment: \nNote that the symbol . should be used for a float value (a string with , will not be considered as a numeric value). Symbols e and E are also accepted. A hexadecimal value should begin with #.\n\n#### Examples: \n```\nbool var0   `bool` \n\n#### Result: \nTests whether the operand is a obj file.\n    \t\n----\n\n[//]: # (keyword|operator_is_osm)\n### `is_osm`\n\n#### Possible use: \n  *  **`is_osm`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a osm file.\n    \t\n----\n\n[//]: # (keyword|operator_is_pgm)\n### `is_pgm`\n\n#### Possible use: \n  *  **`is_pgm`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a pgm file.\n    \t\n----\n\n[//]: # (keyword|operator_is_property)\n### `is_property`\n\n#### Possible use: \n  *  **`is_property`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a property file.\n    \t\n----\n\n[//]: # (keyword|operator_is_R)\n### `is_R`\n\n#### Possible use: \n  *  **`is_R`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a R file.\n    \t\n----\n\n[//]: # (keyword|operator_is_shape)\n### `is_shape`\n\n#### Possible use: \n  *  **`is_shape`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a shape file.\n    \t\n----\n\n[//]: # (keyword|operator_is_skill)\n### `is_skill`\n\n#### Possible use: \n  * `unknown` **`is_skill`** `string` --->  `bool`\n  *  **`is_skill`** (`unknown` , `string`) --->  `bool` \n\n#### Result: \nreturns true if the left operand is an agent whose species implements the right-hand skill name\n\n#### Examples: \n```\nbool var0   `bool` \n\n#### Result: \nTests whether the operand is a svg file.\n    \t\n----\n\n[//]: # (keyword|operator_is_text)\n### `is_text`\n\n#### Possible use: \n  *  **`is_text`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a text file.\n    \t\n----\n\n[//]: # (keyword|operator_is_threeds)\n### `is_threeds`\n\n#### Possible use: \n  *  **`is_threeds`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a threeds file.\n    \t\n----\n\n[//]: # (keyword|operator_is_URL)\n### `is_URL`\n\n#### Possible use: \n  *  **`is_URL`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a URL file.\n    \t\n----\n\n[//]: # (keyword|operator_is_xml)\n### `is_xml`\n\n#### Possible use: \n  *  **`is_xml`** (`any`) --->  `bool` \n\n#### Result: \nTests whether the operand is a xml file.\n    \t\n----\n\n[//]: # (keyword|operator_json_file)\n### `json_file`\n\n#### Possible use: \n  *  **`json_file`** (`string`) --->  `file` \n\n#### Result: \nConstructs a file of type json. Allowed extensions are limited to json\n    \t\n----\n\n[//]: # (keyword|operator_kappa)\n### `kappa`\n\n#### Possible use: \n  *  **`kappa`** (`list`, `list`, `list`) --->  `float`\n  *  **`kappa`** (`list`, `list`, `list`, `list`) --->  `float` \n\n#### Result: \nkappa indicator for 2 map comparisons: kappa(list_vals1,list_vals2,categories). Reference: Cohen, J. A coefficient of agreement for nominal scales. Educ. Psychol. Meas. 1960, 20.\nkappa indicator for 2 map comparisons: kappa(list_vals1,list_vals2,categories, weights). Reference: Cohen, J. A coefficient of agreement for nominal scales. Educ. Psychol. Meas. 1960, 20.\n\n#### Examples: \n```\nkappa([cat1,cat1,cat2,cat3,cat2],[cat2,cat1,cat2,cat1,cat2],[cat1,cat2,cat3])\nfloat var1   `float`\n  *  **`kappa_sim`** (`list`, `list`, `list`, `list`, `list`) --->  `float` \n\n#### Result: \nkappa simulation indicator for 2 map comparisons: kappa(list_valsInits,list_valsObs,list_valsSim, categories). Reference: van Vliet, J., Bregt, A.K. & Hagen-Zanker, A. (2011). Revisiting Kappa to account for change in the accuracy assessment of land-use change models, Ecological Modelling 222(8).\nkappa simulation indicator for 2 map comparisons: kappa(list_valsInits,list_valsObs,list_valsSim, categories, weights). Reference: van Vliet, J., Bregt, A.K. & Hagen-Zanker, A. (2011). Revisiting Kappa to account for change in the accuracy assessment of land-use change models, Ecological Modelling 222(8)\n\n#### Examples: \n```\nkappa([cat1,cat1,cat2,cat2,cat2],[cat2,cat1,cat2,cat1,cat3],[cat2,cat1,cat2,cat3,cat3], [cat1,cat2,cat3])\nkappa([cat1,cat1,cat2,cat2,cat2],[cat2,cat1,cat2,cat1,cat3],[cat2,cat1,cat2,cat3,cat3], [cat1,cat2,cat3],[1.0, 2.0, 3.0, 1.0, 5.0])\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_kmeans)\n### `kmeans`\n\n#### Possible use: \n  * `list` **`kmeans`** `int` --->  `list`\n  *  **`kmeans`** (`list` , `int`) --->  `list`\n  *  **`kmeans`** (`list`, `int`, `int`) --->  `list` \n\n#### Result: \nreturns the list of clusters (list of instance indices) computed with the kmeans++ algorithm from the first operand data according to the number of clusters to split the data into (k) and the maximum number of iterations to run the algorithm for (If negative, no maximum will be used) (maxIt). Usage: kmeans(data,k,maxit)\nreturns the list of clusters (list of instance indices) computed with the kmeans++ algorithm from the first operand data according to the number of clusters to split the data into (k). Usage: kmeans(data,k)\n\n#### Special cases:     \n  * if the lengths of two vectors in the right-hand aren't equal, returns 0    \n  * if the lengths of two vectors in the right-hand aren't equal, returns 0\n\n#### Examples: \n```\nkmeans ([[2,4,5], [3,8,2], [1,1,3], [4,3,4]],2,10)\nkmeans ([[2,4,5], [3,8,2], [1,1,3], [4,3,4]],2)\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_kurtosis)\n### `kurtosis`\n\n#### Possible use: \n  *  **`kurtosis`** (`list`) --->  `float` \n\n#### Result: \nreturns kurtosis value computed from the operand list of values\n\n#### Special cases:     \n  * if the length of the list is lower than 3, returns NaN\n\n#### Examples: \n```\nkurtosis ([1,2,3,4,5])\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_last)\n### `last`\n\n#### Possible use: \n  *  **`last`** (`string`) --->  `string`\n  *  **`last`** (`container`) --->  `ValueType`\n  * `int` **`last`** `container` --->  `container`\n  *  **`last`** (`int` , `container`) --->  `container` \n\n#### Result: \nthe last element of the operand  \n\n#### Comment: \nthe last operator behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a map, last returns the value of the last pair (in insertion order)    \n  * if it is a file, last returns the last element of the content of the file (that is also a container)    \n  * if it is a population, last returns the last agent of the population    \n  * if it is a graph, last returns a list containing the last edge created    \n  * if it is a matrix, last returns the element at {length-1,length-1} in the matrix    \n  * for a matrix of int or float, it will return 0 if the matrix is empty    \n  * for a matrix of object or geometry, it will return nil if the matrix is empty    \n  * if it is a string, last returns a string composed of its last character, or an empty string if the operand is empty \n  \n```\nstring var0   `unknown`\n  *  **`last_index_of`** (`map` , `unknown`) --->  `unknown`\n  * `string` **`last_index_of`** `string` --->  `int`\n  *  **`last_index_of`** (`string` , `string`) --->  `int`\n  * `species` **`last_index_of`** `unknown` --->  `int`\n  *  **`last_index_of`** (`species` , `unknown`) --->  `int`\n  * `container` **`last_index_of`** `unknown` --->  `int`\n  *  **`last_index_of`** (`container` , `unknown`) --->  `int`\n  * `matrix` **`last_index_of`** `unknown` --->  `point`\n  *  **`last_index_of`** (`matrix` , `unknown`) --->  `point` \n\n#### Result: \nthe index of the last occurence of the right operand in the left operand container  \n\n#### Comment: \nThe definition of last_index_of and the type of the index depend on the container\n\n#### Special cases:     \n  * if the left operand is a species, the last index of an agent is the same as its index    \n  * if the left operand is a map, last_index_of returns the index as an int (the key of the pair) \n  \n```\nunknown var0   `unknown`\n  *  **`last_with`** (`container` , `any expression`) --->  `unknown` \n\n#### Result: \nthe last element of the left-hand operand that makes the right-hand operand evaluate to true.  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.\n\n#### Special cases:     \n  * if the left-hand operand is nil, last_with throws an error.    \n  * If there is no element that satisfies the condition, it returns nil    \n  * if the left-operand is a map, the keyword each will contain each value \n  \n```\nunknown var4 = 4); \t// var4 equals 6\nunknown var5 = 4); \t// var5 equals 5::6\n\n``` \n\n\n\n#### Examples: \n```\nunknown var0  3); \t// var0 equals 8\nunknown var2  32); \t// var3 equals node3\n```\n      \n\n#### See also: \n[group_by](OperatorsDM#group_by), [first_with](OperatorsDM#first_with), [where](OperatorsNZ#where), \n    \t\n----\n\n[//]: # (keyword|operator_layout)\n### `layout`\n\n#### Possible use: \n  * `graph` **`layout`** `string` --->  `graph`\n  *  **`layout`** (`graph` , `string`) --->  `graph`\n  *  **`layout`** (`graph`, `string`, `int`) --->  `graph`\n  *  **`layout`** (`graph`, `string`, `int`, `map`) --->  `graph` \n\n#### Result: \nlayouts a GAMA graph.\n    \t\n----\n\n[//]: # (keyword|operator_length)\n### `length`\n\n#### Possible use: \n  *  **`length`** (`string`) --->  `int`\n  *  **`length`** (`container`) --->  `int` \n\n#### Result: \nthe number of elements contained in the operand  \n\n#### Comment: \nthe length operator behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a population, length returns number of agents of the population    \n  * if it is a graph, length returns the number of vertexes or of edges (depending on the way it was created)    \n  * if it is a string, length returns the number of characters \n  \n```\nint var0 `) --->  `geometry`\n  * `container` **`line`** `float` --->  `geometry`\n  *  **`line`** (`container` , `float`) --->  `geometry` \n\n#### Result: \nA polyline geometry from the given list of points represented as a cylinder of radius r.\nA polyline geometry from the given list of points.\n\n#### Special cases:     \n  * if the operand is nil, returns the point geometry {0,0}    \n  * if the operand is composed of a single point, returns a point geometry.    \n  * if the operand is nil, returns the point geometry {0,0}    \n  * if the operand is composed of a single point, returns a point geometry.    \n  * if a radius is added, the given list of points represented as a cylinder of radius r \n  \n```\ngeometry var0   `geometry`\n  *  **`link`** (`geometry` , `geometry`) --->  `geometry` \n\n#### Result: \nA dynamic line geometry between the location of the two operands  \n\n#### Comment: \nThe geometry of the link is a line between the locations of the two operands, which is built and maintained dynamically\n\n#### Special cases:     \n  * if one of the operands is nil, link returns a point geometry at the location of the other. If both are null, it returns a point geometry at {0,0}\n\n#### Examples: \n```\ngeometry var0   `list` \n\n#### Result: \nCasts the operand into the type list\n    \t\n----\n\n[//]: # (keyword|operator_list_with)\n### `list_with`\n\n#### Possible use: \n  * `int` **`list_with`** `any expression` --->  `container`\n  *  **`list_with`** (`int` , `any expression`) --->  `container` \n\n#### Result: \ncreates a list with a size provided by the first operand, and filled with the second operand  \n\n#### Comment: \nNote that the right operand  should be positive, and that the second one is evaluated for each position  in the list.    \n\n#### See also: \n[list](OperatorsDM#list), \n    \t\n----\n\n[//]: # (keyword|operator_ln)\n### `ln`\n\n#### Possible use: \n  *  **`ln`** (`int`) --->  `float`\n  *  **`ln`** (`float`) --->  `float` \n\n#### Result: \nReturns the natural logarithm (base e) of the operand.\n\n#### Special cases:     \n  * an exception is raised if the operand is less than zero.\n\n#### Examples: \n```\nfloat var0   `graph`\n  * `string` **`load_graph_from_file`** `file` --->  `graph`\n  *  **`load_graph_from_file`** (`string` , `file`) --->  `graph`\n  * `string` **`load_graph_from_file`** `string` --->  `graph`\n  *  **`load_graph_from_file`** (`string` , `string`) --->  `graph`\n  *  **`load_graph_from_file`** (`string`, `species`, `species`) --->  `graph`\n  *  **`load_graph_from_file`** (`string`, `file`, `species`, `species`) --->  `graph`\n  *  **`load_graph_from_file`** (`string`, `string`, `species`, `species`) --->  `graph`\n  *  **`load_graph_from_file`** (`string`, `string`, `species`, `species`, `bool`) --->  `graph` \n\n#### Result: \nloads a graph from a file\nreturns a graph loaded from a given file encoded into a given format. The last boolean parameter indicates whether the resulting graph will be considered as spatial or not by GAMA  \n\n#### Comment: \nAvailable formats: \"pajek\": Pajek (Slovene word for Spider) is a program, for Windows, for analysis and visualization of large networks. See: http://pajek.imfm.si/doku.php?id=pajek for more details.\"lgl\": LGL is a compendium of applications for making the visualization of large networks and trees tractable. See: http://lgl.sourceforge.net/ for more details.\"dot\": DOT is a plain text graph description language. It is a simple way of describing graphs that both humans and computer programs can use. See: http://en.wikipedia.org/wiki/DOT_language for more details.\"edge\": This format is a simple text file with numeric vertex ids defining the edges.\"gexf\": GEXF (Graph Exchange XML Format) is a language for describing complex networks structures, their associated data and dynamics. Started in 2007 at Gephi project by different actors, deeply involved in graph exchange issues, the gexf specifications are mature enough to claim being both extensible and open, and suitable for real specific applications. See: http://gexf.net/format/ for more details.\"graphml\": GraphML is a comprehensive and easy-to-use file format for graphs based on XML. See: http://graphml.graphdrawing.org/ for more details.\"tlp\" or \"tulip\": TLP is the Tulip software graph format. See: http://tulip.labri.fr/TulipDrupal/?q=tlp-file-format for more details. \"ncol\": This format is used by the Large Graph Layout progra. It is simply a symbolic weighted edge list. It is a simple text file with one edge per line. An edge is defined by two symbolic vertex names separated by whitespace. (The symbolic vertex names themselves cannot contain whitespace.) They might followed by an optional number, this will be the weight of the edge. See: http://bioinformatics.icmb.utexas.edu/lgl for more details.The map operand should includes following elements:Available formats: \"pajek\": Pajek (Slovene word for Spider) is a program, for Windows, for analysis and visualization of large networks. See: http://pajek.imfm.si/doku.php?id=pajek for more details.\"lgl\": LGL is a compendium of applications for making the visualization of large networks and trees tractable. See: http://lgl.sourceforge.net/ for more details.\"dot\": DOT is a plain text graph description language. It is a simple way of describing graphs that both humans and computer programs can use. See: http://en.wikipedia.org/wiki/DOT_language for more details.\"edge\": This format is a simple text file with numeric vertex ids defining the edges.\"gexf\": GEXF (Graph Exchange XML Format) is a language for describing complex networks structures, their associated data and dynamics. Started in 2007 at Gephi project by different actors, deeply involved in graph exchange issues, the gexf specifications are mature enough to claim being both extensible and open, and suitable for real specific applications. See: http://gexf.net/format/ for more details.\"graphml\": GraphML is a comprehensive and easy-to-use file format for graphs based on XML. See: http://graphml.graphdrawing.org/ for more details.\"tlp\" or \"tulip\": TLP is the Tulip software graph format. See: http://tulip.labri.fr/TulipDrupal/?q=tlp-file-format for more details. \"ncol\": This format is used by the Large Graph Layout progra. It is simply a symbolic weighted edge list. It is a simple text file with one edge per line. An edge is defined by two symbolic vertex names separated by whitespace. (The symbolic vertex names themselves cannot contain whitespace.) They might followed by an optional number, this will be the weight of the edge. See: http://bioinformatics.icmb.utexas.edu/lgl for more details.The map operand should includes following elements:\n\n#### Special cases:     \n  * \"format\": the format of the file    \n  * \"filename\": the filename of the file containing the network    \n  * \"edges_species\": the species of edges    \n  * \"vertices_specy\": the species of vertices    \n  * \"format\": the format of the file    \n  * \"filename\": the filename of the file containing the network    \n  * \"edges_species\": the species of edges    \n  * \"vertices_specy\": the species of vertices    \n  * \"format\": the format of the file, \"file\": the file containing the network, \"edges_species\": the species of edges, \"vertices_specy\": the species of vertices \n  \n```\ngraph myGraph  myGraph  myGraph  myGraph  myGraph  myGraph  myGraph   `graph`\n  *  **`load_shortest_paths`** (`graph` , `matrix`) --->  `graph` \n\n#### Result: \nput in the graph cache the computed shortest paths contained in the matrix (rows: source, columns: target)\n\n#### Examples: \n```\ngraph var0   `float`\n  *  **`log`** (`int`) --->  `float` \n\n#### Result: \nReturns the logarithm (base 10) of the operand.\n\n#### Special cases:     \n  * an exception is raised if the operand is equals or less than zero.\n\n#### Examples: \n```\nfloat var0   `string` \n\n#### Result: \nConverts all of the characters in the string operand to lower case\n\n#### Examples: \n```\nstring var0   `map` \n\n#### Result: \nCasts the operand into the type map\n    \t\n----\n\n[//]: # (keyword|operator_masked_by)\n### `masked_by`\n\n#### Possible use: \n  * `geometry` **`masked_by`** `container` --->  `geometry`\n  *  **`masked_by`** (`geometry` , `container`) --->  `geometry`\n  *  **`masked_by`** (`geometry`, `container`, `int`) --->  `geometry`\n\n#### Examples: \n```\ngeometry var0   `msi.gama.util.GamaMaterial`\n  *  **`material`** (`float` , `float`) --->  `msi.gama.util.GamaMaterial` \n\n#### Result: \nReturns\n\n#### Examples: \n```\n\n```\n      \n\n#### See also: \n[](OperatorsNZ#), \n    \t\n----\n\n[//]: # (keyword|operator_matrix)\n### `matrix`\n\n#### Possible use: \n  *  **`matrix`** (`any`) --->  `matrix` \n\n#### Result: \nCasts the operand into the type matrix\n    \t\n----\n\n[//]: # (keyword|operator_matrix_with)\n### `matrix_with`\n\n#### Possible use: \n  * `point` **`matrix_with`** `any expression` --->  `matrix`\n  *  **`matrix_with`** (`point` , `any expression`) --->  `matrix` \n\n#### Result: \ncreates a matrix with a size provided by the first operand, and filled with the second operand  \n\n#### Comment: \nNote that both components of the right operand point should be positive, otherwise an exception is raised.    \n\n#### See also: \n[matrix](OperatorsDM#matrix), [as_matrix](OperatorsAC#as_matrix), \n    \t\n----\n\n[//]: # (keyword|operator_max)\n### `max`\n\n#### Possible use: \n  *  **`max`** (`container`) --->  `unknown` \n\n#### Result: \nthe maximum element found in the operand  \n\n#### Comment: \nthe max operator behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a population of a list of other type: max transforms all elements into integer and returns the maximum of them    \n  * if it is a map, max returns the maximum among the list of all elements value    \n  * if it is a file, max returns the maximum of the content of the file (that is also a container)    \n  * if it is a graph, max returns the maximum of the list of the elements of the graph (that can be the list of edges or vertexes depending on the graph)    \n  * if it is a matrix of int, float or object, max returns the maximum of all the numerical elements (thus all elements for integer and float matrices)    \n  * if it is a matrix of geometry, max returns the maximum of the list of the geometries    \n  * if it is a matrix of another type, max returns the maximum of the elements transformed into float    \n  * if it is a list of int of float, max returns the maximum of all the elements \n  \n```\nunknown var0   `unknown`\n  *  **`max_of`** (`container` , `any expression`) --->  `unknown` \n\n#### Result: \nthe maximum value of the right-hand expression evaluated on each of the elements of the left-hand operand  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.\n\n#### Special cases:     \n  * As of GAMA 1.6, if the left-hand operand is nil or empty, max_of throws an error    \n  * if the left-operand is a map, the keyword each will contain each value \n  \n```\nunknown var5   `list` \n\n#### Result: \nreturns the maximal cliques of a graph using the Bron-Kerbosch clique detection algorithm: A clique is maximal if it is impossible to enlarge it by adding another vertex from the graph. Note that a maximal clique is not necessarily the biggest clique in the graph.\n\n#### Examples: \n```\ngraph my_graph  var1   `unknown` \n\n#### Result: \nthe mean of all the elements of the operand  \n\n#### Comment: \nthe elements of the operand are summed (see sum for more details about the sum of container elements ) and then the sum value is divided by the number of elements.\n\n#### Special cases:     \n  * if the container contains points, the result will be a point. If the container contains rgb values, the result will be a rgb color\n\n#### Examples: \n```\nunknown var0   `float` \n\n#### Result: \nthe deviation from the mean of all the elements of the operand. See Mean_deviation for more details.  \n\n#### Comment: \nThe operator casts all the numerical element of the list into float. The elements that are not numerical are discarded.\n\n#### Examples: \n```\nfloat var0   `unknown`\n  *  **`mean_of`** (`container` , `any expression`) --->  `unknown` \n\n#### Result: \nthe mean of the right-hand expression evaluated on each of the elements of the left-hand operand  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.\n\n#### Special cases:     \n  * if the left-operand is a map, the keyword each will contain each value \n  \n```\nunknown var2   `unknown` \n\n#### Result: \nreturns the mean value of given vector (right-hand operand) in given variable  (left-hand operand).\n\n#### Examples: \n```\nlist X   `unknown` \n\n#### Result: \nthe median of all the elements of the operand.\n\n#### Special cases:     \n  * if the container contains points, the result will be a point. If the container contains rgb values, the result will be a rgb color\n\n#### Examples: \n```\nunknown var0   `msi.gama.extensions.messaging.GamaMessage` \n\n#### Result: \nto be added\n    \t\n----\n\n[//]: # (keyword|operator_milliseconds_between)\n### `milliseconds_between`\n\n#### Possible use: \n  * `date` **`milliseconds_between`** `date` --->  `float`\n  *  **`milliseconds_between`** (`date` , `date`) --->  `float` \n\n#### Result: \nProvide the exact number of milliseconds between two dates. This number can be positive or negative (if the second operand is smaller than the first one)\n\n#### Examples: \n```\nmilliseconds_between(d1, d2) -: 10 \n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_min)\n### `min`\n\n#### Possible use: \n  *  **`min`** (`container`) --->  `unknown` \n\n#### Result: \nthe minimum element found in the operand.  \n\n#### Comment: \nthe min operator behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a list of points: min returns the minimum of all points as a point (i.e. the point with the smallest coordinate on the x-axis, in case of equality the point with the smallest coordinate on the y-axis is chosen. If all the points are equal, the first one is returned. )    \n  * if it is a population of a list of other types: min transforms all elements into integer and returns the minimum of them    \n  * if it is a map, min returns the minimum among the list of all elements value    \n  * if it is a file, min returns the minimum of the content of the file (that is also a container)    \n  * if it is a graph, min returns the minimum of the list of the elements of the graph (that can be the list of edges or vertexes depending on the graph)    \n  * if it is a matrix of int, float or object, min returns the minimum of all the numerical elements (thus all elements for integer and float matrices)    \n  * if it is a matrix of geometry, min returns the minimum of the list of the geometries    \n  * if it is a matrix of another type, min returns the minimum of the elements transformed into float    \n  * if it is a list of int or float: min returns the minimum of all the elements \n  \n```\nunknown var0   `unknown`\n  *  **`min_of`** (`container` , `any expression`) --->  `unknown` \n\n#### Result: \nthe minimum value of the right-hand expression evaluated on each of the elements of the left-hand operand  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.\n\n#### Special cases:     \n  * if the left-hand operand is nil or empty, min_of throws an error    \n  * if the left-operand is a map, the keyword each will contain each value \n  \n```\nunknown var5   `date`\n  *  **`minus_days`** (`date` , `int`) --->  `date` \n\n#### Result: \nSubtract a given number of days from a date\n\n#### Examples: \n```\ndate1 minus_days 20\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_minus_hours)\n### `minus_hours`\n\n#### Possible use: \n  * `date` **`minus_hours`** `int` --->  `date`\n  *  **`minus_hours`** (`date` , `int`) --->  `date` \n\n#### Result: \nRemove a given number of hours from a date\n\n#### Examples: \n```\ndate1 minus_hours 15 // equivalent to date1 - 15 #h\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_minus_minutes)\n### `minus_minutes`\n\n#### Possible use: \n  * `date` **`minus_minutes`** `int` --->  `date`\n  *  **`minus_minutes`** (`date` , `int`) --->  `date` \n\n#### Result: \nSubtract a given number of minutes from a date\n\n#### Examples: \n```\ndate1 minus_minutes 5 // equivalent to date1 - 5#mn\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_minus_months)\n### `minus_months`\n\n#### Possible use: \n  * `date` **`minus_months`** `int` --->  `date`\n  *  **`minus_months`** (`date` , `int`) --->  `date` \n\n#### Result: \nSubtract a given number of months from a date\n\n#### Examples: \n```\ndate1 minus_months 5\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_minus_ms)\n### `minus_ms`\n\n#### Possible use: \n  * `date` **`minus_ms`** `int` --->  `date`\n  *  **`minus_ms`** (`date` , `int`) --->  `date` \n\n#### Result: \nRemove a given number of milliseconds from a date\n\n#### Examples: \n```\ndate1 minus_ms 15 // equivalent to date1 - 15 #ms\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_minus_seconds)\n### `minus_seconds`\nSame signification as [-](OperatorsAC#-)\n    \t\n----\n\n[//]: # (keyword|operator_minus_weeks)\n### `minus_weeks`\n\n#### Possible use: \n  * `date` **`minus_weeks`** `int` --->  `date`\n  *  **`minus_weeks`** (`date` , `int`) --->  `date` \n\n#### Result: \nSubtract a given number of weeks from a date\n\n#### Examples: \n```\ndate1 minus_weeks 15\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_minus_years)\n### `minus_years`\n\n#### Possible use: \n  * `date` **`minus_years`** `int` --->  `date`\n  *  **`minus_years`** (`date` , `int`) --->  `date` \n\n#### Result: \nSubtract a given number of year from a date\n\n#### Examples: \n```\ndate1 minus_years 3\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_mod)\n### `mod`\n\n#### Possible use: \n  * `int` **`mod`** `int` --->  `int`\n  *  **`mod`** (`int` , `int`) --->  `int` \n\n#### Result: \nReturns the remainder of the integer division of the left-hand operand by the right-hand operand.\n\n#### Special cases:     \n  * if operands are float, they are truncated    \n  * if the right-hand operand is equal to zero, raises an exception.\n\n#### Examples: \n```\nint var0   `int`\n  *  **`months_between`** (`date` , `date`) --->  `int` \n\n#### Result: \nProvide the exact number of months between two dates. This number can be positive or negative (if the second operand is smaller than the first one)\n\n#### Examples: \n```\nmonths_between(d1, d2) -: 10 \n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_moran)\n### `moran`\n\n#### Possible use: \n  * `list` **`moran`** `matrix` --->  `float`\n  *  **`moran`** (`list` , `matrix`) --->  `float`\n\n#### Special cases:     \n  * return the Moran Index of the given list of interest points (list of floats) and the weight matrix (matrix of float) \n  \n```\nfloat var0   `unknown` \n\n#### Result: \nthe product of all the elements of the operand  \n\n#### Comment: \nthe mul operator behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a list of points: mul returns the product of all points as a point (each coordinate is the product of the corresponding coordinate of each element)    \n  * if it is a list of other types: mul transforms all elements into integer and multiplies them    \n  * if it is a map, mul returns the product of the value of all elements    \n  * if it is a file, mul returns the product of the content of the file (that is also a container)    \n  * if it is a graph, mul returns the product of the list of the elements of the graph (that can be the list of edges or vertexes depending on the graph)    \n  * if it is a matrix of int, float or object, mul returns the product of all the numerical elements (thus all elements for integer and float matrices)    \n  * if it is a matrix of geometry, mul returns the product of the list of the geometries    \n  * if it is a matrix of other types: mul transforms all elements into float and multiplies them    \n  * if it is a list of int or float: mul returns the product of all the elements \n  \n```\nunknown var0 ","url":"wiki/OperatorsDM.md"},{"id":"wiki/OperatorsNZ.md","title":" Operators (N to Z)","content":"#Operators (N to Z)\n \t\n----\n\n**This file is automatically generated from java files. Do Not Edit It.**\n\n----\n\n## Definition \n\nOperators in the GAML language are used to compose complex expressions. An operator performs a function on one, two, or n operands (which are other expressions and thus may be themselves composed of operators) and returns the result of this function. \n\nMost of them use a classical prefixed functional syntax (i.e. `operator_name(operand1, operand2, operand3)`, see below), with the exception of arithmetic (e.g. `+`, `/`), logical (`and`, `or`), comparison (e.g. `>`, `\n----\n\n## Priority between operators\n\nThe priority of operators determines, in the case of complex expressions composed of several operators, which one(s) will be evaluated first.\n\nGAML follows in general the traditional priorities attributed to arithmetic, boolean, comparison operators, with some twists. Namely:\n* the constructor operators, like `::`, used to compose pairs of operands, have the lowest priority of all operators (e.g. `a > b :: b > c` will return a pair of boolean values, which means that the two comparisons are evaluated before the operator applies. Similarly, `[a > 10, b > 5]` will return a list of boolean values.\n* it is followed by the `?:` operator, the functional if-else (e.g. ` a > b ? a + 10 : a - 10` will return the result of the if-else).\n* next are the logical operators, `and` and `or` (e.g. `a > b or b > c` will return the value of the test)\n* next are the comparison operators (i.e. `>`, `=`, `=`, `!=`)\n* next the arithmetic operators in their logical order (multiplicative operators have a higher priority than additive operators)\n* next the unary operators `-` and `!`\n* next the access operators `.` and `[]` (e.g. `{1,2,3}.x > 20 + {4,5,6}.y` will return the result of the comparison between the x and y ordinates of the two points)\n* and finally the functional operators, which have the highest priority of all.\n\n----\n\n## Using actions as operators\n\nActions defined in species can be used as operators, provided they are called on the correct agent. The syntax is that of normal functional operators, but the agent that will perform the action must be added as the first operand.\n\nFor instance, if the following species is defined:\n\n```\nspecies spec1 {\n        int min(int x, int y) {\n                return x > y ? x : y;\n        }\n}\n```\n\nAny agent instance of spec1 can use `min` as an operator (if the action conflicts with an existing operator, a warning will be emitted). For instance, in the same model, the following line is perfectly acceptable:\n\n```\nglobal {\n        init {\n                create spec1;\n                spec1 my_agent ](OperatorsAC#>), [>=](OperatorsAC#>=), [between](OperatorsAC#between), \n\n----\n\n### Containers-related operators\n[-](OperatorsAC#-), [::](OperatorsAC#::), [+](OperatorsAC#+), [accumulate](OperatorsAC#accumulate), [among](OperatorsAC#among), [at](OperatorsAC#at), [collect](OperatorsAC#collect), [contains](OperatorsAC#contains), [contains_all](OperatorsAC#contains_all), [contains_any](OperatorsAC#contains_any), [count](OperatorsAC#count), [distinct](OperatorsDM#distinct), [empty](OperatorsDM#empty), [every](OperatorsDM#every), [first](OperatorsDM#first), [first_with](OperatorsDM#first_with), [get](OperatorsDM#get), [group_by](OperatorsDM#group_by), [in](OperatorsDM#in), [index_by](OperatorsDM#index_by), [inter](OperatorsDM#inter), [interleave](OperatorsDM#interleave), [internal_at](OperatorsDM#internal_at), [internal_integrated_value](OperatorsDM#internal_integrated_value), [last](OperatorsDM#last), [last_with](OperatorsDM#last_with), [length](OperatorsDM#length), [max](OperatorsDM#max), [max_of](OperatorsDM#max_of), [mean](OperatorsDM#mean), [mean_of](OperatorsDM#mean_of), [median](OperatorsDM#median), [min](OperatorsDM#min), [min_of](OperatorsDM#min_of), [mul](OperatorsDM#mul), [one_of](OperatorsNZ#one_of), [product_of](OperatorsNZ#product_of), [range](OperatorsNZ#range), [reverse](OperatorsNZ#reverse), [shuffle](OperatorsNZ#shuffle), [sort_by](OperatorsNZ#sort_by), [sum](OperatorsNZ#sum), [sum_of](OperatorsNZ#sum_of), [union](OperatorsNZ#union), [variance_of](OperatorsNZ#variance_of), [where](OperatorsNZ#where), [with_max_of](OperatorsNZ#with_max_of), [with_min_of](OperatorsNZ#with_min_of), \n\n----\n\n### Date-related operators\n[-](OperatorsAC#-), [!=](OperatorsAC#!=), [+](OperatorsAC#+), [](OperatorsAC#>), [>=](OperatorsAC#>=), [after](OperatorsAC#after), [before](OperatorsAC#before), [between](OperatorsAC#between), [every](OperatorsDM#every), [milliseconds_between](OperatorsDM#milliseconds_between), [minus_days](OperatorsDM#minus_days), [minus_hours](OperatorsDM#minus_hours), [minus_minutes](OperatorsDM#minus_minutes), [minus_months](OperatorsDM#minus_months), [minus_ms](OperatorsDM#minus_ms), [minus_weeks](OperatorsDM#minus_weeks), [minus_years](OperatorsDM#minus_years), [months_between](OperatorsDM#months_between), [plus_days](OperatorsNZ#plus_days), [plus_hours](OperatorsNZ#plus_hours), [plus_minutes](OperatorsNZ#plus_minutes), [plus_months](OperatorsNZ#plus_months), [plus_ms](OperatorsNZ#plus_ms), [plus_weeks](OperatorsNZ#plus_weeks), [plus_years](OperatorsNZ#plus_years), [since](OperatorsNZ#since), [to](OperatorsNZ#to), [until](OperatorsNZ#until), [years_between](OperatorsNZ#years_between), \n\n----\n\n### Dates\n\n\n----\n\n### Driving operators\n[as_driving_graph](OperatorsAC#as_driving_graph), \n\n----\n\n### edge\n[edge_between](OperatorsDM#edge_between), \n\n----\n\n### EDP-related operators\n[diff](OperatorsDM#diff), [diff2](OperatorsDM#diff2), [internal_zero_order_equation](OperatorsDM#internal_zero_order_equation), \n\n----\n\n### Files-related operators\n[crs](OperatorsAC#crs), [file](OperatorsDM#file), [file_exists](OperatorsDM#file_exists), [folder](OperatorsDM#folder), [get](OperatorsDM#get), [new_folder](OperatorsNZ#new_folder), [osm_file](OperatorsNZ#osm_file), [read](OperatorsNZ#read), [writable](OperatorsNZ#writable), \n\n----\n\n### FIPA-related operators\n[conversation](OperatorsAC#conversation), [message](OperatorsDM#message), \n\n----\n\n### Graphs-related operators\n[add_edge](OperatorsAC#add_edge), [add_node](OperatorsAC#add_node), [adjacency](OperatorsAC#adjacency), [agent_from_geometry](OperatorsAC#agent_from_geometry), [all_pairs_shortest_path](OperatorsAC#all_pairs_shortest_path), [alpha_index](OperatorsAC#alpha_index), [as_distance_graph](OperatorsAC#as_distance_graph), [as_edge_graph](OperatorsAC#as_edge_graph), [as_intersection_graph](OperatorsAC#as_intersection_graph), [as_path](OperatorsAC#as_path), [beta_index](OperatorsAC#beta_index), [betweenness_centrality](OperatorsAC#betweenness_centrality), [biggest_cliques_of](OperatorsAC#biggest_cliques_of), [connected_components_of](OperatorsAC#connected_components_of), [connectivity_index](OperatorsAC#connectivity_index), [contains_edge](OperatorsAC#contains_edge), [contains_vertex](OperatorsAC#contains_vertex), [degree_of](OperatorsDM#degree_of), [directed](OperatorsDM#directed), [edge](OperatorsDM#edge), [edge_between](OperatorsDM#edge_between), [edge_betweenness](OperatorsDM#edge_betweenness), [edges](OperatorsDM#edges), [gamma_index](OperatorsDM#gamma_index), [generate_barabasi_albert](OperatorsDM#generate_barabasi_albert), [generate_complete_graph](OperatorsDM#generate_complete_graph), [generate_watts_strogatz](OperatorsDM#generate_watts_strogatz), [grid_cells_to_graph](OperatorsDM#grid_cells_to_graph), [in_degree_of](OperatorsDM#in_degree_of), [in_edges_of](OperatorsDM#in_edges_of), [layout](OperatorsDM#layout), [load_graph_from_file](OperatorsDM#load_graph_from_file), [load_shortest_paths](OperatorsDM#load_shortest_paths), [maximal_cliques_of](OperatorsDM#maximal_cliques_of), [nb_cycles](OperatorsNZ#nb_cycles), [neighbors_of](OperatorsNZ#neighbors_of), [node](OperatorsNZ#node), [nodes](OperatorsNZ#nodes), [out_degree_of](OperatorsNZ#out_degree_of), [out_edges_of](OperatorsNZ#out_edges_of), [path_between](OperatorsNZ#path_between), [paths_between](OperatorsNZ#paths_between), [predecessors_of](OperatorsNZ#predecessors_of), [remove_node_from](OperatorsNZ#remove_node_from), [rewire_n](OperatorsNZ#rewire_n), [source_of](OperatorsNZ#source_of), [spatial_graph](OperatorsNZ#spatial_graph), [successors_of](OperatorsNZ#successors_of), [sum](OperatorsNZ#sum), [target_of](OperatorsNZ#target_of), [undirected](OperatorsNZ#undirected), [use_cache](OperatorsNZ#use_cache), [weight_of](OperatorsNZ#weight_of), [with_optimizer_type](OperatorsNZ#with_optimizer_type), [with_weights](OperatorsNZ#with_weights), \n\n----\n\n### Grid-related operators\n[as_4_grid](OperatorsAC#as_4_grid), [as_grid](OperatorsAC#as_grid), [as_hexagonal_grid](OperatorsAC#as_hexagonal_grid), [grid_at](OperatorsDM#grid_at), [path_between](OperatorsNZ#path_between), \n\n----\n\n### Iterator operators\n[accumulate](OperatorsAC#accumulate), [as_map](OperatorsAC#as_map), [collect](OperatorsAC#collect), [count](OperatorsAC#count), [distribution_of](OperatorsDM#distribution_of), [distribution_of](OperatorsDM#distribution_of), [distribution_of](OperatorsDM#distribution_of), [distribution2d_of](OperatorsDM#distribution2d_of), [distribution2d_of](OperatorsDM#distribution2d_of), [distribution2d_of](OperatorsDM#distribution2d_of), [first_with](OperatorsDM#first_with), [frequency_of](OperatorsDM#frequency_of), [group_by](OperatorsDM#group_by), [index_by](OperatorsDM#index_by), [last_with](OperatorsDM#last_with), [max_of](OperatorsDM#max_of), [mean_of](OperatorsDM#mean_of), [min_of](OperatorsDM#min_of), [product_of](OperatorsNZ#product_of), [sort_by](OperatorsNZ#sort_by), [sum_of](OperatorsNZ#sum_of), [variance_of](OperatorsNZ#variance_of), [where](OperatorsNZ#where), [with_max_of](OperatorsNZ#with_max_of), [with_min_of](OperatorsNZ#with_min_of), \n\n----\n\n### List-related operators\n[copy_between](OperatorsAC#copy_between), [index_of](OperatorsDM#index_of), [last_index_of](OperatorsDM#last_index_of), \n\n----\n\n### Logical operators\n[:](OperatorsAC#:), [!](OperatorsAC#!), [?](OperatorsAC#?), [and](OperatorsAC#and), [or](OperatorsNZ#or), \n\n----\n\n### Map comparaison operators\n[fuzzy_kappa](OperatorsDM#fuzzy_kappa), [fuzzy_kappa_sim](OperatorsDM#fuzzy_kappa_sim), [kappa](OperatorsDM#kappa), [kappa_sim](OperatorsDM#kappa_sim), [percent_absolute_deviation](OperatorsNZ#percent_absolute_deviation), \n\n----\n\n### Map-related operators\n[as_map](OperatorsAC#as_map), [index_of](OperatorsDM#index_of), [last_index_of](OperatorsDM#last_index_of), \n\n----\n\n### Material\n[material](OperatorsDM#material), \n\n----\n\n### Matrix-related operators\n[-](OperatorsAC#-), [/](OperatorsAC#/), [.](OperatorsAC#.), [*](OperatorsAC#*), [+](OperatorsAC#+), [append_horizontally](OperatorsAC#append_horizontally), [append_vertically](OperatorsAC#append_vertically), [column_at](OperatorsAC#column_at), [columns_list](OperatorsAC#columns_list), [determinant](OperatorsDM#determinant), [eigenvalues](OperatorsDM#eigenvalues), [index_of](OperatorsDM#index_of), [inverse](OperatorsDM#inverse), [last_index_of](OperatorsDM#last_index_of), [row_at](OperatorsNZ#row_at), [rows_list](OperatorsNZ#rows_list), [shuffle](OperatorsNZ#shuffle), [trace](OperatorsNZ#trace), [transpose](OperatorsNZ#transpose), \n\n----\n\n### multicriteria operators\n[electre_DM](OperatorsDM#electre_dm), [evidence_theory_DM](OperatorsDM#evidence_theory_dm), [promethee_DM](OperatorsNZ#promethee_dm), [weighted_means_DM](OperatorsNZ#weighted_means_dm), \n\n----\n\n### Path-related operators\n[agent_from_geometry](OperatorsAC#agent_from_geometry), [all_pairs_shortest_path](OperatorsAC#all_pairs_shortest_path), [as_path](OperatorsAC#as_path), [load_shortest_paths](OperatorsDM#load_shortest_paths), [path_between](OperatorsNZ#path_between), [path_to](OperatorsNZ#path_to), [paths_between](OperatorsNZ#paths_between), [use_cache](OperatorsNZ#use_cache), \n\n----\n\n### Points-related operators\n[-](OperatorsAC#-), [/](OperatorsAC#/), [*](OperatorsAC#*), [+](OperatorsAC#+), [](OperatorsAC#>), [>=](OperatorsAC#>=), [add_point](OperatorsAC#add_point), [angle_between](OperatorsAC#angle_between), [any_location_in](OperatorsAC#any_location_in), [centroid](OperatorsAC#centroid), [closest_points_with](OperatorsAC#closest_points_with), [farthest_point_to](OperatorsDM#farthest_point_to), [grid_at](OperatorsDM#grid_at), [norm](OperatorsNZ#norm), [point](OperatorsNZ#point), [points_along](OperatorsNZ#points_along), [points_at](OperatorsNZ#points_at), [points_on](OperatorsNZ#points_on), \n\n----\n\n### Random operators\n[binomial](OperatorsAC#binomial), [flip](OperatorsDM#flip), [gauss](OperatorsDM#gauss), [poisson](OperatorsNZ#poisson), [rnd](OperatorsNZ#rnd), [rnd_choice](OperatorsNZ#rnd_choice), [sample](OperatorsNZ#sample), [shuffle](OperatorsNZ#shuffle), [skew_gauss](OperatorsNZ#skew_gauss), [truncated_gauss](OperatorsNZ#truncated_gauss), \n\n----\n\n### ReverseOperators\n\n\n----\n\n### Shape\n[arc](OperatorsAC#arc), [box](OperatorsAC#box), [circle](OperatorsAC#circle), [cone](OperatorsAC#cone), [cone3D](OperatorsAC#cone3d), [cross](OperatorsAC#cross), [cube](OperatorsAC#cube), [curve](OperatorsAC#curve), [cylinder](OperatorsAC#cylinder), [ellipse](OperatorsDM#ellipse), [envelope](OperatorsDM#envelope), [geometry_collection](OperatorsDM#geometry_collection), [hexagon](OperatorsDM#hexagon), [line](OperatorsDM#line), [link](OperatorsDM#link), [plan](OperatorsNZ#plan), [polygon](OperatorsNZ#polygon), [polyhedron](OperatorsNZ#polyhedron), [pyramid](OperatorsNZ#pyramid), [rectangle](OperatorsNZ#rectangle), [sphere](OperatorsNZ#sphere), [square](OperatorsNZ#square), [squircle](OperatorsNZ#squircle), [teapot](OperatorsNZ#teapot), [triangle](OperatorsNZ#triangle), \n\n----\n\n### Spatial operators\n[-](OperatorsAC#-), [*](OperatorsAC#*), [+](OperatorsAC#+), [add_point](OperatorsAC#add_point), [agent_closest_to](OperatorsAC#agent_closest_to), [agent_farthest_to](OperatorsAC#agent_farthest_to), [agents_at_distance](OperatorsAC#agents_at_distance), [agents_inside](OperatorsAC#agents_inside), [agents_overlapping](OperatorsAC#agents_overlapping), [angle_between](OperatorsAC#angle_between), [any_location_in](OperatorsAC#any_location_in), [arc](OperatorsAC#arc), [around](OperatorsAC#around), [as_4_grid](OperatorsAC#as_4_grid), [as_grid](OperatorsAC#as_grid), [as_hexagonal_grid](OperatorsAC#as_hexagonal_grid), [at_distance](OperatorsAC#at_distance), [at_location](OperatorsAC#at_location), [box](OperatorsAC#box), [centroid](OperatorsAC#centroid), [circle](OperatorsAC#circle), [clean](OperatorsAC#clean), [closest_points_with](OperatorsAC#closest_points_with), [closest_to](OperatorsAC#closest_to), [cone](OperatorsAC#cone), [cone3D](OperatorsAC#cone3d), [convex_hull](OperatorsAC#convex_hull), [covers](OperatorsAC#covers), [cross](OperatorsAC#cross), [crosses](OperatorsAC#crosses), [crs](OperatorsAC#crs), [CRS_transform](OperatorsAC#crs_transform), [cube](OperatorsAC#cube), [curve](OperatorsAC#curve), [cylinder](OperatorsAC#cylinder), [dem](OperatorsDM#dem), [direction_between](OperatorsDM#direction_between), [disjoint_from](OperatorsDM#disjoint_from), [distance_between](OperatorsDM#distance_between), [distance_to](OperatorsDM#distance_to), [ellipse](OperatorsDM#ellipse), [envelope](OperatorsDM#envelope), [farthest_point_to](OperatorsDM#farthest_point_to), [farthest_to](OperatorsDM#farthest_to), [geometry_collection](OperatorsDM#geometry_collection), [gini](OperatorsDM#gini), [hexagon](OperatorsDM#hexagon), [hierarchical_clustering](OperatorsDM#hierarchical_clustering), [IDW](OperatorsAC#idw), [inside](OperatorsDM#inside), [inter](OperatorsDM#inter), [intersects](OperatorsDM#intersects), [line](OperatorsDM#line), [link](OperatorsDM#link), [masked_by](OperatorsDM#masked_by), [moran](OperatorsDM#moran), [neighbors_at](OperatorsNZ#neighbors_at), [neighbors_of](OperatorsNZ#neighbors_of), [overlapping](OperatorsNZ#overlapping), [overlaps](OperatorsNZ#overlaps), [partially_overlaps](OperatorsNZ#partially_overlaps), [path_between](OperatorsNZ#path_between), [path_to](OperatorsNZ#path_to), [plan](OperatorsNZ#plan), [points_along](OperatorsNZ#points_along), [points_at](OperatorsNZ#points_at), [points_on](OperatorsNZ#points_on), [polygon](OperatorsNZ#polygon), [polyhedron](OperatorsNZ#polyhedron), [pyramid](OperatorsNZ#pyramid), [rectangle](OperatorsNZ#rectangle), [rgb_to_xyz](OperatorsNZ#rgb_to_xyz), [rotated_by](OperatorsNZ#rotated_by), [round](OperatorsNZ#round), [scaled_to](OperatorsNZ#scaled_to), [set_z](OperatorsNZ#set_z), [simple_clustering_by_distance](OperatorsNZ#simple_clustering_by_distance), [simplification](OperatorsNZ#simplification), [skeletonize](OperatorsNZ#skeletonize), [smooth](OperatorsNZ#smooth), [sphere](OperatorsNZ#sphere), [split_at](OperatorsNZ#split_at), [split_geometry](OperatorsNZ#split_geometry), [split_lines](OperatorsNZ#split_lines), [square](OperatorsNZ#square), [squircle](OperatorsNZ#squircle), [teapot](OperatorsNZ#teapot), [to_GAMA_CRS](OperatorsNZ#to_gama_crs), [to_rectangles](OperatorsNZ#to_rectangles), [to_squares](OperatorsNZ#to_squares), [touches](OperatorsNZ#touches), [towards](OperatorsNZ#towards), [transformed_by](OperatorsNZ#transformed_by), [translated_by](OperatorsNZ#translated_by), [triangle](OperatorsNZ#triangle), [triangulate](OperatorsNZ#triangulate), [union](OperatorsNZ#union), [using](OperatorsNZ#using), [voronoi](OperatorsNZ#voronoi), [with_precision](OperatorsNZ#with_precision), [without_holes](OperatorsNZ#without_holes), \n\n----\n\n### Spatial properties operators\n[covers](OperatorsAC#covers), [crosses](OperatorsAC#crosses), [intersects](OperatorsDM#intersects), [partially_overlaps](OperatorsNZ#partially_overlaps), [touches](OperatorsNZ#touches), \n\n----\n\n### Spatial queries operators\n[agent_closest_to](OperatorsAC#agent_closest_to), [agent_farthest_to](OperatorsAC#agent_farthest_to), [agents_at_distance](OperatorsAC#agents_at_distance), [agents_inside](OperatorsAC#agents_inside), [agents_overlapping](OperatorsAC#agents_overlapping), [at_distance](OperatorsAC#at_distance), [closest_to](OperatorsAC#closest_to), [farthest_to](OperatorsDM#farthest_to), [inside](OperatorsDM#inside), [neighbors_at](OperatorsNZ#neighbors_at), [neighbors_of](OperatorsNZ#neighbors_of), [overlapping](OperatorsNZ#overlapping), \n\n----\n\n### Spatial relations operators\n[direction_between](OperatorsDM#direction_between), [distance_between](OperatorsDM#distance_between), [distance_to](OperatorsDM#distance_to), [path_between](OperatorsNZ#path_between), [path_to](OperatorsNZ#path_to), [towards](OperatorsNZ#towards), \n\n----\n\n### Spatial statistical operators\n[hierarchical_clustering](OperatorsDM#hierarchical_clustering), [simple_clustering_by_distance](OperatorsNZ#simple_clustering_by_distance), \n\n----\n\n### Spatial transformations operators\n[-](OperatorsAC#-), [*](OperatorsAC#*), [+](OperatorsAC#+), [as_4_grid](OperatorsAC#as_4_grid), [as_grid](OperatorsAC#as_grid), [as_hexagonal_grid](OperatorsAC#as_hexagonal_grid), [at_location](OperatorsAC#at_location), [clean](OperatorsAC#clean), [convex_hull](OperatorsAC#convex_hull), [CRS_transform](OperatorsAC#crs_transform), [rotated_by](OperatorsNZ#rotated_by), [scaled_to](OperatorsNZ#scaled_to), [simplification](OperatorsNZ#simplification), [skeletonize](OperatorsNZ#skeletonize), [smooth](OperatorsNZ#smooth), [split_geometry](OperatorsNZ#split_geometry), [split_lines](OperatorsNZ#split_lines), [to_GAMA_CRS](OperatorsNZ#to_gama_crs), [to_rectangles](OperatorsNZ#to_rectangles), [to_squares](OperatorsNZ#to_squares), [transformed_by](OperatorsNZ#transformed_by), [translated_by](OperatorsNZ#translated_by), [triangulate](OperatorsNZ#triangulate), [voronoi](OperatorsNZ#voronoi), [without_holes](OperatorsNZ#without_holes), \n\n----\n\n### Species-related operators\n[index_of](OperatorsDM#index_of), [last_index_of](OperatorsDM#last_index_of), [of_generic_species](OperatorsNZ#of_generic_species), [of_species](OperatorsNZ#of_species), \n\n----\n\n### Statistical operators\n[build](OperatorsAC#build), [corR](OperatorsAC#corr), [dbscan](OperatorsDM#dbscan), [distribution_of](OperatorsDM#distribution_of), [distribution2d_of](OperatorsDM#distribution2d_of), [frequency_of](OperatorsDM#frequency_of), [gamma_rnd](OperatorsDM#gamma_rnd), [geometric_mean](OperatorsDM#geometric_mean), [gini](OperatorsDM#gini), [harmonic_mean](OperatorsDM#harmonic_mean), [hierarchical_clustering](OperatorsDM#hierarchical_clustering), [kmeans](OperatorsDM#kmeans), [kurtosis](OperatorsDM#kurtosis), [max](OperatorsDM#max), [mean](OperatorsDM#mean), [mean_deviation](OperatorsDM#mean_deviation), [meanR](OperatorsDM#meanr), [median](OperatorsDM#median), [min](OperatorsDM#min), [moran](OperatorsDM#moran), [mul](OperatorsDM#mul), [predict](OperatorsNZ#predict), [simple_clustering_by_distance](OperatorsNZ#simple_clustering_by_distance), [skewness](OperatorsNZ#skewness), [standard_deviation](OperatorsNZ#standard_deviation), [sum](OperatorsNZ#sum), [variance](OperatorsNZ#variance), \n\n----\n\n### Strings-related operators\n[+](OperatorsAC#+), [](OperatorsAC#>), [>=](OperatorsAC#>=), [at](OperatorsAC#at), [char](OperatorsAC#char), [contains](OperatorsAC#contains), [contains_all](OperatorsAC#contains_all), [contains_any](OperatorsAC#contains_any), [copy_between](OperatorsAC#copy_between), [date](OperatorsDM#date), [empty](OperatorsDM#empty), [first](OperatorsDM#first), [in](OperatorsDM#in), [indented_by](OperatorsDM#indented_by), [index_of](OperatorsDM#index_of), [is_number](OperatorsDM#is_number), [last](OperatorsDM#last), [last_index_of](OperatorsDM#last_index_of), [length](OperatorsDM#length), [lower_case](OperatorsDM#lower_case), [replace](OperatorsNZ#replace), [replace_regex](OperatorsNZ#replace_regex), [reverse](OperatorsNZ#reverse), [sample](OperatorsNZ#sample), [shuffle](OperatorsNZ#shuffle), [split_with](OperatorsNZ#split_with), [string](OperatorsNZ#string), [upper_case](OperatorsNZ#upper_case), \n\n----\n\n### System\n[.](OperatorsAC#.), [command](OperatorsAC#command), [copy](OperatorsAC#copy), [dead](OperatorsDM#dead), [eval_gaml](OperatorsDM#eval_gaml), [every](OperatorsDM#every), [user_input](OperatorsNZ#user_input), \n\n----\n\n### Time-related operators\n[date](OperatorsDM#date), [string](OperatorsNZ#string), \n\n----\n\n### Types-related operators\n\n\n----\n\n### User control operators\n[user_input](OperatorsNZ#user_input), \n\t\n----\n\n## Operators\n\t\n    \t\n----\n\n[//]: # (keyword|operator_nb_cycles)\n### `nb_cycles`\n\n#### Possible use: \n  *  **`nb_cycles`** (`graph`) --->  `int` \n\n#### Result: \nreturns the maximum number of independent cycles in a graph. This number (u) is estimated through the number of nodes (v), links (e) and of sub-graphs (p): u = e - v + p.\n\n#### Examples: \n```\ngraph graphEpidemio   `container`\n  *  **`neighbors_at`** (`geometry` , `float`) --->  `container` \n\n#### Result: \na list, containing all the agents of the same species than the left argument (if it is an agent) located at a distance inferior or equal to the right-hand operand to the left-hand operand (geometry, agent, point).  \n\n#### Comment: \nThe topology used to compute the neighborhood  is the one of the left-operand if this one is an agent; otherwise the one of the agent applying the operator.\n\n#### Examples: \n```\ncontainer var0   `container`\n  *  **`neighbors_of`** (`graph` , `unknown`) --->  `container`\n  * `topology` **`neighbors_of`** `agent` --->  `container`\n  *  **`neighbors_of`** (`topology` , `agent`) --->  `container`\n  *  **`neighbors_of`** (`topology`, `geometry`, `float`) --->  `container` \n\n#### Result: \na list, containing all the agents of the same species than the argument (if it is an agent) located at a distance inferior or equal to 1 to the right-hand operand agent considering the left-hand operand topology.\n\n#### Special cases:     \n  * a list, containing all the agents of the same species than the left argument (if it is an agent) located at a distance inferior or equal to the third argument to the second argument (agent, geometry or point) considering the first operand topology. \n  \n```\ncontainer var3   `emotion`\n  * `string` **`new_emotion`** `agent` --->  `emotion`\n  *  **`new_emotion`** (`string` , `agent`) --->  `emotion`\n  * `string` **`new_emotion`** `float` --->  `emotion`\n  *  **`new_emotion`** (`string` , `float`) --->  `emotion`\n  * `string` **`new_emotion`** `predicate` --->  `emotion`\n  *  **`new_emotion`** (`string` , `predicate`) --->  `emotion`\n  *  **`new_emotion`** (`string`, `float`, `predicate`) --->  `emotion`\n  *  **`new_emotion`** (`string`, `float`, `float`) --->  `emotion`\n  *  **`new_emotion`** (`string`, `predicate`, `agent`) --->  `emotion`\n  *  **`new_emotion`** (`string`, `float`, `agent`) --->  `emotion`\n  *  **`new_emotion`** (`string`, `float`, `float`, `agent`) --->  `emotion`\n  *  **`new_emotion`** (`string`, `float`, `predicate`, `float`) --->  `emotion`\n  *  **`new_emotion`** (`string`, `float`, `predicate`, `agent`) --->  `emotion`\n  *  **`new_emotion`** (`string`, `float`, `predicate`, `float`, `agent`) --->  `emotion` \n\n#### Result: \na new emotion with the given properties (name)\na new emotion with the given properties (name)\na new emotion with the given properties (name,intensity,about)\na new emotion with the given properties (name,intensity,decay)\na new emotion with the given properties (name)\na new emotion with the given properties (name, intensity)\na new emotion with the given properties (name,about)\na new emotion with the given properties (name)\na new emotion with the given properties (name)\na new emotion with the given properties (name)\na new emotion with the given properties (name)\na new emotion with the given properties (name)\n\n#### Examples: \n```\nemotion(\"joy\",12.3,eatFood,4)\nemotion(\"joy\",12.3,eatFood,4)\nemotion(\"joy\",12.3,eatFood)\nemotion(\"joy\",12.3,4)\nemotion(\"joy\",12.3,eatFood,4)\nemotion(\"joy\",12.3)\nemotion(\"joy\",eatFood)\nemotion(\"joy\")\nemotion(\"joy\",12.3,eatFood,4)\nemotion(\"joy\",12.3,eatFood,4)\nemotion(\"joy\",12.3,eatFood,4)\nemotion(\"joy\",12.3,eatFood,4)\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_new_folder)\n### `new_folder`\n\n#### Possible use: \n  *  **`new_folder`** (`string`) --->  `file` \n\n#### Result: \nopens an existing repository or create a new folder if it does not exist.\n\n#### Special cases:     \n  * If the specified string does not refer to an existing repository, the repository is created.    \n  * If the string refers to an existing file, an exception is risen.\n\n#### Examples: \n```\nfile dirNewT   `predicate`\n  * `string` **`new_predicate`** `agent` --->  `predicate`\n  *  **`new_predicate`** (`string` , `agent`) --->  `predicate`\n  * `string` **`new_predicate`** `float` --->  `predicate`\n  *  **`new_predicate`** (`string` , `float`) --->  `predicate`\n  * `string` **`new_predicate`** `int` --->  `predicate`\n  *  **`new_predicate`** (`string` , `int`) --->  `predicate`\n  * `string` **`new_predicate`** `map` --->  `predicate`\n  *  **`new_predicate`** (`string` , `map`) --->  `predicate`\n  * `string` **`new_predicate`** `bool` --->  `predicate`\n  *  **`new_predicate`** (`string` , `bool`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `float`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `int`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `agent`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `bool`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `int`, `bool`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `bool`, `agent`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `float`, `int`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `int`, `agent`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `float`, `agent`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `float`, `bool`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `float`, `int`, `bool`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `int`, `bool`, `agent`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `float`, `bool`, `agent`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `float`, `int`, `agent`) --->  `predicate`\n  *  **`new_predicate`** (`string`, `map`, `float`, `int`, `bool`, `agent`) --->  `predicate` \n\n#### Result: \na new predicate with the given properties (name, values, lifetime, is_true)\na new predicate with the given properties (name, values, priority)\na new predicate with the given properties (name, values, priority, lifetime, is_true, agentCause)\na new predicate with the given properties (name, values, is_true, agentCause)\na new predicate with the given properties (name, values, lifetime)\na new predicate with the given properties (name, values, priority, lifetime, is_true)\na new predicate with the given properties (name, values, lifetime, is_true, agentCause)\na new predicate with the given is_true (name, priority)\na new predicate with the given is_true (name, lifetime)\na new predicate with the given properties (name, values)\na new predicate with the given properties (name, values, lifetime)\na new predicate with the given is_true (name, is_true)\na new predicate with the given properties (name, values, priority,lifetime)\na new predicate with the given properties (name, values, priority, is_true, agentCause)\na new predicate with the given properties (name, values, \tagentCause)\na new predicate with the given properties (name, values, lifetime, agentCause)\na new predicate with the given properties (name)\na new predicate with the given properties (name, values, priority, agentCause)\na new predicate with the given properties (name, values, priority, is_true)\na new predicate with the given properties (name, values, priority, lifetime, agentCause)\na new predicate with the given properties (name, values, is_true)\n\n#### Examples: \n```\npredicate(\"people to meet\", [\"time\"::10], 10,true)\npredicate(\"people to meet\", people1, [\"time\"::10])\npredicate(\"people to meet\", [\"time\"::10],2.0,10, true, agentA)\npredicate(\"people to meet\", [\"time\"::10], true, agentA)\npredicate(\"people to meet\", [\"time\"::10], true)\npredicate(\"people to meet\", [\"time\"::10],2.0,10, true)\npredicate(\"people to meet\", [\"time\"::10], 10, true, agentA)\npredicate(\"hasWater\", 2.0 )\npredicate(\"hasWater\", 10 \npredicate(\"people to meet\", people1 )\npredicate(\"people to meet\", [\"time\"::10], true)\npredicate(\"hasWater\", true)\npredicate(\"people to meet\", [\"time\"::10], 2.0,10)\npredicate(\"people to meet\", [\"time\"::10], 2.0, true, agentA)\npredicate(\"people to meet\", [\"time\"::10], agentA)\npredicate(\"people to meet\", [\"time\"::10], 10, agentA)\npredicate(\"people to meet\")\npredicate(\"people to meet\", [\"time\"::10], 2.0,agentA)\npredicate(\"people to meet\", [\"time\"::10],2.0, true)\npredicate(\"people to meet\", [\"time\"::10], 2.0,10,agentA)\npredicate(\"people to meet\", [\"time\"::10], true)\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_new_social_link)\n### `new_social_link`\n\n#### Possible use: \n  *  **`new_social_link`** (`agent`) --->  `msi.gaml.architecture.simplebdi.SocialLink`\n  *  **`new_social_link`** (`agent`, `float`, `float`, `float`, `float`) --->  `msi.gaml.architecture.simplebdi.SocialLink` \n\n#### Result: \na new social link\na new social link\n\n#### Examples: \n```\nnew_social_link(agentA)\nnew_social_link(agentA,0.0,-0.1,0.2,0.1)\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_node)\n### `node`\n\n#### Possible use: \n  *  **`node`** (`unknown`) --->  `unknown`\n  * `unknown` **`node`** `float` --->  `unknown`\n  *  **`node`** (`unknown` , `float`) --->  `unknown`\n    \t\n----\n\n[//]: # (keyword|operator_nodes)\n### `nodes`\n\n#### Possible use: \n  *  **`nodes`** (`container`) --->  `container`\n    \t\n----\n\n[//]: # (keyword|operator_norm)\n### `norm`\n\n#### Possible use: \n  *  **`norm`** (`point`) --->  `float` \n\n#### Result: \nthe norm of the vector with the coordinates of the point operand.\n\n#### Examples: \n```\nfloat var0   `file` \n\n#### Result: \nConstructs a file of type obj. Allowed extensions are limited to obj, OBJ\n    \t\n----\n\n[//]: # (keyword|operator_of)\n### `of`\nSame signification as [.](OperatorsAC#.)\n    \t\n----\n\n[//]: # (keyword|operator_of_generic_species)\n### `of_generic_species`\n\n#### Possible use: \n  * `container` **`of_generic_species`** `species` --->  `container`\n  *  **`of_generic_species`** (`container` , `species`) --->  `container` \n\n#### Result: \na list, containing the agents of the left-hand operand whose species is that denoted by the right-hand operand and whose species extends the right-hand operand species\n\n#### Examples: \n```\n// species test {}\n// species sous_test parent: test {}\ncontainer var2   `container`\n  *  **`of_species`** (`container` , `species`) --->  `container` \n\n#### Result: \na list, containing the agents of the left-hand operand whose species is the one denoted by the right-hand operand.The expression agents of_species (species self) is equivalent to agents where (species each = species self); however, the advantage of using the first syntax is that the resulting list is correctly typed with the right species, whereas, in the second syntax, the parser cannot determine the species of the agents within the list (resulting in the need to cast it explicitly if it is to be used in an ask statement, for instance).\n\n#### Special cases:     \n  * if the right operand is nil, of_species returns the right operand\n\n#### Examples: \n```\ncontainer var0 `) --->  `ValueType` \n\n#### Result: \none of the values stored in this container  at a random key  \n\n#### Comment: \nthe one_of operator behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a graph, one_of returns one of the lists of edges    \n  * if it is a file, one_of returns one of the elements of the content of the file (that is also a container)    \n  * if the operand is empty, one_of returns nil \n  \n```\n\n``` \n\n    \n  * if it is a list or a matrix, one_of returns one of the values of the list or of the matrix \n  \n```\nint i   `bool`\n  *  **`or`** (`bool` , `any expression`) --->  `bool` \n\n#### Result: \na bool value, equal to the logical or between the left-hand operand and the right-hand operand.  \n\n#### Comment: \nboth operands are always casted to bool before applying the operator. Thus, an expression like 1 or 0 is accepted and returns true.    \n\n#### See also: \n[bool](OperatorsAC#bool), [and](OperatorsAC#and), [!](OperatorsAC#!), \n    \t\n----\n\n[//]: # (keyword|operator_or)\n### `or`\n\n#### Possible use: \n  * `predicate` **`or`** `predicate` --->  `predicate`\n  *  **`or`** (`predicate` , `predicate`) --->  `predicate` \n\n#### Result: \ncreate a new predicate from two others by including them as subintentions. It's an exclusive \"or\"\n\n#### Examples: \n```\npredicate1 or predicate2\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_osm_file)\n### `osm_file`\n\n#### Possible use: \n  * `string` **`osm_file`** `map` --->  `file`\n  *  **`osm_file`** (`string` , `map`) --->  `file`\n  *  **`osm_file`** (`string`, `map`, `int`) --->  `file` \n\n#### Result: \nopens a file that a is a kind of OSM file with some filtering.\nopens a file that a is a kind of OSM file with some filtering, forcing the initial CRS to be the one indicated by the second int parameter (see http://spatialreference.org/ref/epsg/). If this int parameter is equal to 0, the data is considered as already projected.  \n\n#### Comment: \nThe file should have a OSM file extension, cf. file type definition for supported file extensions.The file should have a OSM file extension, cf. file type definition for supported file extensions.\n\n#### Special cases:     \n  * If the specified string does not refer to an existing OSM file, an exception is risen.    \n  * If the specified string does not refer to an existing OSM file, an exception is risen.\n\n#### Examples: \n```\nfile myOSMfile   `int`\n  *  **`out_degree_of`** (`graph` , `unknown`) --->  `int` \n\n#### Result: \nreturns the out degree of a vertex (right-hand operand) in the graph given as left-hand operand.\n\n#### Examples: \n```\nint var1   `container`\n  *  **`out_edges_of`** (`graph` , `unknown`) --->  `container` \n\n#### Result: \nreturns the list of the out-edges of a vertex (right-hand operand) in the graph given as left-hand operand.\n\n#### Examples: \n```\ncontainer var1 ` **`overlapping`** `geometry` --->  `list`\n  *  **`overlapping`** (`container` , `geometry`) --->  `list` \n\n#### Result: \nA list of agents or geometries among the left-operand list, species or meta-population (addition of species), overlapping the operand (casted as a geometry).\n\n#### Examples: \n```\nlist var0   `bool`\n  *  **`overlaps`** (`geometry` , `geometry`) --->  `bool` \n\n#### Result: \nA boolean, equal to true if the left-geometry (or agent/point) overlaps the right-geometry (or agent/point).\n\n#### Special cases:     \n  * if one of the operand is null, returns false.    \n  * if one operand is a point, returns true if the point is included in the geometry\n\n#### Examples: \n```\nbool var0   `pair` \n\n#### Result: \nCasts the operand into the type pair\n    \t\n----\n\n[//]: # (keyword|operator_partially_overlaps)\n### `partially_overlaps`\n\n#### Possible use: \n  * `geometry` **`partially_overlaps`** `geometry` --->  `bool`\n  *  **`partially_overlaps`** (`geometry` , `geometry`) --->  `bool` \n\n#### Result: \nA boolean, equal to true if the left-geometry (or agent/point) partially overlaps the right-geometry (or agent/point).  \n\n#### Comment: \nif one geometry operand fully covers the other geometry operand, returns false (contrarily to the overlaps operator).\n\n#### Special cases:     \n  * if one of the operand is null, returns false.\n\n#### Examples: \n```\nbool var0   `path` \n\n#### Result: \nCasts the operand into the type path\n    \t\n----\n\n[//]: # (keyword|operator_path_between)\n### `path_between`\n\n#### Possible use: \n  * `topology` **`path_between`** `container` --->  `path`\n  *  **`path_between`** (`topology` , `container`) --->  `path`\n  * `list` **`path_between`** `container` --->  `path`\n  *  **`path_between`** (`list` , `container`) --->  `path`\n  *  **`path_between`** (`graph`, `geometry`, `geometry`) --->  `path`\n  *  **`path_between`** (`list`, `geometry`, `geometry`) --->  `path`\n  *  **`path_between`** (`topology`, `geometry`, `geometry`) --->  `path` \n\n#### Result: \nThe shortest path between a list of two objects in a graph\nThe shortest path between two objects according to set of cells\nThe shortest path between several objects according to set of cells\n\n#### Examples: \n```\npath var0   `path`\n  *  **`path_to`** (`geometry` , `geometry`) --->  `path`\n  * `point` **`path_to`** `point` --->  `path`\n  *  **`path_to`** (`point` , `point`) --->  `path` \n\n#### Result: \nA path between two geometries (geometries, agents or points) considering the topology of the agent applying the operator.\n\n#### Examples: \n```\npath var0   `list` \n\n#### Result: \nThe K shortest paths between a list of two objects in a graph\n\n#### Examples: \n```\nlist var0 ` **`percent_absolute_deviation`** `list` --->  `float`\n  *  **`percent_absolute_deviation`** (`list` , `list`) --->  `float` \n\n#### Result: \npercent absolute deviation indicator for 2 series of values: percent_absolute_deviation(list_vals_observe,list_vals_sim)\n\n#### Examples: \n```\npercent_absolute_deviation([200,300,150,150,200],[250,250,100,200,200])\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_pgm_file)\n### `pgm_file`\n\n#### Possible use: \n  *  **`pgm_file`** (`string`) --->  `file` \n\n#### Result: \nConstructs a file of type pgm. Allowed extensions are limited to pgm\n    \t\n----\n\n[//]: # (keyword|operator_plan)\n### `plan`\n\n#### Possible use: \n  * `container` **`plan`** `float` --->  `geometry`\n  *  **`plan`** (`container` , `float`) --->  `geometry` \n\n#### Result: \nA polyline geometry from the given list of points.\n\n#### Special cases:     \n  * if the operand is nil, returns the point geometry {0,0}    \n  * if the operand is composed of a single point, returns a point geometry.\n\n#### Examples: \n```\ngeometry var0   `date`\n  *  **`plus_days`** (`date` , `int`) --->  `date` \n\n#### Result: \nAdd a given number of days to a date\n\n#### Examples: \n```\ndate1 plus_days 20\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_plus_hours)\n### `plus_hours`\n\n#### Possible use: \n  * `date` **`plus_hours`** `int` --->  `date`\n  *  **`plus_hours`** (`date` , `int`) --->  `date` \n\n#### Result: \nAdd a given number of hours to a date\n\n#### Examples: \n```\ndate1 plus_hours 15 // equivalent to date1 + 15 #h\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_plus_minutes)\n### `plus_minutes`\n\n#### Possible use: \n  * `date` **`plus_minutes`** `int` --->  `date`\n  *  **`plus_minutes`** (`date` , `int`) --->  `date` \n\n#### Result: \nAdd a given number of minutes to a date\n\n#### Examples: \n```\ndate1 plus_minutes 5 // equivalent to date1 + 5 #mn\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_plus_months)\n### `plus_months`\n\n#### Possible use: \n  * `date` **`plus_months`** `int` --->  `date`\n  *  **`plus_months`** (`date` , `int`) --->  `date` \n\n#### Result: \nAdd a given number of months to a date\n\n#### Examples: \n```\ndate1 plus_months 5\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_plus_ms)\n### `plus_ms`\n\n#### Possible use: \n  * `date` **`plus_ms`** `int` --->  `date`\n  *  **`plus_ms`** (`date` , `int`) --->  `date` \n\n#### Result: \nAdd a given number of milliseconds to a date\n\n#### Examples: \n```\ndate1 plus_ms 15 // equivalent to date1 + 15 #ms\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_plus_seconds)\n### `plus_seconds`\nSame signification as [+](OperatorsAC#+)\n    \t\n----\n\n[//]: # (keyword|operator_plus_weeks)\n### `plus_weeks`\n\n#### Possible use: \n  * `date` **`plus_weeks`** `int` --->  `date`\n  *  **`plus_weeks`** (`date` , `int`) --->  `date` \n\n#### Result: \nAdd a given number of weeks to a date\n\n#### Examples: \n```\ndate1 plus_weeks 15\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_plus_years)\n### `plus_years`\n\n#### Possible use: \n  * `date` **`plus_years`** `int` --->  `date`\n  *  **`plus_years`** (`date` , `int`) --->  `date` \n\n#### Result: \nAdd a given number of years to a date\n\n#### Examples: \n```\ndate1 plus_years 3\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_point)\n### `point`\n\n#### Possible use: \n  * `float` **`point`** `int` --->  `point`\n  *  **`point`** (`float` , `int`) --->  `point`\n  * `int` **`point`** `float` --->  `point`\n  *  **`point`** (`int` , `float`) --->  `point`\n  * `int` **`point`** `int` --->  `point`\n  *  **`point`** (`int` , `int`) --->  `point`\n  * `float` **`point`** `float` --->  `point`\n  *  **`point`** (`float` , `float`) --->  `point`\n  *  **`point`** (`float`, `int`, `int`) --->  `point`\n  *  **`point`** (`int`, `int`, `int`) --->  `point`\n  *  **`point`** (`float`, `int`, `float`) --->  `point`\n  *  **`point`** (`int`, `int`, `float`) --->  `point`\n  *  **`point`** (`int`, `float`, `float`) --->  `point`\n  *  **`point`** (`float`, `float`, `float`) --->  `point`\n  *  **`point`** (`float`, `float`, `int`) --->  `point` \n\n#### Result: \ninternal use only. Use the standard construction {x,y} instead.\ninternal use only. Use the standard construction {x,y} instead.\ninternal use only. Use the standard construction {x,y, z} instead.\ninternal use only. Use the standard construction {x,y, z} instead.\ninternal use only. Use the standard construction {x,y, z} instead.\ninternal use only. Use the standard construction {x,y, z} instead.\ninternal use only. Use the standard construction {x,y, z} instead.\ninternal use only. Use the standard construction {x,y} instead.\ninternal use only. Use the standard construction {x,y} instead.\ninternal use only. Use the standard construction {x,y, z} instead.\ninternal use only. Use the standard construction {x,y, z} instead.\n    \t\n----\n\n[//]: # (keyword|operator_points_along)\n### `points_along`\n\n#### Possible use: \n  * `geometry` **`points_along`** `list` --->  `container`\n  *  **`points_along`** (`geometry` , `list`) --->  `container` \n\n#### Result: \nA list of points along the operand-geometry given its location in terms of rate of distance from the starting points of the geometry.\n\n#### Examples: \n```\ncontainer var0   `list`\n  *  **`points_at`** (`int` , `float`) --->  `list` \n\n#### Result: \nA list of left-operand number of points located at a the right-operand distance to the agent location.\n\n#### Examples: \n```\nlist var0   `container`\n  *  **`points_on`** (`geometry` , `float`) --->  `container` \n\n#### Result: \nA list of points of the operand-geometry distant from each other to the float right-operand .\n\n#### Examples: \n```\ncontainer var0   `int` \n\n#### Result: \nA value from a random variable following a Poisson distribution (with the positive expected number of occurence lambda as operand).  \n\n#### Comment: \nThe Poisson distribution is a discrete probability distribution that expresses the probability of a given number of events occurring in a fixed interval of time and/or space if these events occur with a known average rate and independently of the time since the last event, cf. Poisson distribution on Wikipedia.\n\n#### Examples: \n```\nint var0 `) --->  `geometry` \n\n#### Result: \nA polygon geometry from the given list of points.\n\n#### Special cases:     \n  * if the operand is nil, returns the point geometry {0,0}    \n  * if the operand is composed of a single point, returns a point geometry    \n  * if the operand is composed of 2 points, returns a polyline geometry.\n\n#### Examples: \n```\ngeometry var0 ` **`polyhedron`** `float` --->  `geometry`\n  *  **`polyhedron`** (`container` , `float`) --->  `geometry` \n\n#### Result: \nA polyhedron geometry from the given list of points.\n\n#### Special cases:     \n  * if the operand is nil, returns the point geometry {0,0}    \n  * if the operand is composed of a single point, returns a point geometry    \n  * if the operand is composed of 2 points, returns a polyline geometry.\n\n#### Examples: \n```\ngeometry var0   `container`\n  *  **`predecessors_of`** (`graph` , `unknown`) --->  `container` \n\n#### Result: \nreturns the list of predecessors (i.e. sources of in edges) of the given vertex (right-hand operand) in the given graph (left-hand operand)\n\n#### Examples: \n```\ncontainer var1   `predicate` \n\n#### Result: \nCasts the operand into the type predicate\n    \t\n----\n\n[//]: # (keyword|operator_predict)\n### `predict`\n\n#### Possible use: \n  * `regression` **`predict`** `list` --->  `float`\n  *  **`predict`** (`regression` , `list`) --->  `float` \n\n#### Result: \nreturns the value predict by the regression parameters for a given instance. Usage: predict(regression, instance)\n\n#### Examples: \n```\npredict(my_regression, [1,2,3]\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_product)\n### `product`\nSame signification as [mul](OperatorsDM#mul)\n    \t\n----\n\n[//]: # (keyword|operator_product_of)\n### `product_of`\n\n#### Possible use: \n  * `container` **`product_of`** `any expression` --->  `unknown`\n  *  **`product_of`** (`container` , `any expression`) --->  `unknown` \n\n#### Result: \nthe product of the right-hand expression evaluated on each of the elements of the left-hand operand  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.\n\n#### Special cases:     \n  * if the left-operand is a map, the keyword each will contain each value \n  \n```\nunknown var2 ` **`promethee_DM`** `list>` --->  `int`\n  *  **`promethee_DM`** (`list` , `list>`) --->  `int` \n\n#### Result: \nThe index of the best candidate according to the Promethee II method. This method is based on a comparison per pair of possible candidates along each criterion: all candidates are compared to each other by pair and ranked. More information about this method can be found in [http://www.sciencedirect.com/science?_ob=ArticleURL&_udi=B6VCT-4VF56TV-1&_user=10&_coverDate=01%2F01%2F2010&_rdoc=1&_fmt=high&_orig=search&_sort=d&_docanchor=&view=c&_searchStrId=1389284642&_rerunOrigin=google&_acct=C000050221&_version=1&_urlVersion=0&_userid=10&md5=d334de2a4e0d6281199a39857648cd36 Behzadian, M., Kazemzadeh, R., Albadvi, A., M., A.: PROMETHEE: A comprehensive literature review on methodologies and applications. European Journal of Operational Research(2009)]. The first operand is the list of candidates (a candidate is a list of criterion values); the second operand the list of criterion: A criterion is a map that contains fours elements: a name, a weight, a preference value (p) and an indifference value (q). The preference value represents the threshold from which the difference between two criterion values allows to prefer one vector of values over another. The indifference value represents the threshold from which the difference between two criterion values is considered significant.\n\n#### Special cases:     \n  * returns -1 is the list of candidates is nil or empty\n\n#### Examples: \n```\nint var0   `file` \n\n#### Result: \nConstructs a file of type property. Allowed extensions are limited to properties\n    \t\n----\n\n[//]: # (keyword|operator_pyramid)\n### `pyramid`\n\n#### Possible use: \n  *  **`pyramid`** (`float`) --->  `geometry` \n\n#### Result: \nA square geometry which side size is given by the operand.  \n\n#### Comment: \nthe center of the pyramid is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns nil if the operand is nil.\n\n#### Examples: \n```\ngeometry var0   `container`\n  * `int` **`range`** `int` --->  `container`\n  *  **`range`** (`int` , `int`) --->  `container`\n  *  **`range`** (`int`, `int`, `int`) --->  `container` \n\n#### Result: \nAllows to build a list of int representing all contiguous values from zero to the argument. The range can be increasing or decreasing. Passing 0 will return a singleton list with 0\nAllows to build a list of int representing all contiguous values from the first to the second argument, using the step represented by the third argument. The range can be increasing or decreasing. Passing the same value for both will return a singleton list with this value. Passing a step of 0 will result in an exception. Attempting to build infinite ranges (e.g. end > start with a negative step) will similarly not be accepted and yield an exception\nAllows to build a list of int representing all contiguous values from the first to the second argument. The range can be increasing or decreasing. Passing the same value for both will return a singleton list with this value\n    \t\n----\n\n[//]: # (keyword|operator_read)\n### `read`\n\n#### Possible use: \n  *  **`read`** (`string`) --->  `unknown` \n\n#### Result: \nReads an attribute of the agent. The attribute's name is specified by the operand.\n\n#### Examples: \n```\nunknown agent_name   `geometry`\n  * `float` **`rectangle`** `float` --->  `geometry`\n  *  **`rectangle`** (`float` , `float`) --->  `geometry`\n  * `point` **`rectangle`** `point` --->  `geometry`\n  *  **`rectangle`** (`point` , `point`) --->  `geometry` \n\n#### Result: \nA rectangle geometry which side sizes are given by the operands.  \n\n#### Comment: \nthe center of the rectangle is by default the location of the current agent in which has been called this operator.the center of the rectangle is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns nil if the operand is nil.    \n  * returns nil if the operand is nil.    \n  * returns nil if the operand is nil.\n\n#### Examples: \n```\ngeometry var0   `regression` \n\n#### Result: \nCasts the operand into the type regression\n    \t\n----\n\n[//]: # (keyword|operator_remove_duplicates)\n### `remove_duplicates`\nSame signification as [distinct](OperatorsDM#distinct)\n    \t\n----\n\n[//]: # (keyword|operator_remove_node_from)\n### `remove_node_from`\n\n#### Possible use: \n  * `geometry` **`remove_node_from`** `graph` --->  `graph`\n  *  **`remove_node_from`** (`geometry` , `graph`) --->  `graph` \n\n#### Result: \nremoves a node from a graph.  \n\n#### Comment: \nall the edges containing this node are also removed.\n\n#### Examples: \n```\ngraph var0   `string` \n\n#### Result: \nReturns the String resulting by replacing for the first operand all the sub-strings corresponding the second operand by the third operand\n\n#### Examples: \n```\nstring var0   `string` \n\n#### Result: \nReturns the String resulting by replacing for the first operand all the sub-strings corresponding to the regular expression given in the second operand by the third operand\n\n#### Examples: \n```\nstring var0   `string`\n  *  **`reverse`** (`container`) --->  `msi.gama.util.IContainer,?>` \n\n#### Result: \nthe operand elements in the reversed order in a copy of the operand.  \n\n#### Comment: \nthe reverse operator behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a file, reverse returns a copy of the file with a reversed content    \n  * if it is a population, reverse returns a copy of the population with elements in the reversed order    \n  * if it is a graph, reverse returns a copy of the graph (with all edges and vertexes), with all of the edges reversed    \n  * if it is a string, reverse returns a new string with characters in the reversed order \n  \n```\nstring var0  var1  var2  var3   `graph`\n  *  **`rewire_n`** (`graph` , `int`) --->  `graph` \n\n#### Result: \nrewires the given count of edges.  \n\n#### Comment: \nIf there are too many edges, all the edges will be rewired.\n\n#### Examples: \n```\ngraph var1   `rgb`\n  *  **`rgb`** (`rgb` , `float`) --->  `rgb`\n  * `rgb` **`rgb`** `int` --->  `rgb`\n  *  **`rgb`** (`rgb` , `int`) --->  `rgb`\n  * `string` **`rgb`** `int` --->  `rgb`\n  *  **`rgb`** (`string` , `int`) --->  `rgb`\n  *  **`rgb`** (`int`, `int`, `int`) --->  `rgb`\n  *  **`rgb`** (`int`, `int`, `int`, `float`) --->  `rgb`\n  *  **`rgb`** (`int`, `int`, `int`, `int`) --->  `rgb` \n\n#### Result: \nReturns a color defined by red, green, blue components and an alpha blending value.\n\n#### Special cases:     \n  * It can be used with r=red, g=green, b=blue (each between 0 and 255), a=alpha (between 0.0 and 1.0)    \n  * It can be used with a color and an alpha between 0 and 1    \n  * It can be used with a color and an alpha between 0 and 255    \n  * It can be used with r=red, g=green, b=blue, each between 0 and 255    \n  * It can be used with a name of color and alpha (between 0 and 255)    \n  * It can be used with r=red, g=green, b=blue (each between 0 and 255), a=alpha (between 0 and 255)\n\n#### Examples: \n```\nrgb var0   `list` \n\n#### Result: \nA list of point corresponding to RGB value of an image (r:x , g:y, b:z)\n\n#### Examples: \n```\nlist var0   `float`\n  *  **`rnd`** (`int`) --->  `int`\n  *  **`rnd`** (`point`) --->  `point`\n  * `point` **`rnd`** `point` --->  `point`\n  *  **`rnd`** (`point` , `point`) --->  `point`\n  * `int` **`rnd`** `int` --->  `int`\n  *  **`rnd`** (`int` , `int`) --->  `int`\n  * `float` **`rnd`** `float` --->  `float`\n  *  **`rnd`** (`float` , `float`) --->  `float`\n  *  **`rnd`** (`point`, `point`, `float`) --->  `point`\n  *  **`rnd`** (`float`, `float`, `float`) --->  `float`\n  *  **`rnd`** (`int`, `int`, `int`) --->  `int` \n\n#### Result: \na random integer in the interval [0, operand]  \n\n#### Comment: \nto obtain a probability between 0 and 1, use the expression (rnd n) / n, where n is used to indicate the precision\n\n#### Special cases:     \n  * if the operand is a float, returns an uniformly distributed float random number in [0.0, to]    \n  * if the operand is a point, returns a point with three random float ordinates, each in the interval [0, ordinate of argument]\n\n#### Examples: \n```\nfloat var0   `int` \n\n#### Result: \nreturns an index of the given list with a probability following the (normalized) distribution described in the list (a form of lottery)\n\n#### Examples: \n```\nint var0   `rgb` \n\n#### Result: \nrgb color  \n\n#### Comment: \nReturn a random color equivalent to rgb(rnd(operand),rnd(operand),rnd(operand))\n\n#### Examples: \n```\nrgb var0   `geometry`\n  *  **`rotated_by`** (`geometry` , `float`) --->  `geometry`\n  * `geometry` **`rotated_by`** `int` --->  `geometry`\n  *  **`rotated_by`** (`geometry` , `int`) --->  `geometry`\n  *  **`rotated_by`** (`geometry`, `float`, `point`) --->  `geometry` \n\n#### Result: \nA geometry resulting from the application of a rotation by the right-hand operand angle (degree) to the left-hand operand (geometry, agent, point)\nA geometry resulting from the application of a rotation by the right-hand operand angles (degree) along the three axis (x,y,z) to the left-hand operand (geometry, agent, point)  \n\n#### Comment: \nthe right-hand operand can be a float or a int\n\n#### Examples: \n```\ngeometry var0   `int`\n  *  **`round`** (`point`) --->  `point`\n  *  **`round`** (`float`) --->  `int` \n\n#### Result: \nReturns the rounded value of the operand.\n\n#### Special cases:     \n  * if the operand is an int, round returns it\n\n#### Examples: \n```\npoint var0   `list`\n  *  **`row_at`** (`matrix` , `int`) --->  `list` \n\n#### Result: \nreturns the row at a num_line (right-hand operand)\n\n#### Examples: \n```\nlist var0   `list` \n\n#### Result: \nreturns a list of the rows of the matrix, with each row as a list of elements\n\n#### Examples: \n```\nlist var0   `string`\n  * `string` **`sample`** `any expression` --->  `string`\n  *  **`sample`** (`string` , `any expression`) --->  `string`\n  *  **`sample`** (`container`, `int`, `bool`) --->  `container`\n  *  **`sample`** (`container`, `int`, `bool`, `container`) --->  `container` \n\n#### Result: \ntakes a sample of the specified size from the elements of x using either with or without replacement\ntakes a sample of the specified size from the elements of x using either with or without replacement with given weights\n\n#### Examples: \n```\ncontainer var0   `geometry`\n  *  **`scaled_to`** (`geometry` , `point`) --->  `geometry` \n\n#### Result: \nallows to restrict the size of a geometry so that it fits in the envelope {width, height, depth} defined by the second operand\n\n#### Examples: \n```\ngeometry var0   `emotion`\n  *  **`set_about`** (`emotion` , `predicate`) --->  `emotion` \n\n#### Result: \nchange the about value of the given emotion\n\n#### Examples: \n```\nemotion set_about predicate1\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_set_agent)\n### `set_agent`\n\n#### Possible use: \n  * `msi.gaml.architecture.simplebdi.SocialLink` **`set_agent`** `agent` --->  `msi.gaml.architecture.simplebdi.SocialLink`\n  *  **`set_agent`** (`msi.gaml.architecture.simplebdi.SocialLink` , `agent`) --->  `msi.gaml.architecture.simplebdi.SocialLink` \n\n#### Result: \nchange the agent value of the given social link\n\n#### Examples: \n```\nsocial_link set_agent agentA\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_set_agent_cause)\n### `set_agent_cause`\n\n#### Possible use: \n  * `emotion` **`set_agent_cause`** `agent` --->  `emotion`\n  *  **`set_agent_cause`** (`emotion` , `agent`) --->  `emotion`\n  * `predicate` **`set_agent_cause`** `agent` --->  `predicate`\n  *  **`set_agent_cause`** (`predicate` , `agent`) --->  `predicate` \n\n#### Result: \nchange the agentCause value of the given emotion\nchange the agentCause value of the given predicate\n\n#### Examples: \n```\nemotion set_agent_cause agentA\npredicate set_agent_cause agentA\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_set_decay)\n### `set_decay`\n\n#### Possible use: \n  * `emotion` **`set_decay`** `float` --->  `emotion`\n  *  **`set_decay`** (`emotion` , `float`) --->  `emotion` \n\n#### Result: \nchange the decay value of the given emotion\n\n#### Examples: \n```\nemotion set_decay 12\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_set_dominance)\n### `set_dominance`\n\n#### Possible use: \n  * `msi.gaml.architecture.simplebdi.SocialLink` **`set_dominance`** `float` --->  `msi.gaml.architecture.simplebdi.SocialLink`\n  *  **`set_dominance`** (`msi.gaml.architecture.simplebdi.SocialLink` , `float`) --->  `msi.gaml.architecture.simplebdi.SocialLink` \n\n#### Result: \nchange the dominance value of the given social link\n\n#### Examples: \n```\nsocial_link set_dominance 0.4\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_set_familiarity)\n### `set_familiarity`\n\n#### Possible use: \n  * `msi.gaml.architecture.simplebdi.SocialLink` **`set_familiarity`** `float` --->  `msi.gaml.architecture.simplebdi.SocialLink`\n  *  **`set_familiarity`** (`msi.gaml.architecture.simplebdi.SocialLink` , `float`) --->  `msi.gaml.architecture.simplebdi.SocialLink` \n\n#### Result: \nchange the familiarity value of the given social link\n\n#### Examples: \n```\nsocial_link set_familiarity 0.4\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_set_intensity)\n### `set_intensity`\n\n#### Possible use: \n  * `emotion` **`set_intensity`** `float` --->  `emotion`\n  *  **`set_intensity`** (`emotion` , `float`) --->  `emotion` \n\n#### Result: \nchange the intensity value of the given emotion\n\n#### Examples: \n```\nemotion set_intensity 12\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_set_liking)\n### `set_liking`\n\n#### Possible use: \n  * `msi.gaml.architecture.simplebdi.SocialLink` **`set_liking`** `float` --->  `msi.gaml.architecture.simplebdi.SocialLink`\n  *  **`set_liking`** (`msi.gaml.architecture.simplebdi.SocialLink` , `float`) --->  `msi.gaml.architecture.simplebdi.SocialLink` \n\n#### Result: \nchange the liking value of the given social link\n\n#### Examples: \n```\nsocial_link set_liking 0.4\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_set_solidarity)\n### `set_solidarity`\n\n#### Possible use: \n  * `msi.gaml.architecture.simplebdi.SocialLink` **`set_solidarity`** `float` --->  `msi.gaml.architecture.simplebdi.SocialLink`\n  *  **`set_solidarity`** (`msi.gaml.architecture.simplebdi.SocialLink` , `float`) --->  `msi.gaml.architecture.simplebdi.SocialLink` \n\n#### Result: \nchange the solidarity value of the given social link\n\n#### Examples: \n```\nsocial_link set_solidarity 0.4\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_set_truth)\n### `set_truth`\n\n#### Possible use: \n  * `predicate` **`set_truth`** `bool` --->  `predicate`\n  *  **`set_truth`** (`predicate` , `bool`) --->  `predicate` \n\n#### Result: \nchange the is_true value of the given predicate\n\n#### Examples: \n```\npredicate set_truth false\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_set_z)\n### `set_z`\n\n#### Possible use: \n  * `geometry` **`set_z`** `container` --->  `geometry`\n  *  **`set_z`** (`geometry` , `container`) --->  `geometry`\n  *  **`set_z`** (`geometry`, `int`, `float`) --->  `geometry` \n\n#### Result: \nSets the z ordinate of the n-th point of a geometry to the value provided by the third argument\n\n#### Examples: \n```\nloop i from: 0 to: length(shape.points) - 1{set shape   `file` \n\n#### Result: \nConstructs a file of type shape. Allowed extensions are limited to shp\n    \t\n----\n\n[//]: # (keyword|operator_shuffle)\n### `shuffle`\n\n#### Possible use: \n  *  **`shuffle`** (`matrix`) --->  `matrix`\n  *  **`shuffle`** (`string`) --->  `string`\n  *  **`shuffle`** (`container`) --->  `container` \n\n#### Result: \nThe elements of the operand in random order.\n\n#### Special cases:     \n  * if the operand is empty, returns an empty list (or string, matrix)\n\n#### Examples: \n```\nmatrix var0   `int` \n\n#### Result: \nReturns -1 if the argument is negative, +1 if it is positive, 0 if it is equal to zero or not a number\n\n#### Examples: \n```\nint var0 ` **`simple_clustering_by_distance`** `float` --->  `list>`\n  *  **`simple_clustering_by_distance`** (`container` , `float`) --->  `list>` \n\n#### Result: \nA list of agent groups clustered by distance considering a distance min between two groups.\n\n#### Examples: \n```\nlist> var0   `geometry`\n  *  **`simplification`** (`geometry` , `float`) --->  `geometry` \n\n#### Result: \nA geometry corresponding to the simplification of the operand (geometry, agent, point) considering a tolerance distance.  \n\n#### Comment: \nThe algorithm used for the simplification is Douglas-Peucker\n\n#### Examples: \n```\ngeometry var0   `float`\n  *  **`sin`** (`int`) --->  `float` \n\n#### Result: \nReturns the value (in [-1,1]) of the sinus of the operand (in decimal degrees). The argument is casted to an int before being evaluated.\n\n#### Special cases:     \n  * Operand values out of the range [0-359] are normalized.\n\n#### Examples: \n```\nfloat var0   `float` \n\n#### Result: \nReturns the value (in [-1,1]) of the sinus of the operand (in decimal degrees). The argument is casted to an int before being evaluated.\n\n#### Special cases:     \n  * Operand values out of the range [0-359] are normalized.\n\n#### Examples: \n```\nfloat var0   `bool`\n  * `any expression` **`since`** `date` --->  `bool`\n  *  **`since`** (`any expression` , `date`) --->  `bool` \n\n#### Result: \nReturns true if the current_date of the model is after (or equal to) the date passed in argument. Synonym of 'current_date >= argument'. Can be used, like 'after', in its composed form with 2 arguments to express the lowest boundary of the computation of a frequency. However, contrary to 'after', there is a subtle difference: the lowest boundary will be tested against the frequency as well\n\n#### Examples: \n```\nreflex when: since(starting_date) {} -: will always be run\nevery(2#days) since (starting_date + 1#day) // the computation will return true 1 day after the starting date and every two days after this reference date\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_skeletonize)\n### `skeletonize`\n\n#### Possible use: \n  *  **`skeletonize`** (`geometry`) --->  `list` \n\n#### Result: \nA list of geometries (polylines) corresponding to the skeleton of the operand geometry (geometry, agent)\n\n#### Examples: \n```\nlist var0   `float` \n\n#### Result: \nA value from a skew normally distributed random variable with min value (the minimum skewed value possible), max value (the maximum skewed value possible), skew (the degree to which the values cluster around the mode of the distribution; higher values mean tighter clustering) and bias (the tendency of the mode to approach the min, max or midpoint value; positive values bias toward max, negative values toward min).The algorithm was taken from http://stackoverflow.com/questions/5853187/skewing-java-random-number-generation-toward-a-certain-number\n\n#### Examples: \n```\nfloat var0   `float` \n\n#### Result: \nreturns skewness value computed from the operand list of values\n\n#### Special cases:     \n  * if the length of the list is lower than 3, returns NaN\n\n#### Examples: \n```\nskewness ([1,2,3,4,5])\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_skill)\n### `skill`\n\n#### Possible use: \n  *  **`skill`** (`any`) --->  `skill` \n\n#### Result: \nCasts the operand into the type skill\n    \t\n----\n\n[//]: # (keyword|operator_smooth)\n### `smooth`\n\n#### Possible use: \n  * `geometry` **`smooth`** `float` --->  `geometry`\n  *  **`smooth`** (`geometry` , `float`) --->  `geometry` \n\n#### Result: \nReturns a 'smoothed' geometry, where straight lines are replaces by polynomial (bicubic) curves. The first parameter is the original geometry, the second is the 'fit' parameter which can be in the range 0 (loose fit) to 1 (tightest fit).\n\n#### Examples: \n```\ngeometry var0   `social_link` \n\n#### Result: \nCasts the operand into the type social_link\n    \t\n----\n\n[//]: # (keyword|operator_solid)\n### `solid`\nSame signification as [without_holes](OperatorsNZ#without_holes)\n    \t\n----\n\n[//]: # (keyword|operator_sort)\n### `sort`\nSame signification as [sort_by](OperatorsNZ#sort_by)\n    \t\n----\n\n[//]: # (keyword|operator_sort_by)\n### `sort_by`\n\n#### Possible use: \n  * `container` **`sort_by`** `any expression` --->  `container`\n  *  **`sort_by`** (`container` , `any expression`) --->  `container` \n\n#### Result: \nReturns a list, containing the elements of the left-hand operand sorted in ascending order by the value of the right-hand operand when it is evaluated on them.  \n\n#### Comment: \nthe left-hand operand is casted to a list before applying the operator. In the right-hand operand, the keyword each can be used to represent, in turn, each of the elements.\n\n#### Special cases:     \n  * if the left-hand operand is nil, sort_by throws an error\n\n#### Examples: \n```\ncontainer var0   `unknown`\n  *  **`source_of`** (`graph` , `unknown`) --->  `unknown` \n\n#### Result: \nreturns the source of the edge (right-hand operand) contained in the graph given in left-hand operand.\n\n#### Special cases:     \n  * if the lef-hand operand (the graph) is nil, throws an Exception\n\n#### Examples: \n```\ngraph graphEpidemio   `graph` \n\n#### Result: \nallows to create a spatial graph from a container of vertices, without trying to wire them. The container can be empty. Emits an error if the contents of the container are not geometries, points or agents    \n\n#### See also: \n[graph](OperatorsDM#graph), \n    \t\n----\n\n[//]: # (keyword|operator_species)\n### `species`\n\n#### Possible use: \n  *  **`species`** (`unknown`) --->  `species` \n\n#### Result: \ncasting of the operand to a species.\n\n#### Special cases:     \n  * if the operand is nil, returns nil;    \n  * if the operand is an agent, returns its species;    \n  * if the operand is a string, returns the species with this name (nil if not found);    \n  * otherwise, returns nil\n\n#### Examples: \n```\nspecies var0   `geometry` \n\n#### Result: \nA sphere geometry which radius is equal to the operand.  \n\n#### Comment: \nthe centre of the sphere is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns a point if the operand is lower or equal to 0.\n\n#### Examples: \n```\ngeometry var0   `list`\n  *  **`split_at`** (`geometry` , `point`) --->  `list` \n\n#### Result: \nThe two part of the left-operand lines split at the given right-operand point\n\n#### Special cases:     \n  * if the left-operand is a point or a polygon, returns an empty list\n\n#### Examples: \n```\nlist var0   `list`\n  *  **`split_geometry`** (`geometry` , `float`) --->  `list`\n  * `geometry` **`split_geometry`** `point` --->  `list`\n  *  **`split_geometry`** (`geometry` , `point`) --->  `list`\n  *  **`split_geometry`** (`geometry`, `int`, `int`) --->  `list` \n\n#### Result: \nA list of geometries that result from the decomposition of the geometry by square cells of the given side size (geometry, size)\nA list of geometries that result from the decomposition of the geometry by rectangle cells of the given dimension (geometry, {size_x, size_y})\nA list of geometries that result from the decomposition of the geometry according to a grid with the given number of rows and columns (geometry, nb_cols, nb_rows)\n\n#### Examples: \n```\nlist var0  var1  var2 `) --->  `list` \n\n#### Result: \nA list of geometries resulting after cutting the lines at their intersections.\n\n#### Examples: \n```\nlist var0   `container`\n  *  **`split_with`** (`string` , `string`) --->  `container` \n\n#### Result: \nReturns a list containing the sub-strings (tokens) of the left-hand operand delimited by each of the characters of the right-hand operand.  \n\n#### Comment: \nDelimiters themselves are excluded from the resulting list.\n\n#### Examples: \n```\ncontainer var0   `float`\n  *  **`sqrt`** (`float`) --->  `float` \n\n#### Result: \nReturns the square root of the operand.\n\n#### Special cases:     \n  * if the operand is negative, an exception is raised\n\n#### Examples: \n```\nfloat var0   `geometry` \n\n#### Result: \nA square geometry which side size is equal to the operand.  \n\n#### Comment: \nthe centre of the square is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns nil if the operand is nil.\n\n#### Examples: \n```\ngeometry var0   `geometry`\n  *  **`squircle`** (`float` , `float`) --->  `geometry` \n\n#### Result: \nA mix of square and circle geometry (see : http://en.wikipedia.org/wiki/Squircle), which side size is equal to the first operand and power is equal to the second operand  \n\n#### Comment: \nthe center of the ellipse is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns a point if the side operand is lower or equal to 0.\n\n#### Examples: \n```\ngeometry var0   `float` \n\n#### Result: \nthe standard deviation on the elements of the operand. See Standard_deviation for more details.  \n\n#### Comment: \nThe operator casts all the numerical element of the list into float. The elements that are not numerical are discarded.\n\n#### Examples: \n```\nfloat var0   `string`\n  *  **`string`** (`date` , `string`) --->  `string` \n\n#### Result: \nconverts a date to astring following a custom pattern. The pattern can use \"%Y %M %N %D %E %h %m %s %z\" for outputting years, months, name of month, days, name of days, hours, minutes, seconds and the time-zone. A null or empty pattern will return the complete date as defined by the ISO date & time format. The pattern can also follow the pattern definition found here, which gives much more control over the format of the date: https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#patterns. Different patterns are available by default as constants: #iso_local, #iso_simple, #iso_offset, #iso_zoned and #custom, which can be changed in the preferences\n\n#### Examples: \n```\nformat(#now, 'yyyy-MM-dd')\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_subtract_days)\n### `subtract_days`\nSame signification as [minus_days](OperatorsDM#minus_days)\n    \t\n----\n\n[//]: # (keyword|operator_subtract_hours)\n### `subtract_hours`\nSame signification as [minus_hours](OperatorsDM#minus_hours)\n    \t\n----\n\n[//]: # (keyword|operator_subtract_minutes)\n### `subtract_minutes`\nSame signification as [minus_minutes](OperatorsDM#minus_minutes)\n    \t\n----\n\n[//]: # (keyword|operator_subtract_months)\n### `subtract_months`\nSame signification as [minus_months](OperatorsDM#minus_months)\n    \t\n----\n\n[//]: # (keyword|operator_subtract_ms)\n### `subtract_ms`\nSame signification as [minus_ms](OperatorsDM#minus_ms)\n    \t\n----\n\n[//]: # (keyword|operator_subtract_seconds)\n### `subtract_seconds`\nSame signification as [-](OperatorsAC#-)\n    \t\n----\n\n[//]: # (keyword|operator_subtract_weeks)\n### `subtract_weeks`\nSame signification as [minus_weeks](OperatorsDM#minus_weeks)\n    \t\n----\n\n[//]: # (keyword|operator_subtract_years)\n### `subtract_years`\nSame signification as [minus_years](OperatorsDM#minus_years)\n    \t\n----\n\n[//]: # (keyword|operator_successors_of)\n### `successors_of`\n\n#### Possible use: \n  * `graph` **`successors_of`** `unknown` --->  `container`\n  *  **`successors_of`** (`graph` , `unknown`) --->  `container` \n\n#### Result: \nreturns the list of successors (i.e. targets of out edges) of the given vertex (right-hand operand) in the given graph (left-hand operand)\n\n#### Examples: \n```\ncontainer var1   `float`\n  *  **`sum`** (`container`) --->  `unknown` \n\n#### Result: \nthe sum of all the elements of the operand  \n\n#### Comment: \nthe behavior depends on the nature of the operand\n\n#### Special cases:     \n  * if it is a population or a list of other types: sum transforms all elements into float and sums them    \n  * if it is a map, sum returns the sum of the value of all elements    \n  * if it is a file, sum returns the sum of the content of the file (that is also a container)    \n  * if it is a graph, sum returns the total weight of the graph    \n  * if it is a matrix of int, float or object, sum returns the sum of all the numerical elements (i.e. all elements for integer and float matrices)    \n  * if it is a matrix of other types: sum transforms all elements into float and sums them    \n  * if it is a list of colors: sum will sum them and return the blended resulting color    \n  * if it is a list of int or float: sum returns the sum of all the elements \n  \n```\nint var0   `unknown`\n  *  **`sum_of`** (`container` , `any expression`) --->  `unknown` \n\n#### Result: \nthe sum of the right-hand expression evaluated on each of the elements of the left-hand operand  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.\n\n#### Special cases:     \n  * if the left-operand is a map, the keyword each will contain each value \n  \n```\nunknown var2   `file` \n\n#### Result: \nConstructs a file of type svg. Allowed extensions are limited to svg\n    \t\n----\n\n[//]: # (keyword|operator_tan)\n### `tan`\n\n#### Possible use: \n  *  **`tan`** (`int`) --->  `float`\n  *  **`tan`** (`float`) --->  `float` \n\n#### Result: \nReturns the value (in [-1,1]) of the trigonometric tangent of the operand (in decimal degrees). The argument is casted to an int before being evaluated.\n\n#### Special cases:     \n  * Operand values out of the range [0-359] are normalized. Notice that tan(360) does not return 0.0 but -2.4492935982947064E-16    \n  * The tangent is only defined for any real number except 90 + k `*` 180 (k an positive or negative integer). Nevertheless notice that tan(90) returns 1.633123935319537E16 (whereas we could except infinity).\n\n#### Examples: \n```\nfloat var0   `float` \n\n#### Result: \nReturns the value (in [-1,1]) of the trigonometric tangent of the operand (in decimal degrees). The argument is casted to an int before being evaluated.\n\n#### Special cases:     \n  * Operand values out of the range [0-359] are normalized. Notice that tan(360) does not return 0.0 but -2.4492935982947064E-16    \n  * The tangent is only defined for any real number except 90 + k `*` 180 (k an positive or negative integer). Nevertheless notice that tan(90) returns 1.633123935319537E16 (whereas we could except infinity).    \n\n#### See also: \n[cos](OperatorsAC#cos), [sin](OperatorsNZ#sin), \n    \t\n----\n\n[//]: # (keyword|operator_tanh)\n### `tanh`\n\n#### Possible use: \n  *  **`tanh`** (`float`) --->  `float`\n  *  **`tanh`** (`int`) --->  `float` \n\n#### Result: \nReturns the value (in the interval [-1,1]) of the hyperbolic tangent of the operand (which can be any real number, expressed in decimal degrees).\n\n#### Examples: \n```\nfloat var0   `unknown`\n  *  **`target_of`** (`graph` , `unknown`) --->  `unknown` \n\n#### Result: \nreturns the target of the edge (right-hand operand) contained in the graph given in left-hand operand.\n\n#### Special cases:     \n  * if the lef-hand operand (the graph) is nil, returns nil\n\n#### Examples: \n```\ngraph graphEpidemio   `geometry` \n\n#### Result: \nA teapot geometry which radius is equal to the operand.  \n\n#### Comment: \nthe centre of the teapot is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns a point if the operand is lower or equal to 0.\n\n#### Examples: \n```\ngeometry var0   `file` \n\n#### Result: \nConstructs a file of type text. Allowed extensions are limited to txt, data, text\n    \t\n----\n\n[//]: # (keyword|operator_threeds_file)\n### `threeds_file`\n\n#### Possible use: \n  *  **`threeds_file`** (`string`) --->  `file` \n\n#### Result: \nConstructs a file of type threeds. Allowed extensions are limited to 3ds, max\n    \t\n----\n\n[//]: # (keyword|operator_to)\n### `to`\n\n#### Possible use: \n  * `date` **`to`** `date` --->  `msi.gama.util.IList`\n  *  **`to`** (`date` , `date`) --->  `msi.gama.util.IList` \n\n#### Result: \nbuilds an interval between two dates (the first inclusive and the second exclusive, which behaves like a read-only list of dates. The default step between two dates is the step of the model  \n\n#### Comment: \nThe default step can be overruled by using the every operator applied to this interval\n\n#### Examples: \n```\ndate('2000-01-01') to date('2010-01-01') // builds an interval between these two dates\n(date('2000-01-01') to date('2010-01-01')) every (#month) // builds an interval between these two dates which contains all the monthly dates starting from the beginning of the interval\n```\n      \n\n#### See also: \n[every](OperatorsDM#every), \n    \t\n----\n\n[//]: # (keyword|operator_to_GAMA_CRS)\n### `to_GAMA_CRS`\n\n#### Possible use: \n  *  **`to_GAMA_CRS`** (`geometry`) --->  `geometry`\n  * `geometry` **`to_GAMA_CRS`** `string` --->  `geometry`\n  *  **`to_GAMA_CRS`** (`geometry` , `string`) --->  `geometry`\n\n#### Special cases:     \n  * returns the geometry corresponding to the transformation of the given geometry to the GAMA CRS (Coordinate Reference System) assuming the given geometry is referenced by given CRS \n  \n```\ngeometry var0   `string` \n\n#### Result: \nreturns the literal description of an expression or description -- action, behavior, species, aspect, even model -- in gaml\n\n#### Examples: \n```\nstring var0   `list`\n  *  **`to_rectangles`** (`geometry`, `int`, `int`, `bool`) --->  `list` \n\n#### Result: \nA list of rectangles of the size corresponding to the given dimension that result from the decomposition of the geometry into rectangles (geometry, dimension, overlaps), if overlaps = true, add the rectangles that overlap the border of the geometry\nA list of rectangles corresponding to the given dimension that result from the decomposition of the geometry into rectangles (geometry, nb_cols, nb_rows, overlaps) by a grid composed of the given number of columns and rows, if overlaps = true, add the rectangles that overlap the border of the geometry\n\n#### Examples: \n```\nlist var0  var1   `list`\n  *  **`to_squares`** (`geometry`, `float`, `bool`) --->  `list`\n  *  **`to_squares`** (`geometry`, `int`, `bool`, `float`) --->  `list` \n\n#### Result: \nA list of a given number of squares from the decomposition of the geometry into squares (geometry, nb_square, overlaps), if overlaps = true, add the squares that overlap the border of the geometry\nA list of squares of the size corresponding to the given size that result from the decomposition of the geometry into squares (geometry, size, overlaps), if overlaps = true, add the squares that overlap the border of the geometry\nA list of a given number of squares from the decomposition of the geometry into squares (geometry, nb_square, overlaps, precision_coefficient), if overlaps = true, add the squares that overlap the border of the geometry, coefficient_precision should be close to 1.0\n\n#### Examples: \n```\nlist var0  var1  var2   `topology` \n\n#### Result: \ncasting of the operand to a topology.\n\n#### Special cases:     \n  * if the operand is a topology, returns the topology itself;    \n  * if the operand is a spatial graph, returns the graph topology associated;    \n  * if the operand is a population, returns the topology of the population;    \n  * if the operand is a shape or a geometry, returns the continuous topology bounded by the geometry;    \n  * if the operand is a matrix, returns the grid topology associated    \n  * if the operand is another kind of container, returns the multiple topology associated to the container    \n  * otherwise, casts the operand to a geometry and build a topology from it.\n\n#### Examples: \n```\ntopology var0   `bool`\n  *  **`touches`** (`geometry` , `geometry`) --->  `bool` \n\n#### Result: \nA boolean, equal to true if the left-geometry (or agent/point) touches the right-geometry (or agent/point).  \n\n#### Comment: \nreturns true when the left-operand only touches the right-operand. When one geometry covers partially (or fully) the other one, it returns false.\n\n#### Special cases:     \n  * if one of the operand is null, returns false.\n\n#### Examples: \n```\nbool var0   `int`\n  *  **`towards`** (`geometry` , `geometry`) --->  `int` \n\n#### Result: \nThe direction (in degree) between the two geometries (geometries, agents, points) considering the topology of the agent applying the operator.\n\n#### Examples: \n```\nint var0   `float` \n\n#### Result: \nThe trace of the given matrix (the sum of the elements on the main diagonal).\n\n#### Examples: \n```\nfloat var0   `geometry`\n  *  **`transformed_by`** (`geometry` , `point`) --->  `geometry` \n\n#### Result: \nA geometry resulting from the application of a rotation and a scaling (right-operand : point {angle(degree), scale factor} of the left-hand operand (geometry, agent, point)\n\n#### Examples: \n```\ngeometry var0   `geometry`\n  *  **`translated_by`** (`geometry` , `point`) --->  `geometry` \n\n#### Result: \nA geometry resulting from the application of a translation by the right-hand operand distance to the left-hand operand (geometry, agent, point)\n\n#### Examples: \n```\ngeometry var0   `matrix` \n\n#### Result: \nThe transposition of the given matrix\n\n#### Examples: \n```\nmatrix var0   `geometry` \n\n#### Result: \nA triangle geometry which side size is given by the operand.  \n\n#### Comment: \nthe center of the triangle is by default the location of the current agent in which has been called this operator.\n\n#### Special cases:     \n  * returns nil if the operand is nil.\n\n#### Examples: \n```\ngeometry var0 `) --->  `list`\n  *  **`triangulate`** (`geometry`) --->  `list` \n\n#### Result: \nA list of geometries (triangles) corresponding to the Delaunay triangulation of the operand geometry (geometry, agent, point)\n\n#### Examples: \n```\nlist var0  var1   `float`\n  *  **`truncated_gauss`** (`point`) --->  `float` \n\n#### Result: \nA random value from a normally distributed random variable in the interval ]mean - standardDeviation; mean + standardDeviation[.\n\n#### Special cases:     \n  * if the operand is a list, only the two first elements are taken into account as [mean, standardDeviation]    \n  * when truncated_gauss is called with a list of only one element mean, it will always return 0.0    \n  * when the operand is a point, it is read as {mean, standardDeviation}\n\n#### Examples: \n```\nfloat var0   `graph` \n\n#### Result: \nthe operand graph becomes an undirected graph.  \n\n#### Comment: \nthe operator alters the operand graph, it does not create a new one.    \n\n#### See also: \n[directed](OperatorsDM#directed), \n    \t\n----\n\n[//]: # (keyword|operator_union)\n### `union`\n\n#### Possible use: \n  *  **`union`** (`container`) --->  `geometry`\n  * `container` **`union`** `container` --->  `container`\n  *  **`union`** (`container` , `container`) --->  `container` \n\n#### Result: \nreturns a new list containing all the elements of both containers without duplicated elements.\n\n#### Special cases:     \n  * if the left or right operand is nil, union throws an error    \n  * if the right-operand is a container of points, geometries or agents, returns the geometry resulting from the union all the geometries\n\n#### Examples: \n```\ncontainer var0   `unknown` \n\n#### Result: \nCasts the operand into the type unknown\n    \t\n----\n\n[//]: # (keyword|operator_until)\n### `until`\n\n#### Possible use: \n  *  **`until`** (`date`) --->  `bool`\n  * `any expression` **`until`** `date` --->  `bool`\n  *  **`until`** (`any expression` , `date`) --->  `bool` \n\n#### Result: \nReturns true if the current_date of the model is before (or equel to) the date passed in argument. Synonym of 'current_date <= argument'\n\n#### Examples: \n```\nreflex when: until(starting_date) {} -: will be run only once at the beginning of the simulation\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_upper_case)\n### `upper_case`\n\n#### Possible use: \n  *  **`upper_case`** (`string`) --->  `string` \n\n#### Result: \nConverts all of the characters in the string operand to upper case\n\n#### Examples: \n```\nstring var0   `graph`\n  *  **`use_cache`** (`graph` , `bool`) --->  `graph` \n\n#### Result: \nif the second operand is true, the operand graph will store in a cache all the previously computed shortest path (the cache be cleared if the graph is modified).  \n\n#### Comment: \nthe operator alters the operand graph, it does not create a new one.    \n\n#### See also: \n[path_between](OperatorsNZ#path_between), \n    \t\n----\n\n[//]: # (keyword|operator_user_input)\n### `user_input`\n\n#### Possible use: \n  *  **`user_input`** (`any expression`) --->  `map`\n  * `string` **`user_input`** `any expression` --->  `map`\n  *  **`user_input`** (`string` , `any expression`) --->  `map` \n\n#### Result: \nasks the user for some values (not defined as parameters). Takes a string (optional) and a map as arguments. The string is used to specify the message of the dialog box. The map is to specify the parameters you want the user to change before the simulation starts, with the name of the parameter in string key, and the default value as value.  \n\n#### Comment: \nThis operator takes a map [string::value] as argument, displays a dialog asking the user for these values, and returns the same map with the modified values (if any). The dialog is modal and will interrupt the execution of the simulation until the user has either dismissed or accepted it. It can be used, for instance, in an init section to force the user to input new values instead of relying on the initial values of parameters :\n\n#### Examples: \n```\nmap values2  values   `unknown`\n  *  **`using`** (`any expression` , `topology`) --->  `unknown` \n\n#### Result: \nAllows to specify in which topology a spatial computation should take place.\n\n#### Special cases:     \n  * has no effect if the topology passed as a parameter is nil\n\n#### Examples: \n```\nunknown var0   `float` \n\n#### Result: \nthe variance of the elements of the operand. See Variance for more details.  \n\n#### Comment: \nThe operator casts all the numerical element of the list into float. The elements that are not numerical are discarded.\n\n#### Examples: \n```\nfloat var0   `unknown`\n  *  **`variance_of`** (`container` , `any expression`) --->  `unknown` \n\n#### Result: \nthe variance of the right-hand expression evaluated on each of the elements of the left-hand operand  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.    \n\n#### See also: \n[min_of](OperatorsDM#min_of), [max_of](OperatorsDM#max_of), [sum_of](OperatorsNZ#sum_of), [product_of](OperatorsNZ#product_of), \n    \t\n----\n\n[//]: # (keyword|operator_voronoi)\n### `voronoi`\n\n#### Possible use: \n  *  **`voronoi`** (`list`) --->  `list`\n  * `list` **`voronoi`** `geometry` --->  `list`\n  *  **`voronoi`** (`list` , `geometry`) --->  `list` \n\n#### Result: \nA list of geometries corresponding to the Voronoi diagram built from the list of points according to the given clip\nA list of geometries corresponding to the Voronoi diagram built from the list of points\n\n#### Examples: \n```\nlist var0  var1   `float`\n  *  **`weight_of`** (`graph` , `unknown`) --->  `float` \n\n#### Result: \nreturns the weight of the given edge (right-hand operand) contained in the graph given in right-hand operand.  \n\n#### Comment: \nIn a localized graph, an edge has a weight by default (the distance between both vertices).\n\n#### Special cases:     \n  * if the left-operand (the graph) is nil, returns nil    \n  * if the right-hand operand is not an edge of the given graph, weight_of checks whether it is a node of the graph and tries to return its weight    \n  * if the right-hand operand is neither a node, nor an edge, returns 1.\n\n#### Examples: \n```\ngraph graphFromMap ` **`weighted_means_DM`** `list>` --->  `int`\n  *  **`weighted_means_DM`** (`list` , `list>`) --->  `int` \n\n#### Result: \nThe index of the candidate that maximizes the weighted mean of its criterion values. The first operand is the list of candidates (a candidate is a list of criterion values); the second operand the list of criterion (list of map)\n\n#### Special cases:     \n  * returns -1 is the list of candidates is nil or empty\n\n#### Examples: \n```\nint var0   `container`\n  *  **`where`** (`container` , `any expression`) --->  `container` \n\n#### Result: \na list containing all the elements of the left-hand operand that make the right-hand operand evaluate to true.  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.\n\n#### Special cases:     \n  * if the left-hand operand is a list nil, where returns a new empty list    \n  * if the left-operand is a map, the keyword each will contain each value \n  \n```\ncontainer var4 = 4); \t// var4 equals [4, 6]\n\n``` \n\n\n\n#### Examples: \n```\ncontainer var0  3); \t// var0 equals [4, 5, 6, 7, 8] \ncontainer var2  32); \t// var3 equals [node2, node3]\n```\n      \n\n#### See also: \n[first_with](OperatorsDM#first_with), [last_with](OperatorsDM#last_with), [where](OperatorsNZ#where), \n    \t\n----\n\n[//]: # (keyword|operator_with_lifetime)\n### `with_lifetime`\n\n#### Possible use: \n  * `predicate` **`with_lifetime`** `int` --->  `predicate`\n  *  **`with_lifetime`** (`predicate` , `int`) --->  `predicate` \n\n#### Result: \nchange the parameters of the given predicate\n\n#### Examples: \n```\npredicate with_lifetime 10\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_with_max_of)\n### `with_max_of`\n\n#### Possible use: \n  * `container` **`with_max_of`** `any expression` --->  `unknown`\n  *  **`with_max_of`** (`container` , `any expression`) --->  `unknown` \n\n#### Result: \none of elements of the left-hand operand that maximizes the value of the right-hand operand  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.\n\n#### Special cases:     \n  * if the left-hand operand is nil, with_max_of returns the default value of the right-hand operand\n\n#### Examples: \n```\nunknown var0   `unknown`\n  *  **`with_min_of`** (`container` , `any expression`) --->  `unknown` \n\n#### Result: \none of elements of the left-hand operand that minimizes the value of the right-hand operand  \n\n#### Comment: \nin the right-hand operand, the keyword each can be used to represent, in turn, each of the right-hand operand elements.\n\n#### Special cases:     \n  * if the left-hand operand is nil, with_max_of returns the default value of the right-hand operand\n\n#### Examples: \n```\nunknown var0   `graph`\n  *  **`with_optimizer_type`** (`graph` , `string`) --->  `graph` \n\n#### Result: \nchanges the shortest path computation method of the given graph  \n\n#### Comment: \nthe right-hand operand can be \"Djikstra\", \"Bellmann\", \"Astar\" to use the associated algorithm. Note that these methods are dynamic: the path is computed when needed. In contrarily, if the operand is another string, a static method will be used, i.e. all the shortest are previously computed.\n\n#### Examples: \n```\ngraphEpidemio   `predicate`\n  *  **`with_praiseworthiness`** (`predicate` , `float`) --->  `predicate` \n\n#### Result: \nchange the praiseworthiness value of the given predicate\n\n#### Examples: \n```\npredicate set_truth false\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_with_precision)\n### `with_precision`\n\n#### Possible use: \n  * `float` **`with_precision`** `int` --->  `float`\n  *  **`with_precision`** (`float` , `int`) --->  `float`\n  * `point` **`with_precision`** `int` --->  `point`\n  *  **`with_precision`** (`point` , `int`) --->  `point` \n\n#### Result: \nRounds off the value of left-hand operand to the precision given by the value of right-hand operand\nRounds off the ordinates of the left-hand point to the precision given by the value of right-hand operand\n\n#### Examples: \n```\nfloat var0   `predicate`\n  *  **`with_priority`** (`predicate` , `float`) --->  `predicate` \n\n#### Result: \nchange the priority of the given predicate\n\n#### Examples: \n```\npredicate with_priority 2\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_with_values)\n### `with_values`\n\n#### Possible use: \n  * `predicate` **`with_values`** `map` --->  `predicate`\n  *  **`with_values`** (`predicate` , `map`) --->  `predicate` \n\n#### Result: \nchange the parameters of the given predicate\n\n#### Examples: \n```\npredicate with_values [\"time\"::10]\n```\n  \n    \t\n----\n\n[//]: # (keyword|operator_with_weights)\n### `with_weights`\n\n#### Possible use: \n  * `graph` **`with_weights`** `map` --->  `graph`\n  *  **`with_weights`** (`graph` , `map`) --->  `graph`\n  * `graph` **`with_weights`** `container` --->  `graph`\n  *  **`with_weights`** (`graph` , `container`) --->  `graph` \n\n#### Result: \nreturns the graph (left-hand operand) with weight given in the map (right-hand operand).  \n\n#### Comment: \nthis operand re-initializes the path finder\n\n#### Special cases:     \n  * if the right-hand operand is a list, affects the n elements of the list to the n first edges. Note that the ordering of edges may change overtime, which can create some problems...    \n  * if the left-hand operand is a map, the map should contains pairs such as: vertex/edge::double \n  \n```\ngraph_from_edges (list(ant) as_map each::one_of (list(ant))) with_weights (list(ant) as_map each::each.food)\n\n``` \n\n\n    \t\n----\n\n[//]: # (keyword|operator_without_holes)\n### `without_holes`\n\n#### Possible use: \n  *  **`without_holes`** (`geometry`) --->  `geometry` \n\n#### Result: \nA geometry corresponding to the operand geometry (geometry, agent, point) without its holes\n\n#### Examples: \n```\ngeometry var0   `file`\n  *  **`writable`** (`file` , `bool`) --->  `file` \n\n#### Result: \nMarks the file as read-only or not, depending on the second boolean argument, and returns the first argument  \n\n#### Comment: \nA file is created using its native flags. This operator can change them. Beware that this change is system-wide (and not only restrained to GAMA): changing a file to read-only mode (e.g. \"writable(f, false)\")\n\n#### Examples: \n```\nfile var0   `file` \n\n#### Result: \nConstructs a file of type xml. Allowed extensions are limited to xml\n    \t\n----\n\n[//]: # (keyword|operator_years_between)\n### `years_between`\n\n#### Possible use: \n  * `date` **`years_between`** `date` --->  `int`\n  *  **`years_between`** (`date` , `date`) --->  `int` \n\n#### Result: \nProvide the exact number of years between two dates. This number can be positive or negative (if the second operand is smaller than the first one)\n\n#### Examples: \n```\nyears_between(d1, d2) -: 10 \n```\n  ","url":"wiki/OperatorsNZ.md"},{"id":"wiki/Overview.md","title":" Introduction","content":"# Introduction\n\n|  |  |\n|---|---|\n\n\n**GAMA** is a simulation platform, which aims at providing field experts, modellers, and computer scientists with a complete modelling and simulation development environment for building spatially explicit multi-agent simulations. It has been first developed by the Vietnamese-French research team MSI (located at IFI, Hanoi, and part of the IRD/UPMC International Research Unit UMMISCO) from 2007 to 2010, and is now developed by a consortium of academic and industrial partners led by UMMISCO, among which the University of Rouen, France, the University of Toulouse 1, France, the University of Orsay, France, the University of Can Tho, Vietnam, the National University of Hanoi, EDF R&D, France, and CEA LISC, France.\n\nSome of the features of GAMA are illustrated in the videos above (more can be found [in our Youtube channel](http://www.youtube.com/channel/UCWJ1kWGDDI-9u2f2uD0gcaQ)).\n\nBeyond these features, GAMA also offers:\n\n* A complete modeling language, GAML, for modeling agents and environments\n* A large and extensible library of primitives (agent's movement, communication, mathematical functions, graphical features, ...)\n* A cross-platform reproducibility of experiments and simulations\n* A powerful declarative drawing and plotting subsystem\n* A flexible user interface based on the Eclipse platform\n* A complete set of batch tools, allowing for a systematic or \"intelligent\" exploration of models parameters spaces\n\n\n## Documentation\nThe documentation of GAMA is available online on the wiki of the project. It is organized around a few central activities ([installing GAMA](Installation), [writing models](WritingModels), [running experiments](LaunchingExperiments), [developing new extensions to the platform](DevelopingExtensions)) and provides complete references on both the [GAML language](GamlLanguage), the [platform](Platform) itself, and the scientific aspects of our work (with a complete [bibliography](References)). Several [tutorials](Tutorials) are also provided in the documentation in order to minimize the learning curve, allowing users to build, step by step, the models corresponding to these tutorials, which are of course shipped with the platform.\n\nThe documentation can be accessed from the side bar of this page. A good starting point for new users is [the installation page](Installation).\n\nA standalone version of the documentation, in PDF format, can be directly downloaded from [here](https://github.com/gama-platform/gama/wiki/Content/ressources/pdf/GAMA 1.6.1 Documentation.pdf)\n\n\n## Source Code\nGAMA can be [downloaded](Download) as a regular application or [built from source](https://github.com/gama-platform/gama), which is necessary if you want to contribute to the platform.\nThe source code is available from this GITHub repository:\n\n```\nhttps://github.com/gama-platform/gama\n```\n\nWhich you can also browse from the web [here](https://github.com/gama-platform/gama).\nIt is, in any case, recommended to follow the instructions on [this page](InstallingGitVersion) in order to build GAMA from source.\n\n\n\n\n## Copyright Information\nThis is a free software (distributed under the GNU GPL v3 license), so you can have access to the code, edit it and redistribute it under the same terms. Independently of the licensing issues, if you plan on reusing part of our code, we would be glad to know it !\n\n\n\n\n## Developers\nGAMA is being designed, developed and maintained by an active group of researchers coming from different institutions in France and Vietnam. Please find below a short introduction to each of them and a summary of their contributions to the platform:\n\n* **[Alexis Drogoul](https://www.researchgate.net/profile/Alexis_Drogoul)**, Senior Researcher at the [IRD](http://www.ird.fr), member of the [UMMISCO](http://www.ummisco.ird.fr) International Research Unit. Mostly working on agent-based modeling and simulation. Has contributed and still contributes to the original design of the platform, including the GAML language (from the meta-model to the editor) and simulation facilities like Java2D displays.\n* **[Patrick Taillandier](https://www.researchgate.net/profile/Patrick_Taillandier)**, Associate Professor at the [University of Rouen](http://www.univ-rouen.fr/), member of the [IDEES](http://www.umr-idees.fr/) CNRS Mixed Research Unit. Contributes since 2008 to the spatial and graph features (GIS integration, spatial operators) and to parameter space search algorithms. Currently working on new features related to graphical modeling and traffic simulation.\n* **[Benoit Gaudou](http://www.researchgate.net/profile/Benoit_Gaudou)**, Associate Professor at the [University Toulouse 1 Capitole](http://www.ut-capitole.fr/), member of the [IRIT](http://www.irit.fr/) CNRS Mixed Research Unit. Contributes since 2010 to documentation and unit test generation and coupling mathematical (ODE and PDE) and agent paradigms.\n* **[Arnaud Grignard](https://www.researchgate.net/profile/Arnaud_Grignard)**, software engineer and PhD fellow ([PDI-MSC](http://www.ummisco.ird.fr/pdi/)) at [UPMC](http://www.upmc.fr/). Contributes since 2011 to the development of new features related to visualization (3D Display), online analysis and interaction.\n* **[Huynh Quang Nghi](https://www.researchgate.net/profile/Huynh_Nghi)**, software engineering lecturer at [CTU](http://www.ctu.edu.vn) and PhD fellow ([PDI-MSC](http://www.ummisco.ird.fr/pdi/)) at [UPMC](http://www.upmc.fr/). Contributes since 2012 to the development of new features related to GAML parser, coupling formalisms in EBM-ABM and ABM-ABM.\n* **[Truong Minh Thai](https://www.researchgate.net/profile/Thai_Truong_Minh)**, software engineering lecturer at [CTU](http://www.ctu.edu.vn/) and PhD fellow (PRJ322-MOET) at [IRIT](http://www.irit.fr/)-[UT1](http://www.ut-capitole.fr/). Contributes since 2012 to the development of new features related to data management and analysis.\n* **[Nicolas Marilleau](http://www.ummisco.ird.fr/index.php?option=com_members&view=member&uid=62&Itemid=70)**, Researcher at the [IRD](http://www.ird.fr), member of the [UMMISCO](http://www.ummisco.ird.fr) International Research Unit and associate researcher at [DISC](http://disc.univ-fcomte.fr) team of [FEMTO-ST](http://www.femto-st.fr) institute. Contributes since 2010 to the development of headless mode and the high performance computing module.\n* **[Philippe Caillou](https://www.lri.fr/~caillou)**, Associate professor at the [University Paris Sud 11](http://www.u-psud.fr), member of the [LRI](http://www.lri.fr) and [INRIA](http://www.inria.fr) project-team [TAO](https://tao.lri.fr/tiki-index.php). Contributes since 2012 and actually working on charts, simulation analysis and BDI agents.\n* **[Vo Duc An](https://www.researchgate.net/profile/Duc-An_Vo)**, Post-doctoral Researcher, working on synthetic population generation in agent-based modelling, at the [UMMISCO](http://www.ummisco.ird.fr) International Research Unit of the [IRD](http://www.ird.fr). Has contributed to bringing the platform to the Eclipse RCP environment and to the development of several features (e.g., the FIPA-compliant agent communication capability, the multi-level architecture).\n* **[Truong Xuan Viet](https://www.researchgate.net/profile/Viet_Truong_Xuan)**, software engineering lecturer at [CTU](http://www.ctu.edu.vn) and PhD fellow ([PDI-MSC](http://www.ummisco.ird.fr/pdi/)) at [UPMC](http://www.upmc.fr/). Contributes since 2011 to the development of new features related to R caller, online GIS (OPENGIS: Web Map Service - WMS, Web Feature Services - WMS, Google map, etc).\n  * Samuel Thiriot\n\n\n\n\n## Citing GAMA\nIf you use GAMA in your research and want to cite it (in a paper, presentation, whatever), please use this reference:\n\n> A. Grignard, P. Taillandier, B. Gaudou, D-A. Vo, N-Q. Huynh, A. Drogoul (2013), GAMA 1.6: Advancing the Art of Complex Agent-Based Modeling and Simulation. In ‘PRIMA 2013: Principles and Practice of Multi-Agent Systems', Lecture Notes in Computer Science, Vol. 8291, Springer, pp. 117-131.\n\nor you can choose to cite the website instead:\n\n> GAMA Platform website, http://gama-platform.org\n\nA complete list of references (papers and PhD theses on or using GAMA) is available on the [references](References) page.\n\n\n\n## Contact Us\nThe best way to get in touch with the developers of GAMA is to sign in for the [gama-platform@googlegroups.com mailing list](http://groups.google.com/group/gama-platform). If you wish to contribute to the platform, you might want, instead or in addition, to sign in for the [gama-dev@googlegroups.com mailing list](http://groups.google.com/group/gama-dev). On both lists, we generally answer quite quickly to requests.\n\nFinally, if you think you have found a bug in GAMA, or if you absolutely need a feature that does not exist yet, it is much more efficient and time-saving for everyone (including current and future users) to create a new issue report. Please refer to [these instructions](Troubleshooting#Submitting_an_Issue) to do so.","url":"wiki/Overview.md"},{"id":"wiki/PedagogicalMaterials.md","title":" Initiation to algorithms with Scratch","content":"# Initiation to algorithms with Scratch\nA set of exercices for your first step to algorithms using the graphical tool Scratch: [PDF](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/InitiationtoAlgorithmicswithScratch.pdf?attredirects=0&d=1).\n\n# Memo GAML\nA summary of the organization of a GAML model, its main parts and the main keywords, statements: [PDF](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/MementoAlgoGAML.pdf?attredirects=0&d=1).\n\n# Exercice (*): Firefly synchronization\nFrom UML diagram, implement a GAMA model.\n* **Keywords:** grid, displays, plot, synchronization.\n* **Subject:** [PDF](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/Fireflies Exo.pdf?attredirects=0&d=1), [Keynote](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/Fireflies Exo.key?attredirects=0&d=1), [PPTX](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/Fireflies Exo.pptx?attredirects=0&d=1)\n* **UML diagrams:** [asta version](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/UML_Firefly_sync.asta?attredirects=0&d=1)\n* **A model:** [gaml file](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/luciole_on_grid.gaml?attredirects=0&d=1)\n\n# Exercice (*): Firefighter model\nImplement the model given in the model description file. The guide file helps you to separate the implementation of the structure of the model, its initialization, its dynamics and ways to visualize it.\n* **Keywords:** grid, inheritance, displays, plot, 3D.\n* **Model description**: [PDF](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/Firefighter - Model description.pdf?attredirects=0&d=1)\n* **Guide:** [PDF](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/Firefighter - Guide.pdf?attredirects=0&d=1), [Keynote](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/Firefighter - Guide.key?attredirects=0&d=1), [PPTX](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/Firefighter - Guide.pptx?attredirects=0&d=1)\n* **UML diagrams:** [asta version](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/UML_Pompiers_GAMA.asta?attredirects=0&d=1)\n* **A model:** [gaml file](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/Firefighter.zip?attredirects=0&d=1)\n\n# Exercice (**): Wolves, Goats, Cabbages model\nImplement the model given in the model description file. The detailed subject divides the model in 3 steps and contains helps and advices to implement the model.\n* **Keywords:** grid, inheritance, displays, plot, prey-predator model.\n* **Model description**: [PDF](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/Firefighter - Model description.pdf?attredirects=0&d=1)\n* **Detailed subject:** [PDF](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/Coding Practice - subject with notes.pdf?attredirects=0&d=1), [Word](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/Coding Practice - subject with notes.docx?attredirects=0&d=1)\n* **Guide:** [PDF](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/Coding Practice.pptx.pdf?attredirects=0&d=1), [PPTX](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/Coding Practice.pptx.pptx?attredirects=0&d=1)\n* **A model:** [gaml file](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/Wolves-Goat-Cabbages.zip?attredirects=0&d=1)\n\n# Exercice (**): Schelling model\n* **Keywords:** grid, GIS data, displays, plot, Graphical modeling, Schelling model.\n* **Subject:** [PDF](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/MISS ABMS 2014 - Schelling.pdf?attredirects=0&d=1), [Keynote](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/MISS ABMS 2014 - Schelling.key?attredirects=0&d=1), [PPTX](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/MISS ABMS 2014 - Schelling.pptx?attredirects=0&d=1)\n* **A model:** [gaml file](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/Schelling.zip?attredirects=0&d=1)\n\n# Exercice (**): Traffic model\n* **Keywords:** GIS data, graph, skills, moving skill, displays, plot, mobillity model.\n* **Subject:** [PDF](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/MISS ABMS 2014 - Traffic.pdf?attredirects=0&d=1), [Keynote](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/MISS ABMS 2014 - Traffic.key?attredirects=0&d=1), [PPTX](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/MISS ABMS 2014 - Traffic.pptx?attredirects=0&d=1)\n* **A model:** [gaml file](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/traffic.zip?attredirects=0&d=1)\n\n# Exercice (***): Shortest path on grid by distance diffusion\n* **Keywords:** grid, move, displays, diffusion model, algorithm.\n* **Subject:** [PDF](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/Shortest Path on Grid by diffusion.pdf?attredirects=0&d=1), [Word](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/Shortest Path on Grid by diffusion.docx?attredirects=0&d=1)\n* **A model:** [gaml file](https://sites.google.com/site/benoitgaudou/teaching/gama-exercices/Exo-ShortestPathDiffusion.zip?attredirects=0&d=1)","url":"wiki/PedagogicalMaterials.md"},{"id":"wiki/References.md","title":" References","content":"# References\n\n\n\nThis page contains a subset of the scientific papers that have been written either about GAMA or using the platform as an experimental/modeling support.\n\nIf you happen to publish a paper that uses or discusses GAMA, please let us know, so that we can include it in this list.\n\nAs stated in [the first page](Overview), if you need to cite GAMA in a paper, we kindly ask you to use this reference:\n  * [A. Grignard, P. Taillandier, B. Gaudou, D-A. Vo, N-Q. Huynh, A. Drogoul (2013), GAMA 1.6: Advancing the Art of Complex Agent-Based Modeling and Simulation. In ‘PRIMA 2013: Principles and Practice of Multi-Agent Systems', Lecture Notes in Computer Science, Vol. 8291, Springer, pp. 117-131.](http://link.springer.com/chapter/10.1007/978-3-642-44927-7_9)\n\n\n\n\n## Papers about GAMA\n  * [Taillandier, Patrick, Arnaud Grignard, Benoit Gaudou, and Alexis Drogoul. \"Des données géographiques à la simulation à base d’agents: application de la plate-forme GAMA.\" Cybergeo: European Journal of Geography (2014).](http://spi.cybergeo.revues.org/26263)\n\n  * [A. Grignard, P. Taillandier, B. Gaudou, D-A. Vo, N-Q. Huynh, A. Drogoul (2013), GAMA 1.6: Advancing the Art of Complex Agent-Based Modeling and Simulation. In ‘PRIMA 2013: Principles and Practice of Multi-Agent Systems', Lecture Notes in Computer Science, Vol. 8291, Springer, pp. 117-131.](http://link.springer.com/chapter/10.1007/978-3-642-44927-7_9)\n\n  * [Grignard, Arnaud, Alexis Drogoul, and Jean-Daniel Zucker. \"Online analysis and visualization of agent based models.\" Computational Science and Its Applications–ICCSA 2013. Springer Berlin Heidelberg, 2013. 662-672.](http://link.springer.com/chapter/10.1007/978-3-642-39637-3_52#page-1)\n\n  * [Taillandier, P., Drogoul, A., Vo, D.A. and Amouroux, E. (2012), GAMA: a simulation platform that integrates geographical information data, agent-based modeling and multi-scale control. In ‘The 13th International Conference on Principles and Practices in Multi-Agent Systems (PRIMA)’, India, Volume 7057/2012, pp 242-258.](http://www.springerlink.com/content/j7135j8722742j82/)\n\n  * [Taillandier, P. & Drogoul, A. (2011), From Grid Environment to Geographic Vector Agents, Modeling with the GAMA simulation platform. In ‘25th Conference of the International Cartographic Association’, Paris, France.](http://icaci.org/files/documents/ICC_proceedings/ICC2011/Oral Presentations PDF/C4-Simulation, spatio-temporal modelling, visualisation/CO-288.pdf)\n\n  * Taillandier, P. ; Drogoul A. ; Vo D.A. & Amouroux, E. (2010), GAMA : bringing GIS and multi-level capabilities to multi-agent simulation, in ‘the 8th European Workshop on Multi-Agent Systems', Paris, France.\n\n  * Amouroux, E., Taillandier, P. &  Drogoul, A. (2010), Complex environment representation in epidemiology ABM: application on `H5N1` propagation. In ‘the 3rd International Conference on Theories and Applications of Computer Science’ (ICTACS'10).\n\n  * [Amouroux, E., Chu, T.Q., Boucher, A. and Drogoul, A. (2007), GAMA: an environment for implementing and running spatially explicit multi-agent simulations. In ‘Pacific Rim International Workshop on Multi-Agents', Bangkoku, Thailand, pp. 359--371.](http://www.springerlink.com/content/88006131542n1204/)\n\n\n\n\n## PhD theses\n  * **Truong Xuan Viet**, [\"Optimization by Simulation of an Environmental Surveillance Network: Application to the Fight against Rice Pests in the Mekong Delta (Vietnam)\"](https://drive.google.com/a/ctu.edu.vn/file/d/0B7ArAu2_CEjCaTVzZURNUGlfWmc/edit?usp=sharing), University of Paris 6 & Ho Chi Minh University of Technology, defended June 24th, 2014.\n\n  * **Nguyen Nhi Gia Vinh**, [\"Designing multi-scale models to support environmental decision: application to the control of Brown Plant Hopper invasions in the Mekong Delta (Vietnam)\"](https://drive.google.com/file/d/0BwzSY8KTNM0nLUVMVXR3WDVJSjQ/edit?usp=sharing), University of Paris 6, defended Oct. 31st, 2013.\n\n  * **Vo Duc An**, [\"An operational architecture to handle multiple levels of representation in agent-based models\"](https://dl.dropboxusercontent.com/u/70529600/manuscrit_VoDucAn.pdf), University of Paris 6, defended Nov. 30th 2012.\n\n  * **Amouroux Edouard**, [\"KIMONO: a descriptive agent-based modeling methodology for the exploration of complex systems: an application to epidemiology\"](http://tel.archives-ouvertes.fr/tel-00630779), University of Paris 6, defended Sept. 30th, 2011.\n\n  * **Chu Thanh Quang**, [\"Using agent-based models and machine learning to enhance spatial decision support systems: Application to resource allocation in situations of urban catastrophes\"](https://www.dropbox.com/s/i5ifnigqv7qltc9/CHU-Thanh-Quang_manuscrit.pdf), University of Paris 6, defended July 1st, 2011.\n\n  * **Nguyen Ngoc Doanh**, [\"Coupling Equation-Based and Individual-Based Models in the Study of Complex Systems: A Case Study in Theoretical Population Ecology\"](https://docs.google.com/file/d/0B5s1B4Qq19ycMDg4MTNhMmUtMDNlMC00NzQyLWFlZjEtMjZhOGY5YjRhNWU5/edit?hl=fr), University of Paris 6, defended Dec. 14th, 2010.\n\n\n\n\n## Research papers that use GAMA as modeling/simulation support\n\n**2016**\n\n* Bhamidipati, S., van der Lei, T., & Herder, P. (2016). A layered approach to model interconnected infrastructure and its significance for asset management. EJTIR, 16(1), 254-272.\n\n**2014**\n\n  * E. G. Macatulad , A. C. Blanco (2014) 3DGIS-BASED MULTI-AGENT GEOSIMULATION AND VISUALIZATION OF BUILDING EVACUATION USING GAMA PLATFORM. The International Archives of the Photogrammetry, Remote Sensing and Spatial Information Sciences, Volume XL-2, 2014. ISPRS Technical Commission II Symposium, 6 – 8 October 2014, Toronto, Canada. Retrieved from http://www.int-arch-photogramm-remote-sens-spatial-inf-sci.net/XL-2/87/2014/isprsarchives-XL-2-87-2014.pdf\n\n\n  * S. Bhamidipati (2014) A simulation framework for asset management in climate-change adaptation of transportation infrastructure. In: Proceedings of 42nd European Transport Conference. Frankfurt, Germany. Retrieved from http://abstracts.aetransport.org/paper/download/id/4317\n\n  * [Gaudou, B., Sibertin-Blanc, C., Thérond, O., Amblard, F., Auda, Y., Arcangeli, J.-P., Balestrat, M., Charron-Moirez, M.-H., Gondet, E., Hong, Y., Lardy, R., Louail, T., Mayor, E., Panzoli, D., Sauvage, S., Sanchez-Perez, J., Taillandier, P., Nguyen, V. B., Vavasseur, M., Mazzega, P. (2014). The MAELIA multi-agent platform for integrated assessment of low-water management issues. In: International Workshop on Multi-Agent-Based Simulation (MABS 2013), Saint-Paul, MN, USA, 06/05/2013-07/05/2013, Vol. 8235, Shah Jamal Alam, H. Van Dyke Parunak, (Eds.), Springer, Lecture Notes in Computer Science, p. 85-110.](http://simsoc.free.fr/ressources/articles/2013/MAELIAmabs13.pdf)\n\n  * [Gaudou, B., Lorini, E., Mayor, E. (2014.) Moral Guilt: An Agent-Based Model Analysis. In: Conference of the European Social Simulation Association (ESSA 2013), Warsaw, 16/09/2013-20/09/2013, Vol. 229, Springer, Advances in Intelligent Systems and Computing, p. 95-106.](http://www.irit.fr/EmoTES/Documents/Conference/Conf_ic_2013_Gaudou_et_al.pdf)\n\n**2013**\n  * [Drogoul, A., Gaudou, B., Grignard, A., Taillandier, P., & Vo, D. A. (2013). Practical Approach To Agent-Based Modelling. In: Water and its Many Issues. Methods and Cross-cutting Analysis. Stéphane Lagrée (Eds.), Journées de Tam Dao, p. 277-300, Regional Social Sciences Summer University.](http://hal.archives-ouvertes.fr/docs/00/93/24/23/PDF/JTD2012_-_Atelier_-_EN.pdf)\n\n  * [Drogoul, A., Gaudou, B. (2013) Methods for Agent-Based Computer Modelling. In: Water and its Many Issues. Methods and Cross-cutting Analysis. Stéphane Lagrée (Eds.), Journées de Tam Dao, 1.6, p. 130-154, Regional Social Sciences Summer University. ](http://www.tamdaoconf.com/tamdao/wp-content/plugins/download-monitor/download.php?id=185)\n\n  * [Truong, M.-T., Amblard, F., Gaudou, B., Sibertin-Blanc, C., Truong, V. X., Drogoul, A., Hyunh, X. H., Le, M. N. (2013). An implementation of framework of business intelligence for agent-based simulation. In: Symposium on Information and Communication Technology (SoICT 2013), Da Nang, Viet Nam, 05/12/2013-06/12/2013, Quyet Thang Huynh, Thanh Binh Nguyen, Van Tien Do, Marc Bui, Hong Son Ngo (Eds.), ACM, p. 35-44.](http://dl.acm.org/citation.cfm?id=2542069)\n\n  * [Le, V. M., Gaudou, B., Taillandier, P., Vo, D. A (2013). A New BDI Architecture To Formalize Cognitive Agent Behaviors Into Simulations. In: Advanced Methods and Technologies for Agent and Multi-Agent Systems (KES-AMSTA 2013), Hue, Vietnam, 27/05/2013-29/05/2013, Vol. 252, Dariusz Barbucha, Manh Thanh Le, Robert J. Howlett, C. Jain Lakhmi (Eds.), IOS Press, Frontiers in Artificial Intelligence and Applications, p. 395-403.](http://ebooks.iospress.nl/publication/32865)\n\n**2012**\n  * [Taillandier, P., Therond, O., Gaudou B. (2012), A new BDI agent architecture based on the belief theory. Application to the modelling of cropping plan decision-making. In 'International Environmental Modelling and Software Society', Germany, pp. 107-116.](http://www.iemss.org/sites/iemss2012//proceedings/H2_0404_Taillandier_et_al.pdf)\n\n  * Taillandier, P., Therond, O., Gaudou B. (2012), Une architecture d'agent BDI basée sur la théorie des fonctions de croyance: application à la simulation du comportement des agriculteurs. In 'Journées Francophones sur les Systèmes Multi-Agents', France, pp. 107-116.\n\n  * [NGUYEN, Quoc Tuan, Alain BOUJU, and Pascal ESTRAILLIER. \"Multi-agent architecture with space-time components for the simulation of urban transportation systems.\" (2012).](http://www.sciencedirect.com.accesdistant.upmc.fr/science/article/pii/S1877042812042188)\n\n  * [Cisse, A., Bah, A., Drogoul, A., Cisse, A.T., Ndione, J.A., Kebe, C.M.F. & Taillandier P. (2012), Un modèle à base d’agents sur la transmission et la diffusion de la fièvre de la Vallée du Rift à Barkédji (Ferlo, Sénégal), Studia Informatica Universalis 10 (1), pp. 77-97.](http://studia.complexica.net/Art/RI100104.pdf)\n\n  * [Taillandier, P., Amouroux, E., Vo, D.A. and Olteanu-Raimond A.M. (2012), Using Belief Theory to formalize the agent behavior: application to the simulation of avian flu propagation. In ‘The first Pacific Rim workshop on Agent-based modeling and simulation of Complex Systems (PRACSYS)’, India, Volume 7057/2012, pp. 575-587.](http://www.springerlink.com/content/8qg53u75q46252l2/)\n\n  * [Le, V.M., Adam, C., Canal, R., Gaudou, B., Ho, T.V. and Taillandier, P. (2012), Simulation of the emotion dynamics in a group of agents in an evacuation situation. In ‘The first Pacific Rim workshop on Agent-based modeling and simulation of Complex Systems (PRACSYS)’, India, Volume 7057/2012, pp. 604-619.](http://www.springerlink.com/content/c838365603qr7tx0/)\n\n  * [Nguyen Vu, Q. A., Canal, R., Gaudou, B., Hassas, S., Armetta, F. (2012), TrustSets - Using trust to detect deceitful agents in a distributed information collecting system. In: Journal of Ambient Intelligence and Humanized Computing, Springer-Verlag, Vol. 3 N. 4, p. 251-263.](http://link.springer.com/article/10.1007%2Fs12652-012-0140-0)\n\n**2011**\n  * Taillandier, P. & Therond, O. (2011), Use of the Belief Theory to formalize Agent Decision Making Processes : Application to cropping Plan Decision Making. In ’25th European Simulation and Modelling Conference’, Guimaraes, Portugal, pp. 138-142.\n\n  * Taillandier, P. & Amblard, F. (2011), Cartography of Multi-Agent Model Parameter Space through a reactive Dicotomous Approach. In ’25th European Simulation and Modelling Conference’, Guimaraes, Portugal, pp. 38-42.\n\n  * [Taillandier, P. & Stinckwich, S. (2011), Using the PROMETHEE Multi-Criteria Decision Making Method to Define New Exploration Strategies for Rescue Robots’, IEEE International Symposium on Safety, Security, and Rescue Robotics, Kyoto, Japon, pp. 321 - 326.](http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=6106747&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D6106747)\n\n**2010**\n  * [Nguyen Vu, Q.A. , Gaudou, B., Canal, R., Hassas, S. and Armetta, F. (2010), A cluster-based approach for disturbed, spatialized, distributed information gathering systems,  in ‘The first Pacific Rim workshop on Agent-based modeling and simulation of Complex Systems (PRACSYS)’, India, pp. 588-603.](http://www.springerlink.com/content/u02nq35387418q11/)\n\n  * [Nguyen, N.D., Taillandier, P., Drogoul, A. and Augier, P. (2010), Inferring Equation-Based Models from Agent-Based Models: A Case Study in Competition Dynamics.In ‘The 13th International Conference on Principles and Practices in Multi-Agent Systems (PRIMA)’, India, Volume 7057/2012, pp. 413-427.](http://www.springerlink.com/content/n23314gm326l4p27/)\n\n  * [Amouroux, E., Gaudou, B. Desvaux, S. and Drogoul, A. (2010), O.D.D.: a Promising but Incomplete Formalism For Individual-Based Model Specification. in ‘IEEE International Conference on Computing and Telecommunication Technologies ’(2010 IEEE RIVF'), pp. 1-4.](http://ieeexplore.ieee.org/xpl/login.jsp?tp=&arnumber=5633421&url=http%3A%2F%2Fieeexplore.ieee.org%2Fxpls%2Fabs_all.jsp%3Farnumber%3D5633421)\n\n  * Nguyen, N.D., Phan, T.H.D., Nguyen, T.N.A., Drogoul, A. and Zucker, J-D. (2010), Disk Graph-Based Model for Competition Dynamic, Paper to appear in ‘IEEE International Conference on Computing and Telecommunication Technologies ’(2010 IEEE RIVF').\n\n  * Nguyen, T.K., Marilleau, N., Ho T.V. and El Fallah Seghrouchni, A. (2010), A meta-model for specifying collaborative simulation, Paper to appear in ‘IEEE International Conference on Computing and Telecommunication Technologies ’(2010 IEEE RIVF').\n\n  * [Nguyen Vu, Q.A. , Gaudou, B., Canal, R., Hassas, S. and Armetta, F. (2010), `TrustSets` - Using trust to detect deceitful agents in a distributed information collecting system, Paper to appear in ‘IEEE International Conference on Computing and Telecommunication Technologies ’(2010 IEEE RIVF'), the best student paper award.](http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=5633080)\n\n  * [Nguyen Vu, Q.A. , Gaudou, B., Canal, R., Hassas, S., Armetta, F. and Stinckwich, S. (2010), Using trust and cluster organisation to improve robot swarm mapping, Paper to appear in ‘Workshop on Robots and Sensors integration in future rescue INformation system ’ (ROSIN 2010).](http://users.info.unicaen.fr/~serge/share/ROSIN10/rosin10_submission_8.pdf)\n\n**2009**\n  * [Taillandier, P. and Buard, E. (2009), Designing Agent Behaviour in Agent-Based Simulation through participatory method. In ‘The 12th International Conference on Principles and Practices in Multi-Agent Systems (PRIMA)’, Nagoya, Japan, pp. 571--578.](http://www.springerlink.com/content/hu37551467646471/)\n\n  * [Taillandier, P. and Chu, T.Q. (2009), Using Participatory Paradigm to Learn Human Behaviour. In ‘International Conference on Knowledge and Systems Engineering’, Ha noi, Viet Nam, pp. 55--60.](http://www.computer.org/portal/web/csdl/doi/10.1109/KSE.2009.33)\n\n  * [Gaudou, B., Ho, T.V. and Marilleau, N. (2009), Introduce collaboration in methodologies of modeling and simulation of Complex Systems. In ‘International Conference on Intelligent Networking and Collaborative Systems (INCOS '09)’. Barcelona, pp. 1--8.](http://portal2.acm.org/citation.cfm?id=1681504.1681534&coll=GUIDE&dl=GUIDE&CFID=://www.google.com.vn/search?hl=fr&CFTOKEN=www.google.com.vn/search?hl=fr)\n\n  * [Nguyen, T.K., Gaudou B., Ho T.V. and Marilleau N. (2009), Application of PAMS Collaboration Platform to Simulation-Based Researches in Soil Science: The Case of the MIcro-ORganism Project. In ‘IEEE International Conference on Computing and Telecommunication Technologies (IEEE-RIVF 09)’. Da Nang, Viet Nam, pp. 296--303.](http://ieeexplore.ieee.org/Xplore/login.jsp?url=http%3A%2F%2Fieeexplore.ieee.org%2Fiel5%2F5174598%2F5174599%2F05174623.pdf%3Farnumber%3D5174623&authDecision=-203)\n\n  * [Nguyen, V.Q., Gaudou B., Canal R., Hassas S. and Armetta F. (2009), Stratégie de communication dans un système de collecte d’information à base d’agents perturbés. In ‘Journées Francophones sur les Systèmes Multi-Agents (JFSMA'09)’.](http://liesp.insa-lyon.fr/v2/?q=fr/node/100911)\n\n**2008**\n  * [Chu, T.Q., Boucher, A., Drogoul, A., Vo, D.A., Nguyen, H.P. and Zucker, J.D. (2008). Interactive Learning of Expert Criteria for Rescue Simulations. In ‘Pacific Rim International Workshop on Multi-Agents’, Ha Noi, Viet Nam, pp. 127--138.](http://www.springerlink.com/content/r83v0125vl0430l1/)\n\n  * [Amouroux, E., Desvaux, S. and Drogoul, A. (2008), Towards Virtual Epidemiology: An Agent-Based Approach to the Modeling of H5N1 Propagation and Persistence in North-Vietnam. In ‘Pacific Rim International Workshop on Multi-Agents’, Ha Noi, Viet Nam, pp. 26--33.](http://www.springerlink.com/content/v6471t1453k17244/)","url":"wiki/References.md"},{"id":"wiki/WritingModels.md","title":" Writing Models","content":"# Writing Models\n\n\n\nModels in GAMA play the same role as classes in Java or C++: they represent both the knowledge about a particular phenomenon a user wants to simulate and the way(s) to simulate it. A model is nothing more than a text file (or a collection of text files that refer to each other), which contains instructions in a [specific language](GamlLanguage) called GAML (for \"GAMA Modeling Language\").\nA model can then be theoretically edited using any text processor and later loaded into GAMA to [run experiments](RunningExperiments). However, because of the richness of the language, using a dedicated tool (with online help, live validation) is clearly the best way to write correct models.\n\nThe GUI version of GAMA offers such an _integrated model development environment_, which is composed of a set of coupled tools to support modelers in the [edition](EditingModels), [validation](ValidationOfModels), and [management](WorkspaceProjectsAndModels) of models. An optional [graphical modeling editor](G__GraphicalEditor) can also be installed on top of these tools to support higher-level modeling activities (similar to what a UML editor with Java bindings may provide to a Java development environment).\n\nThis chapter contains a description of these different tools and a comprehensive guide to the [GAML language](GamlLanguage), including a [complete reference](GamlReference) of all the built-in structures and facilities offered in its current version.\n\nPlease proceed to one of these sections :\n\n  * 1. [Editing Models](EditingModels)\n  * 2. [GAML Language](GamlLanguage)\n  * 3. [GAML Reference](GamlReference)\n  * 4. [Optimizing Models](OptimizingModels)","url":"wiki/WritingModels.md"},{"id":"wiki/G__BlankPage.md","title":"G__BlankPage","content":"","url":"wiki/G__BlankPage.md"},{"id":"wiki/Home.md","title":" Multiple application domains","content":"**The new website of GAMA is now available at this address : [gama-platform.org](http://gama-platform.org/)**\n\n\n\nGAMA is a modeling and simulation development environment for building spatially explicit agent-based simulations. \n\n* [**Multiple application domains :**](#multiple-application-domains) Use GAMA for whatever application domain you want.\n* [**High-level and Intuitive Agent-based language :**](high-level-and-intuitive-agent-based-language) Write your models easily using GAML, a high-level and intuitive agent-based language.\n* [**GIS and Data-Driven models :**](#gis-and-data-driven-models) Instantiate agents from any dataset, including GIS data, and execute large-scale simulations (up to millions of agents).\n* [**Declarative user interface :**](#declarative-user-interface) Declare interfaces supporting deep inspections on agents, user-controlled action panels, multi-layer 2D/3D displays & agent aspects.\n\nIts latest version, **1.7**, can be freely [downloaded](Download) or [built from source](https://github.com/gama-platform/gama/), and comes pre-loaded with several models, [tutorials](Tutorials) and a complete [on-line documentation](Overview).\n\n## Multiple application domains\n\nGAMA has been developed with a very general approach, and can be used for many application domains. Some [additional plugins](TODO_URL) had been developed to fit with particular needs.\n\nExample of application domains where GAMA is mostly present :\n* Transport\n* Urban planning\n* Epidemiology\n* Environment\n\nSome [training sessions](TrainingSession) about topics such as \"urban management\", \"epidemiology\", \"risk management\" are also provided by the team.\nSince GAMA is an open-source software that continues to grow, if you have any particular needs of improvement, feel free to [share it to its active community](https://groups.google.com/forum/#!forum/gama-platform) !\n\n\n\n## High level and intuitive language\n\nThanks to its high-level and intuitive language, GAMA has been developed to be used by non-computer scientists. You can declare your species, giving them some special behaviors, create them in your world, and display them in [less than 10 minutes](TODO_URL).\n\nGAML is the language used in GAMA, coded in Java. It is an agent-based language, that provides you the possibility to build your model with [several paradigms of modeling](MultiParadigmModeling). Once your model is ready, some features allows you to [explore and calibrate it](ExploringModels), using the parameters you defined as input of your simulation.\n\nWe provides you a continual support through the [active mailing list](https://groups.google.com/forum/#!forum/gama-platform) where the team will answer your questions. Besides, you can learn GAML on your own, following the [step by step tutorial](LearnGAMLStepByStep), or [personal learning path](TODO_URL) in order reach the point you are interested in.\n\n\n\n## GIS and Data-Driven models\n\nGAMA (GIS Agent-based Modeling Architecture) provides you, since its creation, the possibility to load easily GIS (Geographic Information System).\n\nYou can import a [large number of data types](DataTypes), such as text, files, CSV, shapefile, OSM ([open street map data](ManipulateOSMDatas)), grid, images, SVG, but also 3D files, such as 3DS or OBJ, with their texture.\n\nSome advanced features provides you the possibility to [connect GAMA to databases](UsingDatabase), and also to use powerful statistical tools such as [R](CallingR).\n\nGAMA has been used in [large-scale projects](Projects), using a great number of agents (up to millions of agents).\n\n\n\n## Declarative user interface\n\nGAMA provides you the possibility to have multiple displays for the same model. You can add as much visual representations as you want for the same model, in order to highlight a certain aspect of your simulation. Add easily new visual aspects to your agents.\n\nAdvanced [3D displays](Defining3DDisplays) are provided : you can control lights, cameras, and also adding textures to your 3D objects. In an other hand, dedicated statements allows you to define easily [charts](DefiningCharts), such as series, histogram, or pies.\n\nDuring the simulations, some advanced features are available to [inspect the population of your agents](InspectorsAndMonitors). To make your model more interactive, you can add easily some [user-controlled action panels, or mouse events](DefiningUserInteraction).\n\n\n\n______________________________________\n\n\nGAMA is developed by several teams under the umbrella of the IRD/UPMC international research unit [UMMISCO](http://www.ummisco.ird.fr/):\n\n* [MSI Research Team](http://www.ifi.auf.org/site/content/view/35/46/lang,french/), Vietnam National University, Hanoi, Vietnam (2007 - 2015)\n* [UMR 6228 IDEES](http://www.umr-idees.fr), CNRS/University of Rouen, France (2010 - 2015)\n* [UMR 5505 IRIT](http://www.irit.fr), CNRS/University of Toulouse 1, France (2010 - 2015)\n* [DREAM Research Team](http://www.cit.ctu.edu.vn), University of Can Tho, Vietnam (2011 - 2015)\n* [UMR 8623 LRI](http://www.lri.fr), CNRS/University Paris-Sud, France (2011 - 2015)\n\n---\n\n**Acknowledgement**:  \n\n![](https://www.yourkit.com/images/yklogo.png)  \n\n*YourKit supports open source projects with its full-featured Java Profiler.\nYourKit, LLC is the creator of YourKit Java Profiler\nand YourKit .NET Profiler,\ninnovative and intelligent tools for profiling Java and .NET applications.*","url":"wiki/Home.md"}]